{"version":3,"sources":["game/net/messageEncoder.worker.ts","resources/sheet-composite.enc.png","game/util/unscramble.js","webpack:///./src/game/net/messageEncoder.worker.ts?773d","webpack:///./src/game/data/board-packer.worker.ts?e9c0","game/util/draggable.ts","game/consts.ts","game/util/sprite-loading.ts","game/controllers/canvas.ts","game/net/packets/packet-list.ts","ui-components/notifications.ts","game/net/handlers/handler.ts","game/data/protobufs/proto-wrapper.ts","game/data/protobufs/proto-sprite.ts","game/data/protobufs/proto-entity.ts","game/data/protobufs/proto-tiles.ts","game/net/packets/terrainPackets.ts","game/net/packets/entityPackets.ts","game/net/packets/util-packets.ts","game/net/packets/media-packets.ts","game/net/messageEncoder.ts","game/util/promiseStream.ts","game/db/database.ts","game/db/metadata-db.ts","game/net/peerconnection.ts","game/data/interfaces/tile.ts","game/net/handlers/terrain-add-handler.ts","game/net/handlers/terrain-erase-handler.ts","game/controllers/terrain.ts","game/middleware/middleware.ts","game/middleware/entity-events.ts","game/net/handlers/entity-update-handler.ts","game/controllers/entities.ts","game/net/prechecks/precheck.ts","game/db/user-db.ts","game/net/prechecks/signature-check.ts","game/net/prechecks/board-sync-check.ts","game/controllers/lobby.ts","game/net/handlers/ping-handler.ts","game/db/board-db.ts","game/controllers/campaign.ts","game/util/deproxy.ts","game/db/campaign-db.ts","game/data/campaign-loader.ts","game/net/handlers/board-reload-handler.ts","ui-components/prompts.tsx","ui-components/youtubePlayer.tsx","game/net/handlers/media-sync-handler.ts","game/net/prechecks/media-sync.ts","game/controllers/game.ts","ui-tools/ui-tool.tsx","game/middleware/pen-events.ts","ui-components/spritepicker.tsx","ui-tools/ui-pen-tool.tsx","ui-tools/ui-camera-tool.tsx","ui-tools/ui-eraser-tool.tsx","ui-tools/ui-entity-tool.tsx","ui-tools/ui-lobby-tool.tsx","ui-components/controlMenu.tsx","ui-components/loginHelper.tsx","ui-components/connectionOverlay.tsx","game/util/google-api.ts","ui-components/campaignSelector.tsx","ui-components/boardSelector.tsx","ui-components/boardSaveButton.tsx","App.tsx","serviceWorker.ts","index.tsx","game/data/board-packer.worker.ts"],"names":["module","exports","wrap","__esModule","shuffleSeed","require","img","sliceSize","seed","bmp","i","ctx","totalParts","Math","ceil","width","height","inds","push","canvas","document","createElement","getContext","verticalSlices","getGroup","slices","self","length","cols","t","y","getColsInGroup","rows","x","slice","row","parseInt","col","getSlices","g","group","shuffleInd","shuffle","s","drawImage","Worker","pan","state","originX","originY","transformation","translateX","translateY","element","style","transform","getMatrix","scale","canPan","panBy","panTo","canZoom","zoom","deltaScale","getBoundingClientRect","left","top","minScale","maxScale","scaleSensitivity","getScale","newScale","newOriginX","newOriginY","translate","getTranslate","pos","prevPos","transformOrigin","max","min","valueInRange","listeners","listen","ele","event","cb","opts","addEventListener","rem","removeEventListener","Draggable","parent","instance","Object","assign","renderer","dragging","lx","ly","evCache","noScroll","Set","prevDiff","preventDefault","sign","deltaY","pageX","pageY","blocking","ev","splice","clear","clientX","clientY","window","pointerId","curDiff","abs","sqrt","pow","delta","change","add","has","delete","unregister","forEach","l","fpsTicker","CanvasContainer","base","wrapper","canvases","this","className","backgroundColor","prepend","body","setCanvasSize","resetView","setSize","appendTo","object","appendChild","removeChild","c","rect","console","log","coords","boardTileWidth","floor","boardTileHeight","Canvas","name","context","id","e","append","mdl","attach","rawData","unscramble","data","sheet","spriteWidth","metadata","spriteHeight","globalFrameIndex","waitForSpriteLoad","Promise","res","Image","onerror","err","error","alert","onload","src","sheetSRC","clearInterval","setInterval","findSpriteData","key","ret","sprites","Error","composite","snackbarRef","Sprite","idx","images","drawImageTo","blocker","Handler","packets","isHost","client","packet","hostHandler","clientHandler","SnackbarUtilsConfigurator","useSnackbar","success","msg","options","toast","variant","warning","info","enqueueSnackbar","ProtoWrapper","values","Message","ProtoSprite","Type","d","Field","ProtoEntity","ProtoTile","ProtoTileStack","ProtoBoard","TerrainAddPacket","TerrainCoordPacket","TerrainErasePacket","EntityUpdatePacket","EntityDeletePacket","PingPacket","SignaturePacket","ReadyPacket","MediaStatusPacket","MediaRequestPacket","packetList","packetMap","$type","encode","a","constructor","worker","decode","clazz","PromiseStream","maxBackpressure","prom","resolve","backPressure","fn","onError","then","catch","db","boards","campaigns","users","version","stores","table","Dexie","copyOldDB","newDB","dbName","tableName","newTable","exists","open","tables","tbl","toArray","close","on","count","debug","Meta","currentUsername","observable","box","JSON","where","first","val","parse","value","put","stringify","NetworkStatus","NetworkMode","get","store","handlers","preConn","clients","sb","netStatus","IDLE","netMode","UNKNOWN","setHandlers","newHandlers","newPreConn","getSeed","CERT_SEED","Switchboard","makeSeed","getMyID","useLongform","fullID","peerID","getIdFromSeed","makeSB","kill","connectTo","hostID","setMode","CLIENT","RECONNECTING","set","CONNECTING","peer","notifications","Client","clientError","WAITING_FOR_HOST","pc","run","verified","CONNECTED","DISCONNECTED","findHost","warn","removeClient","openHost","HOST","cli","host","p","mode","listener","lastSend","stream","userData","username","keyCodes","lastSeen","pingTimer","lastPing","hook","isClosed","Date","now","send","queue","handleMessage","packetBinary","encoder","Uint8Array","h","some","handlePacket","clearTimeout","sendBuffer","expectedType","rej","broadcast","requireHost","Tile","sprite","z","TerrainAddHandler","terrain","tileStacks","stack","tiles","removeAt","dt","sp","spriteIdx","placeAt","setTimeout","broadcastChanges","pollChanges","packedStacks","updateTiles","packer","TerrainEraseHandler","size","tep","Array","from","Terrain","boardWidth","boardHeight","tileIDX","resizeBoard","tList","redraw","mkKey","redrawAt","sendTerrainRemove","isBoardDirty","tile","existing","getAt","isBlocker","k","filter","sendTerrainAdd","selectedSprite","covered","px","py","clearRect","map","drawTo","newTerrain","keys","sort","b","Middleware","hooks","onCleanup","register","target","wrapped","stopPropagation","trg","EntityMiddleware","container","entLayer","ent","moveListener","movePoints","moveTrackers","entityLayer","entEle","clearMover","toggleInput","bringToFront","toGrid","addPoint","mp","remove","last","findIndex","checkDiag","redrawPath","updateEntity","entity","third","distance","reduce","prev","next","dst","innerText","pathLength","p1","p2","offsetX","offsetY","EntityUpdateHandler","entities","addEntity","entityID","entityIsOwned","canMove","visible","proto","owners","Entity","init","uuid","includes","NamePlate","text","color","targY","plates","update","reposition","offsetWidth","offsetHeight","o","overlaps","position","other","right","bottom","n","updateTimer","EntityEle","plateParent","onClick","namePlate","redrawTimer","opacity","props","requestAnimationFrame","animated","bind","cursor","imageWidthPx","useInput","EntityLayer","tileWidth","tileHeight","entityElements","plateEle","enableInput","middleware","sendUpdate","sendDelete","selected","select","setInput","isDirty","setTarget","checkOwner","internalUpdate","enabled","acceptHover","PreCheck","controller","runHandler","addNewUser","user","getTime","updateUser","getUser","checkUserCredentials","userName","keyCode","match","HandShakeCheck","USERNAME","getNextPacket","lobby","addPendingLogin","BoardSync","buildProtoBoard","Lobby","blacklist","title","iconURL","Notification","requestPermission","result","icon","approve","reject","pendingLogins","find","pe","pending","removePending","notify","u","PingHandler","handlePing","save","campaignID","board","navigator","storage","persist","load","getAvailable","between","minKey","maxKey","deleteBoard","Campaign","shallow","timeCreated","stripProxy","obj","entries","v","saveCampaign","camp","createCampaign","getAllCampaigns","getCampaign","mapToClass","CampaignLoader","campaign","boardDB","loadedBoard","characters","BoardReloadHandler","loadFromProtoBoard","InputDialog","React","useState","setText","handleClose","onCancel","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","tooltip","type","fullWidth","onChange","DialogActions","Button","onSubmit","acceptText","ConfirmPrompt","aria-describedby","prompt","cancelButton","onConfirm","confirmButton","PLAYER_OPTS","playerVars","autoplay","mute","config","volume","loop","saveConf","PLAYER_CONFIG","player","getPlayerStatus","currentVideo","getVideoData","video_id","currentTime","getCurrentTime","playbackRate","getPlaybackRate","paused","getPlayerState","YouTube","PlayerState","PAUSED","YoutubePlayerInterface","observer","setVisible","useMemo","tools","ShuffleButton","pointerEvents","Tooltip","Fab","YoutubePlayer","mediaPlayer","setPlayer","useEffect","timer","getVolume","PLAYING","onReady","onPlay","stat","onPause","nextVideo","onStateChange","CUED","setLoop","setShuffle","setVolume","getPlaylist","playVideoAt","playVideo","LoadPlaylistButton","needPrompt","input","URLSearchParams","split","cuePlaylist","list","listType","index","startSeconds","LoadVideoButton","cueVideoById","IconButton","children","MediaSyncHandler","pauseVideo","setPlaybackRate","videoId","status","MediaSync","GameController","canvasContainer","preChecks","addLayer","hash","location","replace","startHost","startClient","ready","history","pushState","href","connection","pu","rejectUser","setHost","connectID","pb","setDirectMap","getEntityList","includeHidden","getDirectMap","flat","indexOf","UITool","PenMiddleware","canUsePen","hoverBox","toggle","addElement","ke","code","startsWith","updateHighlight","shiftKey","button","xx","yy","draw","out","penSize","eraseAt","drawAt","border","op","removeElement","SpritePicker","defaultTerm","searchTerm","setSearch","setAnimated","setSprites","timeout","results","term","nameOnly","search","toLowerCase","path","searchImages","maxWidth","noValidate","autoComplete","FormGroup","Autocomplete","selectOnFocus","freeSolo","inputValue","onInputChange","newInputValue","onSearch","renderInput","params","FormControlLabel","control","Switch","checked","disabled","canAnimate","inputProps","labelPlacement","SpriteGrid","onSelect","perRow","rowCount","columnCount","columnWidth","rowHeight","maxHeight","spr","columnIndex","rowIndex","SpriteImage","canv","useRef","sel","current","cancel","ref","background","useStyles","makeStyles","theme","createStyles","paper","palette","boxShadow","shadows","padding","spacing","minWidth","SpritePickerModal","classes","Modal","currentSprite","UIPenTool","forMobile","PenControlInterface","pen","registerMiddleware","eject","PenSizeSlider","Typography","gutterBottom","Slider","getAriaValueText","valueLabelDisplay","step","marks","newValue","UICameraTool","UIEraserTool","EraserSizeSlider","UIEntityTool","EntityEditorInterface","root","flexGrow","speedDial","spriteColor","marginLeft","marginTop","marginRight","promptSprite","setSpritePrompt","setSprite","entName","setName","loadExisting","setLoadExisting","resetValues","EntityEditInterface","evt","Checkbox","justifyContent","createEntity","CampaignCharacterSelector","promptClone","setClonePrompt","updateCampaign","updateInstant","clientNames","cl","userList","saveToCampaign","InputLabel","Select","multiple","Input","renderValue","join","marginBottom","MenuItem","ListItemText","primary","PromptForNumber","num","cloneEntity","setSelected","getSelected","cha","setNum","ext","screenToBoard","innerWidth","innerHeight","campUpdateTimer","savedIdx","newData","UILobbyTool","LobbyInterface","PendingList","UserList","eles","pl","MenuList","PendingUserEle","disableTouchRipple","approveUser","network","dat","ControlMenu","ui","setOpen","modalOpen","setModalOpen","setTools","selectedTool","handleModalClose","handleSelect","action","hotkeys","handler","tool","isOption","unbind","newTools","emb","getControlUI","Avatar","SpeedDial","ariaLabel","hidden","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","tooltipOpen","LoginHelper","promptLogin","setPrompt","needClient","setNeedClient","PromptNetwork","hosting","txt","ConnectionOverlay","content","message","MATCHMAKING_FAIL","Backdrop","transitionDuration","component","api","injected","apiReady","apiFailed","waitForLoad","fail","script","gapi","clientId","process","discoveryDocs","scope","auth2","getAuthInstance","isSignedIn","callback","localStorage","signIn","signOut","mimeType","currentUser","oauthToken","getAuthResponse","access_token","getLatestBackup","latest","latestID","parents","fetch","method","headers","Authorization","resp","loc","drive","files","pageSize","fields","spaces","response","listFiles","modifiedTime","blob","lastUpdate","driveUpdateTime","downloadLatestBackup","importDB","exportDB","prettyJson","progressCallback","prog","upload","inject","google","CampaignSelector","need","setNeed","wantOpen","setWantOpen","promptNew","setPromptNew","campaignList","setList","q","setStorage","selectCampaign","CAMPAIGN_CURRENT","loadBoard","loadCampaign","estimate","usage","quota","undefined","addCampaign","trim","textAlign","CampaignMenu","startIcon","toFixed","bytes","decimals","dm","sizes","parseFloat","formatBytes","exportLocalDB","display","restoreLocalDB","accept","getElementById","click","promptSignIn","anchorEl","setAnchorEl","camps","c1","c2","toLocaleString","htmlFor","currentTarget","overflowX","Menu","keepMounted","Boolean","anchorOrigin","vertical","horizontal","download","file","BoardSelector","noWrap","Popover","BoardControlMenu","BoardSelectMenu","overflow","BoardLoadButton","BoardDeleteButton","confirm","needConfirm","BoardCreateButton","handleCreate","BoardSaveButton","shouldSave","saving","setSaving","dbUpdate","setUpdate","saveBoard","uploadLocalDB","onSignInChange","loggedIn","getLatestUpgrade","CircularProgress","downloadDB","noop","oldConsole","restoreLog","App","desktop","useMediaQuery","needName","setNeedName","start","reload","isNetworkReady","maxSnack","flexDirection","hostname","ReactDOM","render","serviceWorker","registration"],"mappings":"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","file":"static/js/main.d547009b.chunk.js","sourcesContent":["module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/web-ui/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/web-ui/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/web-ui/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/web-ui/src/game/net/messageEncoder.worker.ts\")());module.exports.__esModule = true;","module.exports = __webpack_public_path__ + \"static/media/sheet-composite.enc.52e99977.png\";","/*\n * converted from https://www.npmjs.com/package/image-scramble\n */\nvar shuffleSeed = require('shuffle-seed');\n\nvar self = function(img,sliceSize,seed,bmp){\n\tvar i;\n\tvar totalParts = Math.ceil(img.width/sliceSize)*Math.ceil(img.height/sliceSize);\n\tvar inds = [];\n\tvar ctx;\n\tfor(i=0;i<totalParts;i++) inds.push(i);\n\tif(!bmp){\n\t\tvar canvas=document.createElement(\"canvas\");\n\t\tctx=canvas.getContext('2d');\n\t\tcanvas.width=img.width;\n\t\tcanvas.height=img.height;\n\t}\n\n\n\tvar verticalSlices=Math.ceil(img.width/sliceSize);\n\n\tvar getSlices = function(){\n\t\tvar slices = {};\n\t\tvar i;\n\t\tfor(i=0;i<totalParts;i++){\n\t\t\tvar slice = {};\n\t\t\tvar row=parseInt(i/verticalSlices);\n\t\t\tvar col=i-row*verticalSlices;\n\t\t\tslice.x=col*sliceSize;\n\t\t\tslice.y=row*sliceSize;\n\t\t\tslice.width=(sliceSize-(slice.x+sliceSize<=img.width ?  0 : (slice.x+sliceSize)-img.width));\n\t\t\tslice.height=(sliceSize-(slice.y+sliceSize<=img.height ?  0 : (slice.y+sliceSize)-img.height));\n\t\t\tif(!slices[slice.width+\"-\"+slice.height]) slices[slice.width+\"-\"+slice.height]=[];\n\t\t\tslices[slice.width+\"-\"+slice.height].push(slice);\n\t\t}\n\t\treturn slices;\n\t}\n\n\tvar getColsInGroup = function(slices){\n\t\tif(slices.length===1) return 1;\n\t\tvar t = 'init';\n\t\tfor(var i=0;i<slices.length;i++){\n\t\t\tif(t==='init') t = slices[i].y;\n\t\t\tif(t!==slices[i].y){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t}\n\n\tvar getGroup = function(slices){\n\t\tvar self = {};\n\t\tself.slices = slices.length;\n\t\tself.cols = getColsInGroup(slices);\n\t\tself.rows = slices.length/self.cols;\n\t\tself.width = slices[0].width*self.cols;\n\t\tself.height = slices[0].height*self.rows;\n\t\tself.x = slices[0].x;\n\t\tself.y = slices[0].y;\n\t\treturn self;\n\t}\n\n\tvar slices = getSlices();\n\tfor(var g in slices){\n\t\tvar group = getGroup(slices[g]);\n\t\tvar shuffleInd = [];\n\t\tfor(i=0;i<slices[g].length;i++) shuffleInd.push(i);\n\t\tshuffleInd = shuffleSeed.shuffle(shuffleInd,seed);\n\t\tfor(i=0;i<slices[g].length;i++){\n\t\t\tvar s=shuffleInd[i];\n\n\t\t\tvar row=parseInt(s/group.cols);\n\t\t\tvar col=s-row*group.cols;\n\t\t\tvar x=col*slices[g][i].width;\n\t\t\tvar y=row*slices[g][i].height;\n\n\t\t\tctx.drawImage(\n\t\t\t\timg,\n\t\t\t\tgroup.x+x,\n\t\t\t\tgroup.y+y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height,\n\t\t\t\tslices[g][i].x,\n\t\t\t\tslices[g][i].y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height\n\t\t\t);\n\t\t}\n\t}\n\treturn canvas;\n}\n\nmodule.exports=self;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"9ba30d38eee881b48f8e.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"17dabf5032029cde981d.worker.js\");\n};","\nfunction renderer(minScale: number, maxScale: number, element: HTMLElement, scaleSensitivity: number = 10){\n    const state = {\n        element,\n        minScale,\n        maxScale,\n        scaleSensitivity,\n        transformation: {\n            originX: 0,\n            originY: 0,\n            translateX: 0,\n            translateY: 0,\n            scale: 1\n        },\n    };\n    return Object.assign({}, canZoom(state), canPan(state), {state});\n}\n\nconst pan = ({ state, originX, originY }: any) => {\n    state.transformation.translateX += originX;\n    state.transformation.translateY += originY;\n    state.element.style.transform =\n        getMatrix({ scale: state.transformation.scale, translateX: state.transformation.translateX, translateY: state.transformation.translateY });\n};\n\nconst canPan = (state: any) => ({\n    panBy: ({ originX, originY }: any) => pan({ state, originX, originY }),\n    panTo: ({ originX, originY, scale }: any) => {\n        state.transformation.scale = scale;\n        pan({ state, originX: originX - state.transformation.translateX, originY: originY - state.transformation.translateY });\n    },\n});\n\n\nconst canZoom = (state: any) => ({\n    zoom: ({ x, y, deltaScale }: any) => {\n        const { left, top } = state.element.getBoundingClientRect();\n        const { minScale, maxScale, scaleSensitivity } = state;\n        const [scale, newScale] = getScale({ scale: state.transformation.scale, deltaScale, minScale, maxScale, scaleSensitivity });\n        const originX = x - left;\n        const originY = y - top;\n        const newOriginX = originX / scale;\n        const newOriginY = originY / scale;\n        const translate = getTranslate({ scale, minScale, maxScale });\n        const translateX = translate({ pos: originX, prevPos: state.transformation.originX, translate: state.transformation.translateX });\n        const translateY = translate({ pos: originY, prevPos: state.transformation.originY, translate: state.transformation.translateY });\n\n        state.element.style.transformOrigin = `${newOriginX}px ${newOriginY}px`;\n        state.element.style.transform = getMatrix({ scale: newScale, translateX, translateY });\n        state.transformation = { originX: newOriginX, originY: newOriginY, translateX, translateY, scale: newScale };\n    }\n});\n\nconst getScale = ({ scale, minScale, maxScale, scaleSensitivity, deltaScale }: any) => {\n    let newScale = scale + (deltaScale / (scaleSensitivity / scale));\n    newScale = Math.max(minScale, Math.min(newScale, maxScale));\n    return [scale, newScale];\n};\n\nconst hasPositionChanged = ({ pos, prevPos }: any) => pos !== prevPos;\n\nconst valueInRange = ({ minScale, maxScale, scale }: any) => scale <= maxScale && scale >= minScale;\n\nconst getTranslate = ({ minScale, maxScale, scale }: any) => ({ pos, prevPos, translate }: any) =>\n    valueInRange({ minScale, maxScale, scale }) && hasPositionChanged({ pos, prevPos })\n        ? translate + (pos - prevPos * scale) * (1 - 1 / scale)\n        : translate;\n\nconst getMatrix = ({ scale, translateX, translateY }: any) =>\n    `matrix(${scale}, 0, 0, ${scale}, ${translateX}, ${translateY})`;\n\nconst listeners: any = [];\n\nfunction listen (ele: HTMLElement|Document|Window, event: string, cb: any, opts: any = {}) {\n    ele.addEventListener(event, cb);\n    const rem = () => ele.removeEventListener(event, cb, opts);\n    listeners.push(rem)\n    return rem;\n}\n\nexport default function Draggable(ele: HTMLElement, parent: HTMLElement) {\n    const instance = renderer(.65, 5, ele, 10);\n    let dragging = false;\n    let lx=0, ly=0;\n    // Global vars to cache event state\n    let evCache: any = [], noScroll = new Set();\n    let prevDiff = -1;\n    listen(parent, \"wheel\", (event: WheelEvent) => {\n        event.preventDefault();\n        instance.zoom({\n            deltaScale: Math.sign(event.deltaY) > 0 ? -1 : 1,\n            x: event.pageX,\n            y: event.pageY\n        });\n    }, { blocking: true });\n\n    listen(parent, 'mouseup', (ev: MouseEvent) => {\n        evCache.splice(0, evCache.length); // Don't cache events for mice.\n        noScroll.clear();\n        dragging = false;\n        prevDiff = -1;\n    });\n\n    // Pointer stuff:\n    listen(parent, 'pointerdown', (ev: PointerEvent) => {\n        evCache.push(ev);\n        lx = ev.clientX;\n        ly = ev.clientY;\n        dragging = true;\n    });\n    listen(window, 'pointermove', (ev: PointerEvent) => {\n        ev.preventDefault();\n        if (!dragging) return;\n        // Find this event in the cache and update its record with this event\n        for (let i = 0; i < evCache.length; i++) {\n            if (ev.pointerId === evCache[i].pointerId) {\n                evCache[i] = ev;\n                break;\n            }\n        }\n        // If two pointers are down, check for pinch gestures\n        if (evCache.length === 2) {\n            // Calculate the distance between the two pointers\n            let curDiff = Math.abs(Math.sqrt(Math.pow(evCache[0].clientX - evCache[1].clientX, 2) + Math.pow(evCache[0].clientY - evCache[1].clientY, 2)));\n\n            if (prevDiff > 0) {\n                let delta = prevDiff - curDiff;\n                let change = (Math.sign(delta) > 0 ? -0.2 : 0.2) * Math.abs(delta)/10;\n                instance.zoom({\n                    deltaScale: change,\n                    x: ev.pageX,\n                    y: ev.pageY\n                });\n                noScroll.add(evCache[0].pointerId);\n                noScroll.add(evCache[1].pointerId);\n            }\n\n            // Cache the distance for the next move event\n            prevDiff = curDiff;\n        } else if (evCache.length === 1 && dragging && !noScroll.has(ev.pointerId)) {\n            instance.panBy({\n                originX: ev.clientX - lx,\n                originY: ev.clientY - ly\n            });\n            lx = ev.clientX;\n            ly = ev.clientY;\n        }\n    });\n\n    listen(window, 'pointerup', (ev: PointerEvent) => {\n        // Remove this event from the target's cache\n        for (let i = 0; i < evCache.length; i++) {\n            if (evCache[i].pointerId === ev.pointerId) {\n                evCache.splice(i, 1);\n                break;\n            }\n        }\n        noScroll.delete(ev.pointerId);\n\n        if (evCache.length < 1) {\n            dragging = false;\n        }\n\n        // If the number of pointers down is less than two then reset diff tracker\n        if (evCache.length < 2) {\n            prevDiff = -1;\n        }\n    });\n\n    return Object.assign({}, instance, {unregister: () => listeners.forEach((l: any) => l())})\n}\n","/** The width of each image/tile, in pixels. */\nexport const imageWidthPx = 48;\n/** The height of each image/tile, in pixels. */\nexport const imageHeightPx = 48;\n\n/** The amount of terrain the board is wide. */\nexport const boardTileWidth = 100;\n/** The amount of terrain the board is tall. */\nexport const boardTileHeight = 100;\n","import sheetSRC from '../../resources/sheet-composite.enc.png';\nimport {SpriteInterface} from \"../data/interfaces/sprite\";\nconst rawData = require('../../resources/sheet-data.json');\nconst unscramble = require('./unscramble');\n\ninterface DataSheet {\n\tmetadata: {\n\t\twidth: number;\n\t\theight: number;\n\t\tcount: number;\n\t\tuid: string;\n\t};\n\tsprites: Record<string, DataSprite>;\n}\n\ninterface DataSprite {\n\tname: string;\n\tanimated?: number;\n\timages: DataImage[];\n}\n\ninterface DataImage {\n\tx: number;\n\ty: number;\n\tblocker: boolean;\n}\n\nconst data: DataSheet = rawData;  // Type casting here for clarity.\nlet sheet: HTMLCanvasElement = document.createElement('canvas');\nlet spriteWidth: number = data.metadata.width;\nlet spriteHeight: number = data.metadata.height;\nlet globalFrameIndex: number = 0;\nlet fpsTicker: NodeJS.Timeout;\n\nexport const waitForSpriteLoad: Promise<any> = new Promise(res => {\n\tconst img = new Image();\n\timg.onerror = err => {\n\t\tconsole.error(err);\n\t\talert('Failed to waitForSpriteLoad sprite sheet! Cannot continue!');\n\t};\n\timg.onload = () => {\n\t\tsheet = unscramble(img, 24, 'GaiaV2SheetKey-mk1'); // Support the artists - buy from them!\n\t\tres();\n\t};\n\timg.src = sheetSRC;\n\n\tclearInterval(fpsTicker);\n\tfpsTicker = setInterval(() => {\n\t\tglobalFrameIndex++;\n\t\tglobalFrameIndex %= 1000;\n\t}, 200);\n});\n\n/**\n * Locates the metadata for a given Sprite. Raises an Error if the key cannot be found.\n * @param key\n */\nfunction findSpriteData(key: Sprite): DataSprite {\n\tconst ret = data.sprites[key.id];\n\tif (!ret) throw Error(`Unable to locate sprite for key: ${key.composite}`);\n\treturn ret;\n}\n\n/**\n * Render the image, denoted by the given Sprite, to the given Graphics 2D context.\n * @param ctx\n * @param key\n * @param x\n * @param y\n */\nfunction drawImageTo(ctx: CanvasRenderingContext2D, key: Sprite, x: number, y: number) {\n\tconst sprites = findSpriteData(key);\n\tconst img = key.idx < 0 ? sprites.images[globalFrameIndex % sprites.images.length] : sprites.images[key.idx];\n\n\tctx.drawImage(sheet, img.x, img.y, spriteWidth, spriteHeight, x, y, spriteWidth, spriteHeight);\n}\n\n/** Search for images matching the given term. */\nexport function searchImages(term: string, animated: boolean = false, nameOnly: boolean = false) {\n\tconst res: Sprite[] = [];\n\tconst search = Object.entries(data.sprites).filter( (obj) => {\n\t\tif (animated && !obj[1].animated) {\n\t\t\treturn false;\n\t\t}\n\t\tif (nameOnly) {\n\t\t\treturn obj[1].name.includes(term);\n\t\t}\n\n\t\treturn obj[0].includes(term.toLowerCase())\n\t}).map(o => ({ path: o[0], sprite: o[1]}));\n\tif (!animated) {\n\t\tsearch.forEach(o => {\n\t\t\tfor(let i=0; i < o.sprite.images.length; i++) {\n\t\t\t\tres.push(new Sprite(o.path, i));\n\t\t\t}\n\t\t})\n\t} else {\n\t\tsearch.forEach(o => {\n\t\t\tres.push(new Sprite(o.path, -1));\n\t\t})\n\t}\n\n\treturn res;\n}\n\n/**\n * Sprites are used to concisely represent an image (by ID) from the datasheet,\n * as well as which index to use for animating.\n */\nexport class Sprite implements SpriteInterface {\n\tpublic readonly id: string;\n\tpublic readonly idx: number;\n\n\tconstructor(id: string, idx: number) {\n\t\tthis.id = id;\n\t\tthis.idx = idx;\n\t}\n\n\tget composite(): string {\n\t\treturn `${this.id}:${this.idx}`;\n\t}\n\n\tget animated(): boolean {\n\t\treturn this.idx < 0;\n\t}\n\n\tget isBlocker(): boolean {\n\t\tif (this.idx < 0) return false;\n\t\treturn findSpriteData(this).images[this.idx].blocker;\n\t}\n\n\tget name(): string {\n\t\treturn findSpriteData(this).name;\n\t}\n\n\tpublic drawTo(ctx: CanvasRenderingContext2D, x: number, y: number) {\n\t\tdrawImageTo(ctx, this, x, y);\n\t}\n}\n","import Draggable from '../util/draggable';\nimport Middleware from \"../middleware/middleware\";\nimport EntityLayer from \"./entities\";\nimport {boardTileHeight, boardTileWidth, imageHeightPx, imageWidthPx} from \"../consts\";\n\n\nexport class CanvasContainer {\n    private readonly base: HTMLDivElement;\n    private readonly wrapper: HTMLDivElement;\n    private readonly canvases: (Canvas|EntityLayer)[] = [];\n    private width: number;\n    private height: number;\n    private renderer: any;\n\n    constructor(width: number = 4800, height: number = 4800) {\n        this.width = width;\n        this.height = height;\n        this.base = document.createElement('div');\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'canvasWrapper';\n        this.wrapper.style.backgroundColor = 'gray';\n        this.base.className = 'canvasBase';\n\n        this.base.prepend(this.wrapper);\n        document.body.prepend(this.base);\n        this.renderer = Draggable(this.wrapper, this.base);\n        this.setCanvasSize(width, height);\n        this.resetView();\n    }\n\n    public addLayer(canvas: Canvas|EntityLayer) {\n        this.canvases.push(canvas);\n        canvas.setSize(this.width, this.height);\n        canvas.appendTo(this.wrapper);\n    }\n\n    public addElement(object: HTMLElement) {\n        return this.wrapper.appendChild(object);\n    }\n\n    public removeElement(object: HTMLElement) {\n        return this.wrapper.removeChild(object);\n    }\n\n    public setCanvasSize(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.wrapper.style.width = `${this.width}px`;\n        this.wrapper.style.height = `${this.height}px`;\n        this.canvases.forEach(c => c.setSize(width, height));\n        this.resetView();\n    }\n\n    public resetView() {\n        this.renderer.panTo({\n            originX: this.width/2 * -1 + this.base.getBoundingClientRect().width/2,\n            originY: this.height/2 * -1 + this.base.getBoundingClientRect().height/2,\n            scale: 0.99\n        });\n    }\n\n    /**\n     * Convert the given screen pixel coords to the (nearest) Board tile (x,y) pair.\n     */\n    public screenToBoard(x: number, y: number) {\n        const rect = this.wrapper.getBoundingClientRect();\n        const scale = this.renderer.state.transformation.scale;\n\n        console.log('locating:', x, y, scale, rect);\n        const coords = {\n            x: Math.max(0, Math.min(boardTileWidth-1, Math.floor((x - rect.x) / scale / imageWidthPx))),\n            y: Math.max(0, Math.min(boardTileHeight-1, Math.floor((y - rect.y) / scale / imageHeightPx)))\n        };\n\n        console.log(coords);\n\n        return coords\n    }\n}\n\nexport class Canvas {\n    public readonly name: string;\n    protected readonly canvas: HTMLCanvasElement;\n    private readonly context: CanvasRenderingContext2D;\n\n    constructor(name: string) {\n        this.name = name;\n        this.canvas = document.createElement('canvas');\n        this.canvas.id = `canvas-${name}`;\n        this.canvas.className = 'canvasBackground';\n\n        // @ts-ignore\n        this.context = this.canvas.getContext('2d');\n        this.canvas.addEventListener('contextmenu', e => e.preventDefault());\n    }\n\n    public get ctx(): CanvasRenderingContext2D {\n        return this.context;\n    }\n\n    public get width(): number {\n        return this.canvas.width;\n    }\n\n    public get height(): number {\n        return this.canvas.height;\n    }\n\n    public setSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    }\n\n    public appendTo(ele: HTMLDivElement) {\n        ele.append(this.canvas);\n    }\n\n    public registerMiddleware(mdl: Middleware) {\n        mdl.attach(this.canvas);\n    }\n}\n","import {TerrainAddPacket, TerrainErasePacket} from \"./terrainPackets\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard, ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"./entityPackets\";\nimport {PingPacket, ReadyPacket, SignaturePacket} from \"./util-packets\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"./media-packets\";\n\n/**\n * The order of this list is important, as the index represents the packet ID for messages and saved boards.\n */\nexport const packetList: typeof ProtoWrapper[] = [\n    SignaturePacket,\n    ReadyPacket,\n    TerrainErasePacket,\n    TerrainAddPacket,\n    ProtoBoard,\n    ProtoTileStack,\n    EntityUpdatePacket,\n    EntityDeletePacket,\n    PingPacket,\n    MediaStatusPacket,\n    MediaRequestPacket\n];\n\nexport const packetMap: Record<string, number> = {};\n\nfor (let i=0; i<packetList.length; i++) {\n    packetMap[packetList[i].$type.name] = i;\n}\n","import { useSnackbar, WithSnackbarProps, OptionsObject } from 'notistack'\nimport React from 'react'\n\nlet snackbarRef: WithSnackbarProps;\n\n\nexport const SnackbarUtilsConfigurator: React.FC = () => {\n    snackbarRef = useSnackbar();\n    return null;\n};\n\nexport default {\n    success(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'success' })\n    },\n    warning(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'warning' })\n    },\n    info(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'info' })\n    },\n    error(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'error' })\n    },\n    toast(msg: string, options: OptionsObject = {}) {\n        snackbarRef.enqueueSnackbar(msg, options)\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\nexport default abstract class Handler {\n    /** The type of packet this handler is listening for. */\n    public abstract readonly packets: typeof ProtoWrapper[];\n    private isHost: boolean = false;\n\n    setHost(isHost: boolean) {\n        this.isHost = isHost;\n    }\n\n    async handlePacket(client: Client, packet: ProtoWrapper) {\n        return this.isHost ? this.hostHandler(client, packet) : this.clientHandler(client, packet);\n    }\n\n    abstract async clientHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n    abstract async hostHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n}\n","import {Message} from \"protobufjs/light\";\n\n/**\n * Wrapper for protobuf Message, which allows quick & typed constructor unpacking.\n */\nexport default class ProtoWrapper<T extends object = object> extends Message<T>{\n    /**\n     * Shortcut to assign the given values to this object, then return it.\n     */\n    assign(values: Partial<this>): this {\n        return Object.assign(this, values)\n    }\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\n\n@Type.d(\"ProtoSprite\")\nexport class ProtoSprite extends ProtoWrapper<ProtoSprite> {\n    @Field.d(1, \"string\", \"required\", \"\")\n    public id: string = '';\n\n    @Field.d(2, \"int32\", \"required\", 0)  // Use \"sint32\" if idx will be negative often.\n    public idx: number = 0;\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\nimport {ProtoSprite} from \"./proto-sprite\";\n\n@Type.d(\"ProtoEntity\")\nexport class ProtoEntity extends ProtoWrapper<ProtoEntity> {\n    @Field.d(1, ProtoSprite, \"required\")\n    public sprite: ProtoSprite = new ProtoSprite();\n\n    @Field.d(2, 'int32', \"required\")\n    public x: number = 0;\n\n    @Field.d(3, 'int32', \"required\")\n    public y: number = 0;\n\n    @Field.d(4, 'bool', \"required\")\n    public visible: boolean = false;\n\n    @Field.d(5, 'string', \"required\")\n    public color: string = '';\n\n    @Field.d(6, 'string', \"required\")\n    public id: string = '';\n\n    @Field.d(7, 'string', \"repeated\")\n    public owners: string[] = [];\n\n    @Field.d(8, 'bool', \"required\")\n    public saveToCampaign: boolean = false;\n\n    @Field.d(9, 'string', \"required\")\n    public name: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from './proto-wrapper';\nimport {ProtoSprite} from \"./proto-sprite\";\nimport {ProtoEntity} from \"./proto-entity\";\n\n\n@Type.d(\"ProtoTile\")\nexport class ProtoTile extends ProtoWrapper<ProtoTile> {\n    @Field.d(1, \"int32\", \"required\", 0)\n    public x: number = 0;\n\n    @Field.d(2, \"int32\", \"required\", 0)\n    public y: number = 0;\n\n    @Field.d(3, \"int32\", \"required\", 0)\n    public z: number = 0;\n\n    @Field.d(4, \"int32\", \"required\", 0)\n    public spriteIdx: number = 0;\n}\n\n@Type.d(\"ProtoTileStack\")\nexport class ProtoTileStack extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTile, \"repeated\")\n    public tiles: ProtoTile[] = [];\n\n    @Field.d(2, ProtoSprite, \"repeated\")\n    public sprites: ProtoSprite[] = [];\n}\n\n\n@Type.d(\"ProtoBoard\")\nexport class ProtoBoard extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTileStack, \"required\")\n    public terrain: ProtoTileStack|null = null;\n    @Field.d(2, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\n\n@Type.d(\"TerrainAddPacket\")\nexport class TerrainAddPacket extends ProtoWrapper<TerrainAddPacket> {\n    @Field.d(1, ProtoTileStack, \"repeated\")\n    public tileStacks: ProtoTileStack[] = [];\n}\n\n@Type.d(\"TerrainCoordPacket\")\nexport class TerrainCoordPacket extends ProtoWrapper<TerrainCoordPacket> {\n    @Field.d(1, 'int32', \"required\")\n    public x: number = 0;\n    @Field.d(2, 'int32', \"required\")\n    public y: number = 0;\n}\n\n@Type.d(\"TerrainErasePacket\")\nexport class TerrainErasePacket extends ProtoWrapper<TerrainErasePacket> {\n    @Field.d(1, TerrainCoordPacket, \"repeated\")\n    public coords: TerrainCoordPacket[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\n@Type.d(\"EntityUpdatePacket\")\nexport class EntityUpdatePacket extends ProtoWrapper<EntityUpdatePacket> {\n    @Field.d(1, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n\n\n@Type.d(\"EntityDeletePacket\")\nexport class EntityDeletePacket extends ProtoWrapper<EntityDeletePacket> {\n    @Field.d(1, 'string', \"required\")\n    public entityID: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"PingPacket\")\nexport class PingPacket extends ProtoWrapper<PingPacket> {}\n\n@Type.d(\"SignaturePacket\")\nexport class SignaturePacket extends ProtoWrapper<SignaturePacket> {\n    @Field.d(1, \"string\", \"required\", 'def')\n    public username: string = '';\n}\n\n@Type.d(\"ReadyPacket\")\nexport class ReadyPacket extends ProtoWrapper<ReadyPacket> {}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"MediaStatusPacket\")\nexport class MediaStatusPacket extends ProtoWrapper<MediaStatusPacket> {\n    @Field.d(1, 'string', \"required\")\n    public currentVideo: string = '';\n    @Field.d(2, 'uint32', \"required\")\n    public playbackRate: number = 1;\n    @Field.d(3, 'bool', \"required\")\n    public paused: boolean = false;\n    @Field.d(4, 'uint32', \"required\")\n    public currentTime: number = 0;\n}\n\n\n@Type.d(\"MediaRequestPacket\")\nexport class MediaRequestPacket extends ProtoWrapper<MediaRequestPacket> {}\n","import * as worker from './messageEncoder.worker';\nimport { packetList, packetMap } from \"./packets/packet-list\";\n\n/**\n * Use a Web Worker thread to encode the given ProtoWrapper object into a compressed binary buffer.\n * @param packet\n */\nexport async function encode(packet: any): Promise<Uint8Array> {\n    const id = packetMap[packet.$type.name];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error encoding packet: Unknown type: \"${packet.constructor.name}\"!`)\n\n    return await worker.workerEncode(packet, id)\n}\n\n/**\n * Use a Web Worker thread to decompress a binary buffer into a ProtoWrapper object, properly cast to the correct subclass.\n * @param data\n */\nexport async function decode(data: Uint8Array): Promise<any> {\n    const id = data.slice(0,1)[0];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error decoding packet: Unknown ID: [${id}], (${data.length})!`);\n\n    return new clazz().assign(await worker.workerDecode(data));\n}\n","/**\n * Chain promises sequentially, with a maximum stack size.\n */\nexport default class PromiseStream {\n    private prom: Promise<any> = Promise.resolve();\n    private readonly maxBackpressure: number;\n    private backPressure: number = 0;\n\n    constructor(maxBackpressure: number = 0) {\n        this.maxBackpressure = maxBackpressure\n    }\n\n    get length() {\n        return this.backPressure;\n    }\n\n    public queue(fn: Function, onError: Function|null = null) {\n        if (this.maxBackpressure && this.backPressure >= this.maxBackpressure) {\n            throw Error('Max backpressure reached!')\n        }\n        this.backPressure++;\n\n        this.prom = this.prom.then( async () => {\n            await fn();\n        }).catch( async err => {\n            if (onError) {\n                await onError(err);\n            } else {\n                console.error(err);\n            }\n        }).then(() => {\n            this.backPressure--;\n        })\n    }\n}\n","import Dexie from \"dexie\";\nimport {BoardWrapper} from \"./board-db\";\nimport Campaign from \"../controllers/campaign\";\nimport {UserData} from \"./user-db\";\n\n\nclass DB extends Dexie {\n    boards: Dexie.Table<any, BoardWrapper>;\n    campaigns: Dexie.Table<any, Campaign>;\n    metadata: Dexie.Table<any, string>;\n    users: Dexie.Table<any, UserData>;\n\n    constructor() {\n        super('terra-db');\n\n        // Define tables and indexes\n        this.version(1).stores({\n            boards: '&[campaignID+name]',\n            campaigns: '++id, name',\n            metadata: 'id',\n            users: '++id, &username, *keyCodes, lastSeen'\n        });\n        this.boards = this.table(\"boards\");\n        this.campaigns = this.table(\"campaigns\");\n        this.metadata = this.table(\"metadata\");\n        this.users = this.table(\"users\");\n    }\n}\n\nexport const db = new DB();\n\ndb.on(\"ready\", async () => {\n    if (await db.metadata.count() <= 0) {\n        console.debug(\"Migrating from old databases...\");\n        await copyOldDB(db, 'metadata-db', 'data', 'metadata');\n        await copyOldDB(db, 'campaign-db', 'campaigns', 'campaigns');\n        await copyOldDB(db, 'user-db', 'users', 'users');\n        await copyOldDB(db, 'board-db', 'boards', 'boards');\n    }\n});\n\ndb.open();\n\n\nasync function copyOldDB(newDB: DB, dbName: string, tableName: string, newTable: string) {\n    if (await Dexie.exists(dbName)) {\n        const d = new Dexie(dbName);\n        await d.open();\n        console.log('\\t+', dbName, tableName);\n        for (const tbl of d.tables) {\n            if (tbl.name === tableName) {\n                for (const ele of await tbl.toArray()) {\n                    console.log('Migrating:', ele);\n                    // @ts-ignore\n                    await newDB[newTable].add(ele);\n                }\n            }\n        }\n        d.close();\n        d.delete();\n    }\n}\n","import {observable} from \"mobx\";\nimport {db} from './database';\n\nexport const currentUsername = observable.box<string>('');\n\nexport enum Meta {\n    CERT_SEED = 'secret_cert_seed',\n    USERNAME = 'username',\n    CAMPAIGN_CURRENT = 'campaign_current',\n    PLAYER_CONFIG = 'player_config',\n}\n\nasync function get(id: Meta): Promise<any> {\n    return JSON.parse((await db.metadata\n        .where({id})\n        .first())?.val || 'null');\n}\n\nasync function store(id: Meta, value: any): Promise<string> {\n    return db.metadata.put({\n        id,\n        val: JSON.stringify(value),\n    });\n}\n\nexport const metadata = {\n    get,\n    store\n};\n","import Handler from \"./handlers/handler\";\nimport {IObservableValue, observable, ObservableSet} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\nimport * as encoder from './messageEncoder';\nimport ProtoWrapper from \"../data/protobufs/proto-wrapper\";\nimport PromiseStream from \"../util/promiseStream\";\nimport {PreCheck} from \"./prechecks/precheck\";\nimport {UserData} from \"../db/user-db\";\nimport {PingPacket} from \"./packets/util-packets\";\nimport {Switchboard} from \"switchboard.js/build/module/switchboard\"; // TODO: Clean this up when lib is done.\nimport {ConnectedPeer} from \"switchboard.js/build/module/tracker\";\nimport {metadata, Meta} from \"../db/metadata-db\";\n\nexport enum NetworkStatus {\n    IDLE,\n    CONNECTED,\n    CONNECTING,\n    RECONNECTING,\n    DISCONNECTED,\n    MATCHMAKING_FAIL,\n    WAITING_FOR_HOST\n}\n\nexport enum NetworkMode {\n    UNKNOWN,\n    HOST,\n    CLIENT,\n}\n\nlet handlers: Handler[] = [];\nlet preConn: PreCheck[] = [];\n\nexport const clients: ObservableSet<Client> = observable(new Set<Client>());\n\nlet sb: Switchboard | null = null;\nexport let netStatus: IObservableValue<NetworkStatus> = observable.box(NetworkStatus.IDLE);\nexport let netMode: IObservableValue<NetworkMode> = observable.box(NetworkMode.UNKNOWN);\n\nexport function setHandlers(newHandlers: Handler[], newPreConn: PreCheck[]) {\n    handlers = newHandlers;\n    preConn = newPreConn\n}\n\n/**\n * Get the seed that can regenerate the public/private key.\n * If one does not exist already, it is created.\n */\nasync function getSeed(): Promise<string> {\n    let seed = await metadata.get(Meta.CERT_SEED);\n\n    if (!seed) {\n        await metadata.store(Meta.CERT_SEED, seed = Switchboard.makeSeed());\n    }\n\n    return seed;\n}\n\n/**\n * Get the current local peer ID. Generates a new one if it does not already exist.\n * @param useLongform\n */\nexport async function getMyID(useLongform: boolean = false) {\n    if (sb) {\n        return useLongform ? sb.fullID : sb.peerID;\n    }\n    return Switchboard.getIdFromSeed(await getSeed(), useLongform);\n}\n\n/**\n * Kill any running SwitchBoard, and start a new one.\n */\nexport async function makeSB() {\n    if (sb) {\n        sb.kill(new Error('Closed to launch new Peer connection.'));\n    }\n    return new Switchboard({\n        seed: await getSeed()\n    });\n}\n\nexport async function connectTo(hostID: string): Promise<any> {\n    await setMode(NetworkMode.CLIENT);\n    if (netStatus.get() !== NetworkStatus.RECONNECTING) netStatus.set(NetworkStatus.CONNECTING);\n\n    sb = await makeSB();\n\n    sb.on('peer', async (peer) => {\n        notifications.success('Connected to host!');\n\n        const client = new Client(peer, handlers);\n        peer.on('close', () => clientError('host disconnected', client));\n        peer.on('error', (err) => console.error(err));\n\n        try {\n            netStatus.set(NetworkStatus.WAITING_FOR_HOST);\n            for (const pc of preConn) {\n                await pc.run(false, client);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            client.verified = true;\n            clients.add(client);\n            netStatus.set(NetworkStatus.CONNECTED);\n        } catch (err) {\n            console.error('failed validation', err);\n        }\n    });\n\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n    });\n\n    sb.findHost(hostID);\n}\n\nexport async function clientError(err: any, client: Client): Promise<any> {\n    console.warn('Client Error:', err);\n    removeClient(client);\n    client.close();\n\n    console.log('Reconnecting to host...');\n    netStatus.set(NetworkStatus.RECONNECTING);\n}\n\nexport async function openHost() {\n    await setMode(NetworkMode.HOST);\n\n    sb = await makeSB();\n\n    netStatus.set(NetworkStatus.CONNECTED);\n\n    sb.on('peer', async peer => {\n        console.warn('Client connected!');\n        const cli = new Client(peer, handlers);\n\n        peer.on('close', () => {\n            console.debug('Client dropped:', cli);\n            removeClient(cli);\n        });\n\n        try {\n            for (const pc of preConn) {\n                await pc.run(true, cli);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            cli.verified = true;\n            clients.add(cli);\n        } catch (err) {\n            console.error(err);\n            cli.close();\n        }\n    });\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n    });\n    sb.host();\n}\n\nexport async function kill(): Promise<void> {\n    if (sb) {\n        clients.forEach(p => {\n            p.close();\n            removeClient(p);\n        });\n        netMode.set(NetworkMode.UNKNOWN);\n        netStatus.set(NetworkStatus.IDLE);\n        sb.kill();\n        sb = null;\n    }\n}\n\n/**\n * Destroy the connection and set the new mode.\n * @param mode\n */\nasync function setMode(mode: NetworkMode) {\n    await kill();\n    netMode.set(mode);\n}\n\nfunction removeClient(client: Client) {\n    clients.delete(client);\n}\n\n\nexport class Client {\n    private peer: ConnectedPeer;\n    private listener: Function|null = null;\n    private readonly handlers: Handler[];\n    public verified: boolean = false;\n    private lastSend = Promise.resolve();\n    private stream = new PromiseStream();\n    public userData: UserData = {id: -1, username: 'null', keyCodes:[], lastSeen: 0};\n    private readonly pingTimer: any = null;\n    public lastPing: number = 0;\n\n    constructor(peer: ConnectedPeer, handlers: Handler[]) {\n        this.peer = peer;\n        this.handlers = handlers;\n        this.hook();\n\n        this.pingTimer = setInterval(() => {\n            if (!this.verified) return;\n            if (this.peer.isClosed) return this.close();\n            if (!this.lastPing) {\n                this.lastPing = Date.now();\n                return;\n            } else if (Date.now() - this.lastPing > 15000) {\n                console.warn('Ping timeout.')\n                return this.close();\n            }\n            this.send(new PingPacket()).then();\n        }, 10000)\n    }\n\n    hook() {\n        const self = this;\n        this.peer.on('data', (data: any) => {\n            self.stream.queue(() => self.handleMessage(data), ()=>this.peer.close())\n        });\n        this.peer.on('error', (err) => {\n            console.error('Client error:', err);\n            this.peer.close();\n        });\n    }\n\n    get id() {\n        return this.peer.id;\n    }\n\n    async handleMessage(packetBinary: ArrayBuffer) {\n        try {\n            const packet: ProtoWrapper = await encoder.decode(new Uint8Array(packetBinary));\n            if (this.listener) {\n                this.listener(packet);\n            } else if (!this.verified) {\n                // noinspection ExceptionCaughtLocallyJS\n                throw Error(`Error: Unexpected packet sent before verification: ${packet}`);\n            } else {\n                console.debug('Incoming Packet:', packet);\n                for (const h of this.handlers) {\n                    // @ts-ignore\n                    if (h.packets.some(p => packet.$type === p.$type)) {\n                        return await h.handlePacket(this, packet);\n                    }\n                }\n            }\n        } catch (err) {\n            console.error(err);\n            this.close();\n        }\n    }\n\n    close() {\n        if (this.listener) {\n            // TODO: Add to blacklist on current SwitchBoard.\n            this.listener(null);\n        }\n        if (this.pingTimer) clearTimeout(this.pingTimer);\n\n        this.peer.close();\n    }\n\n    /**\n     * Sends the given Packet to the client.\n     * Utilizes an internal \"rolling Promise\" to assure that all messages are sent in order.\n     * @param packet\n     */\n    async send(packet: ProtoWrapper) {\n        console.debug('Sending client:', packet);\n        this.lastSend = this.lastSend.then(async () => {\n            this.sendBuffer(await encoder.encode(packet));\n        }).catch(err => {\n           console.error(`Error sending message to client:`, err);\n        });\n    }\n\n    sendBuffer(data: Uint8Array) {\n        this.peer.send(data);\n    }\n\n    /**\n     * Wait for the next packet, whatever it may be.\n     * Only one listener may be waiting at any given time, or an error will be thrown on subsequent registrations.\n     * @param expectedType\n     */\n    getNextPacket(expectedType: any): Promise<any> {\n        if (this.listener) throw Error('Attempted to overwrite client listener!');\n\n        return new Promise((res, rej) => {\n            this.listener = (packet: any) => {\n                this.listener = null;\n                if (!(packet instanceof expectedType)) {\n                    return rej(`Unexpected packet type: ${packet} !== ${expectedType}`)\n                }\n                return res(packet);\n            }\n        });\n    }\n}\n\n/**\n * Broadcast the given data to all connected connections.\n * If `requireHost` is true, will only send while we are hosting.\n * @param packet\n * @param requireHost\n */\nexport async function broadcast(packet: ProtoWrapper, requireHost: boolean) {\n    if (requireHost && netMode.get() !== NetworkMode.HOST) {\n        return;\n    }\n    const data = await encoder.encode(packet)\n\n    clients.forEach(c => c.sendBuffer(data));\n}\n\nexport function isHost() {\n    return netMode.get() === NetworkMode.HOST\n}\n","import {Sprite} from \"../../util/sprite-loading\";\n\nexport class Tile {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public sprite: Sprite;\n\n    constructor(sprite: Sprite) {\n        this.sprite = sprite;\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport * as packer from '../../data/board-packer.worker';\nimport {TerrainAddPacket} from \"../packets/terrainPackets\";\nimport {Tile} from \"../../data/interfaces/tile\";\n\n\nexport default class TerrainAddHandler extends Handler {\n    private static tiles: Tile[][] = [];\n    readonly packets: typeof ProtoWrapper[] = [TerrainAddPacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainAddHandler.broadcastChanges();\n            TerrainAddHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainAddPacket): Promise<void> {\n        for (const data of packet.tileStacks) {\n            if (!data) return;\n            const stack = data.tiles;\n\n            if (stack.length) {\n                this.terrain.removeAt(stack[0].x, stack[0].y, false);\n                for (let i=0; i < stack.length; i++) {\n                    const dt = stack[i];\n                    const sp = data.sprites[dt.spriteIdx];\n                    const t = new Tile(new Sprite(sp.id, sp.idx));\n                    this.terrain.placeAt(dt.x, dt.y, t, i === stack.length-1, false);\n                }\n            }\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        throw Error('Client sent host new Terrain data. Not allowed.')\n    }\n\n    static async broadcastChanges() {\n        if (TerrainAddHandler.tiles.length) {\n            const packedStacks: ProtoTileStack[] = []\n            const updateTiles = TerrainAddHandler.tiles.splice(0, TerrainAddHandler.tiles.length);\n\n            for (const t of updateTiles) {\n                packedStacks.push(await packer.packTiles(t));\n            }\n\n            await broadcast(new TerrainAddPacket().assign({\n                tileStacks: packedStacks\n            }), true);\n        }\n    }\n\n    static sendTerrainAdd(tiles: Tile[]) {\n        if (isHost()) TerrainAddHandler.tiles.push(tiles);\n    }\n}\n\nTerrainAddHandler.pollChanges();\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {TerrainCoordPacket, TerrainErasePacket} from \"../packets/terrainPackets\";\n\nexport default class TerrainEraseHandler extends Handler {\n    private static tiles: Set<TerrainCoordPacket> = new Set();\n    readonly packets: typeof ProtoWrapper[] = [TerrainErasePacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainEraseHandler.broadcastChanges();\n            TerrainEraseHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainErasePacket): Promise<void> {\n        for (const t of packet.coords) {\n            this.terrain.removeAt(t.x, t.y, true);\n        }\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client attempted to erase terrain. Not allowed.')\n    }\n\n    /**\n     * Batches the removed terrain coords, to be sent shortly after.\n     * @param x\n     * @param y\n     */\n    static sendTerrainRemove(x: number, y: number) {\n        if (isHost()) TerrainEraseHandler.tiles.add(new TerrainCoordPacket().assign({ x, y}));\n    }\n\n    /**\n     * Sends all the batched changes. Runs on a loop. Can be called manually to instantly send all changes.\n     */\n    static async broadcastChanges() {\n        if (TerrainEraseHandler.tiles.size) {\n            const tep  = new TerrainErasePacket().assign({\n                coords: Array.from(TerrainEraseHandler.tiles)\n            });\n            TerrainEraseHandler.tiles.clear();\n            await broadcast(tep, true);\n        }\n    }\n}\n\nTerrainEraseHandler.pollChanges();\n","import {Canvas} from \"./canvas\";\nimport {Sprite} from \"../util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport {Tile} from \"../data/interfaces/tile\";\n\n\nexport default class Terrain extends Canvas {\n    private readonly terrain: Record<string, Tile[]> = {};\n    public boardWidth: number = 0;\n    public boardHeight: number = 0;\n    public tileIDX: number = 0; // Simple counter to track terrain in the order they were placed.\n    @observable public selectedSprite: Sprite | null = null;\n    @observable public isBoardDirty: boolean = false;\n\n    constructor(width: number, height: number) {\n        super('terrain');\n        this.resizeBoard(width, height);\n    }\n\n    public resizeBoard(width: number, height: number) {\n        this.boardWidth = width;\n        this.boardHeight = height;\n        for (const tList of Object.values(this.terrain)) {\n            const x = tList[0].x;\n            const y = tList[0].y;\n            if (x > this.boardWidth || y > this.boardHeight) {\n                this.removeAt(x, y);\n            }\n        }\n    }\n\n    /**  Derive new tile widthxheight whenever this canvas is resized. */\n    public setSize(width: number, height: number) {\n        super.setSize(width, height);\n        this.resizeBoard(Math.floor(width/imageWidthPx), Math.floor(height/imageHeightPx));\n    }\n\n    public removeAt(x: number, y: number, redraw: boolean = true): boolean {\n        const exists = this.terrain[Terrain.mkKey(x, y)]?.length;\n        if (exists) {\n            delete this.terrain[Terrain.mkKey(x, y)];\n            if (redraw) this.redrawAt(x, y);\n        }\n        return !!exists;\n    }\n\n    /**\n     * Same as removeAt, but send events to clients.\n     * @param x\n     * @param y\n     */\n    public eraseAt(x: number, y: number) {\n        if (this.removeAt(x, y, true)) {\n            TerrainEraseHandler.sendTerrainRemove(x, y);\n            if (!this.isBoardDirty) this.isBoardDirty = true;\n        }\n    }\n\n    /**\n     * Place the given Tile at the given coords, optionally skipping redrawing.\n     * This method is smart, and auto-handles tile overlay logic.\n     * @param x\n     * @param y\n     * @param tile\n     * @param redraw\n     * @param broadcast\n     */\n    public placeAt(x: number, y: number, tile: Tile, redraw: boolean = true, broadcast: boolean = false): boolean {\n        const existing = this.getAt(x, y);\n        if (existing.length && existing[existing.length-1].sprite.composite === tile.sprite.composite) {\n            // The given sprite is already at the top of the stack; Skip adding because it won't do anything.\n            return false;\n        }\n        if (tile.sprite.isBlocker) {\n            this.removeAt(x, y, false);\n        }\n        const k = Terrain.mkKey(x, y);\n        this.terrain[k] = this.terrain[k]?.filter(t => t.sprite.composite !== tile.sprite.composite) || [];  // Filter duplicates.\n        this.terrain[k].push(tile);\n        tile.x = x;\n        tile.y = y;\n        tile.z = this.tileIDX++;\n        if (redraw) this.redrawAt(x, y);\n        if (broadcast) TerrainAddHandler.sendTerrainAdd(this.terrain[k]);\n        if (!this.isBoardDirty) this.isBoardDirty = true;\n        return true;\n    }\n\n    /**\n     * Draw the currently-selected sprite onto the given coords.\n     * @param x\n     * @param y\n     */\n    public drawAt(x: number, y: number): boolean {\n        if (x < 0 || x >= this.boardWidth || y < 0 || y >= this.boardHeight) {\n            return false;\n        }\n        if (this.selectedSprite) {\n            return this.placeAt(x, y, new Tile(this.selectedSprite), true, true);\n        }\n        return false;\n    }\n\n    public getAt(x: number, y: number): Tile[] {\n        return this.terrain[Terrain.mkKey(x, y)] || [];\n    }\n\n    private redrawAt(x: number, y: number) {\n        const tiles = this.getAt(x, y);\n        const covered = tiles.some(t => t.sprite.isBlocker);\n        const px = x * imageWidthPx;\n        const py = y * imageHeightPx;\n        if (!covered || !tiles.length) {\n            this.ctx.clearRect(px, py, imageWidthPx, imageHeightPx);\n        }\n        tiles.map(t => t.sprite.drawTo(this.ctx, px, py));\n    }\n\n    /**\n     * Directly export the underlying terrain map, for serialization.\n     */\n    getDirectMap() {\n        return this.terrain;\n    }\n\n    /**\n     * Import a serialized tile map, over the current data.\n     * @param newTerrain\n     */\n    setDirectMap(newTerrain: ProtoBoard) {\n        if (!newTerrain.terrain) throw Error('Malformed packet.')\n        for (const k of Object.keys(this.terrain)) {\n            const t = this.terrain[k][0];\n            this.removeAt(t.x, t.y, true);\n        }\n\n        for (const k of newTerrain.terrain.tiles.sort((a, b) => a.z - b.z)) {\n            const sp = newTerrain.terrain.sprites[k.spriteIdx];\n            this.placeAt(k.x, k.y, new Tile(new Sprite(sp.id, sp.idx)), false, false);\n        }\n        for (const k of Object.keys(this.terrain)) {\n            this.redrawAt(this.terrain[k][0].x, this.terrain[k][0].y)\n        }\n    }\n\n    private static mkKey(x: number, y: number): string {\n        return `${x},${y}`;\n    }\n}\n","\nexport default abstract class Middleware {\n    private ele: HTMLElement|null = null;\n    private hooks: any[] = [];\n\n    public eject() {\n        this.hooks.forEach(h => h());\n        this.onCleanup();\n        this.ele = null;\n    }\n\n    public attach(ele: HTMLElement) {\n        this.ele = ele;\n        this.register();\n    }\n\n    /** Attach an event listener that is automatically cleaned up when this middleware is ejected.\n     * The `cb` callback should return `true` if the event should stop here. */\n    protected listen(event: string, cb: any, target?: HTMLElement|Window): Function {\n        const wrapped = (event: Event) => {\n            const res = cb(event);\n            if (res) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            return res;\n        };\n        const trg = target || this.ele;\n        const rem = () => trg?.removeEventListener(event, wrapped);\n        trg?.addEventListener(event, wrapped);\n        this.hooks.push(rem);\n        return rem;\n    }\n\n    /** Called once an element is registered and ready to call `listen()`. */\n    protected abstract register(): void;\n    /** Called after all hooks have been cleaned up. */\n    protected abstract onCleanup(): void;\n}\n","import Middleware from \"./middleware\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport EntityLayer, {EntityEle} from \"../controllers/entities\";\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\nexport default class EntityMiddleware extends Middleware {\n    private ent: EntityEle|null = null;\n    private readonly container: HTMLElement;\n    private moveListener: Function|null = null;\n    private movePoints: Point[] = [];\n    private moveTrackers: HTMLElement[] = [];\n    private entityLayer: EntityLayer;\n\n    constructor(container: HTMLElement, entLayer: EntityLayer) {\n        super();\n        this.container = container;\n        this.entityLayer = entLayer;\n    }\n\n    public setTarget(entEle: EntityEle|null) {\n        this.ent = entEle;\n        this.clearMover();\n        if (this.ent) {\n            this.entityLayer.toggleInput(false);\n            this.ent.bringToFront();\n            this.moveListener = this.listen('pointermove', (ev: PointerEvent) => {\n                const [x, y] = EntityMiddleware.toGrid(ev);\n                this.addPoint(x, y);\n                return true;\n            }, this.container);\n        }\n    }\n\n    register(): void {\n        this.listen('pointerup', (ev: PointerEvent) => {\n            if (this.moveListener) {\n                this.entityLayer.toggleInput(true);\n                return this.clearMover();\n            }\n        }, window);\n    }\n\n    private clearMover(): boolean {\n        this.moveTrackers.forEach(mp => mp.remove());\n        this.moveTrackers = [];\n        this.movePoints = [];\n        if (this.moveListener) {\n            this.moveListener();\n            this.moveListener = null;\n            return true;\n        }\n        return false;\n    }\n\n    private addPoint(x: number, y: number) {\n        const last = this.movePoints[this.movePoints.length-1];\n        if (last && last.x === x && last.y === y) return;\n\n        const idx = this.movePoints.findIndex(p => p.x === x && p.y === y);\n        if (idx >=0) {\n            this.movePoints.splice(idx, this.movePoints.length);\n        }\n        this.movePoints.push({x, y});\n        this.checkDiag();\n        this.redrawPath();\n        if (this.ent) {\n            this.entityLayer.updateEntity(this.ent.entity.id,{x, y});\n        }\n    }\n\n    private checkDiag() {\n        if (this.movePoints.length < 3) return;\n        const last = this.movePoints[this.movePoints.length - 1];\n        const third = this.movePoints[this.movePoints.length - 3];\n        const dist = EntityMiddleware.distance(third, last);\n\n        if (dist < 2) {\n            // Corner we can cut!\n            this.movePoints.splice(this.movePoints.length-2, 1);\n        }\n    }\n\n    private static distance(p1: Point, p2: Point) {\n        return Math.sqrt(Math.pow(p1.x-p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    }\n\n    private pathLength(): number {\n        let val = 0;\n        this.movePoints.reduce((prev, next) => {\n            let dst = EntityMiddleware.distance(prev, next);\n            if (dst > 1) dst = 1.5;\n            val += dst;\n            return next;\n        })\n\n        return Math.floor(val);\n    }\n\n    private redrawPath() {\n        this.moveTrackers.forEach(mp => mp.remove());\n        this.moveTrackers = [];\n\n        let id = 0;\n\n        for (const p of this.movePoints) {\n            const ele = document.createElement('div');\n            ele.className = 'entityMoveTracker';\n            Object.assign(ele.style, {\n                width: `${imageWidthPx}px`,\n                height: `${imageHeightPx}px`,\n                left: `${p.x*imageWidthPx}px`,\n                top: `${p.y*imageHeightPx}px`\n            });\n            if (++id === this.movePoints.length) {\n                ele.innerText = `${this.pathLength()*5}`;\n            }\n            this.moveTrackers.push(ele);\n            this.container.append(ele);\n        }\n    }\n\n    private static toGrid(ev: any) {\n        const x = Math.floor(ev.offsetX/imageWidthPx);\n        const y = Math.floor(ev.offsetY/imageHeightPx);\n        return [x, y]\n    }\n\n    protected onCleanup(): void {\n        this.clearMover();\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport EntityLayer, {Entity} from \"../../controllers/entities\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"../packets/entityPackets\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoSprite} from \"../../data/protobufs/proto-sprite\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\nexport default class EntityUpdateHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [EntityUpdatePacket, EntityDeletePacket];\n    private readonly entities: EntityLayer;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    async clientHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n                if (!this.entities.updateEntity(ent.id, {\n                    ...ent,\n                    sprite\n                }, false)) {\n                    console.debug('Adding new entity:', ent);\n                    this.entities.addEntity(sprite, { ...ent, sprite }, false)\n                }\n            }\n        } else if (packet instanceof EntityDeletePacket) {\n            console.debug('Deleting:', packet.entityID);\n            this.entities.remove(packet.entityID, false);\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                if (!this.entities.entityIsOwned(ent.id, client.userData.username)) {\n                    throw Error('Client attempted to edit entity the do not own!')\n                }\n                this.entities.updateEntity(ent.id, {\n                    x: ent.x,\n                    y: ent.y\n                });\n            }\n        } else {\n            throw Error(`Client sent invalid Entity packet! ${typeof packet}`)\n        }\n    }\n\n    static sendUpdate(entity: Entity) {\n        if (!entity.canMove() || !entity.visible) return;\n        const proto = new ProtoEntity().assign({\n            ...entity,\n            sprite: new ProtoSprite().assign({...entity.sprite}),\n            owners: Array.from(entity.owners)\n        });\n        const packet = new EntityUpdatePacket().assign({entities: [proto]});\n        broadcast(packet, false);\n    }\n\n    static sendDelete(entity: Entity) {\n        if (!entity.canMove()) return;\n        const packet = new EntityDeletePacket().assign({entityID: entity.id});\n        console.debug(packet);\n        broadcast(packet, true);\n    }\n}\n\n","import {Sprite} from \"../util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {v4 as uuid} from 'uuid';\nimport EntityMiddleware from \"../middleware/entity-events\";\nimport {observable} from \"mobx\";\nimport {isHost} from \"../net/peerconnection\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport {currentUsername} from \"../db/metadata-db\";\nimport {EntityInterface} from \"../data/interfaces/entity\";\n\n\nexport class Entity implements EntityInterface{\n    @observable sprite: Sprite;\n    @observable name: string;\n    @observable color: string = '#000000';\n    id: string;\n    x: number = 0;\n    y: number = 0;\n    @observable visible: boolean = true;\n    @observable owners: string[] = [];\n    @observable saveToCampaign: boolean = false;\n\n    constructor(sprite: Sprite, init?: Partial<Entity>) {\n        this.sprite = sprite;\n        this.id = uuid();\n        this.name = this.id;\n        if (init) {\n            Object.assign(this, init)\n        }\n    }\n\n   canMove() {\n        return isHost() || this.owners.includes(currentUsername.get());\n   }\n}\n\nexport class NamePlate {\n    static plates: NamePlate[] = [];\n    static updateTimer: any = null;\n    private readonly ele = document.createElement('div');\n    private targY: number = 0;\n    protected x: number = 0;\n    protected y: number = 0;\n    public width: number = 0;\n    public height: number = 0;\n    private parent: HTMLElement;\n    private color: string;\n\n    constructor(text: string, color: string, parent: HTMLElement) {\n        this.ele.className = 'entityNamePlate';\n        this.parent = parent;\n        this.color = color;\n        NamePlate.plates.push(this);\n        this.update(text, this.x, this.y, this.color,false);\n    }\n\n    public update(name: string, x: number, y: number, color: string, redraw: boolean = true) {\n        this.x = x;\n        this.y = y;\n        this.targY = y;\n        this.color = color;\n        this.ele.innerText = name;\n\n        if (redraw) NamePlate.plates.map(p => p.reposition()); // Update all plate positions, since one has moved.\n    }\n\n    reposition() {\n        this.y = this.targY;\n        this.width = this.ele.offsetWidth;\n        this.height = this.ele.offsetHeight;\n\n        for (let i=0; i < 10; i+=1) {\n            if (NamePlate.plates.some(o => o !== this && this.overlaps(o))) {\n                this.y -= this.height+1;\n            }\n        }\n\n        Object.assign(this.ele.style, {\n            position: 'absolute',\n            top: `${this.y}px`,\n            left: `${this.x}px`,\n            color: this.color\n        });\n    }\n\n    public overlaps(other: NamePlate) {\n        return !(this.x > other.right ||\n            this.right < other.x ||\n            this.y > other.bottom ||\n            this.bottom < other.y);\n    }\n\n    public bringToFront() {\n        this.parent.append(this.ele);\n    }\n\n    public remove() {\n        this.ele.remove();\n        NamePlate.plates = NamePlate.plates.filter(n => n !== this);\n    }\n\n    get right() {\n        return this.x + this.width;\n    }\n\n    get bottom() {\n        return this.y + this.height;\n    }\n}\n\n\nexport class EntityEle {\n    public readonly ele = document.createElement('canvas');\n    public readonly namePlate: NamePlate;\n    public readonly entity: Entity;\n    private redrawTimer: any = null;\n    private readonly ctx: CanvasRenderingContext2D;\n    private readonly parent: HTMLElement;\n    private readonly onClick: Function;\n\n    constructor(parent: HTMLElement, plateParent: HTMLElement, entity: Entity, onClick: Function) {\n        this.parent = parent;\n        this.entity = entity;\n        this.onClick = onClick;\n        // @ts-ignore\n        this.ctx = this.ele.getContext('2d');\n        this.ele.width = imageWidthPx;\n        this.ele.height = imageHeightPx;\n        this.ele.className = 'entityWrapper';\n        this.ele.addEventListener('pointerdown', () => {\n            if (this.entity.canMove()) this.onClick(this)\n        });\n\n        this.namePlate = new NamePlate(entity.name, entity.color, plateParent);\n\n        this.ele.style.opacity = this.entity.visible ? '1' : '0.5';\n        this.reposition();\n        this.bringToFront();\n        this.redraw();\n    }\n\n    internalUpdate(props: Partial<Entity>) {\n        Object.assign(this.entity, props);\n        this.ele.style.opacity = this.entity.visible ? '1' : '0.5';\n        this.reposition();\n        if (this.redrawTimer === null) this.redraw()\n    }\n\n    remove() {\n        if (this.redrawTimer !== null) {\n            clearTimeout(this.redrawTimer);\n        }\n        this.ele.remove();\n        this.namePlate.remove();\n    }\n\n    redraw() {\n        requestAnimationFrame(() => {\n            this.ctx.clearRect(0, 0, this.ele.width, this.ele.height);\n            this.entity.sprite.drawTo(this.ctx, 0, 0);\n\n            if (this.redrawTimer !== null) {\n                clearTimeout(this.redrawTimer);\n                this.redrawTimer = null;\n            }\n            if (this.entity.sprite.animated) {\n                this.redrawTimer = setTimeout(this.redraw.bind(this), 200);\n            } else {\n                this.redrawTimer = null;\n            }\n        });\n    }\n\n    private reposition() {\n        Object.assign(this.ele.style, {\n            position: 'absolute',\n            top: `${this.entity.y * imageHeightPx}px`,\n            left: `${this.entity.x * imageWidthPx}px`,\n            cursor: 'pointer'\n        });\n\n        this.namePlate.update(\n            this.entity.name,\n            this.entity.x * imageWidthPx + imageWidthPx/2,\n            this.entity.y * imageHeightPx - 14,\n            this.entity.color\n        )\n    }\n\n    bringToFront() {\n        this.parent.append(this.ele);\n        this.namePlate.bringToFront();\n    }\n\n    setInput(useInput: boolean) {\n        Object.assign(this.ele.style, {\n            'pointer-events': useInput ? 'auto' : 'none'\n        });\n    }\n}\n\nexport default class EntityLayer {\n    private readonly entityElements: Record<string, EntityEle> = {};\n    private readonly ele: HTMLElement;\n    private readonly plateEle: HTMLElement;\n    public boardWidth: number = 0;\n    public boardHeight: number = 0;\n    private enableInput: boolean = true;\n    @observable public selected: EntityEle|null = null;\n    @observable public isDirty: boolean = false;\n    private middleware: EntityMiddleware;\n\n    constructor(tileWidth: number, tileHeight: number) {\n        this.ele = document.createElement('div');\n        this.ele.className = 'entityContainer';\n        this.plateEle = document.createElement('div');\n        this.plateEle.className = 'plateContainer';\n        this.middleware = new EntityMiddleware(this.ele, this);\n        this.middleware.attach(this.ele);\n\n        this.resizeBoard(tileWidth, tileHeight);\n    }\n\n    private resizeBoard(width: number, height: number) {\n        this.boardWidth = width;\n        this.boardHeight = height;\n        for (const {entity} of Object.values(this.entityElements)) {\n            const x = entity.x;\n            const y = entity.y;\n            if (x > this.boardWidth || y > this.boardHeight) {\n                this.remove(entity.id);\n            }\n        }\n    }\n\n    /**  Derive new tile widthxheight whenever this canvas is resized. */\n    public setSize(width: number, height: number) {\n        Object.assign(this.ele.style, { width: `${width}px`, height: `${height}px`});\n        Object.assign(this.plateEle.style, { width: `${width}px`, height: `${height}px`});\n        this.resizeBoard(Math.floor(width/imageWidthPx), Math.floor(height/imageHeightPx));\n    }\n\n    public remove(id: string, sendUpdate: boolean = true): boolean {\n        const existing = this.entityElements[id];\n        if (existing) {\n            this.entityElements[id].remove();\n            delete this.entityElements[id];\n            if (sendUpdate) EntityUpdateHandler.sendDelete(existing.entity);\n        }\n        if (existing === this.selected) this.selected = null;\n        return !!existing;\n    }\n\n    public addEntity(sprite: Sprite, opts?: Partial<Entity>, sendUpdate: boolean = true) {\n        const ent = new Entity(sprite, opts);\n        const entEle = new EntityEle(this.ele, this.plateEle, ent, this.select.bind(this));\n\n        this.remove(ent.id, sendUpdate);\n\n        entEle.setInput(this.enableInput);\n        this.entityElements[ent.id] = entEle;\n\n        if (sendUpdate) {\n            EntityUpdateHandler.sendUpdate(ent);\n            this.isDirty = true;\n        }\n\n        // Upon creation, we need a frame for the bounding box to update with the new name:\n        if (NamePlate.updateTimer !== null) clearTimeout(NamePlate.updateTimer);\n        NamePlate.updateTimer = setTimeout(() => NamePlate.plates.map(p => p.reposition()), 1);\n\n        return ent;\n    }\n\n    public select(entEle: EntityEle|null) {\n        this.selected = entEle;\n        console.debug('Selected entity:', this.selected);\n        this.middleware.setTarget(entEle);\n        if (this.selected) {\n            Object.values(this.entityElements).forEach(e => {\n                if (e !== this.selected) e.setInput(false)\n            });\n        }\n    }\n\n    public entityIsOwned(id: string, checkOwner: string) {\n        const existing = this.entityElements[id];\n        if (existing) {\n            return existing.entity.owners.includes(checkOwner);\n        }\n        return false;\n    }\n\n    public updateEntity(id: string, props: Partial<Entity>, sendUpdate: boolean=true) {\n        const existing = this.entityElements[id];\n        if (existing) {\n            existing.internalUpdate(props);\n            if (sendUpdate) {\n                EntityUpdateHandler.sendUpdate(existing.entity);\n                this.isDirty = true;\n            }\n        }\n        return !!existing;\n    }\n\n    public toggleInput(enabled: boolean, acceptHover: boolean = true) {\n        if (enabled !== this.enableInput) {\n            this.enableInput = enabled;\n            Object.values(this.entityElements).forEach(ent => {\n                ent.setInput(enabled);\n            });\n            Object.assign(this.ele.style, {\n                'pointer-events': (!acceptHover || this.enableInput) ? 'none' : 'auto'\n            });\n        }\n    }\n\n    /**\n     * Directly export the underlying terrain map, for serialization.\n     */\n    getEntityList() {\n        return Object.values(this.entityElements).map(e => e.entity);\n    }\n\n    public appendTo(ele: HTMLDivElement) {\n        ele.append(this.ele);\n        ele.append(this.plateEle)\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport abstract class PreCheck {\n    protected readonly controller: GameController;\n    run: OmitThisParameter<(isHost: boolean, client: Client) => Promise<void>>;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n        this.run = this.runHandler.bind(this);\n    }\n\n    private async runHandler(isHost: boolean, client: Client){\n        return isHost ? this.host(client) : this.client(client);\n    }\n\n    abstract async client(client: Client): Promise<void>;\n    abstract async host(client: Client): Promise<void>;\n}\n","import {db} from './database';\n\nexport interface UserData {\n    id: number;\n    username: string;\n    keyCodes: string[];\n    lastSeen: number;\n}\n\n\nexport async function addNewUser(user: Partial<UserData>): Promise<UserData> {\n    const data = {\n        id: 0,\n        username: '',\n        keyCodes: [],\n        ...user,\n        lastSeen: new Date().getTime()\n    };\n    await db.users.put(data);\n    return data;\n}\n\nexport async function updateUser(user: UserData): Promise<number> {\n    return db.users.update(user.id, user);\n}\n\nexport async function getUser(username: string): Promise<UserData|null> {\n    return db.users.where({username}).first();\n}\n\n/**\n * Checks if the given User code matches an existing username.\n * If so, also updates the lastSeen time of the user.\n * @param userName\n * @param keyCode\n */\nexport async function checkUserCredentials(userName: string, keyCode: string): Promise<UserData> {\n    const match = await db.users.where({username: userName, keyCodes: keyCode}).first();\n\n    if (match) {\n        match.lastSeen = new Date().getTime();\n        await updateUser(match);\n    }\n\n    return match;\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {addNewUser, checkUserCredentials, getUser, updateUser} from \"../../db/user-db\";\nimport {Meta, metadata} from '../../db/metadata-db';\nimport {ReadyPacket, SignaturePacket} from \"../packets/util-packets\";\n\n\nexport default class HandShakeCheck extends PreCheck {\n    /**\n     * Accepts a signed JSON packet, and validates the signature.\n     * The validation is an async race condition, so responds with an OK packet once finished.\n     * @param client\n     */\n    async client(client: Client): Promise<void> {\n        const username = await metadata.get(Meta.USERNAME);\n        const packet = new SignaturePacket().assign({\n            username\n        });\n        await client.send(packet);\n\n        await client.getNextPacket(ReadyPacket); // Wait for host to allow out login.\n    }\n\n    /**\n     * Sends a signed JSON packet, to validate this host ID.\n     * Awaits an OK Packet from the client, once validation is complete.\n     * @param client\n     */\n    async host(client: Client): Promise<void> {\n        // Wait for client to send a message containing username:\n        const data: SignaturePacket = await client.getNextPacket(SignaturePacket);\n        const {username} = data;\n\n        let user = await checkUserCredentials(username, client.id);\n        if (!user) {\n            let existing = await getUser(username);\n\n            await this.controller.lobby.addPendingLogin(username, client.id);  // Will be approved via UI, by the Host.\n\n            if (!existing) {\n                console.log(`Added new user: ${username}, ${client.id}`);\n                existing = await addNewUser({username, keyCodes: [client.id]});\n            } else {\n                console.log(`Updated existing user: ${username}, ${client.id}`);\n                existing.keyCodes.push(client.id);\n                await updateUser(existing);\n            }\n            user = existing;\n        }\n\n        client.userData = user;\n        await client.send(new ReadyPacket())\n    }\n}\n\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\n\n\nexport default class BoardSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        await client.send(await this.controller.buildProtoBoard(false));\n    }\n}\n","import {observable} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\n\n\nexport interface PendingUser {\n    username: string;\n    keyCode: string;\n    approve: Function;\n    reject: Function;\n}\n\nexport default class Lobby {\n    @observable public readonly pendingLogins: PendingUser[] = [];\n    @observable public myName: string = '';\n    private readonly blacklist: Set<String> = new Set();\n\n    private notify(title: string, body: string, iconURL: string='') {\n        Notification.requestPermission().then(function(result) {\n            if (result === 'granted') {\n                new Notification(title, {\n                    body,\n                    icon: iconURL // TODO: Path to alert icon image.\n                });\n            }\n        });\n    }\n\n    /**\n     * Adds the given login attempt to the pending list,\n     * and returns a Promise that will either resolve or reject eventually at the Hosts' discretion.\n     * @param username\n     * @param keyCode\n     */\n    public async addPendingLogin(username: string, keyCode: string) {\n        return new Promise((approve, reject) => {\n            const existing = Array.from(this.pendingLogins).find(pe => pe.keyCode === keyCode);\n            const pending = { username, keyCode, approve, reject };\n\n            if (existing) {\n                this.removePending(existing);\n            }\n            this.pendingLogins.push(pending);\n\n            if (!this.blacklist.has(keyCode)) {\n                notifications.warning(`Unknown device (${keyCode}) wants to join as \"${username}\".`, {});\n                this.notify('New Unknown User', `Unknown device (${keyCode}) wants to join as \"${username}\".`);\n            }\n        });\n    }\n\n    public approveUser(user: PendingUser) {\n        user.approve(true);\n        notifications.success(`Approved user \"${user.username}\".`)\n        this.removePending(user);\n    }\n\n    public rejectUser(user: PendingUser) {\n        user.reject(false);\n        notifications.error(`Rejected device (${user.keyCode}).`)\n        this.removePending(user);\n        this.blacklist.add(user.keyCode);\n    }\n\n    private removePending(user: PendingUser) {\n        const idx = this.pendingLogins.findIndex(u => u.keyCode === user.keyCode);\n        if (idx >= 0) {\n            this.pendingLogins.splice(idx, 1);\n        }\n    }\n}\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {PingPacket} from \"../packets/util-packets\";\nimport {Client} from \"../peerconnection\";\n\n\nexport default class PingHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [PingPacket];\n\n    async clientHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    private static handlePing(client: Client) {\n        client.lastPing = Date.now();\n    }\n}\n","import {db} from './database';\nimport Dexie from \"dexie\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as encoder  from '../net/messageEncoder'\nimport notifications from \"../../ui-components/notifications\";\n\nexport interface BoardWrapper {\n    name: string;\n    campaignID: number;\n    data: Uint8Array;\n}\n\n\nexport async function save(campaignID: number, name: string, board: ProtoBoard) {\n    try {\n        console.log('Persistent storage enabled:', await navigator.storage.persist());\n    } catch (err) {\n        console.error(err);\n    }\n    return db.boards.put({\n        name,\n        campaignID,\n        data: await encoder.encode(board)\n    }).catch(err => {\n        notifications.error('Error saving board!');\n        console.error(err);\n    })\n}\n\nexport async function load(campaignID: number, name: string): Promise<null|ProtoBoard> {\n    const res: BoardWrapper|null = await db.boards.where({campaignID, name}).first().catch(err => {\n        notifications.error('Error loading board!');\n        console.error(err);\n    })\n\n    if (res) {\n        return encoder.decode(res.data);\n    } else {\n        return null;\n    }\n}\n\nexport async function getAvailable(campaignID: number): Promise<string[]> {\n    try {\n        return (await db.boards.where('[campaignID+name]').between([campaignID, Dexie.minKey], [campaignID, Dexie.maxKey]).toArray()).map(b=>b.name);\n    } catch(err) {\n        notifications.error('Error fetching available boards!');\n        console.error(err);\n        return [];\n    }\n}\n\n\nexport async function deleteBoard(campaignID: number, name: string) {\n    return db.boards.where({campaignID, name}).delete();\n}\n","import {observable} from \"mobx\";\nimport {EntityInterface} from \"../data/interfaces/entity\";\n\nexport default class Campaign {\n    public readonly name: string;\n    @observable public boards: string[] = [];\n    @observable public loadedBoard: string|null = null;\n    @observable.shallow public readonly characters: EntityInterface[] = [];\n    public readonly id: number = -1;\n    public readonly timeCreated = Date.now();\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n","/**\n * Strip out any proxied observables, and convert them to standard values.\n * @param obj\n */\nexport default function stripProxy(obj: any): any {\n    const ret = {};\n    for (const e of Object.entries(obj)) {\n        let v = e[1];\n\n        if (v instanceof Array) {\n            v = Array.from(v);\n        }\n        // @ts-ignore\n        ret[e[0]] = v;\n    }\n    return ret;\n}\n","import Campaign from \"../controllers/campaign\";\nimport stripProxy from \"../util/deproxy\";\nimport {db} from './database';\n\ndb.campaigns.mapToClass(Campaign);\n\nexport async function saveCampaign(camp: Campaign) {\n    console.info('Saved campaign:', camp);\n    return db.campaigns.update(camp.id, stripProxy(camp));\n}\n\nexport async function createCampaign(name: string): Promise<any> {\n    const obj = {...new Campaign(name), id: null};\n    delete obj.id;\n\n    const res = await db.campaigns.put(stripProxy(obj));\n    console.info('Saved new campaign:', res);\n    return db.campaigns.get({id: res});\n}\n\nexport async function getAllCampaigns(): Promise<Campaign[]> {\n    return db.campaigns.toArray()\n}\n\nexport async function getCampaign(id: number): Promise<Campaign|null> {\n    return db.campaigns.where({id}).first()\n}\n","import {getAllCampaigns, getCampaign, saveCampaign, createCampaign} from \"../db/campaign-db\";\nimport * as boardDB from '../db/board-db';\nimport Campaign from \"../controllers/campaign\";\n\n\nexport default class CampaignLoader {\n    /**\n     * Get an array of all saved Campaign objects.\n     */\n    public static async getAvailable(): Promise<Campaign[]> {\n        return getAllCampaigns()\n    }\n\n    /**\n     * Load a Campaign object from the db, using its unique ID.\n     * @param id\n     */\n    public static async loadCampaign(id: number): Promise<Campaign|null> {\n        const campaign = await getCampaign(id);\n\n        if (campaign) campaign.boards = await boardDB.getAvailable(id);\n\n        if (campaign && campaign.loadedBoard && !campaign.boards.includes(campaign.loadedBoard)) {\n            campaign.loadedBoard = null;\n        }\n\n        return campaign;\n    }\n\n    /**\n     * Save an existing Campaign object back to the database.\n     * @param camp\n     */\n    public static async saveCampaign(camp: Campaign): Promise<number> {\n        return saveCampaign({\n            ...camp,\n            boards: Array.from(camp.boards),\n            characters: Array.from(camp.characters)\n        }).catch(err => {\n            console.error(err)\n            return -1;\n        });\n    }\n\n    /**\n     * Create a new Campaign object, pre-saved in the database.\n     * @param name\n     */\n    public static async createCampaign(name: string): Promise<Campaign> {\n        return createCampaign(name);\n    }\n}\n\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard} from \"../../data/protobufs/proto-tiles\";\nimport {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport default class BoardReloadHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [ProtoBoard];\n    private readonly controller: any;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n    async clientHandler(client: Client, packet: ProtoBoard): Promise<void> {\n        return this.controller.loadFromProtoBoard(packet);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client tried to send Board Update!')\n    }\n}\n","import React from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField\n} from \"@material-ui/core\";\n\nexport function InputDialog(props: {\n    open: boolean\n    title: string,\n    body: string,\n    tooltip: string,\n    onSubmit: Function,\n    onCancel: Function,\n    acceptText?: string\n}) {\n    const [text, setText] = React.useState('');\n\n    const handleClose = () => {\n        props.onCancel();\n    };\n    const handleText = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setText(event.target.value);\n    }\n\n    return (\n        <div>\n            <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {props.body}\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label={props.tooltip}\n                        type=\"text\"\n                        fullWidth\n                        value={text}\n                        onChange={handleText}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => {\n                        handleClose();\n                        props.onCancel()\n                    }} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => {\n                        props.onSubmit(text);\n                        setText('')\n                    }} color=\"primary\">\n                        {props.acceptText || 'Connect'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n\n\nexport default function ConfirmPrompt(props: {\n    open: boolean,\n    onCancel: any,\n    onConfirm: any,\n    title: string,\n    prompt: string,\n    confirmButton?: string,\n    cancelButton?: string\n}) {\n    return (\n        <div>\n            <Dialog\n                open={props.open}\n                onClose={props.onCancel}\n                aria-labelledby=\"confirm-dialog-title\"\n                aria-describedby=\"confirm-dialog-description\"\n            >\n                <DialogTitle className=\"confirm-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText className=\"prompt-dialog-description\">\n                        {props.prompt}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onCancel} color=\"primary\">\n                        {props.cancelButton||'cancel'}\n                    </Button>\n                    <Button onClick={props.onConfirm} color=\"primary\" autoFocus>\n                        {props.confirmButton||'confirm'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from 'react';\nimport '../styles/yt-player-style.scss';\nimport YouTube from 'react-youtube';\nimport {broadcast, netMode, NetworkMode, isHost} from \"../game/net/peerconnection\";\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport {Button, Fab, IconButton, Tooltip} from \"@material-ui/core\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../game/net/packets/media-packets\";\nimport {observer} from \"mobx-react-lite\";\nimport {InputDialog} from \"./prompts\";\nimport {observable} from \"mobx\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\n\nconst PLAYER_OPTS = {\n    playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        mute: 0\n    },\n};\n\ninterface PlayerConfig {\n    volume: number;\n    loop: boolean;\n    shuffle: boolean;\n}\n\nconst config: PlayerConfig = observable.object({\n    volume: 100,\n    loop: true,\n    shuffle: true\n});\n\nfunction saveConf() {\n    metadata.store(Meta.PLAYER_CONFIG, config).catch(console.error);\n}\n\n/**\n * The current player. There should only ever be one at a time. May be null until initialized.\n */\nexport let player: any = null;\n\n/**\n * Get a summary of the currently-playing media, if any is available.\n */\nexport const getPlayerStatus = (): Partial<MediaStatusPacket>|null => {\n    if (!player) return null;\n\n    const currentVideo: string = player.getVideoData().video_id;\n    const currentTime: number = Math.floor(player.getCurrentTime());\n    const playbackRate: number = player.getPlaybackRate();\n    const paused: boolean = player.getPlayerState() === YouTube.PlayerState.PAUSED;\n\n    if (!currentVideo) return null;\n\n    return {\n        currentVideo,\n        currentTime,\n        playbackRate,\n        paused\n    }\n};\n\n\nexport const YoutubePlayerInterface = observer(() => {\n    const [visible, setVisible] = React.useState(false);\n\n    React.useMemo(() => {\n        metadata.get(Meta.PLAYER_CONFIG).then(async (res: PlayerConfig|null) => {\n            if (res) {\n                Object.assign(config, res);\n            }\n        })\n    }, []);\n\n    const tools = (netMode.get() === NetworkMode.HOST && player) ?\n        <div className={'ytPlayerHostToolbar'}>\n            <LoadVideoButton player={player} />\n            <LoadPlaylistButton player={player} />\n            <ShuffleButton player={player}/>\n        </div> : null;\n\n    return <div style={{pointerEvents: 'auto'}} className={`ytPlayerIcon ${visible? 'visible':'hidden'}`}>\n        <Tooltip\n            title={\"Media Controls\"}\n        >\n            <Fab\n                color=\"default\"\n                onClick={()=>{setVisible(!visible)}}\n            >\n                <YouTubeIcon className={`ytPlayerIconInner ${visible? 'visible':'hidden'}`} />\n            </Fab>\n        </Tooltip>\n\n        <div className={`ytPlayerWrapper ${visible? 'visible':'hidden'}`}>\n            {tools}\n            <YoutubePlayer\n                loop={config.loop}\n                shuffle={config.shuffle}\n                volume={config.volume}\n            />\n        </div>\n    </div>;\n});\n\n\nexport const YoutubePlayer = (props: {loop: boolean, shuffle: boolean, volume: number}) => {\n    const [mediaPlayer, setPlayer] = React.useState<any>(null);\n\n    React.useEffect(() => {\n        if (!mediaPlayer) return;\n\n        player = mediaPlayer;\n\n        if (!isHost()) broadcast(new MediaRequestPacket(), false).catch(console.error);\n\n        const timer = setInterval(() => {\n            // Periodically poll for a new user-set volume, and save the new result.\n            const v = mediaPlayer.getVolume();\n            if (mediaPlayer.getPlayerState() === YouTube.PlayerState.PLAYING && v !== config.volume) {\n                config.volume = v;\n                saveConf();\n            }\n        }, 15000);\n\n        return () => {\n            player = null;\n            clearInterval(timer);\n        }\n    }, [mediaPlayer]);\n\n    const onReady = (event: any) => { // target, data\n        setPlayer(event.target);\n    }\n\n    const onPlay = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video play:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onPause = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video pause:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onError = (event: any) => {\n        event.target.nextVideo();\n    }\n\n    const onStateChange = (event: any) => {\n        /*  BUFFERING: 3, CUED: 5, ENDED: 0, PAUSED: 2, PLAYING: 1, UNSTARTED: -1 */\n        if (event.data === YouTube.PlayerState.CUED) {\n            console.info('Video/Playlist Cued!', mediaPlayer, mediaPlayer.getVideoData());\n            // Reference: https://developers.google.com/youtube/iframe_api_reference#onStateChange\n            mediaPlayer.setLoop(props.loop);  // Loop the playlist.\n            mediaPlayer.setShuffle(props.shuffle); // Can be toggled to shuffle/restore order.\n            mediaPlayer.setVolume(props.volume); // 0-100.\n\n            if (mediaPlayer.getPlaylist()) {\n                mediaPlayer.playVideoAt(0);\n            } else {\n                mediaPlayer.playVideo();\n            }\n        }\n    }\n\n    return <div style={{pointerEvents: 'auto'}}>\n        <YouTube\n            // @ts-ignore\n            opts={PLAYER_OPTS}\n            id={'yt-player'}\n            onReady={onReady}\n            onPlay={onPlay}\n            onPause={onPause}\n            onError={onError}\n            onStateChange={onStateChange}\n        />\n    </div>;\n};\n\n\nexport const LoadPlaylistButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadPlaylist = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input);\n        let id = parser.get('list') || input;\n\n        if (id.includes('=')) id = input.split('=')[1];\n\n        props.player.cuePlaylist({\n            list: id,\n            listType: 'playlist',\n            index: 0,\n            startSeconds: 0\n        });\n    };\n\n    return <div className={'ytPlayerPlaylistButton'}>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Playlist\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Playlist'}\n            body={'Enter a YouTube Playlist:'}\n            tooltip={'Playlist URL'}\n            onSubmit={loadPlaylist}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\nexport const LoadVideoButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadVideo = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input);\n        let id = parser.get('v') || input;\n\n        if (id.includes('=')) id = input.split('=')[1];\n\n        props.player.cueVideoById(id);\n    };\n\n    return <div className={'ytPlayerVideoButton'}>\n        <Button\n            style={{color: 'rgb(14,142,191)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Video\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Video'}\n            body={'Enter a YouTube Video:'}\n            tooltip={'Video URL'}\n            onSubmit={loadVideo}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\n\nexport const ShuffleButton = observer((props: {player: any}) => {\n    const toggle = () => {\n        config.shuffle = !config.shuffle;\n        props.player.setShuffle(config.shuffle);\n\n        saveConf();\n    }\n\n    return <Tooltip title={\"Shuffle\"}>\n        <IconButton\n            children={<ShuffleIcon className={`ytPlayerShuffleIcon ${config.shuffle ? 'active': 'inactive'}`}/>}\n            onClick={toggle}\n        />\n    </Tooltip>\n});\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {Client} from \"../peerconnection\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../packets/media-packets\";\nimport GameController from \"../../controllers/game\";\nimport notifications from \"../../../ui-components/notifications\";\nimport {getPlayerStatus, player} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSyncHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [MediaStatusPacket, MediaRequestPacket];\n    private readonly controller: GameController;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n\n    async clientHandler(client: Client, packet: MediaStatusPacket): Promise<void> {\n        if (!player) {\n            notifications.warning('Media not available yet.');\n            return;\n        }\n        if (packet.paused) {\n            player.pauseVideo();\n            return;\n        }\n        player.setPlaybackRate(packet.playbackRate);\n        player.cueVideoById({\n            videoId: packet.currentVideo,\n            startSeconds: packet.currentTime\n        });\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        if (packet instanceof MediaRequestPacket) {\n            const status = getPlayerStatus();\n\n            if (status) {\n                await client.send(new MediaStatusPacket().assign(status));\n            }\n        } else {\n            throw new Error('Client attempted to send media commands!');\n        }\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {MediaStatusPacket} from \"../packets/media-packets\";\nimport {getPlayerStatus} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        const status = getPlayerStatus();\n\n        if (status) {\n            await client.send(new MediaStatusPacket().assign(status));\n        }\n    }\n}\n","import {CanvasContainer} from \"./canvas\";\nimport {Sprite, waitForSpriteLoad} from \"../util/sprite-loading\";\nimport Terrain from \"./terrain\";\nimport {boardTileHeight, boardTileWidth, imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport * as connection from '../net/peerconnection'\nimport {broadcast, NetworkStatus, getMyID} from \"../net/peerconnection\";\nimport EntityLayer from \"./entities\";\nimport HandShakeCheck from \"../net/prechecks/signature-check\";\nimport BoardSync from \"../net/prechecks/board-sync-check\";\nimport {PreCheck} from \"../net/prechecks/precheck\";\nimport Handler from \"../net/handlers/handler\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport Lobby from \"./lobby\";\nimport PingHandler from \"../net/handlers/ping-handler\";\nimport Campaign from \"./campaign\";\nimport * as boardDB from \"../db/board-db\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as packer from \"../data/board-packer.worker\";\nimport {ProtoEntity} from \"../data/protobufs/proto-entity\";\nimport CampaignLoader from \"../data/campaign-loader\";\nimport BoardReloadHandler from \"../net/handlers/board-reload-handler\";\nimport MediaSyncHandler from \"../net/handlers/media-sync-handler\";\nimport MediaSync from \"../net/prechecks/media-sync\";\nimport {ProtoSprite} from \"../data/protobufs/proto-sprite\";\n\n\nexport default class GameController {\n    public canvasContainer: CanvasContainer;\n    public terrain: Terrain;\n    public entities: EntityLayer;\n    @observable public ready: boolean = false;\n    private readonly preChecks: PreCheck[];\n    private readonly handlers: Handler[];\n    public readonly lobby: Lobby;\n    @observable public campaign: Campaign|null = null;\n\n    constructor() {\n        this.canvasContainer = new CanvasContainer(1, 1);\n        this.terrain = new Terrain(boardTileWidth, boardTileHeight);\n        this.entities = new EntityLayer(boardTileWidth, boardTileHeight);\n        this.lobby = new Lobby();\n\n        // Initialize networking stuff:\n        this.preChecks = [\n            new HandShakeCheck(this),\n            new BoardSync(this),\n            new MediaSync(this)\n        ];\n        this.handlers = [\n            new TerrainAddHandler(this.terrain),\n            new TerrainEraseHandler(this.terrain),\n            new EntityUpdateHandler(this.entities),\n            new PingHandler(),\n            new BoardReloadHandler(this),\n            new MediaSyncHandler(this)\n        ];\n    }\n\n    /**\n     * Starts the main game client, waiting for the Sprite Loader to become ready.\n     * Also initializes any required keys or other async setup.\n     * Automatically starts the Client/Host connection if a URL Hash has been set already.\n     */\n    public async start() {\n        this.canvasContainer.addLayer(this.terrain);\n        this.canvasContainer.addLayer(this.entities);\n\n        await waitForSpriteLoad;\n        console.debug('Sprite loader ready!');\n\n        this.canvasContainer.setCanvasSize(boardTileWidth * imageWidthPx, boardTileHeight * imageHeightPx);\n\n        console.log('Local Room ID Key:', await getMyID());\n\n        const hash = window.location.hash.replace('#', '');\n        if (hash) {\n            if ((await getMyID()) === hash) {\n                // This is our URL - hosting.\n                await this.startHost();\n            } else {\n                // At someone else's URL - join them.\n                await this.startClient(hash);\n            }\n        }\n        this.ready = true;\n\n        // Treadmill to block back button:\n        window.history.pushState(null, document.title, window.location.href);\n        window.addEventListener('popstate', () => {\n            window.history.pushState(null, document.title, window.location.href);\n        });\n    }\n\n    public async startHost(): Promise<void> {\n        await connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Hosting lobby at:', await getMyID());\n        window.location.hash = await getMyID();\n\n        this.handlers.forEach(h => h.setHost(true));\n        connection.setHandlers(this.handlers, this.preChecks);\n\n        await connection.openHost();\n    }\n\n    public async startClient(connectID: string) {\n        await connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Connecting to host:', connectID);\n        window.location.hash = connectID;\n\n        this.handlers.forEach(h => h.setHost(false));\n        connection.setHandlers(this.handlers, this.preChecks)\n\n        await connection.connectTo(connectID);\n    }\n\n    get isNetworkReady() {\n        return connection.netStatus.get() === NetworkStatus.CONNECTED;\n    }\n\n    /**\n     * Loads the given board, and broadcasts the new board state to all clients.\n     * @param name\n     */\n    public async loadBoard(name: string): Promise<boolean> {\n        if (!this.campaign) return false;\n\n        this.campaign.loadedBoard = name;\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        const board: ProtoBoard|null = await boardDB.load(this.campaign.id, name);\n\n        if (!board) return false;  // Erase existing only if the loaded board actually exists.\n\n        await this.loadFromProtoBoard(board);\n\n        broadcast(await this.buildProtoBoard(false), true).catch(console.error);\n\n        this.terrain.isBoardDirty = false;  // May have triggered a \"redraw\", so reset these flags here.\n        this.entities.isDirty = false;\n\n        return true;\n    }\n\n    public async loadFromProtoBoard(pb: ProtoBoard) {\n        this.terrain.setDirectMap(pb);\n\n        this.entities.getEntityList().forEach(e => this.entities.remove(e.id, false));\n        pb.entities.forEach(ent => {\n            const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n            this.entities.addEntity(sprite, {\n                ...ent,\n                sprite\n            }, false)\n        });\n    }\n\n    public async buildProtoBoard(includeHidden: boolean = true) {\n        const tiles = Object.values(this.terrain.getDirectMap()).flat();\n        const pb = new ProtoBoard().assign(await packer.packBoard(tiles));\n\n        pb.entities = this.entities.getEntityList().filter(e=>includeHidden||e.visible).map(e => {\n            const sprite = new ProtoSprite().assign({id: e.sprite.id, idx: e.sprite.idx})\n            return new ProtoEntity().assign({\n                ...e,\n                sprite,\n                owners: Array.from(e.owners)\n            });\n        });\n\n        return pb;\n    }\n\n    public async saveBoard(): Promise<boolean> {\n        if (!this.campaign || !this.campaign.loadedBoard) return false;\n\n        const pb = await this.buildProtoBoard(true);\n        await boardDB.save(this.campaign.id, this.campaign.loadedBoard, pb);\n\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        await CampaignLoader.saveCampaign(this.campaign);\n\n        return true;\n    }\n\n    public async deleteBoard(campaign: Campaign, name: string): Promise<boolean> {\n        const idx = campaign.boards.indexOf(name);\n\n        if (idx < 0) {\n            return false;\n        }\n\n        campaign.boards.splice(idx, 1);\n\n        if (campaign.loadedBoard === name) {\n            campaign.loadedBoard = null;\n        }\n\n        await boardDB.deleteBoard(campaign.id, name);\n        await CampaignLoader.saveCampaign(campaign);\n\n        return true;\n    }\n}\n","import GameController from \"../game/controllers/game\";\n\n/**\n * A wrapper to connect the UI controls to the actual game, typically through middleware.\n * The interfaces generated should be agnostic of the platform, for maximum compatibility.\n */\nexport default abstract class UITool {\n    public readonly abstract name: string;\n    public readonly abstract icon: JSX.Element;\n    protected readonly controller: GameController;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n    }\n\n    abstract getControlUI(forMobile: boolean): JSX.Element|null;\n    abstract register(): any;\n    abstract unregister(): any;\n    abstract isOption(forMobile: boolean, isHost: boolean): boolean;\n}\n","import Middleware from \"./middleware\";\nimport Terrain from \"../controllers/terrain\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport {CanvasContainer} from \"../controllers/canvas\";\nimport EntityLayer from \"../controllers/entities\";\n\nexport default class PenMiddleware extends Middleware {\n    private readonly terrain: Terrain;\n    private state: number = -1;\n    private readonly canUsePen: boolean;\n    @observable public penSize: number = 1;\n    private container: CanvasContainer;\n    private readonly hoverBox: HTMLElement;\n    private readonly entities: EntityLayer;\n    private toggle: boolean = false;\n\n    constructor(terrain: Terrain, entities: EntityLayer, container: CanvasContainer, canUsePen: boolean=true) {\n        super();\n        this.terrain = terrain;\n        this.entities = entities;\n        this.container = container;\n        this.canUsePen = canUsePen;\n        this.hoverBox = document.createElement('div');\n    }\n\n    register(): void {\n        this.container.addElement(this.hoverBox);\n        this.entities.toggleInput(false, false);\n\n        this.listen('keydown', (ke: KeyboardEvent) => {\n            if (ke.code.startsWith('Shift') && !this.toggle) {\n                this.toggle = true;\n                this.entities.toggleInput(true);\n                this.hoverBox.remove();\n            }\n        }, document.body);\n\n        this.listen('keyup', (ke: KeyboardEvent) => {\n            if (ke.code.startsWith('Shift')) {\n                this.toggle = false;\n                this.entities.toggleInput(false, false);\n                this.container.addElement(this.hoverBox);\n            }\n        }, window);\n\n        this.listen('mousemove', (ev: MouseEvent) => {\n            this.updateHighlight(ev);\n        });\n\n        this.listen('pointerdown', (ev: PointerEvent) => {\n            if (ev.shiftKey) {\n                return;\n            }\n            if (ev.button === 1) {\n                // Middle mouse \"dropper\":\n                const [xx, yy] = PenMiddleware.toGrid(ev);\n                const sp = this.terrain.getAt(xx, yy);\n                if (sp.length) {\n                    this.terrain.selectedSprite = sp[sp.length-1].sprite;\n                    return true;\n                }\n            }\n            this.state = ev.button;\n            return this.draw(ev);\n        });\n\n        this.listen('pointerup', (ev: PointerEvent) => {\n            if (this.state >= 0) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.state = -1;\n            }\n        }, window);\n\n        this.listen('pointermove', (ev: PointerEvent) => {\n            return this.draw(ev);\n        });\n\n        this.listen('wheel', (ev: WheelEvent) => {\n            if (!ev.shiftKey) {\n                const out = Math.sign(ev.deltaY) * -1;\n                this.penSize = Math.max(1, Math.min(8, this.penSize += out));\n                this.updateHighlight(ev);\n                return true;\n            }\n        });\n    }\n\n    draw(ev: PointerEvent): boolean {\n        if (this.state >= 0) {\n            const [xx, yy] = PenMiddleware.toGrid(ev);\n            this.updateHighlight(ev);\n\n            switch (this.state) {\n                case 2:\n                    this.box(xx, yy, this.terrain.eraseAt.bind(this.terrain));\n                    break;\n                case 0:\n                    if (this.canUsePen) this.box(xx, yy, this.terrain.drawAt.bind(this.terrain));\n                    else if (!this.canUsePen) this.box(xx, yy, this.terrain.eraseAt.bind(this.terrain));\n            }\n            return true;\n        }\n        return false;\n    }\n\n    updateHighlight(ev: Event) {\n        const [x, y] = PenMiddleware.toGrid(ev);\n        Object.assign(this.hoverBox.style,{\n            border: '3px solid orangered',\n            left: `${x*imageWidthPx - (this.penSize-1) * imageWidthPx}px`,\n            top: `${y*imageHeightPx - (this.penSize-1) * imageHeightPx}px`,\n            width: `${(this.penSize*2-1) * imageWidthPx - 3}px`,\n            height: `${(this.penSize*2-1) * imageHeightPx - 3}px`,\n            position: 'absolute',\n            'pointer-events': 'none',\n            'z-index': 1\n        });\n    }\n\n    private static toGrid(ev: any) {\n        const x = Math.floor(ev.offsetX/imageWidthPx);\n        const y = Math.floor(ev.offsetY/imageHeightPx);\n        return [x, y]\n    }\n\n    private box(x: number, y: number, op: Function) {\n        for (let xx = x - (this.penSize-1); xx < x + this.penSize; xx++) {\n            for (let yy = y - (this.penSize-1); yy < y + this.penSize; yy++) {\n                op(xx, yy);\n            }\n        }\n    }\n\n    protected onCleanup(): void {\n        this.container.removeElement(this.hoverBox);\n        this.entities.toggleInput(true);\n    }\n}\n","import React from 'react';\nimport {FormControlLabel, Modal, Switch, TextField} from \"@material-ui/core\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport {searchImages, Sprite} from \"../game/util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from '../game/consts';\nimport '../styles/sprite-picker.scss'\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {FixedSizeGrid} from \"react-window\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Autocomplete} from \"@material-ui/lab\";\n\n\nexport default function SpritePicker (\n    props: {\n        onSelect: Function,\n        onSearch?: Function,\n        defaultTerm?: string,\n        selected?: Sprite|null,\n        animated?: boolean\n        canAnimate?: boolean\n    }) {\n    const [searchTerm, setSearch] = React.useState(props.defaultTerm || '');\n    const [animated, setAnimated] = React.useState(!!props.animated);\n    const [sprites, setSprites] = React.useState<Sprite[]>([]);\n\n    const handleChange = (value: string) => {\n        setSearch(value);\n        if (props.onSearch) {\n            props.onSearch(value);\n        }\n    };\n    const animChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAnimated(event.target.checked);\n    };\n\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const results = searchImages(searchTerm, animated, false);\n            setSprites(results);\n        }, 200)\n        return () => {\n            clearTimeout(timeout);\n        }\n    }, [searchTerm, animated]);\n\n\n    return <div style={{\n        maxWidth: '600px'\n    }}>\n        <form noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <FormGroup row>\n                <Autocomplete\n                    selectOnFocus={true}\n                    options={[]}\n                    style={{ width: 300 }}\n                    freeSolo={true}\n                    value={searchTerm}\n                    inputValue={searchTerm}\n                    onInputChange={(event, newInputValue) => {\n                        handleChange(newInputValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} label=\"Search Sprites!\" variant=\"outlined\" />}\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={animated}\n                            onChange={animChange}\n                            disabled={!props.canAnimate}\n                            name=\"checkedA\"\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        />\n                    }\n                    label=\"Animated\"\n                    labelPlacement=\"top\"\n                />\n            </FormGroup>\n        </form>\n        <div style={{height: '280px'}}>\n            <SpriteGrid sprites={sprites} onSelect={props.onSelect} selected={props.selected} />\n        </div>\n    </div>;\n}\n\n\nexport function SpriteGrid(props: {sprites: Sprite[], onSelect: Function, selected?: Sprite|null}) {\n    return <AutoSizer className={'autosizer'}>\n        {function size(size: { height: number, width: number }){\n            const wrapperSize = 52;\n            const perRow = Math.floor(size.width/wrapperSize);\n            const rowCount = Math.ceil(props.sprites.length/ perRow);\n\n            return <FixedSizeGrid\n                columnCount={perRow}\n                columnWidth={wrapperSize}\n                height={size.height}\n                width={size.width}\n                rowCount={rowCount}\n                rowHeight={wrapperSize}\n                className={'spriteGrid'}\n                style={{maxHeight: `${size.height}px`}}\n            >\n                {(data: { columnIndex: number, rowIndex: number, style: any }) => {\n                    const spr = props.sprites[data.columnIndex + data.rowIndex * perRow];\n                    if (spr) {\n                        return <div style={data.style}>\n                            <SpriteImage sprite={spr} onSelect={props.onSelect} selected={props.selected?.composite === spr.composite}/>\n                        </div>\n                    } else {\n                        return <div/>\n                    }\n                }}\n            </FixedSizeGrid>\n        }}\n    </AutoSizer>\n}\n\n\nexport function SpriteImage(props: {sprite: Sprite|null, onSelect?: Function, selected?: boolean}) {\n    const canv: any = React.useRef(null);\n    // @ts-ignore\n    const sel = props.onSelect ? () => props.onSelect(props.sprite) : ()=>{};\n\n    React.useEffect(() => {\n        const redraw = () => {\n            if (canv.current){\n                // @ts-ignore\n                const ctx: CanvasRenderingContext2D = canv.current.getContext('2d');\n                ctx.clearRect(0,0,canv.current.width, canv.current.height);\n                props.sprite?.drawTo(ctx, 0, 0);\n            }\n        };\n        const cancel: any = props.sprite?.animated ? setInterval(redraw, 200) : null;\n        redraw();\n\n        return () => {\n            if (cancel !== null) {\n                clearInterval(cancel);\n            }\n        }\n    }, [props.sprite])\n\n    return <canvas\n        ref={canv}\n        width={imageWidthPx}\n        height={imageHeightPx}\n        style={{width: '48px', height: '48px', background: 'gray'}}\n        className={`spriteImage ${props.selected ? 'selected': ''}`}\n        title={props.sprite?.name || 'No Sprite'}\n        onClick={sel}\n    />\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto',\n            maxWidth: '600px',\n            minWidth: '400px',\n            position: 'fixed',\n            left: '50%',\n            top: '50%',\n            transform: `translate(-50%, -50%)`,\n        }\n    }),\n);\n\nexport function SpritePickerModal(props: {open: boolean, onClose: Function, onSelect: Function, currentSprite: Sprite|null}) {\n    const classes = useStyles();\n    return <Modal\n        open={props.open}\n        aria-labelledby=\"sprite-picker-modal\"\n        aria-describedby=\"pick a sprite to use\"\n        onClose={()=>props.onClose()}\n    >\n        <div className={classes.paper}>\n            <SpritePicker\n                defaultTerm={props.currentSprite?.name || ''}\n                selected={props?.currentSprite || null}\n                animated={props?.currentSprite?.animated || true}\n                onSelect={(sp: Sprite) => {\n                    props.onClose();\n                    props.onSelect(sp);\n                }}\n                canAnimate={true}\n            />\n        </div>\n    </Modal>\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport SpritePicker from \"../ui-components/spritepicker\";\nimport { Sprite } from \"../game/util/sprite-loading\";\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport {observer} from \"mobx-react-lite\";\nimport Terrain from \"../game/controllers/terrain\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIPenTool extends UITool {\n    readonly icon: JSX.Element = <TerrainIcon />;\n    readonly name: string = 'Terrain';\n    readonly middleware: PenMiddleware;\n    private searchTerm: string = 'ground';\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, controller.entities, controller.canvasContainer);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <PenControlInterface\n            terrain={this.controller.terrain}\n            term={this.searchTerm}\n            setSearch={(term: string) => this.searchTerm = term}\n            pen={this.middleware}\n        />\n    }\n\n    register(): any {\n        this.controller.terrain.registerMiddleware(this.middleware);\n        console.log('Mounted pen tool.')\n    }\n\n    unregister(): any {\n       this.middleware.eject();\n       console.log('Unmounted pen tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst PenControlInterface = observer((props: {terrain: Terrain, setSearch: Function, term: string, pen: PenMiddleware}) => {\n    return <div className={'cont'}>\n        <PenSizeSlider pen={props.pen}/>\n        <SpritePicker\n            onSelect={(sp: Sprite) => props.terrain.selectedSprite = sp}\n            onSearch={props.setSearch}\n            defaultTerm={props.term}\n            selected={props.terrain.selectedSprite}\n            canAnimate={false}\n        />\n    </div>\n});\n\nconst PenSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Pen Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.penSize = newValue}\n        />\n    </div>\n});\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport ControlCameraIcon from '@material-ui/icons/ControlCamera';\n\nexport default class UICameraTool extends UITool {\n    readonly icon: JSX.Element = <ControlCameraIcon />;\n    readonly name: string = 'Camera';\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return null;\n    }\n\n    register(): any {}\n\n    unregister(): any {}\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return true;\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {observer} from \"mobx-react-lite\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIEraserTool extends UITool {\n    readonly icon: JSX.Element = <ClearIcon />;\n    readonly name: string = 'Eraser';\n    readonly middleware: PenMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, controller.entities, controller.canvasContainer, false);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return <EraserSizeSlider pen={this.middleware}/>\n    }\n\n    register(): any {\n        this.controller.terrain.registerMiddleware(this.middleware);\n        console.log('Mounted eraser tool.')\n    }\n\n    unregister(): any {\n        this.middleware.eject();\n        console.log('Unmounted eraser tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return forMobile && isHost;\n    }\n}\n\nconst EraserSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    console.log('PS:', props.pen.penSize)\n\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Eraser Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.penSize = newValue}\n        />\n    </div>\n});\n","import UITool from \"./ui-tool\";\nimport FaceIcon from '@material-ui/icons/Face';\nimport React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {SpriteImage, SpritePickerModal} from \"../ui-components/spritepicker\";\nimport EntityLayer, {Entity} from \"../game/controllers/entities\";\nimport {\n    Button,\n    Checkbox,\n    Dialog, DialogActions,\n    DialogContent, DialogContentText,\n    DialogTitle,\n    FormControlLabel, Input, InputLabel, ListItemText, MenuItem, Select,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {Sprite} from \"../game/util/sprite-loading\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport GameController from \"../game/controllers/game\";\nimport EntityUpdateHandler from \"../game/net/handlers/entity-update-handler\";\nimport {clients} from '../game/net/peerconnection';\nimport Campaign from \"../game/controllers/campaign\";\nimport {EntityInterface} from \"../game/data/interfaces/entity\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport stripProxy from \"../game/util/deproxy\";\n\n\nexport default class UIEntityTool extends UITool {\n    readonly icon: JSX.Element = <FaceIcon />;\n    readonly name: string = 'Entity';\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <EntityEditorInterface\n            entities={this.controller.entities}\n            controller={this.controller}\n        />\n    }\n\n    register(): any {\n        console.log('Mounted entity tool.')\n    }\n\n    unregister(): any {\n        console.log('Unmounted entity tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    })\n);\n\nconst EntityEditorInterface = observer((props: {entities: EntityLayer, controller: GameController}) => {\n    const [promptSprite, setSpritePrompt] = React.useState(false);\n    const [selectedSprite, setSprite] = React.useState(null);\n    const [entName, setName] = React.useState('');\n    const [visible, setVisible] = React.useState(true);\n    const [loadExisting, setLoadExisting] = React.useState(false);\n\n    const resetValues = () => {\n        setSpritePrompt(false);\n        setSprite(null);\n        setName('');\n        setVisible(true);\n    }\n\n    if (props.entities.selected) return <EntityEditInterface entities={props.entities} campaign={props.controller.campaign}/>\n\n    return <div className={'cont'}>\n        <h2>Create Entity</h2>\n        <FormGroup row>\n            <TextField\n                id=\"ent-name\"\n                label=\"Name\"\n                variant=\"filled\"\n                value={entName}\n                onChange={(evt) => setName(evt.target.value)}\n            />\n            <div style={{marginLeft: '12px'}} >\n                <SpriteImage\n                    sprite={selectedSprite}\n                    onSelect={() => {setSpritePrompt(true)}}\n                />\n            </div>\n        </FormGroup>\n\n        <FormGroup row>\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={visible}\n                        onChange={(evt)=> setVisible(evt.target.checked)}\n                        name=\"visible\"\n                    />\n                }\n                label=\"Visible\"\n            />\n        </FormGroup>\n\n        <FormGroup row style={{justifyContent: 'space-between'}}>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={()=>{createEntity(props.entities, props.controller, selectedSprite, entName, visible); resetValues();}}\n                disabled={!selectedSprite}\n            >\n                Create\n            </Button>\n            <Button variant=\"contained\" color=\"default\" onClick={()=>setLoadExisting(true)} disabled={!props.controller.campaign?.characters.length}>\n                Load Character\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" onClick={resetValues} >\n                Clear\n            </Button>\n        </FormGroup>\n\n        <SpritePickerModal\n            open={promptSprite}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={setSprite}\n            currentSprite={selectedSprite||null}\n        />\n\n        <CampaignCharacterSelector\n            entities={props.entities}\n            controller={props.controller}\n            campaign={props.controller.campaign}\n            open={loadExisting}\n            onClose={()=>setLoadExisting(false)}\n        />\n    </div>\n});\n\n\nconst EntityEditInterface = observer((props: {entities: EntityLayer, campaign: Campaign|null}) => {\n    const ent = props.entities.selected?.entity;\n    if (!ent) return null;\n\n    const [prompt, setSpritePrompt] = React.useState(false);\n    const [promptClone, setClonePrompt] = React.useState(false);\n    const update = React.useMemo(() => {\n        let timeout: any = null;\n        return (info: Partial<Entity>) => {\n            if (timeout !== null) {\n                clearTimeout(timeout);\n            }\n            const ent = props.entities.selected?.entity;\n            if (ent) {\n                timeout = setTimeout(() => {\n                    props.entities.updateEntity(ent.id, info);\n                    if (props.campaign) {\n                        updateCampaign(props.campaign, ent);\n                    }\n                }, 200);\n            }\n        }\n    }, [props.entities, props.campaign])\n    const classes = useStyles();\n    const updateInstant = (info: Partial<Entity>) => {\n        props.entities.updateEntity(ent.id, info);\n        if (props.campaign) {\n            updateCampaign(props.campaign, ent);\n        }\n    }\n    const clientNames: string[] = Array.from(clients).filter(c=>c.userData).map(cl =>{\n        // @ts-ignore\n        return cl.userData.username\n    });\n    const userList: string[] = Array.from(new Set([\n        ...clientNames,\n        ...ent.owners\n    ])).sort();\n\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Edit {ent.name}</h2>\n            <FormGroup row>\n                <TextField\n                    id=\"ent-name\"\n                    label=\"Name\"\n                    variant=\"filled\"\n                    value={ent.name}\n                    onChange={(evt) => updateInstant({name: evt.target.value})}\n                />\n                <div style={{marginLeft: '12px'}} >\n                    <SpriteImage\n                        sprite={ent.sprite}\n                        onSelect={() => {setSpritePrompt(true)}}\n                    />\n                </div>\n\n            </FormGroup>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <input\n                            type=\"color\"\n                            value={ent.color}\n                            className={classes.spriteColor}\n                            onChange={evt => update({color: evt.target.value})}\n                        />\n                    }\n                    label={<Typography style={{marginTop: '12px'}}>Color</Typography>}\n                />\n            </FormGroup>\n            <FormGroup row>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.visible}\n                            onChange={(evt)=> {\n                                updateInstant({visible: evt.target.checked});\n                                if (!evt.target.checked) {\n                                    EntityUpdateHandler.sendDelete(ent);\n                                }\n                            }}\n                            name=\"visible\"\n                        />\n                    }\n                    label=\"Visible\"\n                />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.saveToCampaign}\n                            onChange={(evt)=> updateInstant({saveToCampaign: evt.target.checked})}\n                            name=\"saveToCampaign\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Campaign-wide\"\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <InputLabel>Owners</InputLabel>\n                <Select\n                    multiple\n                    value={ent.owners}\n                    onChange={(evt)=>updateInstant({owners: evt.target.value as string[]})}\n                    input={<Input />}\n                    renderValue={(selected: any) => selected.join(', ')}\n                    style={{marginBottom: '25px'}}\n                >\n                    {userList.map((id: string) => (\n                        <MenuItem key={id} value={id}>\n                            <Checkbox checked={ent.owners.indexOf(id) > -1} />\n                            <ListItemText primary={id} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormGroup>\n\n            <FormGroup row style={{justifyContent: 'space-between'}}>\n                <Button variant=\"contained\" color=\"default\" onClick={()=>setClonePrompt(true)}>\n                    Duplicate\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>props.entities.remove(ent.id)} >\n                    Delete\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>props.entities.select(null)} >\n                    Close\n                </Button>\n            </FormGroup>\n        </form>\n\n        <SpritePickerModal\n            open={prompt}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={(sp: Sprite) => {ent.sprite = sp}}\n            currentSprite={ent.sprite}\n        />\n\n        <PromptForNumber\n            onCancel={()=>{ setClonePrompt(false)}}\n            onSubmit={(num: number) => {\n                setClonePrompt(false);\n                if (num) {\n                    cloneEntity(props.entities, ent, num);\n                }\n            }}\n            open = {promptClone}\n            prompt='How many extra clones would you like?'\n            title='Clone Amount'\n            label='Clones'\n        />\n    </div>\n});\n\n\nconst CampaignCharacterSelector = observer((props: {\n    open: boolean,\n    entities: EntityLayer,\n    controller: GameController,\n    campaign: Campaign|null,\n    onClose: Function\n}) => {\n    if (!props.campaign) return null;\n    const characters = props.campaign.characters;\n    const [selected, setSelected] = React.useState(characters.length > 0 ? characters[0]?.id : '');\n\n    const onSelect = (id: any) => {\n        console.log('Selected character ID:', id);\n        setSelected(id);\n    };\n\n    const getSelected = (id: any) => {\n        return props.campaign?.characters.find(c => c.id === id);\n    }\n\n    return <Dialog open={props.open} onClose={()=>props.onClose()}>\n            <DialogTitle>Select a Campaign Character</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Select a character saved to this campaign:\n                </DialogContentText>\n                <Select\n                    onChange={(evt)=>onSelect(evt.target.value)}\n                    input={<Input />}\n                    renderValue={(selected: any) => {\n                        const sel = getSelected(selected);\n                        if (!sel) return '';\n\n                        return <MenuItem style={{pointerEvents: 'none'}}>\n                            <SpriteImage sprite={new Sprite(sel.sprite.id, sel.sprite.idx)} />\n                            {sel.name}\n                        </MenuItem>\n                    }}\n                    style={{marginBottom: '25px',  width: '100%'}}\n                    value={selected}\n                >\n                    {props.campaign.characters.map((cha: EntityInterface) => (\n                        <MenuItem key={cha.id} value={cha.id}>\n                            <SpriteImage sprite={new Sprite(cha.sprite.id, cha.sprite.idx)} />\n                            <ListItemText primary={cha.name} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => {\n                    props.onClose()\n                }} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={() => {\n                    const sel = getSelected(selected);\n                    if (sel) {\n                        const sp = new Sprite(sel.sprite.id, sel.sprite.idx);\n                        createEntity(props.entities, props.controller, sp, sel.name, true, sel);\n                        props.onClose();\n                    }\n                }} color=\"primary\">\n                    Load\n                </Button>\n            </DialogActions>\n        </Dialog>\n});\n\n\nfunction PromptForNumber(props: {title: string, prompt: string, label?: string, open: boolean, onCancel: Function, onSubmit: Function}) {\n    const [num, setNum] = React.useState(0);\n    const handleClose = () => {\n        props.onSubmit(num);\n    };\n\n    return <Dialog open={props.open} onClose={()=>{props.onCancel()}} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                {props.prompt}\n            </DialogContentText>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                label={props.label || ''}\n                type=\"number\"\n                fullWidth\n                onChange={(event) => setNum(parseInt(event.target.value))}\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={()=>{props.onCancel()}} color=\"primary\">\n                Cancel\n            </Button>\n            <Button onClick={handleClose} color=\"primary\">\n                Submit\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n\n\nfunction cloneEntity(entities: EntityLayer, ent: Entity, num: number) {\n    if (num) {\n        for (let i=0; i<num; i++) {\n            entities.addEntity(ent.sprite, {\n                x: ent.x,\n                y: ent.y,\n                color: ent.color,\n                owners: [...ent.owners],\n                visible: ent.visible,\n                name: `${ent.name} ${i+2}`\n            });\n        }\n        entities.updateEntity(ent.id, {\n            name: `${ent.name} 1`\n        })\n    }\n}\n\n\nfunction createEntity(entities: EntityLayer, controller: GameController, sprite: Sprite|null, name: string, visible: boolean, ext?: EntityInterface) {\n    if (!sprite) return;\n\n    const coords = controller.canvasContainer.screenToBoard(window.innerWidth/2, window.innerHeight/2)\n    entities.addEntity(sprite, {\n        ...(ext||{}),\n        sprite,\n        name,\n        visible,\n        x: coords.x,\n        y: coords.y\n    })\n}\n\nlet campUpdateTimer: any = null;\n\n/**\n * Updates, adds, or removes the current Entity from the given Campaign's saved characters.\n * Maintains its own timer, to avoid spam-updating the DB.\n * @param campaign\n * @param ent\n */\nfunction updateCampaign(campaign: Campaign, ent: Entity) {\n    clearTimeout(campUpdateTimer);\n    campUpdateTimer = setTimeout(() => {\n        const savedIdx = campaign.characters.findIndex(c => c.id === ent.id);\n\n        if (ent.saveToCampaign) {\n            const newData: EntityInterface = {\n                color: ent.color,\n                id: ent.id,\n                name: ent.name,\n                owners: Array.from(ent.owners),\n                saveToCampaign: true,\n                sprite: {\n                    id: ent.sprite.id,\n                    idx: ent.sprite.idx\n                }\n            }\n            campaign.characters.splice(savedIdx >= 0 ? savedIdx : campaign.characters.length, 1, stripProxy(newData));\n            CampaignLoader.saveCampaign(campaign).then(() => console.debug('Updated campaign.'));\n        } else if (savedIdx >= 0) {\n            campaign.characters.splice(savedIdx, 1);\n            CampaignLoader.saveCampaign(campaign).then(() => console.debug('Removed entity from campaign.'));\n        }\n    }, 500);\n}\n","import {observer} from \"mobx-react-lite\";\nimport React from \"react\";\nimport UITool from \"./ui-tool\";\nimport GroupIcon from '@material-ui/icons/Group';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport Lobby, {PendingUser} from \"../game/controllers/lobby\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {MenuItem, MenuList, Tooltip} from \"@material-ui/core\";\nimport { IconButton } from '@material-ui/core';\nimport * as network from '../game/net/peerconnection'\nimport {updateUser, UserData} from \"../game/db/user-db\";\n\nexport default class UILobbyTool extends UITool {\n    readonly icon: JSX.Element = <GroupIcon />;\n    readonly name: string = 'Lobby';\n\n    getControlUI(forMobile: boolean): JSX.Element | null {\n        return <LobbyInterface lobby={this.controller.lobby}/>;\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n\n    register(): any {}\n\n    unregister(): any {}\n}\n\nconst useStyles = makeStyles(() => createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    }));\n\n\nconst LobbyInterface = observer((props: {lobby: Lobby}) => {\n    const classes = useStyles();\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Lobby</h2>\n            <PendingList lobby={props.lobby} />\n            <UserList />\n        </form>\n    </div>\n});\n\nconst PendingList = observer((props: {lobby: Lobby}) => {\n    const eles = props.lobby.pendingLogins.map(pl => {\n        return <PendingUserEle key={pl.keyCode} user={pl} lobby={props.lobby}/>\n    });\n\n    if(!eles.length) return null;\n\n    return <div>\n        <div style={{border: '1px solid black'}}>\n            <h4 style={{marginBottom: '5px'}}>Pending:</h4>\n            <MenuList>\n                {eles}\n            </MenuList>\n        </div>\n    </div>\n});\n\nconst PendingUserEle = (props: {user: PendingUser, lobby: Lobby}) => {\n    const approve = (ev: any) => {\n        props.lobby.approveUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n    const reject = (ev: any) => {\n        props.lobby.rejectUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    return <MenuItem style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n        <Tooltip title={'Device: ' + props.user.keyCode}><div>{props.user.username}</div></Tooltip>\n        <Tooltip title=\"Approve\"><IconButton children={<ThumbUpIcon/>} color=\"primary\" onClick={approve}/></Tooltip>\n        <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n    </MenuItem>\n}\n\n\nconst UserList =  observer((props: {}) => {\n    const eles = Array.from(network.clients).filter(c=>c.userData).map(c => {\n        // @ts-ignore\n        const dat: UserData = c.userData;\n        const reject = (ev: any) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            updateUser({\n                ...dat,\n                keyCodes: []\n            }).then(() => {\n                c.close()\n            })\n        }\n\n        return <MenuItem key={dat.id} style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n            {dat.username}\n            <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n        </MenuItem>\n    });\n\n    if (!eles.length) return null;\n\n    return <div>\n        <h4 style={{marginBottom: '5px'}}>Online:</h4>\n        <MenuList>\n            {eles}\n        </MenuList>\n    </div>\n});\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport UIPenTool from \"../ui-tools/ui-pen-tool\";\nimport GameController from \"../game/controllers/game\";\nimport UITool from \"../ui-tools/ui-tool\";\nimport {Avatar, Modal} from \"@material-ui/core\";\nimport UICameraTool from \"../ui-tools/ui-camera-tool\";\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport UIEraserTool from \"../ui-tools/ui-eraser-tool\";\nimport {observer} from \"mobx-react-lite\";\nimport * as connection from \"../game/net/peerconnection\";\nimport {NetworkMode} from \"../game/net/peerconnection\";\nimport UIEntityTool from \"../ui-tools/ui-entity-tool\";\nimport UILobbyTool from \"../ui-tools/ui-lobby-tool\";\nimport hotkeys from 'hotkeys-js';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            height: 380,\n            transform: 'translateZ(0px)',\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto'\n        }\n    }),\n);\n\n\nconst ControlMenu = observer((props: {controller: GameController, forMobile: boolean}) => {\n    const isHost = connection.netMode.get() === NetworkMode.HOST;\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [modalOpen, setModalOpen] = React.useState(false);\n    const [tools, setTools] = React.useState<UITool[]>([]);\n    const [selectedTool, setSelected] = React.useState<UITool|null>(null);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleModalClose = () => {\n        setModalOpen(false);\n    };\n\n    const handleModalOpen = () => {\n        setModalOpen(true);\n    }\n\n    const handleSelect = (action: UITool) => {\n        handleClose();\n        if (action === selectedTool) {\n            return;\n        }\n        if (selectedTool) {\n            selectedTool.unregister();\n        }\n        setSelected(action);\n        action.register();\n        setModalOpen(true);\n    }\n\n    React.useEffect(() => {\n        // When the back button is used, close the modal.\n        window.addEventListener('popstate', handleModalClose);\n\n        hotkeys('1,2,3,4,5,6,7,8,9', (event, handler) => {\n            const key = parseInt(handler.key);\n            const tool = tools.filter(t=>t.isOption(props.forMobile, isHost))[key-1];\n            console.log('Hotkey:', key, tool);\n            if (tool && tool !== selectedTool) {\n                handleSelect(tool);\n            }\n        });\n\n        return () => {\n            window.removeEventListener('popstate', handleModalClose);\n            hotkeys.unbind('1,2,3,4,5,6,7,8,9');\n        }\n    });\n\n    React.useEffect(() => {\n        const newTools = [\n            new UICameraTool(props.controller),\n            new UIPenTool(props.controller),\n            new UIEraserTool(props.controller),\n            new UIEntityTool(props.controller),\n            new UILobbyTool(props.controller)\n        ];\n\n        setTools(newTools);\n        setSelected(newTools[0]);\n        newTools[0].register();\n    }, [props.controller]);\n\n    let ui;\n    const emb = selectedTool?.getControlUI(true);\n    if (emb) {\n        if (props.forMobile) {\n            ui = <div>\n                <Avatar\n                    className={'useMouse'}\n                    onClick={handleModalOpen}\n                    style={{\n                        position: 'fixed',\n                        bottom: '10px',\n                        left: '10px',\n                        transform: `translateY(-50%)`,\n                        background: '#3eec10',\n                        cursor: 'pointer'\n                    }}\n                >\n                    <MoreHorizIcon/>\n                </Avatar>\n                <Modal open={modalOpen} onClose={handleModalClose}>\n                    <div className={classes.paper}>\n                        {emb}\n                    </div>\n                </Modal>\n            </div>\n        } else {\n            ui = <div\n                style={{position: \"fixed\", left: '10px', top: '50%', minWidth: '400px', transform: `translateY(-50%)`}}\n                className={classes.paper}\n            >\n                {selectedTool?.getControlUI(false)}\n            </div>\n        }\n    }\n\n    return <div>\n        {ui}\n        <SpeedDial\n            ariaLabel=\"Control SpeedDial\"\n            className={classes.speedDial}\n            hidden={false}\n            icon={selectedTool?.icon || <SpeedDialIcon />}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            open={!props.forMobile || open}\n        >\n            {tools.filter(t=>t.isOption(props.forMobile, isHost)).map((action, idx) => (\n                <SpeedDialAction\n                    key={action.name}\n                    icon={action.icon}\n                    tooltipTitle={action.name}\n                    tooltipOpen\n                    onClick={() => {handleSelect(action)}}\n                    title={action.name + ` (Hotkey: ${idx+1})`}\n                />\n            ))}\n        </SpeedDial>\n    </div>\n});\n\nexport default ControlMenu;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport {InputDialog} from \"./prompts\";\n\n/**\n * Helper UI to prompt the user for their connection action, if no Room ID hashcode is set.\n * @param props\n * @constructor\n */\nexport default function LoginHelper (props: {controller: GameController}) {\n    const [promptLogin, setPrompt] = React.useState(true);\n    const [needClient, setNeedClient] = React.useState(false);\n\n    const setHosting = (hosting: boolean) => {\n        setPrompt(false);\n        if (hosting) {\n            return props.controller.startHost();\n        } else {\n           setNeedClient(true);\n        }\n    };\n\n    return <div>\n        { promptLogin ? <PromptNetwork select={setHosting}/> : null }\n        <InputDialog\n            open={needClient}\n            title={'Enter host ID'}\n            body={'Enter the ID of the host lobby you\\'d like to join'}\n            tooltip={'Host ID'}\n            onCancel={() => {setNeedClient(false); setPrompt(true)}}\n            onSubmit={(txt: string) => props.controller.startClient(txt)}\n        />\n    </div>\n}\n\n\nfunction PromptNetwork (props: {select: Function}) {\n\n    return <Dialog open={true} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Network Mode</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Would you like to join a campaign, or host your own campaign?\n            </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={() => {props.select(true)}}>\n                Host\n            </Button>\n            <Button onClick={() => { props.select(false)}}>\n                Join\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n","import * as connection from \"../game/net/peerconnection\";\nimport {NetworkMode, NetworkStatus} from \"../game/net/peerconnection\";\nimport LoginHelper from \"./loginHelper\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\n\n/**\n * Util to display network status to the user.\n * @param props\n * @constructor\n */\nexport default function ConnectionOverlay(props: {controller: GameController}) {\n    let content = null;\n    let message = null;\n\n    if (connection.netMode.get() === NetworkMode.UNKNOWN) {\n        content = <LoginHelper controller={props.controller} />\n\n    } else {\n        switch (connection.netStatus.get()) {\n            case NetworkStatus.DISCONNECTED:\n                message = `Error connecting to service. Cannot reconnect.`;\n                break;\n            case NetworkStatus.RECONNECTING:\n                message = 'Error with connection to Host. Attempting reconnection...';\n                break;\n            case NetworkStatus.CONNECTING:\n                message = 'Connecting to Host...';\n                break;\n            case NetworkStatus.MATCHMAKING_FAIL:\n                message = 'Connection to matchmaking server failed. Please reload.';\n                break;\n            case NetworkStatus.WAITING_FOR_HOST:\n                message = 'Waiting for the Host to approve our login...';\n                break;\n            default:\n                message = null;\n        }\n    }\n\n    if (message) {\n        content =  <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h4\" component=\"h4\" gutterBottom>\n                {message}\n            </Typography>\n        </Backdrop>;\n    }\n    return content;\n}\n","import {observable} from \"mobx\";\nimport {db} from '../db/database';\nimport {exportDB, importDB} from \"dexie-export-import\";\n\nclass GoogleApi {\n    private injected = false;\n    private apiReady: any = null;\n    private apiFailed: any = null;\n    public readonly waitForLoad = new Promise((res, fail) => {\n        this.apiReady = res;\n        this.apiFailed = fail;\n    });\n    @observable public isSignedIn: boolean = false;\n\n    /**\n     * Injects a script object into the base page node, which loads and initiates the Google API.\n     * This is automatically called initially before export, in order for this client to work.\n     */\n    public inject() {\n        if (this.injected) return;\n        this.injected = true;\n        const script = document.createElement(\"script\");\n        script.src = \"https://apis.google.com/js/client.js\";\n\n        script.onload = () => {\n            gapi.load('client:auth2', () => {\n                gapi.client.init({\n                    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n                    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n                    scope: 'https://www.googleapis.com/auth/drive.appdata',\n                }).then(() => {\n                    // Listen for sign-in state changes.\n                    gapi.auth2.getAuthInstance().isSignedIn.listen(res => this.isSignedIn = res);\n                    this.isSignedIn = gapi.auth2.getAuthInstance().isSignedIn.get();\n                    this.apiReady();\n                }, (error) => {\n                    console.error(error);\n                    this.apiFailed(error);\n                });\n            });\n        };\n        document.body.appendChild(script);\n    }\n\n    /**\n     * Fire a callback when the sign-in status changes.\n     * Always fires an initial value, so that it cannot be missed if no update occurs.\n     * @param callback\n     */\n    public onSignInChange(callback: Function) {\n        this.waitForLoad.then(() => {\n            callback(gapi.auth2.getAuthInstance().isSignedIn.get());\n            gapi.auth2.getAuthInstance().isSignedIn.listen(res => callback(res));\n        })\n    }\n\n    /**\n     * Prompts the user to sign in, using a popup Google homepage.\n     */\n    public async promptSignIn() {\n        await this.waitForLoad;\n        localStorage['lastDriveUpdate'] = 0;\n        if (!this.isSignedIn) {\n            return gapi.auth2.getAuthInstance().signIn().then(res => {\n                console.log('Login res:', res);\n                console.log(this.isSignedIn, gapi.auth2.getAuthInstance().isSignedIn.get())\n            })\n        }\n    }\n\n    /**\n     * Disconnects the current user from the API.\n     */\n    public async signOut() {\n        return gapi.auth2.getAuthInstance().signOut();\n    }\n\n    /**\n     * Uploads the given Blob to the connected Google Drive, if one is available.\n     *\n     * Either creates a new file if one does not exist already, or replaces the old one.\n     * @param data\n     * @param mimeType\n     */\n    private async upload(data: Blob, mimeType: string = 'application/json') {\n        if (!this.isSignedIn) throw Error('Attempted to upload when not signed in!');\n        const user = gapi.auth2.getAuthInstance().currentUser.get();\n        const oauthToken = user.getAuthResponse().access_token;\n        const latest = await this.getLatestBackup();\n        const latestID = latest?.id || '';\n        const body = { parents: ['appDataFolder'], name: \"terra-db-backup.json\", mimeType };\n\n        if(latest) delete body.parents;  // In a PATCH, this field cannot be updated.\n\n        return fetch(`https://www.googleapis.com/upload/drive/v3/files/${latestID}?uploadType=resumable`, {\n            method: latest ? 'PATCH' : 'POST',\n            headers: {\n                Authorization: `Bearer ${oauthToken}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n        }).then(resp => {\n            const loc = resp.headers.get('location');\n            if (!loc) throw Error('No upload redirect location was given.');\n            return fetch(loc, {\n                method: latest ? 'PATCH':'PUT',\n                body: data\n            })\n        })\n    }\n\n    /**\n     * Get a list of all files uploaded to the application's data folder.\n     */\n    private async listFiles() {\n        await this.waitForLoad;\n        if (!this.isSignedIn) throw Error('Cannot get files when not signed in!');\n\n        return gapi.client.drive.files.list({\n            pageSize: 10,\n            fields: \"nextPageToken, files(id, name, modifiedTime)\",\n            spaces: 'appDataFolder'\n        }).then(function(response) {\n            return response.result.files;\n        });\n    }\n\n    /**\n     * Get the most recent file uploaded to the application's data folder.\n     */\n    private async getLatestBackup(): Promise<gapi.client.drive.File|null> {\n        const files = (await this.listFiles()) || [];\n\n        return files.sort((a, b) => {\n            return new Date(b.modifiedTime || 0).getTime() - new Date(a.modifiedTime || 0).getTime();\n        })[0] || null;\n    }\n\n    /**\n     * Download the given file as a blob. If no file is provided, defaults to the latest version.\n     * @param latest\n     * @private\n     */\n    private async downloadLatestBackup(latest: gapi.client.drive.File|null = null) {\n        latest = latest || await this.getLatestBackup();\n        const user = gapi.auth2.getAuthInstance().currentUser.get();\n        const oauthToken = user.getAuthResponse().access_token;\n\n        if (!latest?.id) {\n            throw Error('Cannot locate latest file for downloading.')\n        } else {\n            return fetch(`https://www.googleapis.com/drive/v3/files/${latest.id}?alt=media`, {\n                headers: {\n                    Authorization: `Bearer ${oauthToken}`\n                }\n            }).then(res => {\n                return res.blob()\n            })\n        }\n    }\n\n    /**\n     * Returns the latest File from GDrive, if an updated version is available. Otherwise, returns null.\n     */\n    public async getLatestUpgrade() {\n        const latest = await this.getLatestBackup();\n        const lastUpdate = localStorage['lastDriveUpdate'] || -1;\n        const driveUpdateTime = new Date(latest?.modifiedTime || 0).getTime();\n\n        return (latest && (driveUpdateTime > lastUpdate)) ? latest : null;\n    }\n\n    /**\n     * Restores the local DB from the given backup stored on GDrive.\n     */\n    public async downloadDB(latest: gapi.client.drive.File) {\n        const driveUpdateTime = new Date(latest?.modifiedTime || 0).getTime();\n\n        return this.downloadLatestBackup(latest).then(async res => {\n            console.log(\"Updating DB from Drive...\");\n            await db.delete();\n            await importDB(res);\n            console.log(\"Drive Import complete\");\n            localStorage['lastDriveUpdate'] = driveUpdateTime;\n            // @ts-ignore\n            window.location = window.location.href.split('#')[0];\n            return res;\n        });\n    }\n\n    /**\n     * Uploads the local database contents to Google Drive.\n     */\n    public async uploadLocalDB() {\n        // @ts-ignore\n        const blob = await exportDB(db, {\n            prettyJson: true,\n            progressCallback: (prog: any) => {\n                console.debug('Packing DB:', prog);\n            }\n        });\n\n        return this.upload(blob, 'application/json').then(async res => {\n            const txt = await res.text();\n            console.debug('Upload result:', txt);\n            localStorage['lastDriveUpdate'] = Date.now();\n            return JSON.parse(txt);\n        }).catch(err => {\n            console.error('Upload error:');\n            console.error(err);\n            return null;\n        });\n    }\n}\n\nconst api = new GoogleApi();\napi.inject();\n\n\n// @ts-ignore\nwindow.google = api;\n\nexport default api;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport {observer} from \"mobx-react-lite\";\nimport Campaign from \"../game/controllers/campaign\";\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport BackupIcon from '@material-ui/icons/Backup';\nimport CloudOffIcon from '@material-ui/icons/CloudOff';\nimport {Button, Dialog, DialogContent, DialogTitle, Fab, InputLabel, Menu, MenuItem, Tooltip} from \"@material-ui/core\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport {InputDialog} from \"./prompts\";\nimport {importDB, exportDB} from \"dexie-export-import\";\nimport {db} from \"../game/db/database\";\nimport * as download from 'downloadjs';\nimport google from '../game/util/google-api';\n\n\nexport const CampaignSelector = observer((props: {controller: GameController}) => {\n    const [need, setNeed] = React.useState(true);\n    const [wantOpen, setWantOpen] = React.useState(false);\n    const [promptNew, setPromptNew] = React.useState(false);\n    const [campaignList, setList] = React.useState<Campaign[]>([]);\n    const [storage, setStorage] = React.useState({q: 1, u: 0});\n\n    const selectCampaign = React.useMemo(() => {\n        return (camp: Campaign) => {\n            setNeed(false);\n            props.controller.campaign = camp;\n            metadata.store(Meta.CAMPAIGN_CURRENT, camp.id).then();\n            if (props.controller.campaign.loadedBoard) {\n                props.controller.loadBoard(props.controller.campaign.loadedBoard).then();\n            }\n        }\n    }, [props.controller]);\n\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.CAMPAIGN_CURRENT).then(async (id: number) => {\n            if (id === null) return;\n            console.debug('Current campaign:', id);\n            const camp = await CampaignLoader.loadCampaign(id);\n            if (!camp) return;\n            selectCampaign(camp);\n        });\n\n        // Load all available campaigns:\n        CampaignLoader.getAvailable().then(campaigns => setList(campaigns));\n\n        // Lookup used storage:\n        navigator.storage.estimate().then(function(estimate) {\n            const u = estimate.usage;\n            const q = estimate.quota\n            if (u !== undefined && q !== undefined) setStorage({ q, u});\n        });\n    }, [selectCampaign]);\n\n    const addCampaign = async (name: string) => {\n        setPromptNew(false);\n        if (name.trim().length) {\n            const c = await CampaignLoader.createCampaign(name);\n            setList([...campaignList, c]);\n        }\n    }\n\n    const handleModalClose = () => {\n        if (!need) {\n            setWantOpen(false);\n        }\n    }\n\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    return <div className={'menu_button'}>\n        <Tooltip\n            title=\"Campaign Settings\"\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <Fab\n                color=\"primary\"\n                onClick={()=>{setWantOpen(true)}}\n            >\n                <SettingsIcon />\n            </Fab>\n        </Tooltip>\n\n        <Dialog open={need || wantOpen} onClose={handleModalClose}>\n            <DialogTitle style={{textAlign: \"center\"}}>Campaign Info</DialogTitle>\n            <DialogContent style={{textAlign: \"center\"}}>\n                <CampaignMenu campaigns={campaignList} onSelect={selectCampaign} selected={props.controller.campaign}/>\n                <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    onClick={()=>setPromptNew(true)}\n                    startIcon={<AddCircleOutlineIcon />}\n                >\n                    Create New Campaign\n                </Button>\n                <p style={{color: 'gray'}}>\n                    {\n                        storage ?\n                            `${(storage.u/storage.q * 100).toFixed(2)}% used of ${formatBytes(storage.q)}`\n                            : 'Storage metrics unknown'\n                    }\n                </p>\n                <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={exportLocalDB}\n                    startIcon={<SaveAltIcon />}\n                >\n                   Save Backup\n                </Button>\n                <input\n                    id=\"backup-input\"\n                    type=\"file\"\n                    style={{display: \"none\"}}\n                    onChange={restoreLocalDB}\n                    accept={'application/json'}\n                />\n                <Button\n                    variant=\"outlined\"\n                    color=\"default\"\n                    onClick={() => document.getElementById('backup-input')?.click()}\n                    startIcon={<RestoreIcon />}\n                    style={{marginLeft: '2px'}}\n                >\n                    Restore\n                </Button>\n                <h2>Google Drive:</h2>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => google.promptSignIn()}\n                    startIcon={<BackupIcon />}\n                    style={{display: google.isSignedIn ? 'none':''}}\n                >\n                    Sign In\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => google.signOut()}\n                    startIcon={<CloudOffIcon />}\n                    style={{display: google.isSignedIn ? '':'none'}}\n                >\n                    Sign Out\n                </Button>\n            </DialogContent>\n        </Dialog>\n        <InputDialog\n            open={promptNew}\n\t\t\ttitle='New Campaign'\n\t\t\tbody='Enter a name for the new Campaign:'\n\t\t\tacceptText={'Create'}\n\t\t\ttooltip={'Campaign Name'}\n\t\t\tonSubmit={addCampaign}\n\t\t\tonCancel={()=>setPromptNew(false)}\n\t\t/>\n    </div>\n})\n\n\nexport function CampaignMenu(props: {campaigns: Campaign[], onSelect: Function, selected: Campaign|null}) {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [selected, setSelected] = React.useState<Campaign|null>(props.selected);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (campaign: Campaign|null) => {\n        if (campaign) {\n            setSelected(campaign);\n            props.onSelect(campaign);\n        }\n        setAnchorEl(null);\n    };\n\n    const camps = props.campaigns.sort((c1, c2)=>c1.timeCreated-c2.timeCreated).map(c => {\n        return <MenuItem key={c.id} onClick={()=>handleClose(c)}>\n            <b>{c.name}</b>&nbsp;-&nbsp;<i>[{new Date(c.timeCreated).toLocaleString()}]</i>\n        </MenuItem>\n    });\n\n    return (\n        <div style={{marginBottom: '20px'}}>\n            <InputLabel htmlFor='campaign-list-btn'>Current Campaign:</InputLabel>\n            <Button\n                variant='outlined'\n                onClick={handleClick}\n                id={'campaign-list-btn'}\n                disabled={props.campaigns.length===0}\n                style={{maxWidth: '300px', minWidth: '200px', overflowX: 'hidden'}}\n            >\n                {selected? selected.name : (props.campaigns.length ? 'Select a Campaign':'No campaigns exist')}\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={()=>handleClose(null)}\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            >\n                {camps}\n            </Menu>\n        </div>\n    );\n}\n\n\nfunction formatBytes(bytes: number, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Export the full database as a JSON file.\n */\nasync function exportLocalDB() {\n    // @ts-ignore\n    const blob = await exportDB(db, {prettyJson: true, progressCallback: console.log});\n\n    // @ts-ignore\n    download(blob, `terra-backup.json`, 'application/json');\n}\n\nasync function restoreLocalDB(ev: any) {\n    console.log(ev);\n    // @ts-ignore\n    const file = document.getElementById('backup-input')?.files[0];\n    if (file) {\n        console.log(\"Importing \" + file.name);\n        await db.delete();\n        await importDB(file);\n        console.log(\"Import complete\");\n        // @ts-ignore\n        window.location = window.location.href.split('#')[0];\n    }\n}\n","import React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {Button, Fab, MenuItem, MenuList, Popover, Tooltip, Typography} from \"@material-ui/core\";\nimport MapIcon from '@material-ui/icons/Map';\nimport GameController from \"../game/controllers/game\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport Campaign from \"../game/controllers/campaign\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport notifications from './notifications';\nimport ConfirmPrompt, {InputDialog} from \"./prompts\";\n\n\n\nexport const BoardSelector = observer((props: {controller: GameController}) => {\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n    const campaign = props.controller.campaign;\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    if (!campaign) return null;\n\n    return <div style={{pointerEvents: 'auto',}}>\n        <Tooltip\n            title=\"Selected Board\"\n        >\n            <Fab\n                variant=\"extended\"\n                onClick={(evt: any)=>{setAnchorEl(evt.currentTarget)}}\n                style={{width: '200px', overflowX: 'hidden', marginTop: '5px'}}\n            >\n                <MapIcon style={{marginRight: '5px'}}/>\n                <Typography variant=\"inherit\" noWrap>\n                    {campaign?.loadedBoard ? campaign.loadedBoard : '[Untitled Board]'}\n                </Typography>\n            </Fab>\n        </Tooltip>\n        <Popover\n            open={!!anchorEl}\n            anchorEl={anchorEl}\n            onClose={()=>setAnchorEl(null)}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <BoardControlMenu campaign={campaign} controller={props.controller}/>\n        </Popover>\n    </div>\n});\n\nexport const BoardControlMenu = (props: {controller: GameController, campaign: Campaign}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const handleSelected = (board: string) => {\n        setSelected(board);\n    }\n\n    return <form\n        style={{\n            flexGrow: 1,\n            width: '300px'\n        }}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={e => e.preventDefault()}\n    >\n        <FormGroup row>\n            <BoardSelectMenu campaign={props.campaign} onSelect={handleSelected}/>\n        </FormGroup>\n        <FormGroup row>\n            <BoardLoadButton controller={props.controller} selected={selected} setSelected={setSelected} />\n            <BoardDeleteButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n            <BoardCreateButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n        </FormGroup>\n    </form>\n}\n\n\nexport const BoardSelectMenu = observer((props: {campaign: Campaign, onSelect: Function}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const boards = props.campaign.boards.map(b => {\n        return <MenuItem\n            key={b}\n            onClick={() => {setSelected(b); props.onSelect(b)}}\n            selected={b === selected}\n        >\n            <Typography\n                variant=\"inherit\"\n                noWrap\n                color={b === props.campaign.loadedBoard ? 'textSecondary':'initial'}\n            >\n                {b}\n            </Typography>\n        </MenuItem>\n    });\n\n    return <MenuList style={{maxHeight: '400px',  overflow: 'auto', width: '100%'}}>\n        {boards}\n    </MenuList>;\n});\n\nexport const BoardLoadButton = (props: {controller: GameController, selected: string|null, setSelected: Function}) => {\n    return <Button\n        color=\"primary\"\n        disabled={props.controller.campaign?.loadedBoard === props.selected}\n        onClick={() => {\n            if (props.selected) {\n                props.controller.loadBoard(props.selected).then();\n            }\n        }}\n    >\n        Load\n    </Button>\n};\n\nexport const BoardDeleteButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [confirm, needConfirm] = React.useState(false);\n\n    return <div>\n        <Button\n            disabled={!props.selected}\n            color=\"secondary\"\n            onClick={() => {needConfirm(true)}}\n        >\n            Delete\n        </Button>\n        <ConfirmPrompt\n            open={confirm}\n            onCancel={() => {needConfirm(false)}}\n            onConfirm={() => {\n                if (props.selected) {\n                    props.controller.deleteBoard(props.campaign, props.selected).catch(err => {\n                        notifications.error('Failed to delete board!');\n                        console.error(err);\n                    });\n                    props.setSelected(null);\n                    needConfirm(false);\n                }\n            }}\n            title={'Really delete?'}\n            prompt={`Are you sure you want to delete the board \"${props.selected}\"?`}\n            confirmButton={'Delete'}\n        />\n    </div>\n};\n\nexport const BoardCreateButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [needPrompt, setPrompt] = React.useState(false);\n    const handleCreate = (name: string) => {\n        setPrompt(false);\n        if (props.campaign.boards.includes(name)) {\n            return notifications.error('All board names must be unique!')\n        }\n        if (name && name.trim().length) {\n            props.campaign.boards.push(name);\n            props.setSelected(name);\n            props.controller.loadBoard(name).then();\n        }\n    }\n\n    return <div>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)'}}\n            onClick={() => {\n                setPrompt(true);\n            }}\n        >\n            New\n        </Button>\n        <InputDialog\n            open={needPrompt}\n            title='Create a Board'\n            body='Enter the name for the new Board:'\n            tooltip={'Board name'}\n            acceptText={'Create'}\n            onSubmit={handleCreate}\n            onCancel={handleCreate}\n        />\n    </div>\n};\n","import {observer} from \"mobx-react-lite\";\nimport {CircularProgress, Fab, Tooltip} from \"@material-ui/core\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport hotkeys from \"hotkeys-js\";\nimport google from '../game/util/google-api';\nimport notifications from \"./notifications\";\nimport ConfirmPrompt from \"./prompts\";\n\n\nexport const BoardSaveButton = observer( (props: {controller: GameController}) => {\n    const shouldSave = props.controller.campaign?.loadedBoard &&\n        (props.controller.entities.isDirty || props.controller.terrain.isBoardDirty);\n    const [saving, setSaving] = React.useState(false);\n    const [dbUpdate, setUpdate] = React.useState<any>(null);\n\n    const saveBoard = React.useMemo(() => {\n        if (!shouldSave) return ()=>{};\n        return async () => {\n            if (netMode.get() !== NetworkMode.HOST) return;\n            setSaving(true);\n            await props.controller.saveBoard();\n            if (google.isSignedIn) {\n                await google.uploadLocalDB();\n            }\n            setSaving(false);\n        }\n    }, [props.controller, shouldSave]);\n\n    React.useMemo(() => {\n        // Check for updated DB files in Google Drive whenever a user connects their account:\n        google.onSignInChange(async (loggedIn: boolean) => {\n            if (loggedIn) {\n                const latest = await google.getLatestUpgrade();\n                if (latest) {\n                    setUpdate(latest);\n                } else {\n                    notifications.info('Local save up to date!');\n                }\n            } else {\n                notifications.warning('Not syncing with Google Drive.');\n            }\n        })\n    }, [])\n\n    React.useEffect(() => {\n        // Enable hotkey for saving:\n        hotkeys('ctrl+s', (event, handler) => {\n            event.preventDefault();\n            event.stopPropagation();\n            saveBoard();\n        });\n\n        return () => {\n            hotkeys.unbind('ctrl+s');\n        }\n    }, [props.controller, saveBoard])\n\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    let title = shouldSave ? \"Save Board (ctrl+s)\" : \"No changes to save.\";\n\n    if (saving) title = 'Save in progress...';\n\n    return <div>\n        <Tooltip\n            title={title}\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <span>\n                <Fab\n                    color=\"primary\"\n                    onClick={saveBoard}\n                    disabled={!shouldSave}\n                >\n                    {saving ? <CircularProgress /> : <SaveIcon />}\n                </Fab>\n            </span>\n        </Tooltip>\n        <ConfirmPrompt\n            open={!!dbUpdate}\n            onCancel={()=>setUpdate(null)}\n            onConfirm={()=>{\n                console.log('Updating from GDrive...');\n                google.downloadDB(dbUpdate).then();\n                setUpdate(null);\n            }}\n            title={'Database Update'}\n            prompt={'You have a recently updated save stored in Google Drive. Which version would you prefer to use?'}\n            confirmButton={'Google Drive'}\n            cancelButton={'Local Save'}\n        />\n    </div>\n});\n","import React from 'react';\nimport './styles/App.scss';\nimport './styles/canvas-style.scss';\nimport GameController from \"./game/controllers/game\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {Typography} from \"@material-ui/core\";\nimport ControlMenu from \"./ui-components/controlMenu\";\nimport {observer} from \"mobx-react-lite\";\nimport ConnectionOverlay from \"./ui-components/connectionOverlay\";\nimport {SnackbarProvider} from 'notistack';\nimport * as connection from \"./game/net/peerconnection\";\nimport {NetworkMode} from \"./game/net/peerconnection\";\nimport {SnackbarUtilsConfigurator} from \"./ui-components/notifications\";\nimport {Meta, metadata, currentUsername} from './game/db/metadata-db';\nimport {CampaignSelector} from \"./ui-components/campaignSelector\";\nimport {BoardSelector} from \"./ui-components/boardSelector\";\nimport {BoardSaveButton} from \"./ui-components/boardSaveButton\";\nimport {InputDialog} from \"./ui-components/prompts\";\nimport {YoutubePlayerInterface} from \"./ui-components/youtubePlayer\";\n\n\nif (!('PointerEvent' in window)) {\n    alert('This browser does not support pointer events - please use a different one!');\n}\n\nconst controller = new GameController();\n\nif (process.env.NODE_ENV !== 'development' && !window.location.href.includes('unstable')) {\n    console.info('Shutting the console up for non-dev build.');\n    function noop() {}\n    const oldConsole = Object.assign({}, console);\n    // @ts-ignore\n    window.restoreLog = () => {\n        Object.assign(console, oldConsole);\n    };\n    console.debug = noop;\n    console.log = noop;\n    console.info = noop;\n}\n\nconst App = observer(() => {\n    const desktop = useMediaQuery('(min-width:900px)');\n    const [needName, setNeedName] = React.useState(true);\n    const setName = async (name: string) => {\n        if (name && name.length) {\n            setNeedName(false);\n            currentUsername.set(name);\n            await metadata.store(Meta.USERNAME, name);\n            await controller.start();\n        } else {\n            window.location.reload();\n        }\n    }\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.USERNAME).then(async (name: string) => {\n            if (name && name.length) {\n               currentUsername.set(name);\n               setNeedName(false);\n               await controller.start();\n            }\n        })\n    }, []);\n\n    let content: JSX.Element|null = null;\n\n    if (needName) {\n        content = <InputDialog\n            open={needName}\n            title='Choose a Name'\n            body='Enter the name you want to go by:'\n            tooltip={'Name'}\n            onSubmit={setName}\n            onCancel={setName}\n        />;\n    } else if (!controller.ready && connection.netMode.get() === NetworkMode.UNKNOWN) {\n        content = <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                Loading <CircularProgress color=\"inherit\" />\n            </Typography>\n        </Backdrop>;\n    } else if (controller.isNetworkReady) {\n        content = <ControlMenu controller={controller} forMobile={!desktop}/>\n    } else if (!controller.isNetworkReady) {\n        content = <ConnectionOverlay controller={controller} />;\n    }\n\n    return (\n        <SnackbarProvider maxSnack={5}>\n            <SnackbarUtilsConfigurator />\n            <div className=\"App noMouse\">\n                <div style={{\n                    display: 'flex',\n                    pointerEvents: 'none',\n                    flexDirection: 'row',\n                    position: 'fixed',\n                    top: '10px',\n                    left: '10px'\n                }}>\n                    <CampaignSelector controller={controller}/>\n                    <BoardSelector controller={controller}/>\n                    <BoardSaveButton controller={controller} />\n                    <YoutubePlayerInterface />\n                </div>\n\n                {content}\n            </div>\n        </SnackbarProvider>\n    )\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app waitForSpriteLoad faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'mobx-react-lite/batchingForReactDom'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/web-ui/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/web-ui/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/web-ui/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/web-ui/src/game/data/board-packer.worker.ts\")());module.exports.__esModule = true;"],"sourceRoot":""}