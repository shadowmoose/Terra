{"version":3,"sources":["game/net/messageEncoder.worker.ts","resources/sheet-composite.enc.png","game/util/unscramble.js","webpack:///./src/game/net/messageEncoder.worker.ts?773d","webpack:///./src/game/data/board-packer.worker.ts?e9c0","game/util/draggable.ts","game/consts.ts","game/util/sprite-loading.ts","game/controllers/canvas.ts","game/net/packets/packet-list.ts","ui-components/notifications.ts","game/net/handlers/handler.ts","game/data/protobufs/proto-wrapper.ts","game/data/protobufs/proto-sprite.ts","game/data/protobufs/proto-entity.ts","game/data/protobufs/proto-tiles.ts","game/net/packets/terrainPackets.ts","game/net/packets/entityPackets.ts","game/net/packets/util-packets.ts","game/net/packets/media-packets.ts","game/net/messageEncoder.ts","game/db/metadata-db.ts","game/util/promiseStream.ts","game/net/peerconnection.ts","game/data/interfaces/tile.ts","game/net/handlers/terrain-add-handler.ts","game/net/handlers/terrain-erase-handler.ts","game/controllers/terrain.ts","game/middleware/middleware.ts","game/middleware/entity-events.ts","game/net/handlers/entity-update-handler.ts","game/controllers/entities.ts","game/net/prechecks/precheck.ts","game/db/user-db.ts","game/net/prechecks/signature-check.ts","game/net/prechecks/board-sync-check.ts","game/controllers/lobby.ts","game/net/handlers/ping-handler.ts","game/db/board-db.ts","game/controllers/campaign.ts","game/util/deproxy.ts","game/db/campaign-db.ts","game/data/campaign-loader.ts","game/net/handlers/board-reload-handler.ts","ui-components/prompts.tsx","ui-components/youtubePlayer.tsx","game/net/handlers/media-sync-handler.ts","game/net/prechecks/media-sync.ts","game/controllers/game.ts","ui-tools/ui-tool.tsx","game/middleware/pen-events.ts","ui-components/spritepicker.tsx","ui-tools/ui-pen-tool.tsx","ui-tools/ui-camera-tool.tsx","ui-tools/ui-eraser-tool.tsx","ui-tools/ui-entity-tool.tsx","ui-tools/ui-lobby-tool.tsx","ui-components/controlMenu.tsx","ui-components/loginHelper.tsx","ui-components/connectionOverlay.tsx","ui-components/campaignSelector.tsx","ui-components/boardSelector.tsx","ui-components/boardSaveButton.tsx","App.tsx","serviceWorker.ts","index.tsx","game/data/board-packer.worker.ts"],"names":["module","exports","wrap","__esModule","shuffleSeed","require","img","sliceSize","seed","bmp","i","ctx","totalParts","Math","ceil","width","height","inds","push","canvas","document","createElement","getContext","verticalSlices","getGroup","slices","self","length","cols","t","y","getColsInGroup","rows","x","slice","row","parseInt","col","getSlices","g","group","shuffleInd","shuffle","s","drawImage","Worker","pan","state","originX","originY","transformation","translateX","translateY","element","style","transform","getMatrix","scale","canPan","panBy","panTo","canZoom","zoom","deltaScale","getBoundingClientRect","left","top","minScale","maxScale","scaleSensitivity","getScale","newScale","newOriginX","newOriginY","translate","getTranslate","pos","prevPos","transformOrigin","max","min","valueInRange","listeners","listen","ele","event","cb","opts","addEventListener","rem","removeEventListener","Draggable","parent","instance","Object","assign","renderer","dragging","lx","ly","evCache","noScroll","Set","prevDiff","preventDefault","sign","deltaY","pageX","pageY","blocking","ev","splice","clear","clientX","clientY","window","pointerId","curDiff","abs","sqrt","pow","delta","change","add","has","delete","unregister","forEach","l","fpsTicker","CanvasContainer","base","wrapper","canvases","this","className","backgroundColor","prepend","body","setCanvasSize","resetView","setSize","appendTo","object","appendChild","removeChild","c","rect","console","log","coords","boardTileWidth","floor","boardTileHeight","Canvas","name","context","id","e","append","mdl","attach","rawData","unscramble","data","sheet","spriteWidth","metadata","spriteHeight","globalFrameIndex","waitForSpriteLoad","Promise","res","Image","onerror","err","error","alert","onload","src","sheetSRC","clearInterval","setInterval","findSpriteData","key","ret","sprites","Error","composite","snackbarRef","Sprite","idx","images","drawImageTo","blocker","Handler","packets","isHost","client","packet","hostHandler","clientHandler","SnackbarUtilsConfigurator","useSnackbar","success","msg","options","toast","variant","warning","info","enqueueSnackbar","ProtoWrapper","values","Message","ProtoSprite","Type","d","Field","ProtoEntity","ProtoTile","ProtoTileStack","ProtoBoard","TerrainAddPacket","TerrainCoordPacket","TerrainErasePacket","EntityUpdatePacket","EntityDeletePacket","PingPacket","SignaturePacket","ReadyPacket","MediaStatusPacket","MediaRequestPacket","packetList","packetMap","$type","encode","a","constructor","worker","decode","clazz","Meta","PromiseStream","maxBackpressure","prom","resolve","backPressure","fn","onError","then","catch","currentUsername","observable","box","NetworkStatus","NetworkMode","version","stores","table","JSON","where","first","val","parse","value","put","stringify","Dexie","handlers","preConn","clients","sb","netStatus","IDLE","netMode","UNKNOWN","setHandlers","newHandlers","newPreConn","getSeed","get","CERT_SEED","store","Switchboard","makeSeed","getMyID","useLongform","fullID","peerID","getIdFromSeed","makeSB","kill","connectTo","hostID","setMode","CLIENT","RECONNECTING","set","CONNECTING","on","peer","notifications","Client","clientError","WAITING_FOR_HOST","pc","run","debug","verified","CONNECTED","DISCONNECTED","findHost","warn","removeClient","close","openHost","HOST","cli","p","mode","listener","lastSend","stream","userData","username","keyCodes","lastSeen","pingTimer","lastPing","hook","isClosed","Date","now","send","queue","handleMessage","packetBinary","encoder","Uint8Array","h","some","handlePacket","clearTimeout","sendBuffer","expectedType","rej","broadcast","requireHost","Tile","sprite","z","TerrainAddHandler","terrain","tileStacks","stack","tiles","removeAt","dt","sp","spriteIdx","placeAt","setTimeout","broadcastChanges","pollChanges","packedStacks","updateTiles","packer","TerrainEraseHandler","size","tep","Array","from","Terrain","boardWidth","boardHeight","tileIDX","resizeBoard","tList","redraw","exists","mkKey","redrawAt","sendTerrainRemove","isBoardDirty","tile","existing","getAt","isBlocker","k","filter","sendTerrainAdd","selectedSprite","covered","px","py","clearRect","map","drawTo","newTerrain","keys","sort","b","Middleware","hooks","onCleanup","register","target","wrapped","stopPropagation","trg","EntityMiddleware","container","entLayer","ent","moveListener","movePoints","moveTrackers","entityLayer","entEle","clearMover","toggleInput","bringToFront","toGrid","addPoint","mp","remove","last","findIndex","checkDiag","redrawPath","updateEntity","entity","third","distance","reduce","prev","next","dst","innerText","pathLength","p1","p2","offsetX","offsetY","EntityUpdateHandler","entities","addEntity","entityID","entityIsOwned","canMove","visible","proto","owners","Entity","init","uuid","includes","NamePlate","text","color","targY","plates","update","reposition","offsetWidth","offsetHeight","o","overlaps","position","other","right","bottom","n","updateTimer","EntityEle","plateParent","onClick","namePlate","redrawTimer","opacity","props","requestAnimationFrame","animated","bind","cursor","imageWidthPx","useInput","EntityLayer","tileWidth","tileHeight","entityElements","plateEle","enableInput","middleware","sendUpdate","sendDelete","selected","select","setInput","isDirty","setTarget","checkOwner","internalUpdate","enabled","acceptHover","PreCheck","controller","runHandler","host","db","users","addNewUser","user","getTime","updateUser","getUser","checkUserCredentials","userName","keyCode","match","HandShakeCheck","USERNAME","getNextPacket","lobby","addPendingLogin","BoardSync","buildProtoBoard","Lobby","blacklist","title","iconURL","Notification","requestPermission","result","icon","approve","reject","pendingLogins","find","pe","pending","removePending","notify","u","PingHandler","handlePing","boards","save","campaignID","board","load","getAvailable","between","minKey","maxKey","toArray","deleteBoard","Campaign","timeCreated","stripProxy","obj","entries","v","campaigns","saveCampaign","camp","createCampaign","getAllCampaigns","getCampaign","mapToClass","CampaignLoader","campaign","boardDB","loadedBoard","BoardReloadHandler","loadFromProtoBoard","InputDialog","React","useState","setText","handleClose","onCancel","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","tooltip","type","fullWidth","onChange","DialogActions","Button","onSubmit","acceptText","ConfirmPrompt","aria-describedby","prompt","cancelButton","onConfirm","confirmButton","PLAYER_OPTS","playerVars","autoplay","mute","config","volume","loop","saveConf","PLAYER_CONFIG","player","getPlayerStatus","currentVideo","getVideoData","video_id","currentTime","getCurrentTime","playbackRate","getPlaybackRate","paused","getPlayerState","YouTube","PlayerState","PAUSED","YoutubePlayerInterface","observer","setVisible","useMemo","tools","ShuffleButton","pointerEvents","Tooltip","Fab","YoutubePlayer","mediaPlayer","setPlayer","useEffect","timer","getVolume","PLAYING","onReady","onPlay","stat","onPause","nextVideo","onStateChange","CUED","setLoop","setShuffle","setVolume","getPlaylist","playVideoAt","playVideo","LoadPlaylistButton","needPrompt","input","URLSearchParams","split","cuePlaylist","list","listType","index","startSeconds","IconButton","children","MediaSyncHandler","pauseVideo","setPlaybackRate","cueVideoById","videoId","status","MediaSync","GameController","canvasContainer","preChecks","addLayer","hash","location","replace","startHost","startClient","ready","history","pushState","href","connection","pu","rejectUser","setHost","connectID","pb","setDirectMap","getEntityList","includeHidden","getDirectMap","flat","indexOf","UITool","PenMiddleware","canUsePen","hoverBox","toggle","addElement","ke","code","startsWith","updateHighlight","shiftKey","button","xx","yy","draw","out","penSize","eraseAt","drawAt","border","op","removeElement","SpritePicker","defaultTerm","searchTerm","setSearch","setAnimated","setSprites","timeout","results","term","nameOnly","search","toLowerCase","path","searchImages","maxWidth","noValidate","autoComplete","FormGroup","Autocomplete","selectOnFocus","freeSolo","inputValue","onInputChange","newInputValue","onSearch","renderInput","params","FormControlLabel","control","Switch","checked","disabled","canAnimate","inputProps","labelPlacement","SpriteGrid","onSelect","perRow","rowCount","columnCount","columnWidth","rowHeight","maxHeight","spr","columnIndex","rowIndex","SpriteImage","canv","useRef","sel","current","cancel","ref","background","useStyles","makeStyles","theme","createStyles","paper","palette","boxShadow","shadows","padding","spacing","minWidth","SpritePickerModal","classes","Modal","currentSprite","UIPenTool","forMobile","PenControlInterface","pen","registerMiddleware","eject","PenSizeSlider","Typography","gutterBottom","Slider","getAriaValueText","valueLabelDisplay","step","marks","newValue","UICameraTool","UIEraserTool","EraserSizeSlider","UIEntityTool","EntityInterface","root","flexGrow","speedDial","spriteColor","marginLeft","marginTop","marginRight","promptSprite","setSpritePrompt","setSprite","entName","setName","resetValues","EntityEditInterface","evt","Checkbox","justifyContent","screenToBoard","innerWidth","innerHeight","createEntity","trim","promptClone","setClonePrompt","updateInstant","clientNames","cl","userList","saveToCampaign","InputLabel","Select","multiple","Input","renderValue","join","marginBottom","MenuItem","ListItemText","primary","PromptForNumber","num","cloneEntity","setNum","UILobbyTool","LobbyInterface","PendingList","UserList","eles","pl","MenuList","PendingUserEle","disableTouchRipple","approveUser","network","dat","ControlMenu","ui","setOpen","modalOpen","setModalOpen","setTools","selectedTool","setSelected","handleModalClose","emb","getControlUI","Avatar","SpeedDial","ariaLabel","hidden","SpeedDialIcon","onOpen","isOption","action","SpeedDialAction","tooltipTitle","tooltipOpen","handleSelect","LoginHelper","promptLogin","setPrompt","needClient","setNeedClient","PromptNetwork","hosting","txt","ConnectionOverlay","content","message","MATCHMAKING_FAIL","Backdrop","transitionDuration","component","CampaignSelector","need","setNeed","wantOpen","setWantOpen","promptNew","setPromptNew","campaignList","setList","q","storage","setStorage","selectCampaign","CAMPAIGN_CURRENT","loadBoard","loadCampaign","navigator","estimate","usage","quota","undefined","addCampaign","textAlign","CampaignMenu","startIcon","toFixed","bytes","decimals","dm","sizes","parseFloat","formatBytes","anchorEl","setAnchorEl","camps","c1","c2","toLocaleString","htmlFor","currentTarget","overflowX","Menu","keepMounted","Boolean","anchorOrigin","vertical","horizontal","BoardSelector","noWrap","Popover","BoardControlMenu","BoardSelectMenu","overflow","BoardLoadButton","BoardDeleteButton","confirm","needConfirm","BoardCreateButton","handleCreate","BoardSaveButton","shouldSave","saveBoard","noop","App","desktop","useMediaQuery","needName","setNeedName","start","reload","isNetworkReady","CircularProgress","maxSnack","display","flexDirection","hostname","ReactDOM","render","getElementById","serviceWorker","registration"],"mappings":"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","file":"static/js/main.d43619b5.chunk.js","sourcesContent":["module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/web-ui/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/web-ui/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/web-ui/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/web-ui/src/game/net/messageEncoder.worker.ts\")());module.exports.__esModule = true;","module.exports = __webpack_public_path__ + \"static/media/sheet-composite.enc.52e99977.png\";","/*\n * converted from https://www.npmjs.com/package/image-scramble\n */\nvar shuffleSeed = require('shuffle-seed');\n\nvar self = function(img,sliceSize,seed,bmp){\n\tvar i;\n\tvar totalParts = Math.ceil(img.width/sliceSize)*Math.ceil(img.height/sliceSize);\n\tvar inds = [];\n\tvar ctx;\n\tfor(i=0;i<totalParts;i++) inds.push(i);\n\tif(!bmp){\n\t\tvar canvas=document.createElement(\"canvas\");\n\t\tctx=canvas.getContext('2d');\n\t\tcanvas.width=img.width;\n\t\tcanvas.height=img.height;\n\t}\n\n\n\tvar verticalSlices=Math.ceil(img.width/sliceSize);\n\n\tvar getSlices = function(){\n\t\tvar slices = {};\n\t\tvar i;\n\t\tfor(i=0;i<totalParts;i++){\n\t\t\tvar slice = {};\n\t\t\tvar row=parseInt(i/verticalSlices);\n\t\t\tvar col=i-row*verticalSlices;\n\t\t\tslice.x=col*sliceSize;\n\t\t\tslice.y=row*sliceSize;\n\t\t\tslice.width=(sliceSize-(slice.x+sliceSize<=img.width ?  0 : (slice.x+sliceSize)-img.width));\n\t\t\tslice.height=(sliceSize-(slice.y+sliceSize<=img.height ?  0 : (slice.y+sliceSize)-img.height));\n\t\t\tif(!slices[slice.width+\"-\"+slice.height]) slices[slice.width+\"-\"+slice.height]=[];\n\t\t\tslices[slice.width+\"-\"+slice.height].push(slice);\n\t\t}\n\t\treturn slices;\n\t}\n\n\tvar getColsInGroup = function(slices){\n\t\tif(slices.length===1) return 1;\n\t\tvar t = 'init';\n\t\tfor(var i=0;i<slices.length;i++){\n\t\t\tif(t==='init') t = slices[i].y;\n\t\t\tif(t!==slices[i].y){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t}\n\n\tvar getGroup = function(slices){\n\t\tvar self = {};\n\t\tself.slices = slices.length;\n\t\tself.cols = getColsInGroup(slices);\n\t\tself.rows = slices.length/self.cols;\n\t\tself.width = slices[0].width*self.cols;\n\t\tself.height = slices[0].height*self.rows;\n\t\tself.x = slices[0].x;\n\t\tself.y = slices[0].y;\n\t\treturn self;\n\t}\n\n\tvar slices = getSlices();\n\tfor(var g in slices){\n\t\tvar group = getGroup(slices[g]);\n\t\tvar shuffleInd = [];\n\t\tfor(i=0;i<slices[g].length;i++) shuffleInd.push(i);\n\t\tshuffleInd = shuffleSeed.shuffle(shuffleInd,seed);\n\t\tfor(i=0;i<slices[g].length;i++){\n\t\t\tvar s=shuffleInd[i];\n\n\t\t\tvar row=parseInt(s/group.cols);\n\t\t\tvar col=s-row*group.cols;\n\t\t\tvar x=col*slices[g][i].width;\n\t\t\tvar y=row*slices[g][i].height;\n\n\t\t\tctx.drawImage(\n\t\t\t\timg,\n\t\t\t\tgroup.x+x,\n\t\t\t\tgroup.y+y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height,\n\t\t\t\tslices[g][i].x,\n\t\t\t\tslices[g][i].y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height\n\t\t\t);\n\t\t}\n\t}\n\treturn canvas;\n}\n\nmodule.exports=self;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"38b3aa3c469b46feaafa.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"11e5f2faf2f03c808470.worker.js\");\n};","\nfunction renderer(minScale: number, maxScale: number, element: HTMLElement, scaleSensitivity: number = 10){\n    const state = {\n        element,\n        minScale,\n        maxScale,\n        scaleSensitivity,\n        transformation: {\n            originX: 0,\n            originY: 0,\n            translateX: 0,\n            translateY: 0,\n            scale: 1\n        },\n    };\n    return Object.assign({}, canZoom(state), canPan(state), {state});\n}\n\nconst pan = ({ state, originX, originY }: any) => {\n    state.transformation.translateX += originX;\n    state.transformation.translateY += originY;\n    state.element.style.transform =\n        getMatrix({ scale: state.transformation.scale, translateX: state.transformation.translateX, translateY: state.transformation.translateY });\n};\n\nconst canPan = (state: any) => ({\n    panBy: ({ originX, originY }: any) => pan({ state, originX, originY }),\n    panTo: ({ originX, originY, scale }: any) => {\n        state.transformation.scale = scale;\n        pan({ state, originX: originX - state.transformation.translateX, originY: originY - state.transformation.translateY });\n    },\n});\n\n\nconst canZoom = (state: any) => ({\n    zoom: ({ x, y, deltaScale }: any) => {\n        const { left, top } = state.element.getBoundingClientRect();\n        const { minScale, maxScale, scaleSensitivity } = state;\n        const [scale, newScale] = getScale({ scale: state.transformation.scale, deltaScale, minScale, maxScale, scaleSensitivity });\n        const originX = x - left;\n        const originY = y - top;\n        const newOriginX = originX / scale;\n        const newOriginY = originY / scale;\n        const translate = getTranslate({ scale, minScale, maxScale });\n        const translateX = translate({ pos: originX, prevPos: state.transformation.originX, translate: state.transformation.translateX });\n        const translateY = translate({ pos: originY, prevPos: state.transformation.originY, translate: state.transformation.translateY });\n\n        state.element.style.transformOrigin = `${newOriginX}px ${newOriginY}px`;\n        state.element.style.transform = getMatrix({ scale: newScale, translateX, translateY });\n        state.transformation = { originX: newOriginX, originY: newOriginY, translateX, translateY, scale: newScale };\n    }\n});\n\nconst getScale = ({ scale, minScale, maxScale, scaleSensitivity, deltaScale }: any) => {\n    let newScale = scale + (deltaScale / (scaleSensitivity / scale));\n    newScale = Math.max(minScale, Math.min(newScale, maxScale));\n    return [scale, newScale];\n};\n\nconst hasPositionChanged = ({ pos, prevPos }: any) => pos !== prevPos;\n\nconst valueInRange = ({ minScale, maxScale, scale }: any) => scale <= maxScale && scale >= minScale;\n\nconst getTranslate = ({ minScale, maxScale, scale }: any) => ({ pos, prevPos, translate }: any) =>\n    valueInRange({ minScale, maxScale, scale }) && hasPositionChanged({ pos, prevPos })\n        ? translate + (pos - prevPos * scale) * (1 - 1 / scale)\n        : translate;\n\nconst getMatrix = ({ scale, translateX, translateY }: any) =>\n    `matrix(${scale}, 0, 0, ${scale}, ${translateX}, ${translateY})`;\n\nconst listeners: any = [];\n\nfunction listen (ele: HTMLElement|Document|Window, event: string, cb: any, opts: any = {}) {\n    ele.addEventListener(event, cb);\n    const rem = () => ele.removeEventListener(event, cb, opts);\n    listeners.push(rem)\n    return rem;\n}\n\nexport default function Draggable(ele: HTMLElement, parent: HTMLElement) {\n    const instance = renderer(.65, 5, ele, 10);\n    let dragging = false;\n    let lx=0, ly=0;\n    // Global vars to cache event state\n    let evCache: any = [], noScroll = new Set();\n    let prevDiff = -1;\n    listen(parent, \"wheel\", (event: WheelEvent) => {\n        event.preventDefault();\n        instance.zoom({\n            deltaScale: Math.sign(event.deltaY) > 0 ? -1 : 1,\n            x: event.pageX,\n            y: event.pageY\n        });\n    }, { blocking: true });\n\n    listen(parent, 'mouseup', (ev: MouseEvent) => {\n        evCache.splice(0, evCache.length); // Don't cache events for mice.\n        noScroll.clear();\n        dragging = false;\n        prevDiff = -1;\n    });\n\n    // Pointer stuff:\n    listen(parent, 'pointerdown', (ev: PointerEvent) => {\n        evCache.push(ev);\n        lx = ev.clientX;\n        ly = ev.clientY;\n        dragging = true;\n    });\n    listen(window, 'pointermove', (ev: PointerEvent) => {\n        ev.preventDefault();\n        if (!dragging) return;\n        // Find this event in the cache and update its record with this event\n        for (let i = 0; i < evCache.length; i++) {\n            if (ev.pointerId === evCache[i].pointerId) {\n                evCache[i] = ev;\n                break;\n            }\n        }\n        // If two pointers are down, check for pinch gestures\n        if (evCache.length === 2) {\n            // Calculate the distance between the two pointers\n            let curDiff = Math.abs(Math.sqrt(Math.pow(evCache[0].clientX - evCache[1].clientX, 2) + Math.pow(evCache[0].clientY - evCache[1].clientY, 2)));\n\n            if (prevDiff > 0) {\n                let delta = prevDiff - curDiff;\n                let change = (Math.sign(delta) > 0 ? -0.2 : 0.2) * Math.abs(delta)/10;\n                instance.zoom({\n                    deltaScale: change,\n                    x: ev.pageX,\n                    y: ev.pageY\n                });\n                noScroll.add(evCache[0].pointerId);\n                noScroll.add(evCache[1].pointerId);\n            }\n\n            // Cache the distance for the next move event\n            prevDiff = curDiff;\n        } else if (evCache.length === 1 && dragging && !noScroll.has(ev.pointerId)) {\n            instance.panBy({\n                originX: ev.clientX - lx,\n                originY: ev.clientY - ly\n            });\n            lx = ev.clientX;\n            ly = ev.clientY;\n        }\n    });\n\n    listen(window, 'pointerup', (ev: PointerEvent) => {\n        // Remove this event from the target's cache\n        for (let i = 0; i < evCache.length; i++) {\n            if (evCache[i].pointerId === ev.pointerId) {\n                evCache.splice(i, 1);\n                break;\n            }\n        }\n        noScroll.delete(ev.pointerId);\n\n        if (evCache.length < 1) {\n            dragging = false;\n        }\n\n        // If the number of pointers down is less than two then reset diff tracker\n        if (evCache.length < 2) {\n            prevDiff = -1;\n        }\n    });\n\n    return Object.assign({}, instance, {unregister: () => listeners.forEach((l: any) => l())})\n}\n","/** The width of each image/tile, in pixels. */\nexport const imageWidthPx = 48;\n/** The height of each image/tile, in pixels. */\nexport const imageHeightPx = 48;\n\n/** The amount of terrain the board is wide. */\nexport const boardTileWidth = 100;\n/** The amount of terrain the board is tall. */\nexport const boardTileHeight = 100;\n","import sheetSRC from '../../resources/sheet-composite.enc.png';\nconst rawData = require('../../resources/sheet-data.json');\nconst unscramble = require('./unscramble');\n\ninterface DataSheet {\n\tmetadata: {\n\t\twidth: number;\n\t\theight: number;\n\t\tcount: number;\n\t\tuid: string;\n\t};\n\tsprites: Record<string, DataSprite>;\n}\n\ninterface DataSprite {\n\tname: string;\n\tanimated?: number;\n\timages: DataImage[];\n}\n\ninterface DataImage {\n\tx: number;\n\ty: number;\n\tblocker: boolean;\n}\n\nconst data: DataSheet = rawData;  // Type casting here for clarity.\nlet sheet: HTMLCanvasElement = document.createElement('canvas');\nlet spriteWidth: number = data.metadata.width;\nlet spriteHeight: number = data.metadata.height;\nlet globalFrameIndex: number = 0;\nlet fpsTicker: NodeJS.Timeout;\n\nexport const waitForSpriteLoad: Promise<any> = new Promise(res => {\n\tconst img = new Image();\n\timg.onerror = err => {\n\t\tconsole.error(err);\n\t\talert('Failed to waitForSpriteLoad sprite sheet! Cannot continue!');\n\t};\n\timg.onload = () => {\n\t\tsheet = unscramble(img, 24, 'GaiaV2SheetKey-mk1'); // Support the artists - buy from them!\n\t\tres();\n\t};\n\timg.src = sheetSRC;\n\n\tclearInterval(fpsTicker);\n\tfpsTicker = setInterval(() => {\n\t\tglobalFrameIndex++;\n\t\tglobalFrameIndex %= 1000;\n\t}, 200);\n});\n\n/**\n * Locates the metadata for a given Sprite. Raises an Error if the key cannot be found.\n * @param key\n */\nfunction findSpriteData(key: Sprite): DataSprite {\n\tconst ret = data.sprites[key.id];\n\tif (!ret) throw Error(`Unable to locate sprite for key: ${key.composite}`);\n\treturn ret;\n}\n\n/**\n * Render the image, denoted by the given Sprite, to the given Graphics 2D context.\n * @param ctx\n * @param key\n * @param x\n * @param y\n */\nfunction drawImageTo(ctx: CanvasRenderingContext2D, key: Sprite, x: number, y: number) {\n\tconst sprites = findSpriteData(key);\n\tconst img = key.idx < 0 ? sprites.images[globalFrameIndex % sprites.images.length] : sprites.images[key.idx];\n\n\tctx.drawImage(sheet, img.x, img.y, spriteWidth, spriteHeight, x, y, spriteWidth, spriteHeight);\n}\n\n/** Search for images matching the given term. */\nexport function searchImages(term: string, animated: boolean = false, nameOnly: boolean = false) {\n\tconst res: Sprite[] = [];\n\tconst search = Object.entries(data.sprites).filter( (obj) => {\n\t\tif (animated && !obj[1].animated) {\n\t\t\treturn false;\n\t\t}\n\t\tif (nameOnly) {\n\t\t\treturn obj[1].name.includes(term);\n\t\t}\n\n\t\treturn obj[0].includes(term.toLowerCase())\n\t}).map(o => ({ path: o[0], sprite: o[1]}));\n\tif (!animated) {\n\t\tsearch.forEach(o => {\n\t\t\tfor(let i=0; i < o.sprite.images.length; i++) {\n\t\t\t\tres.push(new Sprite(o.path, i));\n\t\t\t}\n\t\t})\n\t} else {\n\t\tsearch.forEach(o => {\n\t\t\tres.push(new Sprite(o.path, -1));\n\t\t})\n\t}\n\n\treturn res;\n}\n\n/**\n * SpriteKeys are used to concisely represent an image (by ID) from the datasheet,\n * as well as which index to use for animating.\n */\nexport class Sprite {\n\tpublic readonly id: string;\n\tpublic readonly idx: number;\n\n\tconstructor(id: string, idx: number) {\n\t\tthis.id = id;\n\t\tthis.idx = idx;\n\t}\n\n\tget composite(): string {\n\t\treturn `${this.id}:${this.idx}`;\n\t}\n\n\tget animated(): boolean {\n\t\treturn this.idx < 0;\n\t}\n\n\tget isBlocker(): boolean {\n\t\tif (this.idx < 0) return false;\n\t\treturn findSpriteData(this).images[this.idx].blocker;\n\t}\n\n\tget name(): string {\n\t\treturn findSpriteData(this).name;\n\t}\n\n\tpublic drawTo(ctx: CanvasRenderingContext2D, x: number, y: number) {\n\t\tdrawImageTo(ctx, this, x, y);\n\t}\n}\n\n\n/*\n\tWrapper for an entire sprite search/selection window.\n\tCreated with a default ID unless specified. All defaults are the same ID, and will overwrite each other to prevent HTML leaks.\n\tSupports hooking the \"onChange(function)\" function, in order to adjust settings.\n\n\tThe image, once selected and loaded/loading, can be reached through [picker].selected_image;\n*/\n/*class SpritePicker{\n\tconstructor(uid=false){\n\t\tlet self = this;\n\t\tthis.folder_base = 'https://rofl.wtf/dnd/';\n\t\tthis.uid = 0;\n\t\tif(uid)this.uid=uid;\n\t\tthis.selected_image = false;\n\t\tthis.on_change = function(){};\n\n\t\tthis.base = $(\"<div>\", {'class':'image_selector', id:'image_selector_'+self.uid});\n\t\tthis.preview = $(\"<div>\").addClass('selected_preview');\n\t\tthis.input = $(\"<input>\",{type:\"text\"});\n\t\tthis.imagelist = $(\"<div>\", {'class':'image_list'});\n\n\t\tthis.input.on(\"keyup\", function(e){\n\t\t\tif (e.keyCode === 13){\n\t\t\t\tself.searchImages($(this).val());\n\t\t\t}\n\t\t});\n\n\t\tthis.preview.on('mouseover', function(){\n\t\t\t// .position() uses position relative to the offset parent,\n\t\t\t// so it supports position: relative parent elements\n\t\t\tlet pos = $(this).offset();\n\n\t\t\t// .outerWidth() takes into account border and padding.\n\t\t\tlet offset = Math.max(0, pos.left -self.base.outerWidth());\n\t\t\t//show the menu directly over the placeholder\n\t\t\tself.base.css({\n\t\t\t\tposition: \"absolute\",\n\t\t\t\ttop: pos.top + \"px\",\n\t\t\t\tleft: offset + \"px\",\n\t\t\t\tzIndex: window.max_panel_index?window.max_panel_index:10,\n\t\t\t}).show();\n\t\t\tself.input.select();\n\t\t});\n\t\tthis.preview.add(this.base).mouseenter(function(){\n\t\t\tself.base.show();\n\t\t}).mouseleave(function() {\n\t\t\tself.base.hide();\n\t\t});\n\n\t\tthis.base.append($(\"<b>Search for Sprites:</b><br>\"));\n\t\tthis.base.append(this.input);\n\t\tthis.base.append(this.imagelist);\n\n\t\t$( \"#image_selector_\"+this.uid ).remove();\n\t\t$(document.body).append(this.base);\n\t\tthis.searchImages('/');\n\t}\n\n\tsetDefault(image){\n\t\tthis.selected_image = image;\n\t\tthis.updatePreview();\n\t}\n\n\t// noinspection JSUnusedGlobalSymbols\n\tsetColor(col){\n\t\tthis.preview.css('background-color', col);\n\t\tconsole.log(col);\n\t\tif(this.selected_image)\n\t\t\tthis.preview.css('background-color', 'inherit');\n\t}\n\n\tsearchImages(text){\n\t\tlet self = this;\n\t\tif(text.trim() === '' || !text)\n\t\t\treturn;\n\t\t$.getJSON( self.folder_base+\"images.php?term=\"+text, function( data ) {\n\t\t\tlet items = [];\n\t\t\t$.each( data, function( key, obj ) {\n\t\t\t\tif(obj['dir']){\n\t\t\t\t\tlet ele = $(\"<span>\", {'class':'loaded_dir'});\n\t\t\t\t\tlet an = $(\"<a>\", {title:obj.text});\n\t\t\t\t\tan.text(obj.text);\n\t\t\t\t\tan.on('click', function(){\n\t\t\t\t\t\tself.searchImages(obj.id);\n\t\t\t\t\t});\n\t\t\t\t\tele.append(an);\n\t\t\t\t\titems.push(ele);\n\t\t\t\t\titems.push($(\"<br>\"));\n\t\t\t\t}\n\t\t\t});\n\t\t\t$.each( data, function( key, obj ) {\n\t\t\t\tif(!obj['dir']){\n\t\t\t\t\t//let sp = $(\"<span/>\", {'class':'loaded_image'});\n\t\t\t\t\tlet im = $(\"<img />\", {src:self.folder_base+'/resources/images/spritesheets/crawl/' + obj.id, title:obj.text, 'class':'loaded_image'});\n\t\t\t\t\tim.on('click', function(){\n\t\t\t\t\t\tself.selectImage($(this));\n\t\t\t\t\t});\n\t\t\t\t\t//sp.append(im);\n\t\t\t\t\titems.push(im);\n\t\t\t\t}\n\t\t\t});\n\t\t\tself.imagelist.empty();\n\t\t\tlet sp = $(\"<span>\", {'class':'image_list_span'});\n\t\t\titems.forEach(function(e){sp.append(e);} );\n\t\t\tself.imagelist.append(sp);\n\t\t});\n\t}\n\n\tselectImage(ele){\n\t\t$( \".selected_image\" ).removeClass( \"selected_image\" );\n\t\tconsole.log(ele.attr('src'));\n\t\tthis.selected_image = sprites.getImage(ele.attr('src'));\n\t\tele.addClass(\"selected_image\");\n\n\t\tthis.updatePreview();\n\t\tthis.on_change();\n\n\t\tlet block = false;// Auto-adjust cursor solid box, for ease of use.\n\t\t['wall', 'closed', 'statue', 'tree', 'vault', 'altar', 'uf_map'].forEach(function(h){\n\t\t\tif(ele.attr('src').toLowerCase().includes(h.toLowerCase()))\n\t\t\t\tblock = true;\n\t\t});\n\t\tpen.setSolid(block);\n\t}\n\n\tupdatePreview(){\n\t\tif(this.selected_image){\n\t\t\tthis.preview.empty();\n\t\t\tthis.preview.append($('<img />').attr('src', this.selected_image.src).css('width', '100%').css('width', '100%'));\n\t\t\tthis.preview.css('background-color', 'inherit');\n\t\t}else{\n\t\t\tthis.preview.html(\"\");\n\t\t}\n\t}\n\n\t// Register the listen function to execute when this image is updated.\n\tonChange(func){\n\t\tthis.on_change = func;\n\t}\n}\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n","import Draggable from '../util/draggable';\nimport Middleware from \"../middleware/middleware\";\nimport EntityLayer from \"./entities\";\nimport {boardTileHeight, boardTileWidth, imageHeightPx, imageWidthPx} from \"../consts\";\n\n\nexport class CanvasContainer {\n    private readonly base: HTMLDivElement;\n    private readonly wrapper: HTMLDivElement;\n    private readonly canvases: (Canvas|EntityLayer)[] = [];\n    private width: number;\n    private height: number;\n    private renderer: any;\n\n    constructor(width: number = 4800, height: number = 4800) {\n        this.width = width;\n        this.height = height;\n        this.base = document.createElement('div');\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'canvasWrapper';\n        this.wrapper.style.backgroundColor = 'gray';\n        this.base.className = 'canvasBase';\n\n        this.base.prepend(this.wrapper);\n        document.body.prepend(this.base);\n        this.renderer = Draggable(this.wrapper, this.base);\n        this.setCanvasSize(width, height);\n        this.resetView();\n    }\n\n    public addLayer(canvas: Canvas|EntityLayer) {\n        this.canvases.push(canvas);\n        canvas.setSize(this.width, this.height);\n        canvas.appendTo(this.wrapper);\n    }\n\n    public addElement(object: HTMLElement) {\n        return this.wrapper.appendChild(object);\n    }\n\n    public removeElement(object: HTMLElement) {\n        return this.wrapper.removeChild(object);\n    }\n\n    public setCanvasSize(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.wrapper.style.width = `${this.width}px`;\n        this.wrapper.style.height = `${this.height}px`;\n        this.canvases.forEach(c => c.setSize(width, height));\n        this.resetView();\n    }\n\n    public resetView() {\n        this.renderer.panTo({\n            originX: this.width/2 * -1 + this.base.getBoundingClientRect().width/2,\n            originY: this.height/2 * -1 + this.base.getBoundingClientRect().height/2,\n            scale: 0.99\n        });\n    }\n\n    /**\n     * Convert the given screen pixel coords to the (nearest) Board tile (x,y) pair.\n     */\n    public screenToBoard(x: number, y: number) {\n        const rect = this.wrapper.getBoundingClientRect();\n        const scale = this.renderer.state.transformation.scale;\n\n        console.log('locating:', x, y, scale, rect);\n        const coords = {\n            x: Math.max(0, Math.min(boardTileWidth-1, Math.floor((x - rect.x) / scale / imageWidthPx))),\n            y: Math.max(0, Math.min(boardTileHeight-1, Math.floor((y - rect.y) / scale / imageHeightPx)))\n        };\n\n        console.log(coords);\n\n        return coords\n    }\n}\n\nexport class Canvas {\n    public readonly name: string;\n    protected readonly canvas: HTMLCanvasElement;\n    private readonly context: CanvasRenderingContext2D;\n\n    constructor(name: string) {\n        this.name = name;\n        this.canvas = document.createElement('canvas');\n        this.canvas.id = `canvas-${name}`;\n        this.canvas.className = 'canvasBackground';\n\n        // @ts-ignore\n        this.context = this.canvas.getContext('2d');\n        this.canvas.addEventListener('contextmenu', e => e.preventDefault());\n    }\n\n    public get ctx(): CanvasRenderingContext2D {\n        return this.context;\n    }\n\n    public get width(): number {\n        return this.canvas.width;\n    }\n\n    public get height(): number {\n        return this.canvas.height;\n    }\n\n    public setSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    }\n\n    public appendTo(ele: HTMLDivElement) {\n        ele.append(this.canvas);\n    }\n\n    public registerMiddleware(mdl: Middleware) {\n        mdl.attach(this.canvas);\n    }\n}\n","import {TerrainAddPacket, TerrainErasePacket} from \"./terrainPackets\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard, ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"./entityPackets\";\nimport {PingPacket, ReadyPacket, SignaturePacket} from \"./util-packets\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"./media-packets\";\n\nexport const packetList: typeof ProtoWrapper[] = [\n    SignaturePacket,\n    ReadyPacket,\n    TerrainErasePacket,\n    TerrainAddPacket,\n    ProtoBoard,\n    ProtoTileStack,\n    EntityUpdatePacket,\n    EntityDeletePacket,\n    PingPacket,\n    MediaStatusPacket,\n    MediaRequestPacket\n];\n\nexport const packetMap: Record<string, number> = {};\n\nfor (let i=0; i<packetList.length; i++) {\n    packetMap[packetList[i].$type.name] = i;\n}\n","import { useSnackbar, WithSnackbarProps, OptionsObject } from 'notistack'\nimport React from 'react'\n\nlet snackbarRef: WithSnackbarProps;\n\n\nexport const SnackbarUtilsConfigurator: React.FC = () => {\n    snackbarRef = useSnackbar();\n    return null;\n};\n\nexport default {\n    success(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'success' })\n    },\n    warning(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'warning' })\n    },\n    info(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'info' })\n    },\n    error(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'error' })\n    },\n    toast(msg: string, options: OptionsObject = {}) {\n        snackbarRef.enqueueSnackbar(msg, options)\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\nexport default abstract class Handler {\n    /** The type of packet this handler is listening for. */\n    public abstract readonly packets: typeof ProtoWrapper[];\n    private isHost: boolean = false;\n\n    setHost(isHost: boolean) {\n        this.isHost = isHost;\n    }\n\n    async handlePacket(client: Client, packet: ProtoWrapper) {\n        return this.isHost ? this.hostHandler(client, packet) : this.clientHandler(client, packet);\n    }\n\n    abstract async clientHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n    abstract async hostHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n}\n","import {Message} from \"protobufjs/light\";\n\n/**\n * Wrapper for protobuf Message, which allows quick & typed constructor unpacking.\n */\nexport default class ProtoWrapper<T extends object = object> extends Message<T>{\n    /**\n     * Shortcut to assign the given values to this object, then return it.\n     */\n    assign(values: Partial<this>): this {\n        return Object.assign(this, values)\n    }\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\n\n@Type.d(\"ProtoSprite\")\nexport class ProtoSprite extends ProtoWrapper<ProtoSprite> {\n    @Field.d(1, \"string\", \"required\", \"\")\n    public id: string = '';\n\n    @Field.d(2, \"int32\", \"required\", 0)  // Use \"sint32\" if idx will be negative often.\n    public idx: number = 0;\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\nimport {ProtoSprite} from \"./proto-sprite\";\n\n@Type.d(\"ProtoEntity\")\nexport class ProtoEntity extends ProtoWrapper<ProtoEntity> {\n    @Field.d(1, ProtoSprite, \"required\")\n    public sprite: ProtoSprite = new ProtoSprite();\n\n    @Field.d(2, 'int32', \"required\")\n    public x: number = 0;\n\n    @Field.d(3, 'int32', \"required\")\n    public y: number = 0;\n\n    @Field.d(4, 'bool', \"required\")\n    public visible: boolean = false;\n\n    @Field.d(5, 'string', \"required\")\n    public color: string = '';\n\n    @Field.d(6, 'string', \"required\")\n    public id: string = '';\n\n    @Field.d(7, 'string', \"repeated\")\n    public owners: string[] = [];\n\n    @Field.d(8, 'bool', \"required\")\n    public saveToCampaign: boolean = false;\n\n    @Field.d(9, 'string', \"required\")\n    public name: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from './proto-wrapper';\nimport {ProtoSprite} from \"./proto-sprite\";\nimport {ProtoEntity} from \"./proto-entity\";\n\n\n@Type.d(\"ProtoTile\")\nexport class ProtoTile extends ProtoWrapper<ProtoTile> {\n    @Field.d(1, \"int32\", \"required\", 0)\n    public x: number = 0;\n\n    @Field.d(2, \"int32\", \"required\", 0)\n    public y: number = 0;\n\n    @Field.d(3, \"int32\", \"required\", 0)\n    public z: number = 0;\n\n    @Field.d(4, \"int32\", \"required\", 0)\n    public spriteIdx: number = 0;\n}\n\n@Type.d(\"ProtoTileStack\")\nexport class ProtoTileStack extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTile, \"repeated\")\n    public tiles: ProtoTile[] = [];\n\n    @Field.d(2, ProtoSprite, \"repeated\")\n    public sprites: ProtoSprite[] = [];\n}\n\n\n@Type.d(\"ProtoBoard\")\nexport class ProtoBoard extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTileStack, \"required\")\n    public terrain: ProtoTileStack|null = null;\n    @Field.d(2, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\n\n@Type.d(\"TerrainAddPacket\")\nexport class TerrainAddPacket extends ProtoWrapper<TerrainAddPacket> {\n    @Field.d(1, ProtoTileStack, \"repeated\")\n    public tileStacks: ProtoTileStack[] = [];\n}\n\n@Type.d(\"TerrainCoordPacket\")\nexport class TerrainCoordPacket extends ProtoWrapper<TerrainCoordPacket> {\n    @Field.d(1, 'int32', \"required\")\n    public x: number = 0;\n    @Field.d(2, 'int32', \"required\")\n    public y: number = 0;\n}\n\n@Type.d(\"TerrainErasePacket\")\nexport class TerrainErasePacket extends ProtoWrapper<TerrainErasePacket> {\n    @Field.d(1, TerrainCoordPacket, \"repeated\")\n    public coords: TerrainCoordPacket[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\n@Type.d(\"EntityUpdatePacket\")\nexport class EntityUpdatePacket extends ProtoWrapper<EntityUpdatePacket> {\n    @Field.d(1, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n\n\n@Type.d(\"EntityDeletePacket\")\nexport class EntityDeletePacket extends ProtoWrapper<EntityDeletePacket> {\n    @Field.d(1, 'string', \"required\")\n    public entityID: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"PingPacket\")\nexport class PingPacket extends ProtoWrapper<PingPacket> {}\n\n@Type.d(\"SignaturePacket\")\nexport class SignaturePacket extends ProtoWrapper<SignaturePacket> {\n    @Field.d(1, \"string\", \"required\", 'def')\n    public username: string = '';\n}\n\n@Type.d(\"ReadyPacket\")\nexport class ReadyPacket extends ProtoWrapper<ReadyPacket> {}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"MediaStatusPacket\")\nexport class MediaStatusPacket extends ProtoWrapper<MediaStatusPacket> {\n    @Field.d(1, 'string', \"required\")\n    public currentVideo: string = '';\n    @Field.d(2, 'uint32', \"required\")\n    public playbackRate: number = 1;\n    @Field.d(3, 'bool', \"required\")\n    public paused: boolean = false;\n    @Field.d(4, 'uint32', \"required\")\n    public currentTime: number = 0;\n}\n\n\n@Type.d(\"MediaRequestPacket\")\nexport class MediaRequestPacket extends ProtoWrapper<MediaRequestPacket> {}\n","import * as worker from './messageEncoder.worker';\nimport { packetList, packetMap } from \"./packets/packet-list\";\n\n/**\n * Use a Web Worker thread to encode the given ProtoWrapper object into a compressed binary buffer.\n * @param packet\n */\nexport async function encode(packet: any): Promise<Uint8Array> {\n    const id = packetMap[packet.$type.name];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error encoding packet: Unknown type: \"${packet.constructor.name}\"!`)\n\n    return await worker.workerEncode(packet, id)\n}\n\n/**\n * Use a Web Worker thread to decompress a binary buffer into a ProtoWrapper object, properly cast to the correct subclass.\n * @param data\n */\nexport async function decode(data: Uint8Array): Promise<any> {\n    const id = data.slice(0,1)[0];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error decoding packet: Unknown ID: [${id}], (${data.length})!`);\n\n    return new clazz().assign(await worker.workerDecode(data));\n}\n","import Dexie from \"dexie\";\nimport {observable} from \"mobx\";\n\nexport const currentUsername = observable.box<string>('');\n\nexport enum Meta {\n    CERT_SEED = 'secret_cert_seed',\n    USERNAME = 'username',\n    CAMPAIGN_CURRENT = 'campaign_current',\n    PLAYER_CONFIG = 'player_config',\n}\n\n\nclass MetaDB extends Dexie {\n    data: Dexie.Table<any, string>;\n\n    constructor() {\n        super(\"metadata-db\");\n\n        // Define tables and indexes\n        this.version(1).stores({\n            data: 'id'\n        });\n        this.data = this.table(\"data\");\n    }\n\n    public async get(id: Meta): Promise<any> {\n        return JSON.parse((await this.data\n            .where({id})\n            .first())?.val || 'null');\n    }\n\n    public async store(id: Meta, value: any): Promise<string> {\n        return this.data.put({\n            id,\n            val: JSON.stringify(value),\n        });\n    }\n}\n\nexport const metadata = new MetaDB();\n","/**\n * Chain promises sequentially, with a maximum stack size.\n */\nexport default class PromiseStream {\n    private prom: Promise<any> = Promise.resolve();\n    private readonly maxBackpressure: number;\n    private backPressure: number = 0;\n\n    constructor(maxBackpressure: number = 0) {\n        this.maxBackpressure = maxBackpressure\n    }\n\n    get length() {\n        return this.backPressure;\n    }\n\n    public queue(fn: Function, onError: Function|null = null) {\n        if (this.maxBackpressure && this.backPressure >= this.maxBackpressure) {\n            throw Error('Max backpressure reached!')\n        }\n        this.backPressure++;\n\n        this.prom = this.prom.then( async () => {\n            await fn();\n        }).catch( async err => {\n            if (onError) {\n                await onError(err);\n            } else {\n                console.error(err);\n            }\n        }).then(() => {\n            this.backPressure--;\n        })\n    }\n}\n","import Handler from \"./handlers/handler\";\nimport {IObservableValue, observable, ObservableSet} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\nimport * as encoder from './messageEncoder';\nimport ProtoWrapper from \"../data/protobufs/proto-wrapper\";\nimport PromiseStream from \"../util/promiseStream\";\nimport {PreCheck} from \"./prechecks/precheck\";\nimport {UserData} from \"../db/user-db\";\nimport {PingPacket} from \"./packets/util-packets\";\nimport {Switchboard} from \"switchboard.js/build/module/switchboard\"; // TODO: Clean this up when lib is done.\nimport {ConnectedPeer} from \"switchboard.js/build/module/tracker\";\nimport {metadata, Meta} from \"../db/metadata-db\";\n\nexport enum NetworkStatus {\n    IDLE,\n    CONNECTED,\n    CONNECTING,\n    RECONNECTING,\n    DISCONNECTED,\n    MATCHMAKING_FAIL,\n    WAITING_FOR_HOST\n}\n\nexport enum NetworkMode {\n    UNKNOWN,\n    HOST,\n    CLIENT,\n}\n\nlet handlers: Handler[] = [];\nlet preConn: PreCheck[] = [];\n\nexport const clients: ObservableSet<Client> = observable(new Set<Client>());\n\nlet sb: Switchboard | null = null;\nexport let netStatus: IObservableValue<NetworkStatus> = observable.box(NetworkStatus.IDLE);\nexport let netMode: IObservableValue<NetworkMode> = observable.box(NetworkMode.UNKNOWN);\n\nexport function setHandlers(newHandlers: Handler[], newPreConn: PreCheck[]) {\n    handlers = newHandlers;\n    preConn = newPreConn\n}\n\n/**\n * Get the seed that can regenerate the public/private key.\n * If one does not exist already, it is created.\n */\nasync function getSeed(): Promise<string> {\n    let seed = await metadata.get(Meta.CERT_SEED);\n\n    if (!seed) {\n        await metadata.store(Meta.CERT_SEED, seed = Switchboard.makeSeed());\n    }\n\n    return seed;\n}\n\n/**\n * Get the current local peer ID. Generates a new one if it does not already exist.\n * @param useLongform\n */\nexport async function getMyID(useLongform: boolean = false) {\n    if (sb) {\n        return useLongform ? sb.fullID : sb.peerID;\n    }\n    return Switchboard.getIdFromSeed(await getSeed(), useLongform);\n}\n\n/**\n * Kill any running SwitchBoard, and start a new one.\n */\nexport async function makeSB() {\n    if (sb) {\n        sb.kill(new Error('Closed to launch new Peer connection.'));\n    }\n    return new Switchboard({\n        seed: await getSeed()\n    });\n}\n\nexport async function connectTo(hostID: string): Promise<any> {\n    await setMode(NetworkMode.CLIENT);\n    if (netStatus.get() !== NetworkStatus.RECONNECTING) netStatus.set(NetworkStatus.CONNECTING);\n\n    sb = await makeSB();\n\n    sb.on('peer', async (peer) => {\n        notifications.success('Connected to host!');\n\n        const client = new Client(peer, handlers);\n        peer.on('close', () => clientError('host disconnected', client));\n        peer.on('error', (err: any) => clientError(err, client));\n\n        try {\n            netStatus.set(NetworkStatus.WAITING_FOR_HOST);\n            for (const pc of preConn) {\n                await pc.run(false, client);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            client.verified = true;\n            clients.add(client);\n            netStatus.set(NetworkStatus.CONNECTED);\n        } catch (err) {\n            console.error('failed validation', err);\n        }\n    });\n\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n    });\n\n    sb.findHost(hostID);\n}\n\nexport async function clientError(err: any, client: Client): Promise<any> {\n    console.warn('Client Error:', err);\n    removeClient(client);\n    client.close();\n\n    console.log('Reconnecting to host...');\n    netStatus.set(NetworkStatus.RECONNECTING);\n}\n\nexport async function openHost() {\n    await setMode(NetworkMode.HOST);\n\n    sb = await makeSB();\n\n    netStatus.set(NetworkStatus.CONNECTED);\n\n    sb.on('peer', async peer => {\n        console.warn('Client connected!');\n        const cli = new Client(peer, handlers);\n\n        peer.on('close', () => {\n            console.debug('Client dropped:', cli);\n            removeClient(cli);\n        });\n\n        try {\n            for (const pc of preConn) {\n                await pc.run(true, cli);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            cli.verified = true;\n            clients.add(cli);\n        } catch (err) {\n            console.error(err);\n            cli.close();\n        }\n    });\n}\n\nexport async function kill(): Promise<void> {\n    if (sb) {\n        clients.forEach(p => {\n            p.close();\n            removeClient(p);\n        });\n        netMode.set(NetworkMode.UNKNOWN);\n        netStatus.set(NetworkStatus.IDLE);\n        sb.kill();\n        sb = null;\n    }\n}\n\n/**\n * Destroy the connection and set the new mode.\n * @param mode\n */\nasync function setMode(mode: NetworkMode) {\n    await kill();\n    netMode.set(mode);\n}\n\nfunction removeClient(client: Client) {\n    clients.delete(client);\n}\n\n\nexport class Client {\n    private peer: ConnectedPeer;\n    private listener: Function|null = null;\n    private readonly handlers: Handler[];\n    public verified: boolean = false;\n    private lastSend = Promise.resolve();\n    private stream = new PromiseStream();\n    public userData: UserData = {id: -1, username: 'null', keyCodes:[], lastSeen: 0};\n    private readonly pingTimer: any = null;\n    public lastPing: number = 0;\n\n    constructor(peer: ConnectedPeer, handlers: Handler[]) {\n        this.peer = peer;\n        this.handlers = handlers;\n        this.hook();\n\n        this.pingTimer = setInterval(() => {\n            if (!this.verified) return;\n            if (this.peer.isClosed) return this.close();\n            if (!this.lastPing) {\n                this.lastPing = Date.now();\n                return;\n            } else if (Date.now() - this.lastPing > 15000) {\n                console.warn('Ping timeout.')\n                return this.close();\n            }\n            this.send(new PingPacket()).then();\n        }, 10000)\n    }\n\n    hook() {\n        const self = this;\n        this.peer.on('data', (data: any) => {\n            self.stream.queue(() => self.handleMessage(data), ()=>this.peer.close())\n        });\n        this.peer.on('error', (err) => {\n            console.error('Client error:', err);\n            this.peer.close();\n        });\n    }\n\n    get id() {\n        return this.peer.id;\n    }\n\n    async handleMessage(packetBinary: ArrayBuffer) {\n        try {\n            const packet: ProtoWrapper = await encoder.decode(new Uint8Array(packetBinary));\n            if (this.listener) {\n                this.listener(packet);\n            } else if (!this.verified) {\n                // noinspection ExceptionCaughtLocallyJS\n                throw Error(`Error: Unexpected packet sent before verification: ${packet}`);\n            } else {\n                console.debug('Incoming Packet:', packet);\n                for (const h of this.handlers) {\n                    // @ts-ignore\n                    if (h.packets.some(p => packet.$type === p.$type)) {\n                        return await h.handlePacket(this, packet);\n                    }\n                }\n            }\n        } catch (err) {\n            console.error(err);\n            this.close();\n        }\n    }\n\n    close() {\n        if (this.listener) {\n            // TODO: Add to blacklist on current SwitchBoard.\n            this.listener(null);\n        }\n        if (this.pingTimer) clearTimeout(this.pingTimer);\n\n        this.peer.close();\n    }\n\n    /**\n     * Sends the given Packet to the client.\n     * Utilizes an internal \"rolling Promise\" to assure that all messages are sent in order.\n     * @param packet\n     */\n    async send(packet: ProtoWrapper) {\n        console.debug('Sending client:', packet);\n        this.lastSend = this.lastSend.then(async () => {\n            this.sendBuffer(await encoder.encode(packet));\n        }).catch(err => {\n           console.error(`Error sending message to client:`, err);\n        });\n    }\n\n    sendBuffer(data: Uint8Array) {\n        this.peer.send(data);\n    }\n\n    /**\n     * Wait for the next packet, whatever it may be.\n     * Only one listener may be waiting at any given time, or an error will be thrown on subsequent registrations.\n     * @param expectedType\n     */\n    getNextPacket(expectedType: any): Promise<any> {\n        if (this.listener) throw Error('Attempted to overwrite client listener!');\n\n        return new Promise((res, rej) => {\n            this.listener = (packet: any) => {\n                this.listener = null;\n                if (!(packet instanceof expectedType)) {\n                    return rej(`Unexpected packet type: ${packet} !== ${expectedType}`)\n                }\n                return res(packet);\n            }\n        });\n    }\n}\n\n/**\n * Broadcast the given data to all connected connections.\n * If `requireHost` is true, will only send while we are hosting.\n * @param packet\n * @param requireHost\n */\nexport async function broadcast(packet: ProtoWrapper, requireHost: boolean) {\n    if (requireHost && netMode.get() !== NetworkMode.HOST) {\n        return;\n    }\n    const data = await encoder.encode(packet)\n\n    clients.forEach(c => c.sendBuffer(data));\n}\n\nexport function isHost() {\n    return netMode.get() === NetworkMode.HOST\n}\n","import {Sprite} from \"../../util/sprite-loading\";\n\nexport class Tile {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public sprite: Sprite;\n\n    constructor(sprite: Sprite) {\n        this.sprite = sprite;\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport * as packer from '../../data/board-packer.worker';\nimport {TerrainAddPacket} from \"../packets/terrainPackets\";\nimport {Tile} from \"../../data/interfaces/tile\";\n\n\nexport default class TerrainAddHandler extends Handler {\n    private static tiles: Tile[][] = [];\n    readonly packets: typeof ProtoWrapper[] = [TerrainAddPacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainAddHandler.broadcastChanges();\n            TerrainAddHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainAddPacket): Promise<void> {\n        for (const data of packet.tileStacks) {\n            if (!data) return;\n            const stack = data.tiles;\n\n            if (stack.length) {\n                this.terrain.removeAt(stack[0].x, stack[0].y, false);\n                for (let i=0; i < stack.length; i++) {\n                    const dt = stack[i];\n                    const sp = data.sprites[dt.spriteIdx];\n                    const t = new Tile(new Sprite(sp.id, sp.idx));\n                    this.terrain.placeAt(dt.x, dt.y, t, i === stack.length-1, false);\n                }\n            }\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        throw Error('Client sent host new Terrain data. Not allowed.')\n    }\n\n    static async broadcastChanges() {\n        if (TerrainAddHandler.tiles.length) {\n            const packedStacks: ProtoTileStack[] = []\n            const updateTiles = TerrainAddHandler.tiles.splice(0, TerrainAddHandler.tiles.length);\n\n            for (const t of updateTiles) {\n                packedStacks.push(await packer.packTiles(t));\n            }\n\n            await broadcast(new TerrainAddPacket().assign({\n                tileStacks: packedStacks\n            }), true);\n        }\n    }\n\n    static sendTerrainAdd(tiles: Tile[]) {\n        if (isHost()) TerrainAddHandler.tiles.push(tiles);\n    }\n}\n\nTerrainAddHandler.pollChanges();\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {TerrainCoordPacket, TerrainErasePacket} from \"../packets/terrainPackets\";\n\nexport default class TerrainEraseHandler extends Handler {\n    private static tiles: Set<TerrainCoordPacket> = new Set();\n    readonly packets: typeof ProtoWrapper[] = [TerrainErasePacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainEraseHandler.broadcastChanges();\n            TerrainEraseHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainErasePacket): Promise<void> {\n        for (const t of packet.coords) {\n            this.terrain.removeAt(t.x, t.y, true);\n        }\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client attempted to erase terrain. Not allowed.')\n    }\n\n    /**\n     * Batches the removed terrain coords, to be sent shortly after.\n     * @param x\n     * @param y\n     */\n    static sendTerrainRemove(x: number, y: number) {\n        if (isHost()) TerrainEraseHandler.tiles.add(new TerrainCoordPacket().assign({ x, y}));\n    }\n\n    /**\n     * Sends all the batched changes. Runs on a loop. Can be called manually to instantly send all changes.\n     */\n    static async broadcastChanges() {\n        if (TerrainEraseHandler.tiles.size) {\n            const tep  = new TerrainErasePacket().assign({\n                coords: Array.from(TerrainEraseHandler.tiles)\n            });\n            TerrainEraseHandler.tiles.clear();\n            await broadcast(tep, true);\n        }\n    }\n}\n\nTerrainEraseHandler.pollChanges();\n","import {Canvas} from \"./canvas\";\nimport {Sprite} from \"../util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport {Tile} from \"../data/interfaces/tile\";\n\n\nexport default class Terrain extends Canvas {\n    private readonly terrain: Record<string, Tile[]> = {};\n    public boardWidth: number = 0;\n    public boardHeight: number = 0;\n    public tileIDX: number = 0; // Simple counter to track terrain in the order they were placed.\n    @observable public selectedSprite: Sprite | null = null;\n    @observable public isBoardDirty: boolean = false;\n\n    constructor(width: number, height: number) {\n        super('terrain');\n        this.resizeBoard(width, height);\n    }\n\n    public resizeBoard(width: number, height: number) {\n        this.boardWidth = width;\n        this.boardHeight = height;\n        for (const tList of Object.values(this.terrain)) {\n            const x = tList[0].x;\n            const y = tList[0].y;\n            if (x > this.boardWidth || y > this.boardHeight) {\n                this.removeAt(x, y);\n            }\n        }\n    }\n\n    /**  Derive new tile widthxheight whenever this canvas is resized. */\n    public setSize(width: number, height: number) {\n        super.setSize(width, height);\n        this.resizeBoard(Math.floor(width/imageWidthPx), Math.floor(height/imageHeightPx));\n    }\n\n    public removeAt(x: number, y: number, redraw: boolean = true): boolean {\n        const exists = this.terrain[Terrain.mkKey(x, y)]?.length;\n        if (exists) {\n            delete this.terrain[Terrain.mkKey(x, y)];\n            if (redraw) this.redrawAt(x, y);\n        }\n        return !!exists;\n    }\n\n    /**\n     * Same as removeAt, but send events to clients.\n     * @param x\n     * @param y\n     */\n    public eraseAt(x: number, y: number) {\n        if (this.removeAt(x, y, true)) {\n            TerrainEraseHandler.sendTerrainRemove(x, y);\n            if (!this.isBoardDirty) this.isBoardDirty = true;\n        }\n    }\n\n    /**\n     * Place the given Tile at the given coords, optionally skipping redrawing.\n     * This method is smart, and auto-handles tile overlay logic.\n     * @param x\n     * @param y\n     * @param tile\n     * @param redraw\n     * @param broadcast\n     */\n    public placeAt(x: number, y: number, tile: Tile, redraw: boolean = true, broadcast: boolean = false): boolean {\n        const existing = this.getAt(x, y);\n        if (existing.length && existing[existing.length-1].sprite.composite === tile.sprite.composite) {\n            // The given sprite is already at the top of the stack; Skip adding because it won't do anything.\n            return false;\n        }\n        if (tile.sprite.isBlocker) {\n            this.removeAt(x, y, false);\n        }\n        const k = Terrain.mkKey(x, y);\n        this.terrain[k] = this.terrain[k]?.filter(t => t.sprite.composite !== tile.sprite.composite) || [];  // Filter duplicates.\n        this.terrain[k].push(tile);\n        tile.x = x;\n        tile.y = y;\n        tile.z = this.tileIDX++;\n        if (redraw) this.redrawAt(x, y);\n        if (broadcast) TerrainAddHandler.sendTerrainAdd(this.terrain[k]);\n        if (!this.isBoardDirty) this.isBoardDirty = true;\n        return true;\n    }\n\n    /**\n     * Draw the currently-selected sprite onto the given coords.\n     * @param x\n     * @param y\n     */\n    public drawAt(x: number, y: number): boolean {\n        if (x < 0 || x >= this.boardWidth || y < 0 || y >= this.boardHeight) {\n            return false;\n        }\n        if (this.selectedSprite) {\n            return this.placeAt(x, y, new Tile(this.selectedSprite), true, true);\n        }\n        return false;\n    }\n\n    public getAt(x: number, y: number): Tile[] {\n        return this.terrain[Terrain.mkKey(x, y)] || [];\n    }\n\n    private redrawAt(x: number, y: number) {\n        const tiles = this.getAt(x, y);\n        const covered = tiles.some(t => t.sprite.isBlocker);\n        const px = x * imageWidthPx;\n        const py = y * imageHeightPx;\n        if (!covered || !tiles.length) {\n            this.ctx.clearRect(px, py, imageWidthPx, imageHeightPx);\n        }\n        tiles.map(t => t.sprite.drawTo(this.ctx, px, py));\n    }\n\n    /**\n     * Directly export the underlying terrain map, for serialization.\n     */\n    getDirectMap() {\n        return this.terrain;\n    }\n\n    /**\n     * Import a serialized tile map, over the current data.\n     * @param newTerrain\n     */\n    setDirectMap(newTerrain: ProtoBoard) {\n        if (!newTerrain.terrain) throw Error('Malformed packet.')\n        for (const k of Object.keys(this.terrain)) {\n            const t = this.terrain[k][0];\n            this.removeAt(t.x, t.y, true);\n        }\n\n        for (const k of newTerrain.terrain.tiles.sort((a, b) => a.z - b.z)) {\n            const sp = newTerrain.terrain.sprites[k.spriteIdx];\n            this.placeAt(k.x, k.y, new Tile(new Sprite(sp.id, sp.idx)), false, false);\n        }\n        for (const k of Object.keys(this.terrain)) {\n            this.redrawAt(this.terrain[k][0].x, this.terrain[k][0].y)\n        }\n    }\n\n    private static mkKey(x: number, y: number): string {\n        return `${x},${y}`;\n    }\n}\n","\nexport default abstract class Middleware {\n    private ele: HTMLElement|null = null;\n    private hooks: any[] = [];\n\n    public eject() {\n        this.hooks.forEach(h => h());\n        this.onCleanup();\n        this.ele = null;\n    }\n\n    public attach(ele: HTMLElement) {\n        this.ele = ele;\n        this.register();\n    }\n\n    /** Attach an event listener that is automatically cleaned up when this middleware is ejected.\n     * The `cb` callback should return `true` if the event should stop here. */\n    protected listen(event: string, cb: any, target?: HTMLElement|Window): Function {\n        const wrapped = (event: Event) => {\n            const res = cb(event);\n            if (res) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            return res;\n        };\n        const trg = target || this.ele;\n        const rem = () => trg?.removeEventListener(event, wrapped);\n        trg?.addEventListener(event, wrapped);\n        this.hooks.push(rem);\n        return rem;\n    }\n\n    /** Called once an element is registered and ready to call `listen()`. */\n    protected abstract register(): void;\n    /** Called after all hooks have been cleaned up. */\n    protected abstract onCleanup(): void;\n}\n","import Middleware from \"./middleware\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport EntityLayer, {EntityEle} from \"../controllers/entities\";\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\nexport default class EntityMiddleware extends Middleware {\n    private ent: EntityEle|null = null;\n    private readonly container: HTMLElement;\n    private moveListener: Function|null = null;\n    private movePoints: Point[] = [];\n    private moveTrackers: HTMLElement[] = [];\n    private entityLayer: EntityLayer;\n\n    constructor(container: HTMLElement, entLayer: EntityLayer) {\n        super();\n        this.container = container;\n        this.entityLayer = entLayer;\n    }\n\n    public setTarget(entEle: EntityEle|null) {\n        this.ent = entEle;\n        this.clearMover();\n        if (this.ent) {\n            this.entityLayer.toggleInput(false);\n            this.ent.bringToFront();\n            this.moveListener = this.listen('pointermove', (ev: PointerEvent) => {\n                const [x, y] = EntityMiddleware.toGrid(ev);\n                this.addPoint(x, y);\n                return true;\n            }, this.container);\n        }\n    }\n\n    register(): void {\n        this.listen('pointerup', (ev: PointerEvent) => {\n            if (this.moveListener) {\n                this.entityLayer.toggleInput(true);\n                return this.clearMover();\n            }\n        }, window);\n    }\n\n    private clearMover(): boolean {\n        this.moveTrackers.forEach(mp => mp.remove());\n        this.moveTrackers = [];\n        this.movePoints = [];\n        if (this.moveListener) {\n            this.moveListener();\n            this.moveListener = null;\n            return true;\n        }\n        return false;\n    }\n\n    private addPoint(x: number, y: number) {\n        const last = this.movePoints[this.movePoints.length-1];\n        if (last && last.x === x && last.y === y) return;\n\n        const idx = this.movePoints.findIndex(p => p.x === x && p.y === y);\n        if (idx >=0) {\n            this.movePoints.splice(idx, this.movePoints.length);\n        }\n        this.movePoints.push({x, y});\n        this.checkDiag();\n        this.redrawPath();\n        if (this.ent) {\n            this.entityLayer.updateEntity(this.ent.entity.id,{x, y});\n        }\n    }\n\n    private checkDiag() {\n        if (this.movePoints.length < 3) return;\n        const last = this.movePoints[this.movePoints.length - 1];\n        const third = this.movePoints[this.movePoints.length - 3];\n        const dist = EntityMiddleware.distance(third, last);\n\n        if (dist < 2) {\n            // Corner we can cut!\n            this.movePoints.splice(this.movePoints.length-2, 1);\n        }\n    }\n\n    private static distance(p1: Point, p2: Point) {\n        return Math.sqrt(Math.pow(p1.x-p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    }\n\n    private pathLength(): number {\n        let val = 0;\n        this.movePoints.reduce((prev, next) => {\n            let dst = EntityMiddleware.distance(prev, next);\n            if (dst > 1) dst = 1.5;\n            val += dst;\n            return next;\n        })\n\n        return Math.floor(val);\n    }\n\n    private redrawPath() {\n        this.moveTrackers.forEach(mp => mp.remove());\n        this.moveTrackers = [];\n\n        let id = 0;\n\n        for (const p of this.movePoints) {\n            const ele = document.createElement('div');\n            ele.className = 'entityMoveTracker';\n            Object.assign(ele.style, {\n                width: `${imageWidthPx}px`,\n                height: `${imageHeightPx}px`,\n                left: `${p.x*imageWidthPx}px`,\n                top: `${p.y*imageHeightPx}px`\n            });\n            if (++id === this.movePoints.length) {\n                ele.innerText = `${this.pathLength()*5}`;\n            }\n            this.moveTrackers.push(ele);\n            this.container.append(ele);\n        }\n    }\n\n    private static toGrid(ev: any) {\n        const x = Math.floor(ev.offsetX/imageWidthPx);\n        const y = Math.floor(ev.offsetY/imageHeightPx);\n        return [x, y]\n    }\n\n    protected onCleanup(): void {\n        this.clearMover();\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport EntityLayer, {Entity} from \"../../controllers/entities\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"../packets/entityPackets\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoSprite} from \"../../data/protobufs/proto-sprite\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\nexport default class EntityUpdateHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [EntityUpdatePacket, EntityDeletePacket];\n    private readonly entities: EntityLayer;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    async clientHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n                if (!this.entities.updateEntity(ent.id, {\n                    ...ent,\n                    sprite\n                }, false)) {\n                    console.debug('Adding new entity:', ent);\n                    this.entities.addEntity(sprite, { ...ent, sprite }, false)\n                }\n            }\n        } else if (packet instanceof EntityDeletePacket) {\n            console.debug('Deleting:', packet.entityID);\n            this.entities.remove(packet.entityID, false);\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                if (!this.entities.entityIsOwned(ent.id, client.userData.username)) {\n                    throw Error('Client attempted to edit entity the do not own!')\n                }\n                this.entities.updateEntity(ent.id, {\n                    x: ent.x,\n                    y: ent.y\n                });\n            }\n        } else {\n            throw Error(`Client sent invalid Entity packet! ${typeof packet}`)\n        }\n    }\n\n    static sendUpdate(entity: Entity) {\n        if (!entity.canMove() || !entity.visible) return;\n        const proto = new ProtoEntity().assign({\n            ...entity,\n            sprite: new ProtoSprite().assign({...entity.sprite}),\n            owners: Array.from(entity.owners)\n        });\n        const packet = new EntityUpdatePacket().assign({entities: [proto]});\n        broadcast(packet, false);\n    }\n\n    static sendDelete(entity: Entity) {\n        if (!entity.canMove()) return;\n        const packet = new EntityDeletePacket().assign({entityID: entity.id});\n        console.debug(packet);\n        broadcast(packet, true);\n    }\n}\n\n","import {Sprite} from \"../util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {v4 as uuid} from 'uuid';\nimport EntityMiddleware from \"../middleware/entity-events\";\nimport {observable} from \"mobx\";\nimport {isHost} from \"../net/peerconnection\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport {currentUsername} from \"../db/metadata-db\";\n\n\nexport class Entity {\n    @observable sprite: Sprite;\n    @observable name: string;\n    @observable color: string = '#000000';\n    id: string;\n    x: number = 0;\n    y: number = 0;\n    @observable visible: boolean = true;\n    @observable owners: string[] = [];\n    @observable saveToCampaign: boolean = false;\n\n    constructor(sprite: Sprite, init?: Partial<Entity>) {\n        this.sprite = sprite;\n        this.id = uuid();\n        this.name = this.id;\n        if (init) {\n            Object.assign(this, init)\n        }\n    }\n\n   canMove() {\n        return isHost() || this.owners.includes(currentUsername.get());\n   }\n}\n\nexport class NamePlate {\n    static plates: NamePlate[] = [];\n    static updateTimer: any = null;\n    private readonly ele = document.createElement('div');\n    private targY: number = 0;\n    protected x: number = 0;\n    protected y: number = 0;\n    public width: number = 0;\n    public height: number = 0;\n    private parent: HTMLElement;\n    private color: string;\n\n    constructor(text: string, color: string, parent: HTMLElement) {\n        this.ele.className = 'entityNamePlate';\n        this.parent = parent;\n        this.color = color;\n        NamePlate.plates.push(this);\n        this.update(text, this.x, this.y, this.color,false);\n    }\n\n    public update(name: string, x: number, y: number, color: string, redraw: boolean = true) {\n        this.x = x;\n        this.y = y;\n        this.targY = y;\n        this.color = color;\n        this.ele.innerText = name;\n\n        if (redraw) NamePlate.plates.map(p => p.reposition()); // Update all plate positions, since one has moved.\n    }\n\n    reposition() {\n        this.y = this.targY;\n        this.width = this.ele.offsetWidth;\n        this.height = this.ele.offsetHeight;\n\n        for (let i=0; i < 10; i+=1) {\n            if (NamePlate.plates.some(o => o !== this && this.overlaps(o))) {\n                this.y -= this.height+1;\n            }\n        }\n\n        Object.assign(this.ele.style, {\n            position: 'absolute',\n            top: `${this.y}px`,\n            left: `${this.x}px`,\n            color: this.color\n        });\n    }\n\n    public overlaps(other: NamePlate) {\n        return !(this.x > other.right ||\n            this.right < other.x ||\n            this.y > other.bottom ||\n            this.bottom < other.y);\n    }\n\n    public bringToFront() {\n        this.parent.append(this.ele);\n    }\n\n    public remove() {\n        this.ele.remove();\n        NamePlate.plates = NamePlate.plates.filter(n => n !== this);\n    }\n\n    get right() {\n        return this.x + this.width;\n    }\n\n    get bottom() {\n        return this.y + this.height;\n    }\n}\n\n\nexport class EntityEle {\n    public readonly ele = document.createElement('canvas');\n    public readonly namePlate: NamePlate;\n    public readonly entity: Entity;\n    private redrawTimer: any = null;\n    private readonly ctx: CanvasRenderingContext2D;\n    private readonly parent: HTMLElement;\n    private readonly onClick: Function;\n\n    constructor(parent: HTMLElement, plateParent: HTMLElement, entity: Entity, onClick: Function) {\n        this.parent = parent;\n        this.entity = entity;\n        this.onClick = onClick;\n        // @ts-ignore\n        this.ctx = this.ele.getContext('2d');\n        this.ele.width = imageWidthPx;\n        this.ele.height = imageHeightPx;\n        this.ele.className = 'entityWrapper';\n        this.ele.addEventListener('pointerdown', () => {\n            if (this.entity.canMove()) this.onClick(this)\n        });\n\n        this.namePlate = new NamePlate(entity.name, entity.color, plateParent);\n\n        this.ele.style.opacity = this.entity.visible ? '1' : '0.5';\n        this.reposition();\n        this.bringToFront();\n        this.redraw();\n    }\n\n    internalUpdate(props: Partial<Entity>) {\n        Object.assign(this.entity, props);\n        this.ele.style.opacity = this.entity.visible ? '1' : '0.5';\n        this.reposition();\n        if (this.redrawTimer === null) this.redraw()\n    }\n\n    remove() {\n        if (this.redrawTimer !== null) {\n            clearTimeout(this.redrawTimer);\n        }\n        this.ele.remove();\n        this.namePlate.remove();\n    }\n\n    redraw() {\n        requestAnimationFrame(() => {\n            this.ctx.clearRect(0, 0, this.ele.width, this.ele.height);\n            this.entity.sprite.drawTo(this.ctx, 0, 0);\n\n            if (this.redrawTimer !== null) {\n                clearTimeout(this.redrawTimer);\n                this.redrawTimer = null;\n            }\n            if (this.entity.sprite.animated) {\n                this.redrawTimer = setTimeout(this.redraw.bind(this), 200);\n            } else {\n                this.redrawTimer = null;\n            }\n        });\n    }\n\n    private reposition() {\n        Object.assign(this.ele.style, {\n            position: 'absolute',\n            top: `${this.entity.y * imageHeightPx}px`,\n            left: `${this.entity.x * imageWidthPx}px`,\n            cursor: 'pointer'\n        });\n\n        this.namePlate.update(\n            this.entity.name,\n            this.entity.x * imageWidthPx + imageWidthPx/2,\n            this.entity.y * imageHeightPx - 14,\n            this.entity.color\n        )\n    }\n\n    bringToFront() {\n        this.parent.append(this.ele);\n        this.namePlate.bringToFront();\n    }\n\n    setInput(useInput: boolean) {\n        Object.assign(this.ele.style, {\n            'pointer-events': useInput ? 'auto' : 'none'\n        });\n    }\n}\n\nexport default class EntityLayer {\n    private readonly entityElements: Record<string, EntityEle> = {};\n    private readonly ele: HTMLElement;\n    private readonly plateEle: HTMLElement;\n    public boardWidth: number = 0;\n    public boardHeight: number = 0;\n    private enableInput: boolean = true;\n    @observable public selected: EntityEle|null = null;\n    @observable public isDirty: boolean = false;\n    private middleware: EntityMiddleware;\n\n    constructor(tileWidth: number, tileHeight: number) {\n        this.ele = document.createElement('div');\n        this.ele.className = 'entityContainer';\n        this.plateEle = document.createElement('div');\n        this.plateEle.className = 'plateContainer';\n        this.middleware = new EntityMiddleware(this.ele, this);\n        this.middleware.attach(this.ele);\n\n        this.resizeBoard(tileWidth, tileHeight);\n    }\n\n    private resizeBoard(width: number, height: number) {\n        this.boardWidth = width;\n        this.boardHeight = height;\n        for (const {entity} of Object.values(this.entityElements)) {\n            const x = entity.x;\n            const y = entity.y;\n            if (x > this.boardWidth || y > this.boardHeight) {\n                this.remove(entity.id);\n            }\n        }\n    }\n\n    /**  Derive new tile widthxheight whenever this canvas is resized. */\n    public setSize(width: number, height: number) {\n        Object.assign(this.ele.style, { width: `${width}px`, height: `${height}px`});\n        Object.assign(this.plateEle.style, { width: `${width}px`, height: `${height}px`});\n        this.resizeBoard(Math.floor(width/imageWidthPx), Math.floor(height/imageHeightPx));\n    }\n\n    public remove(id: string, sendUpdate: boolean = true): boolean {\n        const existing = this.entityElements[id];\n        if (existing) {\n            this.entityElements[id].remove();\n            delete this.entityElements[id];\n            if (sendUpdate) EntityUpdateHandler.sendDelete(existing.entity);\n        }\n        if (existing === this.selected) this.selected = null;\n        return !!existing;\n    }\n\n    public addEntity(sprite: Sprite, opts?: Partial<Entity>, sendUpdate: boolean = true) {\n        const ent = new Entity(sprite, opts);\n        const entEle = new EntityEle(this.ele, this.plateEle, ent, this.select.bind(this));\n\n        entEle.setInput(this.enableInput);\n        this.entityElements[ent.id] = entEle;\n\n        if (sendUpdate) {\n            EntityUpdateHandler.sendUpdate(ent);\n            this.isDirty = true;\n        }\n\n        // Upon creation, we need a frame for the bounding box to update with the new name:\n        if (NamePlate.updateTimer !== null) clearTimeout(NamePlate.updateTimer);\n        NamePlate.updateTimer = setTimeout(() => NamePlate.plates.map(p => p.reposition()), 1);\n\n        return ent;\n    }\n\n    public select(entEle: EntityEle|null) {\n        this.selected = entEle;\n        console.debug('Selected entity:', this.selected);\n        this.middleware.setTarget(entEle);\n        if (this.selected) {\n            Object.values(this.entityElements).forEach(e => {\n                if (e !== this.selected) e.setInput(false)\n            });\n        }\n    }\n\n    public entityIsOwned(id: string, checkOwner: string) {\n        const existing = this.entityElements[id];\n        if (existing) {\n            return existing.entity.owners.includes(checkOwner);\n        }\n        return false;\n    }\n\n    public updateEntity(id: string, props: Partial<Entity>, sendUpdate: boolean=true) {\n        const existing = this.entityElements[id];\n        if (existing) {\n            existing.internalUpdate(props);\n            if (sendUpdate) {\n                EntityUpdateHandler.sendUpdate(existing.entity);\n                this.isDirty = true;\n            }\n        }\n        return !!existing;\n    }\n\n    public toggleInput(enabled: boolean, acceptHover: boolean = true) {\n        if (enabled !== this.enableInput) {\n            this.enableInput = enabled;\n            Object.values(this.entityElements).forEach(ent => {\n                ent.setInput(enabled);\n            });\n            Object.assign(this.ele.style, {\n                'pointer-events': (!acceptHover || this.enableInput) ? 'none' : 'auto'\n            });\n        }\n    }\n\n    /**\n     * Directly export the underlying terrain map, for serialization.\n     */\n    getEntityList() {\n        return Object.values(this.entityElements).map(e => e.entity);\n    }\n\n    public appendTo(ele: HTMLDivElement) {\n        ele.append(this.ele);\n        ele.append(this.plateEle)\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport abstract class PreCheck {\n    protected readonly controller: GameController;\n    run: OmitThisParameter<(isHost: boolean, client: Client) => Promise<void>>;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n        this.run = this.runHandler.bind(this);\n    }\n\n    private async runHandler(isHost: boolean, client: Client){\n        return isHost ? this.host(client) : this.client(client);\n    }\n\n    abstract async client(client: Client): Promise<void>;\n    abstract async host(client: Client): Promise<void>;\n}\n","import Dexie from \"dexie\";\n\nexport interface UserData {\n    id: number;\n    username: string;\n    keyCodes: string[];\n    lastSeen: number;\n}\n\nclass UserDB extends Dexie {\n    users: Dexie.Table<any, UserData>;\n\n    constructor() {\n        super('user-db');\n\n        // Define tables and indexes\n        this.version(1).stores({\n            users: '++id, &username, *keyCodes, lastSeen'\n        });\n        this.users = this.table(\"users\");\n    }\n}\n\n\nconst db = new UserDB();\n\nexport async function addNewUser(user: Partial<UserData>): Promise<UserData> {\n    const data = {\n        id: 0,\n        username: '',\n        keyCodes: [],\n        ...user,\n        lastSeen: new Date().getTime()\n    };\n    await db.users.put(data);\n    return data;\n}\n\nexport async function updateUser(user: UserData): Promise<number> {\n    return db.users.update(user.id, user);\n}\n\nexport async function getUser(username: string): Promise<UserData|null> {\n    return db.users.where({username}).first();\n}\n\n/**\n * Checks if the given User code matches an existing username.\n * If so, also updates the lastSeen time of the user.\n * @param userName\n * @param keyCode\n */\nexport async function checkUserCredentials(userName: string, keyCode: string): Promise<UserData> {\n    const match = await db.users.where({username: userName, keyCodes: keyCode}).first();\n\n    if (match) {\n        match.lastSeen = new Date().getTime();\n        await updateUser(match);\n    }\n\n    return match;\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {addNewUser, checkUserCredentials, getUser, updateUser} from \"../../db/user-db\";\nimport {Meta, metadata} from '../../db/metadata-db';\nimport {ReadyPacket, SignaturePacket} from \"../packets/util-packets\";\n\n\nexport default class HandShakeCheck extends PreCheck {\n    /**\n     * Accepts a signed JSON packet, and validates the signature.\n     * The validation is an async race condition, so responds with an OK packet once finished.\n     * @param client\n     */\n    async client(client: Client): Promise<void> {\n        const username = await metadata.get(Meta.USERNAME);\n        const packet = new SignaturePacket().assign({\n            username\n        });\n        await client.send(packet);\n\n        await client.getNextPacket(ReadyPacket); // Wait for host to allow out login.\n    }\n\n    /**\n     * Sends a signed JSON packet, to validate this host ID.\n     * Awaits an OK Packet from the client, once validation is complete.\n     * @param client\n     */\n    async host(client: Client): Promise<void> {\n        // Wait for client to send a message containing username:\n        const data: SignaturePacket = await client.getNextPacket(SignaturePacket);\n        const {username} = data;\n\n        let user = await checkUserCredentials(username, client.id);\n        if (!user) {\n            let existing = await getUser(username);\n\n            await this.controller.lobby.addPendingLogin(username, client.id);  // Will be approved via UI, by the Host.\n\n            if (!existing) {\n                console.log(`Added new user: ${username}, ${client.id}`);\n                existing = await addNewUser({username, keyCodes: [client.id]});\n            } else {\n                console.log(`Updated existing user: ${username}, ${client.id}`);\n                existing.keyCodes.push(client.id);\n                await updateUser(existing);\n            }\n            user = existing;\n        }\n\n        client.userData = user;\n        await client.send(new ReadyPacket())\n    }\n}\n\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\n\n\nexport default class BoardSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        await client.send(await this.controller.buildProtoBoard(false));\n    }\n}\n","import {observable} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\n\n\nexport interface PendingUser {\n    username: string;\n    keyCode: string;\n    approve: Function;\n    reject: Function;\n}\n\nexport default class Lobby {\n    @observable public readonly pendingLogins: PendingUser[] = [];\n    @observable public myName: string = '';\n    private readonly blacklist: Set<String> = new Set();\n\n    private notify(title: string, body: string, iconURL: string='') {\n        Notification.requestPermission().then(function(result) {\n            if (result === 'granted') {\n                new Notification(title, {\n                    body,\n                    icon: iconURL // TODO: Path to alert icon image.\n                });\n            }\n        });\n    }\n\n    /**\n     * Adds the given login attempt to the pending list,\n     * and returns a Promise that will either resolve or reject eventually at the Hosts' discretion.\n     * @param username\n     * @param keyCode\n     */\n    public async addPendingLogin(username: string, keyCode: string) {\n        return new Promise((approve, reject) => {\n            const existing = Array.from(this.pendingLogins).find(pe => pe.keyCode === keyCode);\n            const pending = { username, keyCode, approve, reject };\n\n            if (existing) {\n                this.removePending(existing);\n            }\n            this.pendingLogins.push(pending);\n\n            if (!this.blacklist.has(keyCode)) {\n                notifications.warning(`Unknown device (${keyCode}) wants to join as \"${username}\".`, {});\n                this.notify('New Unknown User', `Unknown device (${keyCode}) wants to join as \"${username}\".`);\n            }\n        });\n    }\n\n    public approveUser(user: PendingUser) {\n        user.approve(true);\n        notifications.success(`Approved user \"${user.username}\".`)\n        this.removePending(user);\n    }\n\n    public rejectUser(user: PendingUser) {\n        user.reject(false);\n        notifications.error(`Rejected device (${user.keyCode}).`)\n        this.removePending(user);\n        this.blacklist.add(user.keyCode);\n    }\n\n    private removePending(user: PendingUser) {\n        const idx = this.pendingLogins.findIndex(u => u.keyCode === user.keyCode);\n        if (idx >= 0) {\n            this.pendingLogins.splice(idx, 1);\n        }\n    }\n}\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {PingPacket} from \"../packets/util-packets\";\nimport {Client} from \"../peerconnection\";\n\n\nexport default class PingHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [PingPacket];\n\n    async clientHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    private static handlePing(client: Client) {\n        client.lastPing = Date.now();\n    }\n}\n","import Dexie from \"dexie\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as encoder  from '../net/messageEncoder'\nimport notifications from \"../../ui-components/notifications\";\n\nexport interface BoardWrapper {\n    name: string;\n    campaignID: number;\n    data: Uint8Array;\n}\n\n\nclass BoardDB extends Dexie {\n    boards: Dexie.Table<any, BoardWrapper>;\n\n    constructor() {\n        super('board-db');\n\n        // Define tables and indexes\n        this.version(1).stores({\n            boards: '&[campaignID+name]'\n        });\n        this.boards = this.table(\"boards\");\n    }\n}\n\nconst db = new BoardDB();\n\nexport async function save(campaignID: number, name: string, board: ProtoBoard) {\n    return db.boards.put({\n        name,\n        campaignID,\n        data: await encoder.encode(board)\n    }).catch(err => {\n        notifications.error('Error saving board!');\n        console.error(err);\n    })\n}\n\nexport async function load(campaignID: number, name: string): Promise<null|ProtoBoard> {\n    const res: BoardWrapper|null = await db.boards.where({campaignID, name}).first().catch(err => {\n        notifications.error('Error loading board!');\n        console.error(err);\n    })\n\n    if (res) {\n        return encoder.decode(res.data);\n    } else {\n        return null;\n    }\n}\n\nexport async function getAvailable(campaignID: number): Promise<string[]> {\n    try {\n        return (await db.boards.where('[campaignID+name]').between([campaignID, Dexie.minKey], [campaignID, Dexie.maxKey]).toArray()).map(b=>b.name);\n    } catch(err) {\n        notifications.error('Error fetching available boards!');\n        console.error(err);\n        return [];\n    }\n}\n\n\nexport async function deleteBoard(campaignID: number, name: string) {\n    return db.boards.where({campaignID, name}).delete();\n}\n","import {observable} from \"mobx\";\nimport {Entity} from \"./entities\";\n\nexport default class Campaign {\n    public readonly name: string;\n    @observable public boards: string[] = [];\n    @observable public loadedBoard: string|null = null;\n    @observable public readonly characters: Entity[] = [];\n    public readonly id: number = -1;\n    public readonly timeCreated = Date.now();\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n","/**\n * Strip out any proxied observables, and convert them to standard values.\n * @param obj\n */\nexport default function stripProxy(obj: any): any {\n    const ret = {};\n    for (const e of Object.entries(obj)) {\n        let v = e[1];\n\n        if (v instanceof Array) {\n            v = Array.from(v);\n        }\n        // @ts-ignore\n        ret[e[0]] = v;\n    }\n    return ret;\n}\n","import Dexie from \"dexie\";\nimport Campaign from \"../controllers/campaign\";\nimport stripProxy from \"../util/deproxy\";\n\nclass CampaignDB extends Dexie {\n    campaigns: Dexie.Table<any, Campaign>;\n\n    constructor() {\n        super('campaign-db');\n\n        // Define tables and indexes\n        this.version(1).stores({\n            campaigns: '++id, name'\n        });\n        this.campaigns = this.table(\"campaigns\");\n    }\n}\n\n\nconst db = new CampaignDB();\ndb.campaigns.mapToClass(Campaign);\n\nexport async function saveCampaign(camp: Campaign) {\n    console.info('Saved campaign:', camp);\n    return db.campaigns.update(camp.id, stripProxy(camp));\n}\n\nexport async function createCampaign(name: string): Promise<any> {\n    const obj = {...new Campaign(name), id: null};\n    delete obj.id;\n\n    const res = await db.campaigns.put(stripProxy(obj));\n    console.info('Saved new campaign:', res);\n    return db.campaigns.get({id: res});\n}\n\nexport async function getAllCampaigns(): Promise<Campaign[]> {\n    return db.campaigns.toArray()\n}\n\nexport async function getCampaign(id: number): Promise<Campaign|null> {\n    return db.campaigns.where({id}).first()\n}\n","import {getAllCampaigns, getCampaign, saveCampaign, createCampaign} from \"../db/campaign-db\";\nimport * as boardDB from '../db/board-db';\nimport Campaign from \"../controllers/campaign\";\n\n\nexport default class CampaignLoader {\n    /**\n     * Get an array of all saved Campaign objects.\n     */\n    public static async getAvailable(): Promise<Campaign[]> {\n        return getAllCampaigns()\n    }\n\n    /**\n     * Load a Campaign object from the db, using its unique ID.\n     * @param id\n     */\n    public static async loadCampaign(id: number): Promise<Campaign|null> {\n        const campaign = await getCampaign(id);\n\n        if (campaign) campaign.boards = await boardDB.getAvailable(id);\n\n        if (campaign && campaign.loadedBoard && !campaign.boards.includes(campaign.loadedBoard)) {\n            campaign.loadedBoard = null;\n        }\n\n        return campaign;\n    }\n\n    /**\n     * Save an existing Campaign object back to the database.\n     * @param camp\n     */\n    public static async saveCampaign(camp: Campaign): Promise<number> {\n        return saveCampaign({\n            ...camp,\n            boards: Array.from(camp.boards)\n        }).catch(err => {\n            console.error(err)\n            return -1;\n        });\n    }\n\n    /**\n     * Create a new Campaign object, pre-saved in the database.\n     * @param name\n     */\n    public static async createCampaign(name: string): Promise<Campaign> {\n        return createCampaign(name);\n    }\n}\n\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard} from \"../../data/protobufs/proto-tiles\";\nimport {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport default class BoardReloadHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [ProtoBoard];\n    private readonly controller: any;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n    async clientHandler(client: Client, packet: ProtoBoard): Promise<void> {\n        return this.controller.loadFromProtoBoard(packet);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client tried to send Board Update!')\n    }\n}\n","import React from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField\n} from \"@material-ui/core\";\n\nexport function InputDialog(props: {\n    open: boolean\n    title: string,\n    body: string,\n    tooltip: string,\n    onSubmit: Function,\n    onCancel: Function,\n    acceptText?: string\n}) {\n    const [text, setText] = React.useState('');\n\n    const handleClose = () => {\n        props.onCancel();\n    };\n    const handleText = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setText(event.target.value);\n    }\n\n    return (\n        <div>\n            <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {props.body}\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label={props.tooltip}\n                        type=\"text\"\n                        fullWidth\n                        value={text}\n                        onChange={handleText}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => {\n                        handleClose();\n                        props.onCancel()\n                    }} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => {\n                        props.onSubmit(text);\n                        setText('')\n                    }} color=\"primary\">\n                        {props.acceptText || 'Connect'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n\n\nexport default function ConfirmPrompt(props: {\n    open: boolean,\n    onCancel: any,\n    onConfirm: any,\n    title: string,\n    prompt: string,\n    confirmButton?: string,\n    cancelButton?: string\n}) {\n    return (\n        <div>\n            <Dialog\n                open={props.open}\n                onClose={props.onCancel}\n                aria-labelledby=\"confirm-dialog-title\"\n                aria-describedby=\"confirm-dialog-description\"\n            >\n                <DialogTitle className=\"confirm-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText className=\"prompt-dialog-description\">\n                        {props.prompt}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onCancel} color=\"primary\">\n                        {props.cancelButton||'cancel'}\n                    </Button>\n                    <Button onClick={props.onConfirm} color=\"primary\" autoFocus>\n                        {props.confirmButton||'confirm'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from 'react';\nimport '../styles/yt-player-style.scss';\nimport YouTube from 'react-youtube';\nimport {broadcast, netMode, NetworkMode, isHost} from \"../game/net/peerconnection\";\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport {Button, Fab, IconButton, Tooltip} from \"@material-ui/core\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../game/net/packets/media-packets\";\nimport {observer} from \"mobx-react-lite\";\nimport {InputDialog} from \"./prompts\";\nimport {observable} from \"mobx\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\n\nconst PLAYER_OPTS = {\n    playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        mute: 0\n    },\n};\n\ninterface PlayerConfig {\n    volume: number;\n    loop: boolean;\n    shuffle: boolean;\n}\n\nconst config: PlayerConfig = observable.object({\n    volume: 100,\n    loop: true,\n    shuffle: true\n});\n\nfunction saveConf() {\n    metadata.store(Meta.PLAYER_CONFIG, config).catch(console.error);\n}\n\n/**\n * The current player. There should only ever be one at a time. May be null until initialized.\n */\nexport let player: any = null;\n\n/**\n * Get a summary of the currently-playing media, if any is available.\n */\nexport const getPlayerStatus = (): Partial<MediaStatusPacket>|null => {\n    if (!player) return null;\n\n    const currentVideo: string = player.getVideoData().video_id;\n    const currentTime: number = Math.floor(player.getCurrentTime());\n    const playbackRate: number = player.getPlaybackRate();\n    const paused: boolean = player.getPlayerState() === YouTube.PlayerState.PAUSED;\n\n    if (!currentVideo) return null;\n\n    return {\n        currentVideo,\n        currentTime,\n        playbackRate,\n        paused\n    }\n};\n\n\nexport const YoutubePlayerInterface = observer(() => {\n    const [visible, setVisible] = React.useState(false);\n\n    React.useMemo(() => {\n        metadata.get(Meta.PLAYER_CONFIG).then(async (res: PlayerConfig|null) => {\n            if (res) {\n                Object.assign(config, res);\n            }\n        })\n    }, []);\n\n    const tools = (netMode.get() === NetworkMode.HOST && player) ?\n        <div className={'ytPlayerHostToolbar'}>\n            <LoadPlaylistButton player={player} />\n            <ShuffleButton player={player}/>\n        </div> : null;\n\n    return <div style={{pointerEvents: 'auto'}} className={`ytPlayerIcon ${visible? 'visible':'hidden'}`}>\n        <Tooltip\n            title={\"Media Controls\"}\n        >\n            <Fab\n                color=\"default\"\n                onClick={()=>{setVisible(!visible)}}\n            >\n                <YouTubeIcon className={`ytPlayerIconInner ${visible? 'visible':'hidden'}`} />\n            </Fab>\n        </Tooltip>\n\n        <div className={`ytPlayerWrapper ${visible? 'visible':'hidden'}`}>\n            {tools}\n            <YoutubePlayer\n                loop={config.loop}\n                shuffle={config.shuffle}\n                volume={config.volume}\n            />\n        </div>\n    </div>;\n});\n\n\nexport const YoutubePlayer = (props: {loop: boolean, shuffle: boolean, volume: number}) => {\n    const [mediaPlayer, setPlayer] = React.useState<any>(null);\n\n    React.useEffect(() => {\n        if (!mediaPlayer) return;\n\n        player = mediaPlayer;\n\n        if (!isHost()) broadcast(new MediaRequestPacket(), false).catch(console.error);\n\n        const timer = setInterval(() => {\n            // Periodically poll for a new user-set volume, and save the new result.\n            const v = mediaPlayer.getVolume();\n            if (mediaPlayer.getPlayerState() === YouTube.PlayerState.PLAYING && v !== config.volume) {\n                config.volume = v;\n                saveConf();\n            }\n        }, 15000);\n\n        return () => {\n            player = null;\n            clearInterval(timer);\n        }\n    }, [mediaPlayer]);\n\n    const onReady = (event: any) => { // target, data\n        setPlayer(event.target);\n    }\n\n    const onPlay = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video play:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onPause = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video pause:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onError = (event: any) => {\n        event.target.nextVideo();\n    }\n\n    const onStateChange = (event: any) => {\n        /*  BUFFERING: 3, CUED: 5, ENDED: 0, PAUSED: 2, PLAYING: 1, UNSTARTED: -1 */\n        if (event.data === YouTube.PlayerState.CUED) {\n            console.info('Video/Playlist Cued!', mediaPlayer, mediaPlayer.getVideoData());\n            // Reference: https://developers.google.com/youtube/iframe_api_reference#onStateChange\n            mediaPlayer.setLoop(props.loop);  // Loop the playlist.\n            mediaPlayer.setShuffle(props.shuffle); // Can be toggled to shuffle/restore order.\n            mediaPlayer.setVolume(props.volume); // 0-100.\n\n            if (mediaPlayer.getPlaylist()) {\n                mediaPlayer.playVideoAt(0);\n            } else {\n                mediaPlayer.playVideo();\n            }\n        }\n    }\n\n    return <div style={{pointerEvents: 'auto'}}>\n        <YouTube\n            // @ts-ignore\n            opts={PLAYER_OPTS}\n            id={'yt-player'}\n            onReady={onReady}\n            onPlay={onPlay}\n            onPause={onPause}\n            onError={onError}\n            onStateChange={onStateChange}\n        />\n    </div>;\n};\n\n\nexport const LoadPlaylistButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadPlaylist = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input);\n        let id = parser.get('list') || input;\n\n        if (id.includes('=')) id = input.split('=')[1];\n\n        props.player.cuePlaylist({\n            list: id,\n            listType: 'playlist',\n            index: 0,\n            startSeconds: 0\n        });\n    };\n\n    return <div className={'ytPlayerPlaylistButton'}>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Playlist\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Playlist'}\n            body={'Enter a YouTube Playlist:'}\n            tooltip={'Playlist URL'}\n            onSubmit={loadPlaylist}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\n\nexport const ShuffleButton = observer((props: {player: any}) => {\n    const toggle = () => {\n        config.shuffle = !config.shuffle;\n        props.player.setShuffle(config.shuffle);\n\n        saveConf();\n    }\n\n    return <Tooltip title={\"Shuffle\"}>\n        <IconButton\n            children={<ShuffleIcon className={`ytPlayerShuffleIcon ${config.shuffle ? 'active': 'inactive'}`}/>}\n            onClick={toggle}\n        />\n    </Tooltip>\n});\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {Client} from \"../peerconnection\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../packets/media-packets\";\nimport GameController from \"../../controllers/game\";\nimport notifications from \"../../../ui-components/notifications\";\nimport {getPlayerStatus, player} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSyncHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [MediaStatusPacket, MediaRequestPacket];\n    private readonly controller: GameController;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n\n    async clientHandler(client: Client, packet: MediaStatusPacket): Promise<void> {\n        if (!player) {\n            notifications.warning('Media not available yet.');\n            return;\n        }\n        if (packet.paused) {\n            player.pauseVideo();\n            return;\n        }\n        player.setPlaybackRate(packet.playbackRate);\n        player.cueVideoById({\n            videoId: packet.currentVideo,\n            startSeconds: packet.currentTime\n        });\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        if (packet instanceof MediaRequestPacket) {\n            const status = getPlayerStatus();\n\n            if (status) {\n                await client.send(new MediaStatusPacket().assign(status));\n            }\n        } else {\n            throw new Error('Client attempted to send media commands!');\n        }\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {MediaStatusPacket} from \"../packets/media-packets\";\nimport {getPlayerStatus} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        const status = getPlayerStatus();\n\n        if (status) {\n            await client.send(new MediaStatusPacket().assign(status));\n        }\n    }\n}\n","import {CanvasContainer} from \"./canvas\";\nimport {Sprite, waitForSpriteLoad} from \"../util/sprite-loading\";\nimport Terrain from \"./terrain\";\nimport {boardTileHeight, boardTileWidth, imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport * as connection from '../net/peerconnection'\nimport {broadcast, NetworkStatus, getMyID} from \"../net/peerconnection\";\nimport EntityLayer from \"./entities\";\nimport HandShakeCheck from \"../net/prechecks/signature-check\";\nimport BoardSync from \"../net/prechecks/board-sync-check\";\nimport {PreCheck} from \"../net/prechecks/precheck\";\nimport Handler from \"../net/handlers/handler\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport Lobby from \"./lobby\";\nimport PingHandler from \"../net/handlers/ping-handler\";\nimport Campaign from \"./campaign\";\nimport * as boardDB from \"../db/board-db\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as packer from \"../data/board-packer.worker\";\nimport {ProtoEntity} from \"../data/protobufs/proto-entity\";\nimport CampaignLoader from \"../data/campaign-loader\";\nimport BoardReloadHandler from \"../net/handlers/board-reload-handler\";\nimport MediaSyncHandler from \"../net/handlers/media-sync-handler\";\nimport MediaSync from \"../net/prechecks/media-sync\";\nimport {ProtoSprite} from \"../data/protobufs/proto-sprite\";\n\n\nexport default class GameController {\n    public canvasContainer: CanvasContainer;\n    public terrain: Terrain;\n    public entities: EntityLayer;\n    @observable public ready: boolean = false;\n    private readonly preChecks: PreCheck[];\n    private readonly handlers: Handler[];\n    public readonly lobby: Lobby;\n    @observable public campaign: Campaign|null = null;\n\n    constructor() {\n        this.canvasContainer = new CanvasContainer(1, 1);\n        this.terrain = new Terrain(boardTileWidth, boardTileHeight);\n        this.entities = new EntityLayer(boardTileWidth, boardTileHeight);\n        this.lobby = new Lobby();\n\n        // Initialize networking stuff:\n        this.preChecks = [\n            new HandShakeCheck(this),\n            new BoardSync(this),\n            new MediaSync(this)\n        ];\n        this.handlers = [\n            new TerrainAddHandler(this.terrain),\n            new TerrainEraseHandler(this.terrain),\n            new EntityUpdateHandler(this.entities),\n            new PingHandler(),\n            new BoardReloadHandler(this),\n            new MediaSyncHandler(this)\n        ];\n    }\n\n    /**\n     * Starts the main game client, waiting for the Sprite Loader to become ready.\n     * Also initializes any required keys or other async setup.\n     * Automatically starts the Client/Host connection if a URL Hash has been set already.\n     */\n    public async start() {\n        this.canvasContainer.addLayer(this.terrain);\n        this.canvasContainer.addLayer(this.entities);\n\n        await waitForSpriteLoad;\n        console.debug('Sprite loader ready!');\n\n        this.canvasContainer.setCanvasSize(boardTileWidth * imageWidthPx, boardTileHeight * imageHeightPx);\n\n        console.log('Local Room ID Key:', await getMyID());\n\n        const hash = window.location.hash.replace('#', '');\n        if (hash) {\n            if ((await getMyID()) === hash) {\n                // This is our URL - hosting.\n                await this.startHost();\n            } else {\n                // At someone else's URL - join them.\n                await this.startClient(hash);\n            }\n        }\n        this.ready = true;\n\n        // Treadmill to block back button:\n        window.history.pushState(null, document.title, window.location.href);\n        window.addEventListener('popstate', () => {\n            window.history.pushState(null, document.title, window.location.href);\n        });\n    }\n\n    public async startHost(): Promise<void> {\n        await connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Hosting lobby at:', await getMyID());\n        window.location.hash = await getMyID();\n\n        this.handlers.forEach(h => h.setHost(true));\n        connection.setHandlers(this.handlers, this.preChecks);\n\n        await connection.openHost();\n    }\n\n    public async startClient(connectID: string) {\n        await connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Connecting to host:', connectID);\n        window.location.hash = connectID;\n\n        this.handlers.forEach(h => h.setHost(false));\n        connection.setHandlers(this.handlers, this.preChecks)\n\n        await connection.connectTo(connectID);\n    }\n\n    get isNetworkReady() {\n        return connection.netStatus.get() === NetworkStatus.CONNECTED;\n    }\n\n    /**\n     * Loads the given board, and broadcasts the new board state to all clients.\n     * @param name\n     */\n    public async loadBoard(name: string): Promise<boolean> {\n        if (!this.campaign) return false;\n\n        this.campaign.loadedBoard = name;\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        const board: ProtoBoard|null = await boardDB.load(this.campaign.id, name);\n\n        if (!board) return false;  // Erase existing only if the loaded board actually exists.\n\n        await this.loadFromProtoBoard(board);\n\n        broadcast(await this.buildProtoBoard(false), true).catch(console.error);\n\n        this.terrain.isBoardDirty = false;  // May have triggered a \"redraw\", so reset these flags here.\n        this.entities.isDirty = false;\n\n        return true;\n    }\n\n    public async loadFromProtoBoard(pb: ProtoBoard) {\n        this.terrain.setDirectMap(pb);\n\n        this.entities.getEntityList().forEach(e => this.entities.remove(e.id, false));\n        pb.entities.forEach(ent => {\n            const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n            this.entities.addEntity(sprite, {\n                ...ent,\n                sprite\n            }, false)\n        });\n    }\n\n    public async buildProtoBoard(includeHidden: boolean = true) {\n        const tiles = Object.values(this.terrain.getDirectMap()).flat();\n        const pb = new ProtoBoard().assign(await packer.packBoard(tiles));\n\n        pb.entities = this.entities.getEntityList().filter(e=>includeHidden||e.visible).map(e => {\n            const sprite = new ProtoSprite().assign({id: e.sprite.id, idx: e.sprite.idx})\n            return new ProtoEntity().assign({\n                ...e,\n                sprite,\n                owners: Array.from(e.owners)\n            });\n        });\n\n        return pb;\n    }\n\n    public async saveBoard(): Promise<boolean> {\n        if (!this.campaign || !this.campaign.loadedBoard) return false;\n\n        const pb = await this.buildProtoBoard(true);\n        await boardDB.save(this.campaign.id, this.campaign.loadedBoard, pb);\n\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        await CampaignLoader.saveCampaign(this.campaign);\n\n        return true;\n    }\n\n    public async deleteBoard(campaign: Campaign, name: string): Promise<boolean> {\n        const idx = campaign.boards.indexOf(name);\n\n        if (idx < 0) {\n            return false;\n        }\n\n        campaign.boards.splice(idx, 1);\n\n        if (campaign.loadedBoard === name) {\n            campaign.loadedBoard = null;\n        }\n\n        await boardDB.deleteBoard(campaign.id, name);\n        await CampaignLoader.saveCampaign(campaign);\n\n        return true;\n    }\n}\n","import GameController from \"../game/controllers/game\";\n\n/**\n * A wrapper to connect the UI controls to the actual game, typically through middleware.\n * The interfaces generated should be agnostic of the platform, for maximum compatibility.\n */\nexport default abstract class UITool {\n    public readonly abstract name: string;\n    public readonly abstract icon: JSX.Element;\n    protected readonly controller: GameController;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n    }\n\n    abstract getControlUI(forMobile: boolean): JSX.Element|null;\n    abstract register(): any;\n    abstract unregister(): any;\n    abstract isOption(forMobile: boolean, isHost: boolean): boolean;\n}\n","import Middleware from \"./middleware\";\nimport Terrain from \"../controllers/terrain\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport {CanvasContainer} from \"../controllers/canvas\";\nimport EntityLayer from \"../controllers/entities\";\n\nexport default class PenMiddleware extends Middleware {\n    private readonly terrain: Terrain;\n    private state: number = -1;\n    private readonly canUsePen: boolean;\n    @observable public penSize: number = 1;\n    private container: CanvasContainer;\n    private readonly hoverBox: HTMLElement;\n    private readonly entities: EntityLayer;\n    private toggle: boolean = false;\n\n    constructor(terrain: Terrain, entities: EntityLayer, container: CanvasContainer, canUsePen: boolean=true) {\n        super();\n        this.terrain = terrain;\n        this.entities = entities;\n        this.container = container;\n        this.canUsePen = canUsePen;\n        this.hoverBox = document.createElement('div');\n    }\n\n    register(): void {\n        this.container.addElement(this.hoverBox);\n        this.entities.toggleInput(false, false);\n\n        this.listen('keydown', (ke: KeyboardEvent) => {\n            if (ke.code.startsWith('Shift') && !this.toggle) {\n                this.toggle = true;\n                this.entities.toggleInput(true);\n                this.hoverBox.remove();\n            }\n        }, document.body);\n\n        this.listen('keyup', (ke: KeyboardEvent) => {\n            if (ke.code.startsWith('Shift')) {\n                this.toggle = false;\n                this.entities.toggleInput(false, false);\n                this.container.addElement(this.hoverBox);\n            }\n        }, window);\n\n        this.listen('mousemove', (ev: MouseEvent) => {\n            this.updateHighlight(ev);\n        });\n\n        this.listen('pointerdown', (ev: PointerEvent) => {\n            if (ev.shiftKey) {\n                return;\n            }\n            if (ev.button === 1) {\n                // Middle mouse \"dropper\":\n                const [xx, yy] = PenMiddleware.toGrid(ev);\n                const sp = this.terrain.getAt(xx, yy);\n                if (sp.length) {\n                    this.terrain.selectedSprite = sp[sp.length-1].sprite;\n                    return true;\n                }\n            }\n            this.state = ev.button;\n            return this.draw(ev);\n        });\n\n        this.listen('pointerup', (ev: PointerEvent) => {\n            if (this.state >= 0) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.state = -1;\n            }\n        }, window);\n\n        this.listen('pointermove', (ev: PointerEvent) => {\n            return this.draw(ev);\n        });\n\n        this.listen('wheel', (ev: WheelEvent) => {\n            if (!ev.shiftKey) {\n                const out = Math.sign(ev.deltaY) * -1;\n                this.penSize = Math.max(1, Math.min(8, this.penSize += out));\n                this.updateHighlight(ev);\n                return true;\n            }\n        });\n    }\n\n    draw(ev: PointerEvent): boolean {\n        if (this.state >= 0) {\n            const [xx, yy] = PenMiddleware.toGrid(ev);\n            this.updateHighlight(ev);\n\n            switch (this.state) {\n                case 2:\n                    this.box(xx, yy, this.terrain.eraseAt.bind(this.terrain));\n                    break;\n                case 0:\n                    if (this.canUsePen) this.box(xx, yy, this.terrain.drawAt.bind(this.terrain));\n                    else if (!this.canUsePen) this.box(xx, yy, this.terrain.eraseAt.bind(this.terrain));\n            }\n            return true;\n        }\n        return false;\n    }\n\n    updateHighlight(ev: Event) {\n        const [x, y] = PenMiddleware.toGrid(ev);\n        Object.assign(this.hoverBox.style,{\n            border: '3px solid orangered',\n            left: `${x*imageWidthPx - (this.penSize-1) * imageWidthPx}px`,\n            top: `${y*imageHeightPx - (this.penSize-1) * imageHeightPx}px`,\n            width: `${(this.penSize*2-1) * imageWidthPx - 3}px`,\n            height: `${(this.penSize*2-1) * imageHeightPx - 3}px`,\n            position: 'absolute',\n            'pointer-events': 'none',\n            'z-index': 1\n        });\n    }\n\n    private static toGrid(ev: any) {\n        const x = Math.floor(ev.offsetX/imageWidthPx);\n        const y = Math.floor(ev.offsetY/imageHeightPx);\n        return [x, y]\n    }\n\n    private box(x: number, y: number, op: Function) {\n        for (let xx = x - (this.penSize-1); xx < x + this.penSize; xx++) {\n            for (let yy = y - (this.penSize-1); yy < y + this.penSize; yy++) {\n                op(xx, yy);\n            }\n        }\n    }\n\n    protected onCleanup(): void {\n        this.container.removeElement(this.hoverBox);\n        this.entities.toggleInput(true);\n    }\n}\n","import React from 'react';\nimport {FormControlLabel, Modal, Switch, TextField} from \"@material-ui/core\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport {searchImages, Sprite} from \"../game/util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from '../game/consts';\nimport '../styles/sprite-picker.scss'\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {FixedSizeGrid} from \"react-window\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Autocomplete} from \"@material-ui/lab\";\n\n\nexport default function SpritePicker (\n    props: {\n        onSelect: Function,\n        onSearch?: Function,\n        defaultTerm?: string,\n        selected?: Sprite|null,\n        animated?: boolean\n        canAnimate?: boolean\n    }) {\n    const [searchTerm, setSearch] = React.useState(props.defaultTerm || '');\n    const [animated, setAnimated] = React.useState(!!props.animated);\n    const [sprites, setSprites] = React.useState<Sprite[]>([]);\n\n    const handleChange = (value: string) => {\n        setSearch(value);\n        if (props.onSearch) {\n            props.onSearch(value);\n        }\n    };\n    const animChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAnimated(event.target.checked);\n    };\n\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const results = searchImages(searchTerm, animated, false);\n            setSprites(results);\n        }, 200)\n        return () => {\n            clearTimeout(timeout);\n        }\n    }, [searchTerm, animated]);\n\n\n    return <div style={{\n        maxWidth: '600px'\n    }}>\n        <form noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <FormGroup row>\n                <Autocomplete\n                    selectOnFocus={true}\n                    options={[]}\n                    style={{ width: 300 }}\n                    freeSolo={true}\n                    value={searchTerm}\n                    inputValue={searchTerm}\n                    onInputChange={(event, newInputValue) => {\n                        handleChange(newInputValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} label=\"Search Sprites!\" variant=\"outlined\" />}\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={animated}\n                            onChange={animChange}\n                            disabled={!props.canAnimate}\n                            name=\"checkedA\"\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        />\n                    }\n                    label=\"Animated\"\n                    labelPlacement=\"top\"\n                />\n            </FormGroup>\n        </form>\n        <div style={{height: '280px'}}>\n            <SpriteGrid sprites={sprites} onSelect={props.onSelect} selected={props.selected} />\n        </div>\n    </div>;\n}\n\n\nexport function SpriteGrid(props: {sprites: Sprite[], onSelect: Function, selected?: Sprite|null}) {\n    return <AutoSizer className={'autosizer'}>\n        {function size(size: { height: number, width: number }){\n            const wrapperSize = 52;\n            const perRow = Math.floor(size.width/wrapperSize);\n            const rowCount = Math.ceil(props.sprites.length/ perRow);\n\n            return <FixedSizeGrid\n                columnCount={perRow}\n                columnWidth={wrapperSize}\n                height={size.height}\n                width={size.width}\n                rowCount={rowCount}\n                rowHeight={wrapperSize}\n                className={'spriteGrid'}\n                style={{maxHeight: `${size.height}px`}}\n            >\n                {(data: { columnIndex: number, rowIndex: number, style: any }) => {\n                    const spr = props.sprites[data.columnIndex + data.rowIndex * perRow];\n                    if (spr) {\n                        return <div style={data.style}>\n                            <SpriteImage sprite={spr} onSelect={props.onSelect} selected={props.selected?.composite === spr.composite}/>\n                        </div>\n                    } else {\n                        return <div/>\n                    }\n                }}\n            </FixedSizeGrid>\n        }}\n    </AutoSizer>\n}\n\n\nexport function SpriteImage(props: {sprite: Sprite|null, onSelect?: Function, selected?: boolean}) {\n    const canv: any = React.useRef(null);\n    // @ts-ignore\n    const sel = props.onSelect ? () => props.onSelect(props.sprite) : ()=>{};\n\n    React.useEffect(() => {\n        const redraw = () => {\n            if (canv.current){\n                // @ts-ignore\n                const ctx: CanvasRenderingContext2D = canv.current.getContext('2d');\n                ctx.clearRect(0,0,canv.current.width, canv.current.height);\n                props.sprite?.drawTo(ctx, 0, 0);\n            }\n        };\n        const cancel: any = props.sprite?.animated ? setInterval(redraw, 200) : null;\n        redraw();\n\n        return () => {\n            if (cancel !== null) {\n                clearInterval(cancel);\n            }\n        }\n    }, [props.sprite])\n\n    return <canvas\n        ref={canv}\n        width={imageWidthPx}\n        height={imageHeightPx}\n        style={{width: '48px', height: '48px', background: 'gray'}}\n        className={`spriteImage ${props.selected ? 'selected': ''}`}\n        title={props.sprite?.name || 'No Sprite'}\n        onClick={sel}\n    />\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto',\n            maxWidth: '600px',\n            minWidth: '400px',\n            position: 'fixed',\n            left: '50%',\n            top: '50%',\n            transform: `translate(-50%, -50%)`,\n        }\n    }),\n);\n\nexport function SpritePickerModal(props: {open: boolean, onClose: Function, onSelect: Function, currentSprite: Sprite|null}) {\n    const classes = useStyles();\n    return <Modal\n        open={props.open}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        onClose={()=>props.onClose()}\n    >\n        <div className={classes.paper}>\n            <SpritePicker\n                defaultTerm={props.currentSprite?.name || ''}\n                selected={props?.currentSprite || null}\n                animated={props?.currentSprite?.animated || true}\n                onSelect={(sp: Sprite) => {\n                    props.onClose();\n                    props.onSelect(sp);\n                }}\n                canAnimate={true}\n            />\n        </div>\n    </Modal>\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport SpritePicker from \"../ui-components/spritepicker\";\nimport { Sprite } from \"../game/util/sprite-loading\";\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport {observer} from \"mobx-react-lite\";\nimport Terrain from \"../game/controllers/terrain\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIPenTool extends UITool {\n    readonly icon: JSX.Element = <TerrainIcon />;\n    readonly name: string = 'Terrain';\n    readonly middleware: PenMiddleware;\n    private searchTerm: string = 'ground';\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, controller.entities, controller.canvasContainer);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <PenControlInterface\n            terrain={this.controller.terrain}\n            term={this.searchTerm}\n            setSearch={(term: string) => this.searchTerm = term}\n            pen={this.middleware}\n        />\n    }\n\n    register(): any {\n        this.controller.terrain.registerMiddleware(this.middleware);\n        console.log('Mounted pen tool.')\n    }\n\n    unregister(): any {\n       this.middleware.eject();\n       console.log('Unmounted pen tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst PenControlInterface = observer((props: {terrain: Terrain, setSearch: Function, term: string, pen: PenMiddleware}) => {\n    return <div className={'cont'}>\n        <PenSizeSlider pen={props.pen}/>\n        <SpritePicker\n            onSelect={(sp: Sprite) => props.terrain.selectedSprite = sp}\n            onSearch={props.setSearch}\n            defaultTerm={props.term}\n            selected={props.terrain.selectedSprite}\n            canAnimate={false}\n        />\n    </div>\n});\n\nconst PenSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Pen Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.penSize = newValue}\n        />\n    </div>\n});\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport ControlCameraIcon from '@material-ui/icons/ControlCamera';\n\nexport default class UICameraTool extends UITool {\n    readonly icon: JSX.Element = <ControlCameraIcon />;\n    readonly name: string = 'Camera';\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return null;\n    }\n\n    register(): any {}\n\n    unregister(): any {}\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return true;\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {observer} from \"mobx-react-lite\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIEraserTool extends UITool {\n    readonly icon: JSX.Element = <ClearIcon />;\n    readonly name: string = 'Eraser';\n    readonly middleware: PenMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, controller.entities, controller.canvasContainer, false);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return <EraserSizeSlider pen={this.middleware}/>\n    }\n\n    register(): any {\n        this.controller.terrain.registerMiddleware(this.middleware);\n        console.log('Mounted eraser tool.')\n    }\n\n    unregister(): any {\n        this.middleware.eject();\n        console.log('Unmounted eraser tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return forMobile && isHost;\n    }\n}\n\nconst EraserSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    console.log('PS:', props.pen.penSize)\n\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Eraser Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.penSize = newValue}\n        />\n    </div>\n});\n","import UITool from \"./ui-tool\";\nimport FaceIcon from '@material-ui/icons/Face';\nimport React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {SpriteImage, SpritePickerModal} from \"../ui-components/spritepicker\";\nimport EntityLayer, {Entity} from \"../game/controllers/entities\";\nimport {\n    Button,\n    Checkbox,\n    Dialog, DialogActions,\n    DialogContent, DialogContentText,\n    DialogTitle,\n    FormControlLabel, Input, InputLabel, ListItemText, MenuItem, Select,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {Sprite} from \"../game/util/sprite-loading\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport GameController from \"../game/controllers/game\";\nimport EntityUpdateHandler from \"../game/net/handlers/entity-update-handler\";\nimport {clients} from '../game/net/peerconnection';\n\n\nexport default class UIEntityTool extends UITool {\n    readonly icon: JSX.Element = <FaceIcon />;\n    readonly name: string = 'Entity';\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <EntityInterface\n            entities={this.controller.entities}\n            controller={this.controller}\n        />\n    }\n\n    register(): any {\n        console.log('Mounted entity tool.')\n    }\n\n    unregister(): any {\n        console.log('Unmounted entity tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    })\n);\n\nconst EntityInterface = observer((props: {entities: EntityLayer, controller: GameController}) => {\n    const [promptSprite, setSpritePrompt] = React.useState(false);\n    const [selectedSprite, setSprite] = React.useState(null);\n    const [entName, setName] = React.useState('');\n    const [visible, setVisible] = React.useState(true);\n\n    const resetValues = () => {\n        setSpritePrompt(false);\n        setSprite(null);\n        setName('');\n        setVisible(true);\n    }\n\n    if (props.entities.selected) return <EntityEditInterface entities={props.entities}/>\n\n    return <div className={'cont'}>\n        <h2>Create Entity</h2>\n        <FormGroup row>\n            <TextField\n                id=\"ent-name\"\n                label=\"Name\"\n                variant=\"filled\"\n                value={entName}\n                onChange={(evt) => setName(evt.target.value)}\n            />\n            <div style={{marginLeft: '12px'}} >\n                <SpriteImage\n                    sprite={selectedSprite}\n                    onSelect={() => {setSpritePrompt(true)}}\n                />\n            </div>\n        </FormGroup>\n\n        <FormGroup row>\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={visible}\n                        onChange={(evt)=> setVisible(evt.target.checked)}\n                        name=\"visible\"\n                    />\n                }\n                label=\"Visible\"\n            />\n        </FormGroup>\n\n        <FormGroup row style={{justifyContent: 'space-between'}}>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={()=>{createEntity(props.entities, props.controller, selectedSprite, entName, visible); resetValues();}}\n                disabled={!selectedSprite || entName.trim().length === 0}\n            >\n                Create\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" onClick={resetValues} >\n                Clear\n            </Button>\n        </FormGroup>\n\n        <SpritePickerModal\n            open={promptSprite}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={setSprite}\n            currentSprite={selectedSprite||null}\n        />\n    </div>\n});\n\n\nconst EntityEditInterface = observer((props: {entities: EntityLayer}) => {\n    const ent = props.entities.selected?.entity;\n    if (!ent) return null;\n\n    const [prompt, setSpritePrompt] = React.useState(false);\n    const [promptClone, setClonePrompt] = React.useState(false);\n    const update = React.useMemo(() => {\n        let timeout: any = null;\n        return (info: Partial<Entity>) => {\n            if (timeout !== null) {\n                clearTimeout(timeout);\n            }\n            const ent = props.entities.selected?.entity;\n            if (ent) {\n                timeout = setTimeout(() => {\n                    props.entities.updateEntity(ent.id, info);\n                }, 200);\n            }\n        }\n    }, [props.entities])\n    const classes = useStyles();\n    const updateInstant = (info: Partial<Entity>) => props.entities.updateEntity(ent.id, info);\n    const clientNames: string[] = Array.from(clients).filter(c=>c.userData).map(cl =>{\n        // @ts-ignore\n        return cl.userData.username\n    });\n    const userList: string[] = Array.from(new Set([\n        ...clientNames,\n        ...ent.owners\n    ])).sort();\n\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Edit {ent.name}</h2>\n            <FormGroup row>\n                <TextField\n                    id=\"ent-name\"\n                    label=\"Name\"\n                    variant=\"filled\"\n                    value={ent.name}\n                    onChange={(evt) => updateInstant({name: evt.target.value})}\n                />\n                <div style={{marginLeft: '12px'}} >\n                    <SpriteImage\n                        sprite={ent.sprite}\n                        onSelect={() => {setSpritePrompt(true)}}\n                    />\n                </div>\n\n            </FormGroup>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <input\n                            type=\"color\"\n                            value={ent.color}\n                            className={classes.spriteColor}\n                            onChange={evt => update({color: evt.target.value})}\n                        />\n                    }\n                    label={<Typography style={{marginTop: '12px'}}>Color</Typography>}\n                />\n            </FormGroup>\n            <FormGroup row>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.visible}\n                            onChange={(evt)=> {\n                                updateInstant({visible: evt.target.checked});\n                                if (!evt.target.checked) {\n                                    EntityUpdateHandler.sendDelete(ent);\n                                }\n                            }}\n                            name=\"visible\"\n                        />\n                    }\n                    label=\"Visible\"\n                />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.saveToCampaign}\n                            onChange={(evt)=> updateInstant({saveToCampaign: evt.target.checked})}\n                            name=\"saveToCampaign\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Campaign-wide\"\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <InputLabel>Owners</InputLabel>\n                <Select\n                    multiple\n                    value={ent.owners}\n                    onChange={(evt)=>updateInstant({owners: evt.target.value as string[]})}\n                    input={<Input />}\n                    renderValue={(selected: any) => selected.join(', ')}\n                    style={{marginBottom: '25px'}}\n                >\n                    {userList.map((id: string) => (\n                        <MenuItem key={id} value={id}>\n                            <Checkbox checked={ent.owners.indexOf(id) > -1} />\n                            <ListItemText primary={id} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormGroup>\n\n            <FormGroup row style={{justifyContent: 'space-between'}}>\n                <Button variant=\"contained\" color=\"default\" onClick={()=>setClonePrompt(true)}>\n                    Duplicate\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>props.entities.remove(ent.id)} >\n                    Delete\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>props.entities.select(null)} >\n                    Close\n                </Button>\n            </FormGroup>\n        </form>\n\n        <SpritePickerModal\n            open={prompt}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={(sp: Sprite) => {ent.sprite = sp}}\n            currentSprite={ent.sprite}\n        />\n\n        <PromptForNumber\n            onCancel={()=>{ setClonePrompt(false)}}\n            onSubmit={(num: number) => {\n                setClonePrompt(false);\n                if (num) {\n                    cloneEntity(props.entities, ent, num);\n                }\n            }}\n            open = {promptClone}\n            prompt='How many extra clones would you like?'\n            title='Clone Amount'\n            label='Clones'\n        />\n    </div>\n});\n\n\nfunction PromptForNumber(props: {title: string, prompt: string, label?: string, open: boolean, onCancel: Function, onSubmit: Function}) {\n    const [num, setNum] = React.useState(0);\n    const handleClose = (event: any) => {\n        props.onSubmit(num);\n    };\n\n    return <Dialog open={props.open} onClose={()=>{props.onCancel()}} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                {props.prompt}\n            </DialogContentText>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                label={props.label || ''}\n                type=\"number\"\n                fullWidth\n                onChange={(event) => setNum(parseInt(event.target.value))}\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={()=>{props.onCancel()}} color=\"primary\">\n                Cancel\n            </Button>\n            <Button onClick={handleClose} color=\"primary\">\n                Submit\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n\n\nfunction cloneEntity(entities: EntityLayer, ent: Entity, num: number) {\n    if (num) {\n        for (let i=0; i<num; i++) {\n            entities.addEntity(ent.sprite, {\n                x: ent.x,\n                y: ent.y,\n                color: ent.color,\n                owners: ent.owners,\n                visible: ent.visible,\n                name: `${ent.name} ${i+2}`\n            });\n        }\n        entities.updateEntity(ent.id, {\n            name: `${ent.name} 1`\n        })\n    }\n}\n\n\nfunction createEntity(entities: EntityLayer, controller: GameController, sprite: Sprite|null, name: string, visible: boolean) {\n    if (!sprite) return;\n\n    const coords = controller.canvasContainer.screenToBoard(window.innerWidth/2, window.innerHeight/2)\n    entities.addEntity(sprite, {\n        name,\n        visible,\n        x: coords.x,\n        y: coords.y\n    })\n}\n","import {observer} from \"mobx-react-lite\";\nimport React from \"react\";\nimport UITool from \"./ui-tool\";\nimport GroupIcon from '@material-ui/icons/Group';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport Lobby, {PendingUser} from \"../game/controllers/lobby\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {MenuItem, MenuList, Tooltip} from \"@material-ui/core\";\nimport { IconButton } from '@material-ui/core';\nimport * as network from '../game/net/peerconnection'\nimport {updateUser, UserData} from \"../game/db/user-db\";\n\nexport default class UILobbyTool extends UITool {\n    readonly icon: JSX.Element = <GroupIcon />;\n    readonly name: string = 'Lobby';\n\n    getControlUI(forMobile: boolean): JSX.Element | null {\n        return <LobbyInterface lobby={this.controller.lobby}/>;\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n\n    register(): any {}\n\n    unregister(): any {}\n}\n\nconst useStyles = makeStyles(() => createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    }));\n\n\nconst LobbyInterface = observer((props: {lobby: Lobby}) => {\n    const classes = useStyles();\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Lobby</h2>\n            <PendingList lobby={props.lobby} />\n            <UserList />\n        </form>\n    </div>\n});\n\nconst PendingList = observer((props: {lobby: Lobby}) => {\n    const eles = props.lobby.pendingLogins.map(pl => {\n        return <PendingUserEle key={pl.keyCode} user={pl} lobby={props.lobby}/>\n    });\n\n    if(!eles.length) return null;\n\n    return <div>\n        <div style={{border: '1px solid black'}}>\n            <h4 style={{marginBottom: '5px'}}>Pending:</h4>\n            <MenuList>\n                {eles}\n            </MenuList>\n        </div>\n    </div>\n});\n\nconst PendingUserEle = (props: {user: PendingUser, lobby: Lobby}) => {\n    const approve = (ev: any) => {\n        props.lobby.approveUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n    const reject = (ev: any) => {\n        props.lobby.rejectUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    return <MenuItem style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n        <Tooltip title={'Device: ' + props.user.keyCode}><div>{props.user.username}</div></Tooltip>\n        <Tooltip title=\"Approve\"><IconButton children={<ThumbUpIcon/>} color=\"primary\" onClick={approve}/></Tooltip>\n        <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n    </MenuItem>\n}\n\n\nconst UserList =  observer((props: {}) => {\n    const eles = Array.from(network.clients).filter(c=>c.userData).map(c => {\n        // @ts-ignore\n        const dat: UserData = c.userData;\n        const reject = (ev: any) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            updateUser({\n                ...dat,\n                keyCodes: []\n            }).then(() => {\n                c.close()\n            })\n        }\n\n        return <MenuItem key={dat.id} style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n            {dat.username}\n            <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n        </MenuItem>\n    });\n\n    if (!eles.length) return null;\n\n    return <div>\n        <h4 style={{marginBottom: '5px'}}>Online:</h4>\n        <MenuList>\n            {eles}\n        </MenuList>\n    </div>\n});\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport UIPenTool from \"../ui-tools/ui-pen-tool\";\nimport GameController from \"../game/controllers/game\";\nimport UITool from \"../ui-tools/ui-tool\";\nimport {Avatar, Modal} from \"@material-ui/core\";\nimport UICameraTool from \"../ui-tools/ui-camera-tool\";\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport UIEraserTool from \"../ui-tools/ui-eraser-tool\";\nimport {observer} from \"mobx-react-lite\";\nimport * as connection from \"../game/net/peerconnection\";\nimport {NetworkMode} from \"../game/net/peerconnection\";\nimport UIEntityTool from \"../ui-tools/ui-entity-tool\";\nimport UILobbyTool from \"../ui-tools/ui-lobby-tool\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            height: 380,\n            transform: 'translateZ(0px)',\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto'\n        }\n    }),\n);\n\n\nconst ControlMenu = observer((props: {controller: GameController, forMobile: boolean}) => {\n    const isHost = connection.netMode.get() === NetworkMode.HOST;\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [modalOpen, setModalOpen] = React.useState(false);\n    const [tools, setTools] = React.useState<UITool[]>([]);\n    const [selectedTool, setSelected] = React.useState<UITool|null>(null);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleModalClose = () => {\n        setModalOpen(false);\n    };\n\n    const handleModalOpen = () => {\n        setModalOpen(true);\n    }\n\n    const handleSelect = (action: UITool) => {\n        handleClose();\n        if (action === selectedTool) {\n            return;\n        }\n        if (selectedTool) {\n            selectedTool.unregister();\n        }\n        setSelected(action);\n        action.register();\n        setModalOpen(true);\n    }\n\n    React.useEffect(() => {\n        // When the back button is used, close the modal.\n        window.addEventListener('popstate', handleModalClose);\n\n        return () => {\n            window.removeEventListener('popstate', handleModalClose);\n        }\n    });\n\n    React.useEffect(() => {\n        const tools = [\n            new UICameraTool(props.controller),\n            new UIPenTool(props.controller),\n            new UIEraserTool(props.controller),\n            new UIEntityTool(props.controller),\n            new UILobbyTool(props.controller)\n        ];\n\n        setTools(tools);\n        setSelected(tools[0]);\n        tools[0].register();\n    }, [props.controller]);\n\n    let ui;\n    const emb = selectedTool?.getControlUI(true);\n    if (emb) {\n        if (props.forMobile) {\n            ui = <div>\n                <Avatar\n                    className={'useMouse'}\n                    onClick={handleModalOpen}\n                    style={{\n                        position: 'fixed',\n                        bottom: '10px',\n                        left: '10px',\n                        transform: `translateY(-50%)`,\n                        background: '#3eec10',\n                        cursor: 'pointer'\n                    }}\n                >\n                    <MoreHorizIcon/>\n                </Avatar>\n                <Modal open={modalOpen} onClose={handleModalClose}>\n                    <div className={classes.paper}>\n                        {emb}\n                    </div>\n                </Modal>\n            </div>\n        } else {\n            ui = <div\n                style={{position: \"fixed\", left: '10px', top: '50%', minWidth: '400px', transform: `translateY(-50%)`}}\n                className={classes.paper}\n            >\n                {selectedTool?.getControlUI(false)}\n            </div>\n        }\n    }\n\n    return <div>\n        {ui}\n        <SpeedDial\n            ariaLabel=\"Control SpeedDial\"\n            className={classes.speedDial}\n            hidden={false}\n            icon={selectedTool?.icon || <SpeedDialIcon />}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            open={!props.forMobile || open}\n        >\n            {tools.filter(t=>t.isOption(props.forMobile, isHost)).map((action) => (\n                <SpeedDialAction\n                    key={action.name}\n                    icon={action.icon}\n                    tooltipTitle={action.name}\n                    tooltipOpen\n                    onClick={() => {handleSelect(action)}}\n                    title={action.name}\n                />\n            ))}\n        </SpeedDial>\n    </div>\n});\n\nexport default ControlMenu;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport {InputDialog} from \"./prompts\";\n\n/**\n * Helper UI to prompt the user for their connection action, if no Room ID hashcode is set.\n * @param props\n * @constructor\n */\nexport default function LoginHelper (props: {controller: GameController}) {\n    const [promptLogin, setPrompt] = React.useState(true);\n    const [needClient, setNeedClient] = React.useState(false);\n\n    const setHosting = (hosting: boolean) => {\n        setPrompt(false);\n        if (hosting) {\n            return props.controller.startHost();\n        } else {\n           setNeedClient(true);\n        }\n    };\n\n    return <div>\n        { promptLogin ? <PromptNetwork select={setHosting}/> : null }\n        <InputDialog\n            open={needClient}\n            title={'Enter host ID'}\n            body={'Enter the ID of the host lobby you\\'d like to join'}\n            tooltip={'Host ID'}\n            onCancel={() => {setNeedClient(false); setPrompt(true)}}\n            onSubmit={(txt: string) => props.controller.startClient(txt)}\n        />\n    </div>\n}\n\n\nfunction PromptNetwork (props: {select: Function}) {\n\n    return <Dialog open={true} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Network Mode</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Would you like to join a campaign, or host your own campaign?\n            </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={() => {props.select(true)}}>\n                Host\n            </Button>\n            <Button onClick={() => { props.select(false)}}>\n                Join\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n","import * as connection from \"../game/net/peerconnection\";\nimport {NetworkMode, NetworkStatus} from \"../game/net/peerconnection\";\nimport LoginHelper from \"./loginHelper\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\n\n/**\n * Util to display network status to the user.\n * @param props\n * @constructor\n */\nexport default function ConnectionOverlay(props: {controller: GameController}) {\n    let content = null;\n    let message = null;\n\n    if (connection.netMode.get() === NetworkMode.UNKNOWN) {\n        content = <LoginHelper controller={props.controller} />\n\n    } else {\n        switch (connection.netStatus.get()) {\n            case NetworkStatus.DISCONNECTED:\n                message = `Error connecting to service. Cannot reconnect.`;\n                break;\n            case NetworkStatus.RECONNECTING:\n                message = 'Error with connection to Host. Attempting reconnection...';\n                break;\n            case NetworkStatus.CONNECTING:\n                message = 'Connecting to Host...';\n                break;\n            case NetworkStatus.MATCHMAKING_FAIL:\n                message = 'Connection to matchmaking server failed. Please reload.';\n                break;\n            case NetworkStatus.WAITING_FOR_HOST:\n                message = 'Waiting for the Host to approve our login...';\n                break;\n            default:\n                message = null;\n        }\n    }\n\n    if (message) {\n        content =  <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h4\" component=\"h4\" gutterBottom>\n                {message}\n            </Typography>\n        </Backdrop>;\n    }\n    return content;\n}\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport {observer} from \"mobx-react-lite\";\nimport Campaign from \"../game/controllers/campaign\";\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport {Button, Dialog, DialogContent, DialogTitle, Fab, InputLabel, Menu, MenuItem, Tooltip} from \"@material-ui/core\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport {InputDialog} from \"./prompts\";\n\n\nexport const CampaignSelector = observer((props: {controller: GameController}) => {\n    const [need, setNeed] = React.useState(true);\n    const [wantOpen, setWantOpen] = React.useState(false);\n    const [promptNew, setPromptNew] = React.useState(false);\n    const [campaignList, setList] = React.useState<Campaign[]>([]);\n    const [storage, setStorage] = React.useState({q: 1, u: 0});\n\n\n    const selectCampaign = React.useMemo(() => {\n        return (camp: Campaign) => {\n            setNeed(false);\n            props.controller.campaign = camp;\n            metadata.store(Meta.CAMPAIGN_CURRENT, camp.id).then();\n            if (props.controller.campaign.loadedBoard) {\n                props.controller.loadBoard(props.controller.campaign.loadedBoard).then();\n            }\n        }\n    }, [props.controller]);\n\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.CAMPAIGN_CURRENT).then(async (id: number) => {\n            if (id === null) return;\n            console.debug('Current campaign:', id);\n            const camp = await CampaignLoader.loadCampaign(id);\n            if (!camp) return;\n            selectCampaign(camp);\n        });\n\n        // Load all available campaigns:\n        CampaignLoader.getAvailable().then(campaigns => setList(campaigns));\n\n        // Lookup used storage:\n        navigator.storage.estimate().then(function(estimate) {\n            const u = estimate.usage;\n            const q = estimate.quota\n            if (u !== undefined && q !== undefined) setStorage({ q, u});\n        });\n    }, [selectCampaign]);\n\n    const addCampaign = async (name: string) => {\n        setPromptNew(false);\n        if (name.trim().length) {\n            const c = await CampaignLoader.createCampaign(name);\n            setList([...campaignList, c]);\n        }\n    }\n\n    const handleModalClose = () => {\n        if (!need) {\n            setWantOpen(false);\n        }\n    }\n\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    return <div className={'menu_button'}>\n        <Tooltip\n            title=\"Campaign Settings\"\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <Fab\n                color=\"primary\"\n                onClick={()=>{setWantOpen(true)}}\n            >\n                <SettingsIcon />\n            </Fab>\n        </Tooltip>\n\n        <Dialog open={need || wantOpen} onClose={handleModalClose}>\n            <DialogTitle style={{textAlign: \"center\"}}>Campaign Info</DialogTitle>\n            <DialogContent style={{textAlign: \"center\"}}>\n                <CampaignMenu campaigns={campaignList} onSelect={selectCampaign} selected={props.controller.campaign}/>\n                <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    onClick={()=>setPromptNew(true)}\n                    startIcon={<AddCircleOutlineIcon />}\n                >\n                    Create New Campaign\n                </Button>\n                <p style={{color: 'gray'}}>\n                    {\n                        storage ?\n                            `${(storage.u/storage.q * 100).toFixed(2)}% used of ${formatBytes(storage.q)}`\n                            : 'Storage metrics unknown'\n                    }\n                </p>\n            </DialogContent>\n        </Dialog>\n        <InputDialog\n            open={promptNew}\n\t\t\ttitle='New Campaign'\n\t\t\tbody='Enter a name for the new Campaign:'\n\t\t\tacceptText={'Create'}\n\t\t\ttooltip={'Campaign Name'}\n\t\t\tonSubmit={addCampaign}\n\t\t\tonCancel={()=>setPromptNew(false)}\n\t\t/>\n    </div>\n})\n\n\nexport function CampaignMenu(props: {campaigns: Campaign[], onSelect: Function, selected: Campaign|null}) {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [selected, setSelected] = React.useState<Campaign|null>(props.selected);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (campaign: Campaign|null) => {\n        if (campaign) {\n            setSelected(campaign);\n            props.onSelect(campaign);\n        }\n        setAnchorEl(null);\n    };\n\n    const camps = props.campaigns.sort((c1, c2)=>c1.timeCreated-c2.timeCreated).map(c => {\n        return <MenuItem key={c.id} onClick={()=>handleClose(c)}>\n            <b>{c.name}</b>&nbsp;-&nbsp;<i>[{new Date(c.timeCreated).toLocaleString()}]</i>\n        </MenuItem>\n    });\n\n    return (\n        <div style={{marginBottom: '20px'}}>\n            <InputLabel htmlFor='campaign-list-btn'>Current Campaign:</InputLabel>\n            <Button\n                variant='outlined'\n                onClick={handleClick}\n                id={'campaign-list-btn'}\n                disabled={props.campaigns.length===0}\n                style={{maxWidth: '300px', minWidth: '200px', overflowX: 'hidden'}}\n            >\n                {selected? selected.name : (props.campaigns.length ? 'Select a Campaign':'No campaigns exist')}\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={()=>handleClose(null)}\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            >\n                {camps}\n            </Menu>\n        </div>\n    );\n}\n\n\nfunction formatBytes(bytes: number, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n","import React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {Button, Fab, MenuItem, MenuList, Popover, Tooltip, Typography} from \"@material-ui/core\";\nimport MapIcon from '@material-ui/icons/Map';\nimport GameController from \"../game/controllers/game\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport Campaign from \"../game/controllers/campaign\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport notifications from './notifications';\nimport ConfirmPrompt, {InputDialog} from \"./prompts\";\n\n\n\nexport const BoardSelector = observer((props: {controller: GameController}) => {\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n    const campaign = props.controller.campaign;\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    if (!campaign) return null;\n\n    return <div style={{pointerEvents: 'auto',}}>\n        <Tooltip\n            title=\"Selected Board\"\n        >\n            <Fab\n                variant=\"extended\"\n                onClick={(evt: any)=>{setAnchorEl(evt.currentTarget)}}\n                style={{width: '200px', overflowX: 'hidden', marginTop: '5px'}}\n            >\n                <MapIcon style={{marginRight: '5px'}}/>\n                <Typography variant=\"inherit\" noWrap>\n                    {campaign?.loadedBoard ? campaign.loadedBoard : '[Untitled Board]'}\n                </Typography>\n            </Fab>\n        </Tooltip>\n        <Popover\n            open={!!anchorEl}\n            anchorEl={anchorEl}\n            onClose={()=>setAnchorEl(null)}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <BoardControlMenu campaign={campaign} controller={props.controller}/>\n        </Popover>\n    </div>\n});\n\nexport const BoardControlMenu = (props: {controller: GameController, campaign: Campaign}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const handleSelected = (board: string) => {\n        setSelected(board);\n    }\n\n    return <form\n        style={{\n            flexGrow: 1,\n            width: '300px'\n        }}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={e => e.preventDefault()}\n    >\n        <FormGroup row>\n            <BoardSelectMenu campaign={props.campaign} onSelect={handleSelected}/>\n        </FormGroup>\n        <FormGroup row>\n            <BoardLoadButton controller={props.controller} selected={selected} setSelected={setSelected} />\n            <BoardDeleteButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n            <BoardCreateButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n        </FormGroup>\n    </form>\n}\n\n\nexport const BoardSelectMenu = observer((props: {campaign: Campaign, onSelect: Function}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const boards = props.campaign.boards.map(b => {\n        return <MenuItem\n            key={b}\n            onClick={() => {setSelected(b); props.onSelect(b)}}\n            selected={b === selected}\n        >\n            <Typography\n                variant=\"inherit\"\n                noWrap\n                color={b === props.campaign.loadedBoard ? 'textSecondary':'initial'}\n            >\n                {b}\n            </Typography>\n        </MenuItem>\n    });\n\n    return <MenuList style={{maxHeight: '400px',  overflow: 'auto', width: '100%'}}>\n        {boards}\n    </MenuList>;\n});\n\nexport const BoardLoadButton = (props: {controller: GameController, selected: string|null, setSelected: Function}) => {\n    return <Button\n        color=\"primary\"\n        disabled={props.controller.campaign?.loadedBoard === props.selected}\n        onClick={() => {\n            if (props.selected) {\n                props.controller.loadBoard(props.selected).then();\n            }\n        }}\n    >\n        Load\n    </Button>\n};\n\nexport const BoardDeleteButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [confirm, needConfirm] = React.useState(false);\n\n    return <div>\n        <Button\n            disabled={!props.selected}\n            color=\"secondary\"\n            onClick={() => {needConfirm(true)}}\n        >\n            Delete\n        </Button>\n        <ConfirmPrompt\n            open={confirm}\n            onCancel={() => {needConfirm(false)}}\n            onConfirm={() => {\n                if (props.selected) {\n                    props.controller.deleteBoard(props.campaign, props.selected).catch(err => {\n                        notifications.error('Failed to delete board!');\n                        console.error(err);\n                    });\n                    props.setSelected(null);\n                    needConfirm(false);\n                }\n            }}\n            title={'Really delete?'}\n            prompt={`Are you sure you want to delete the board \"${props.selected}\"?`}\n            confirmButton={'Delete'}\n        />\n    </div>\n};\n\nexport const BoardCreateButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [needPrompt, setPrompt] = React.useState(false);\n    const handleCreate = (name: string) => {\n        setPrompt(false);\n        if (props.campaign.boards.includes(name)) {\n            return notifications.error('All board names must be unique!')\n        }\n        if (name && name.trim().length) {\n            props.campaign.boards.push(name);\n            props.setSelected(name);\n            props.controller.loadBoard(name).then();\n        }\n    }\n\n    return <div>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)'}}\n            onClick={() => {\n                setPrompt(true);\n            }}\n        >\n            New\n        </Button>\n        <InputDialog\n            open={needPrompt}\n            title='Create a Board'\n            body='Enter the name for the new Board:'\n            tooltip={'Board name'}\n            acceptText={'Create'}\n            onSubmit={handleCreate}\n            onCancel={handleCreate}\n        />\n    </div>\n};\n","import {observer} from \"mobx-react-lite\";\nimport {Fab, Tooltip} from \"@material-ui/core\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\n\n\nexport const BoardSaveButton = observer( (props: {controller: GameController}) => {\n    const shouldSave = props.controller.campaign?.loadedBoard &&\n        (props.controller.entities.isDirty || props.controller.terrain.isBoardDirty);\n\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    return <Tooltip\n        title={shouldSave ? \"Save Board\" : \"No changes to save.\"}\n        style={{\n            pointerEvents: 'auto'\n        }}\n    >\n        <span>\n            <Fab\n                color=\"primary\"\n                onClick={()=>{props.controller.saveBoard().then()}}\n                disabled={!shouldSave}\n            >\n                <SaveIcon />\n            </Fab>\n        </span>\n    </Tooltip>\n});\n","import React from 'react';\nimport './styles/App.scss';\nimport './styles/canvas-style.scss';\nimport GameController from \"./game/controllers/game\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {Typography} from \"@material-ui/core\";\nimport ControlMenu from \"./ui-components/controlMenu\";\nimport {observer} from \"mobx-react-lite\";\nimport ConnectionOverlay from \"./ui-components/connectionOverlay\";\nimport {SnackbarProvider} from 'notistack';\nimport * as connection from \"./game/net/peerconnection\";\nimport {NetworkMode} from \"./game/net/peerconnection\";\nimport {SnackbarUtilsConfigurator} from \"./ui-components/notifications\";\nimport {Meta, metadata, currentUsername} from './game/db/metadata-db';\nimport {CampaignSelector} from \"./ui-components/campaignSelector\";\nimport {BoardSelector} from \"./ui-components/boardSelector\";\nimport {BoardSaveButton} from \"./ui-components/boardSaveButton\";\nimport {InputDialog} from \"./ui-components/prompts\";\nimport {YoutubePlayerInterface} from \"./ui-components/youtubePlayer\";\n\n\nif (!('PointerEvent' in window)) {\n    alert('This browser does not support pointer events - please use a different one!');\n}\n\nconst controller = new GameController();\n\nif (process.env.NODE_ENV !== 'development') {\n    console.info('Shutting the console up for non-dev build.');\n    function noop() {}\n    console.debug = noop;\n    console.log = noop;\n    console.info = noop;\n}\n\nconst App = observer(() => {\n    const desktop = useMediaQuery('(min-width:900px)');\n    const [needName, setNeedName] = React.useState(true);\n    const setName = async (name: string) => {\n        if (name && name.length) {\n            setNeedName(false);\n            currentUsername.set(name);\n            await metadata.store(Meta.USERNAME, name);\n            await controller.start();\n        } else {\n            window.location.reload();\n        }\n    }\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.USERNAME).then(async (name: string) => {\n            if (name && name.length) {\n               currentUsername.set(name);\n               setNeedName(false);\n               await controller.start();\n            }\n        })\n    }, []);\n\n    let content: JSX.Element|null = null;\n\n    if (needName) {\n        content = <InputDialog\n            open={needName}\n            title='Choose a Name'\n            body='Enter the name you want to go by:'\n            tooltip={'Name'}\n            onSubmit={setName}\n            onCancel={setName}\n        />;\n    } else if (!controller.ready && connection.netMode.get() === NetworkMode.UNKNOWN) {\n        content = <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                Loading <CircularProgress color=\"inherit\" />\n            </Typography>\n        </Backdrop>;\n    } else if (controller.isNetworkReady) {\n        content = <ControlMenu controller={controller} forMobile={!desktop}/>\n    } else if (!controller.isNetworkReady) {\n        content = <ConnectionOverlay controller={controller} />;\n    }\n\n    return (\n        <SnackbarProvider maxSnack={5}>\n            <SnackbarUtilsConfigurator />\n            <div className=\"App noMouse\">\n                <div style={{\n                    display: 'flex',\n                    pointerEvents: 'none',\n                    flexDirection: 'row',\n                    position: 'fixed',\n                    top: '10px',\n                    left: '10px'\n                }}>\n                    <CampaignSelector controller={controller}/>\n                    <BoardSelector controller={controller}/>\n                    <BoardSaveButton controller={controller} />\n                    <YoutubePlayerInterface />\n                </div>\n\n                {content}\n            </div>\n        </SnackbarProvider>\n    )\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app waitForSpriteLoad faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'mobx-react-lite/batchingForReactDom'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/web-ui/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/web-ui/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/web-ui/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/web-ui/src/game/data/board-packer.worker.ts\")());module.exports.__esModule = true;"],"sourceRoot":""}