{"version":3,"sources":["game/net/messageEncoder.worker.ts","resources/sheet-composite.enc.png","game/util/unscramble.js","webpack:///./src/game/net/messageEncoder.worker.ts?773d","webpack:///./src/game/data/board-packer.worker.ts?e9c0","game/util/draggable.ts","game/consts.ts","game/util/sprite-loading.ts","game/controllers/canvas.ts","game/net/packets/packet-list.ts","ui-components/notifications.ts","game/net/handlers/handler.ts","game/data/protobufs/proto-wrapper.ts","game/data/protobufs/proto-sprite.ts","game/data/protobufs/proto-entity.ts","game/data/protobufs/proto-tiles.ts","game/net/packets/terrainPackets.ts","game/net/packets/entityPackets.ts","game/net/packets/util-packets.ts","game/net/packets/media-packets.ts","game/net/messageEncoder.ts","game/util/promiseStream.ts","game/db/database.ts","game/db/metadata-db.ts","game/net/peerconnection.ts","game/data/interfaces/tile.ts","game/net/handlers/terrain-add-handler.ts","game/net/handlers/terrain-erase-handler.ts","game/controllers/terrain.ts","game/middleware/middleware.ts","game/middleware/entity-events.ts","game/net/handlers/entity-update-handler.ts","game/controllers/entities.ts","game/net/prechecks/precheck.ts","game/db/user-db.ts","game/net/prechecks/signature-check.ts","game/net/prechecks/board-sync-check.ts","game/controllers/lobby.ts","game/net/handlers/ping-handler.ts","game/db/board-db.ts","game/controllers/campaign.ts","game/util/deproxy.ts","game/db/campaign-db.ts","game/data/campaign-loader.ts","game/net/handlers/board-reload-handler.ts","ui-components/prompts.tsx","ui-components/youtubePlayer.tsx","game/net/handlers/media-sync-handler.ts","game/net/prechecks/media-sync.ts","game/controllers/game.ts","ui-tools/ui-tool.tsx","game/middleware/pen-events.ts","ui-components/spritepicker.tsx","ui-tools/ui-pen-tool.tsx","ui-tools/ui-camera-tool.tsx","ui-tools/ui-eraser-tool.tsx","ui-tools/ui-entity-tool.tsx","ui-tools/ui-lobby-tool.tsx","ui-components/controlMenu.tsx","ui-components/loginHelper.tsx","ui-components/connectionOverlay.tsx","game/util/google-api.ts","ui-components/campaignSelector.tsx","ui-components/boardSelector.tsx","ui-components/boardSaveButton.tsx","App.tsx","serviceWorker.ts","index.tsx","game/data/board-packer.worker.ts"],"names":["module","exports","wrap","__esModule","shuffleSeed","require","img","sliceSize","seed","bmp","i","ctx","totalParts","Math","ceil","width","height","inds","push","canvas","document","createElement","getContext","verticalSlices","getGroup","slices","self","length","cols","t","y","getColsInGroup","rows","x","slice","row","parseInt","col","getSlices","g","group","shuffleInd","shuffle","s","drawImage","Worker","pan","state","originX","originY","transformation","translateX","translateY","element","style","transform","getMatrix","scale","canPan","panBy","panTo","canZoom","zoom","deltaScale","getBoundingClientRect","left","top","minScale","maxScale","scaleSensitivity","getScale","newScale","newOriginX","newOriginY","translate","getTranslate","pos","prevPos","transformOrigin","max","min","valueInRange","listeners","listen","ele","event","cb","opts","addEventListener","rem","removeEventListener","Draggable","parent","instance","Object","assign","renderer","dragging","lx","ly","evCache","noScroll","Set","prevDiff","preventDefault","sign","deltaY","pageX","pageY","blocking","ev","splice","clear","clientX","clientY","window","pointerId","curDiff","abs","sqrt","pow","delta","change","add","has","delete","unregister","forEach","l","fpsTicker","CanvasContainer","base","wrapper","canvases","this","className","backgroundColor","prepend","body","setCanvasSize","resetView","setSize","appendTo","object","appendChild","removeChild","c","rect","console","log","coords","boardTileWidth","floor","boardTileHeight","Canvas","name","context","id","e","append","mdl","attach","rawData","unscramble","data","sheet","spriteWidth","metadata","spriteHeight","globalFrameIndex","waitForSpriteLoad","Promise","res","Image","onerror","err","error","alert","onload","process","src","sheetSRC","clearInterval","setInterval","findSpriteData","key","ret","sprites","Error","composite","snackbarRef","Sprite","idx","images","drawImageTo","blocker","Handler","packets","isHost","client","packet","hostHandler","clientHandler","SnackbarUtilsConfigurator","useSnackbar","success","msg","options","toast","variant","warning","info","enqueueSnackbar","ProtoWrapper","values","Message","ProtoSprite","Type","d","Field","ProtoEntity","ProtoTile","ProtoTileStack","ProtoBoard","TerrainAddPacket","TerrainCoordPacket","TerrainErasePacket","EntityUpdatePacket","EntityDeletePacket","PingPacket","SignaturePacket","ReadyPacket","MediaStatusPacket","MediaRequestPacket","packetList","packetMap","$type","encode","a","constructor","worker","decode","clazz","PromiseStream","maxBackpressure","prom","resolve","backPressure","fn","onError","then","catch","db","boards","campaigns","users","version","stores","table","debug","importDB","location","href","split","exportDB","prettyJson","progressCallback","progress","Dexie","copyOldDB","newDB","dbName","tableName","newTable","exists","open","tables","tbl","toArray","close","on","count","Meta","currentUsername","observable","box","JSON","where","first","val","parse","value","put","stringify","NetworkStatus","NetworkMode","get","store","handlers","preConn","clients","sb","netStatus","IDLE","netMode","UNKNOWN","setHandlers","newHandlers","newPreConn","getSeed","CERT_SEED","Switchboard","makeSeed","getMyID","useLongform","fullID","peerID","getIdFromSeed","makeSB","kill","connectTo","hostID","setMode","CLIENT","RECONNECTING","set","CONNECTING","peer","notifications","Client","clientError","WAITING_FOR_HOST","pc","run","verified","CONNECTED","DISCONNECTED","findHost","warn","removeClient","openHost","HOST","cli","host","p","mode","listener","lastSend","stream","userData","username","keyCodes","lastSeen","pingTimer","lastPing","hook","isClosed","Date","now","send","queue","handleMessage","packetBinary","encoder","Uint8Array","h","some","handlePacket","clearTimeout","sendBuffer","expectedType","rej","broadcast","requireHost","Tile","sprite","z","TerrainAddHandler","terrain","tileStacks","stack","tiles","removeAt","dt","sp","spriteIdx","placeAt","setTimeout","broadcastChanges","pollChanges","packedStacks","updateTiles","packer","TerrainEraseHandler","size","tep","Array","from","Terrain","boardWidth","boardHeight","tileIDX","resizeBoard","tList","redraw","mkKey","redrawAt","sendTerrainRemove","isBoardDirty","tile","existing","getAt","isBlocker","k","filter","sendTerrainAdd","selectedSprite","covered","px","py","clearRect","map","drawTo","newTerrain","keys","sort","b","Middleware","hooks","onCleanup","register","target","wrapped","stopPropagation","trg","EntityMiddleware","container","entLayer","ent","moveListener","movePoints","moveTrackers","entityLayer","entEle","clearMover","toggleInput","bringToFront","toGrid","addPoint","mp","remove","last","findIndex","checkDiag","redrawPath","updateEntity","entity","third","distance","reduce","prev","next","dst","innerText","pathLength","p1","p2","offsetX","offsetY","EntityUpdateHandler","entities","addEntity","entityID","entityIsOwned","canMove","visible","proto","owners","Entity","init","uuid","includes","NamePlate","text","color","targY","plates","update","reposition","offsetWidth","offsetHeight","o","overlaps","position","other","right","bottom","n","updateTimer","EntityEle","plateParent","onClick","namePlate","redrawTimer","opacity","props","requestAnimationFrame","animated","bind","cursor","imageWidthPx","useInput","EntityLayer","tileWidth","tileHeight","entityElements","plateEle","enableInput","middleware","sendUpdate","sendDelete","selected","select","setInput","isDirty","setTarget","checkOwner","internalUpdate","enabled","acceptHover","PreCheck","controller","runHandler","addNewUser","user","getTime","updateUser","getUser","checkUserCredentials","userName","keyCode","match","HandShakeCheck","USERNAME","getNextPacket","lobby","addPendingLogin","BoardSync","buildProtoBoard","Lobby","blacklist","title","iconURL","Notification","requestPermission","result","icon","approve","reject","pendingLogins","find","pe","pending","removePending","notify","u","PingHandler","handlePing","save","campaignID","board","navigator","storage","persist","load","getAvailable","between","minKey","maxKey","deleteBoard","Campaign","shallow","timeCreated","stripProxy","obj","entries","v","saveCampaign","camp","createCampaign","getAllCampaigns","getCampaign","mapToClass","CampaignLoader","campaign","boardDB","loadedBoard","characters","BoardReloadHandler","loadFromProtoBoard","InputDialog","React","useState","setText","handleClose","onCancel","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","tooltip","type","fullWidth","onChange","DialogActions","Button","onSubmit","acceptText","ConfirmPrompt","aria-describedby","prompt","cancelButton","onConfirm","confirmButton","PLAYER_OPTS","playerVars","autoplay","mute","config","volume","loop","saveConf","PLAYER_CONFIG","player","getPlayerStatus","currentVideo","getVideoData","video_id","currentTime","getCurrentTime","playbackRate","getPlaybackRate","paused","getPlayerState","YouTube","PlayerState","PAUSED","YoutubePlayerInterface","observer","setVisible","useMemo","tools","ShuffleButton","pointerEvents","Tooltip","Fab","YoutubePlayer","mediaPlayer","setPlayer","useEffect","timer","getVolume","PLAYING","onReady","onPlay","stat","onPause","nextVideo","onStateChange","CUED","setLoop","setShuffle","setVolume","getPlaylist","playVideoAt","playVideo","LoadPlaylistButton","needPrompt","input","URLSearchParams","cuePlaylist","list","listType","index","startSeconds","LoadVideoButton","cueVideoById","IconButton","children","MediaSyncHandler","pauseVideo","setPlaybackRate","videoId","status","MediaSync","GameController","canvasContainer","preChecks","addLayer","hash","replace","startHost","startClient","ready","history","pushState","connection","pu","rejectUser","setHost","connectID","pb","setDirectMap","getEntityList","includeHidden","getDirectMap","flat","indexOf","UITool","PenMiddleware","canUsePen","hoverBox","toggle","addElement","ke","code","startsWith","updateHighlight","shiftKey","button","xx","yy","draw","out","penSize","eraseAt","drawAt","border","op","removeElement","SpritePicker","defaultTerm","searchTerm","setSearch","setAnimated","setSprites","timeout","results","term","nameOnly","search","toLowerCase","path","searchImages","maxWidth","noValidate","autoComplete","FormGroup","Autocomplete","selectOnFocus","freeSolo","inputValue","onInputChange","newInputValue","onSearch","renderInput","params","FormControlLabel","control","Switch","checked","disabled","canAnimate","inputProps","labelPlacement","SpriteGrid","onSelect","perRow","rowCount","columnCount","columnWidth","rowHeight","maxHeight","spr","columnIndex","rowIndex","SpriteImage","canv","useRef","sel","current","cancel","ref","background","useStyles","makeStyles","theme","createStyles","paper","palette","boxShadow","shadows","padding","spacing","minWidth","SpritePickerModal","classes","Modal","currentSprite","UIPenTool","forMobile","PenControlInterface","pen","registerMiddleware","eject","PenSizeSlider","Typography","gutterBottom","Slider","getAriaValueText","valueLabelDisplay","step","marks","newValue","UICameraTool","UIEraserTool","EraserSizeSlider","UIEntityTool","EntityEditorInterface","root","flexGrow","speedDial","spriteColor","marginLeft","marginTop","marginRight","promptSprite","setSpritePrompt","setSprite","entName","setName","loadExisting","setLoadExisting","resetValues","EntityEditInterface","evt","Checkbox","justifyContent","createEntity","CampaignCharacterSelector","promptClone","setClonePrompt","updateCampaign","updateInstant","clientNames","cl","userList","saveToCampaign","InputLabel","Select","multiple","Input","renderValue","join","marginBottom","MenuItem","ListItemText","primary","PromptForNumber","num","cloneEntity","setSelected","getSelected","cha","setNum","ext","screenToBoard","innerWidth","innerHeight","campUpdateTimer","savedIdx","newData","UILobbyTool","LobbyInterface","PendingList","UserList","eles","pl","MenuList","PendingUserEle","disableTouchRipple","approveUser","network","dat","ControlMenu","ui","setOpen","modalOpen","setModalOpen","setTools","selectedTool","handleModalClose","handleSelect","action","hotkeys","handler","tool","isOption","unbind","newTools","emb","getControlUI","Avatar","SpeedDial","ariaLabel","hidden","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","tooltipOpen","LoginHelper","promptLogin","setPrompt","needClient","setNeedClient","PromptNetwork","hosting","txt","ConnectionOverlay","content","message","MATCHMAKING_FAIL","Backdrop","transitionDuration","component","api","injected","apiReady","apiFailed","waitForLoad","fail","script","gapi","clientId","discoveryDocs","scope","auth2","getAuthInstance","isSignedIn","callback","localStorage","signIn","signOut","mimeType","currentUser","oauthToken","getAuthResponse","access_token","getLatestBackup","latest","latestID","parents","fetch","method","headers","Authorization","resp","loc","drive","files","pageSize","fields","spaces","response","listFiles","modifiedTime","blob","lastUpdate","driveUpdateTime","downloadLatestBackup","importData","toBlob","upload","inject","google","CampaignSelector","need","setNeed","wantOpen","setWantOpen","promptNew","setPromptNew","campaignList","setList","q","setStorage","selectCampaign","CAMPAIGN_CURRENT","loadBoard","loadCampaign","estimate","usage","quota","undefined","addCampaign","trim","textAlign","CampaignMenu","startIcon","toFixed","bytes","decimals","dm","sizes","parseFloat","formatBytes","exportLocalDB","display","restoreLocalDB","accept","getElementById","click","promptSignIn","anchorEl","setAnchorEl","camps","c1","c2","toLocaleString","htmlFor","currentTarget","overflowX","Menu","keepMounted","Boolean","anchorOrigin","vertical","horizontal","download","file","BoardSelector","noWrap","Popover","BoardControlMenu","BoardSelectMenu","overflow","BoardLoadButton","BoardDeleteButton","confirm","needConfirm","BoardCreateButton","handleCreate","BoardSaveButton","shouldSave","saving","setSaving","dbUpdate","setUpdate","saveBoard","uploadLocalDB","onSignInChange","loggedIn","getLatestUpgrade","CircularProgress","downloadDB","noop","oldConsole","restoreLog","App","desktop","useMediaQuery","needName","setNeedName","start","reload","isNetworkReady","maxSnack","flexDirection","hostname","ReactDOM","render","serviceWorker","registration"],"mappings":"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","file":"static/js/main.cfe22de6.chunk.js","sourcesContent":["module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/web-ui/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/web-ui/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/web-ui/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/web-ui/src/game/net/messageEncoder.worker.ts\")());module.exports.__esModule = true;","module.exports = __webpack_public_path__ + \"static/media/sheet-composite.enc.c54111ee.png\";","/*\n * converted from https://www.npmjs.com/package/image-scramble\n */\nvar shuffleSeed = require('shuffle-seed');\n\nvar self = function(img,sliceSize,seed,bmp){\n\tvar i;\n\tvar totalParts = Math.ceil(img.width/sliceSize)*Math.ceil(img.height/sliceSize);\n\tvar inds = [];\n\tvar ctx;\n\tfor(i=0;i<totalParts;i++) inds.push(i);\n\tif(!bmp){\n\t\tvar canvas=document.createElement(\"canvas\");\n\t\tctx=canvas.getContext('2d');\n\t\tcanvas.width=img.width;\n\t\tcanvas.height=img.height;\n\t}\n\n\n\tvar verticalSlices=Math.ceil(img.width/sliceSize);\n\n\tvar getSlices = function(){\n\t\tvar slices = {};\n\t\tvar i;\n\t\tfor(i=0;i<totalParts;i++){\n\t\t\tvar slice = {};\n\t\t\tvar row=parseInt(i/verticalSlices);\n\t\t\tvar col=i-row*verticalSlices;\n\t\t\tslice.x=col*sliceSize;\n\t\t\tslice.y=row*sliceSize;\n\t\t\tslice.width=(sliceSize-(slice.x+sliceSize<=img.width ?  0 : (slice.x+sliceSize)-img.width));\n\t\t\tslice.height=(sliceSize-(slice.y+sliceSize<=img.height ?  0 : (slice.y+sliceSize)-img.height));\n\t\t\tif(!slices[slice.width+\"-\"+slice.height]) slices[slice.width+\"-\"+slice.height]=[];\n\t\t\tslices[slice.width+\"-\"+slice.height].push(slice);\n\t\t}\n\t\treturn slices;\n\t}\n\n\tvar getColsInGroup = function(slices){\n\t\tif(slices.length===1) return 1;\n\t\tvar t = 'init';\n\t\tfor(var i=0;i<slices.length;i++){\n\t\t\tif(t==='init') t = slices[i].y;\n\t\t\tif(t!==slices[i].y){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t}\n\n\tvar getGroup = function(slices){\n\t\tvar self = {};\n\t\tself.slices = slices.length;\n\t\tself.cols = getColsInGroup(slices);\n\t\tself.rows = slices.length/self.cols;\n\t\tself.width = slices[0].width*self.cols;\n\t\tself.height = slices[0].height*self.rows;\n\t\tself.x = slices[0].x;\n\t\tself.y = slices[0].y;\n\t\treturn self;\n\t}\n\n\tvar slices = getSlices();\n\tfor(var g in slices){\n\t\tvar group = getGroup(slices[g]);\n\t\tvar shuffleInd = [];\n\t\tfor(i=0;i<slices[g].length;i++) shuffleInd.push(i);\n\t\tshuffleInd = shuffleSeed.shuffle(shuffleInd,seed);\n\t\tfor(i=0;i<slices[g].length;i++){\n\t\t\tvar s=shuffleInd[i];\n\n\t\t\tvar row=parseInt(s/group.cols);\n\t\t\tvar col=s-row*group.cols;\n\t\t\tvar x=col*slices[g][i].width;\n\t\t\tvar y=row*slices[g][i].height;\n\n\t\t\tctx.drawImage(\n\t\t\t\timg,\n\t\t\t\tgroup.x+x,\n\t\t\t\tgroup.y+y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height,\n\t\t\t\tslices[g][i].x,\n\t\t\t\tslices[g][i].y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height\n\t\t\t);\n\t\t}\n\t}\n\treturn canvas;\n}\n\nmodule.exports=self;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"e9619ee137f3ebdc3b90.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"f3bee59d08e412a84aa8.worker.js\");\n};","\nfunction renderer(minScale: number, maxScale: number, element: HTMLElement, scaleSensitivity: number = 10){\n    const state = {\n        element,\n        minScale,\n        maxScale,\n        scaleSensitivity,\n        transformation: {\n            originX: 0,\n            originY: 0,\n            translateX: 0,\n            translateY: 0,\n            scale: 1\n        },\n    };\n    return Object.assign({}, canZoom(state), canPan(state), {state});\n}\n\nconst pan = ({ state, originX, originY }: any) => {\n    state.transformation.translateX += originX;\n    state.transformation.translateY += originY;\n    state.element.style.transform =\n        getMatrix({ scale: state.transformation.scale, translateX: state.transformation.translateX, translateY: state.transformation.translateY });\n};\n\nconst canPan = (state: any) => ({\n    panBy: ({ originX, originY }: any) => pan({ state, originX, originY }),\n    panTo: ({ originX, originY, scale }: any) => {\n        state.transformation.scale = scale;\n        pan({ state, originX: originX - state.transformation.translateX, originY: originY - state.transformation.translateY });\n    },\n});\n\n\nconst canZoom = (state: any) => ({\n    zoom: ({ x, y, deltaScale }: any) => {\n        const { left, top } = state.element.getBoundingClientRect();\n        const { minScale, maxScale, scaleSensitivity } = state;\n        const [scale, newScale] = getScale({ scale: state.transformation.scale, deltaScale, minScale, maxScale, scaleSensitivity });\n        const originX = x - left;\n        const originY = y - top;\n        const newOriginX = originX / scale;\n        const newOriginY = originY / scale;\n        const translate = getTranslate({ scale, minScale, maxScale });\n        const translateX = translate({ pos: originX, prevPos: state.transformation.originX, translate: state.transformation.translateX });\n        const translateY = translate({ pos: originY, prevPos: state.transformation.originY, translate: state.transformation.translateY });\n\n        state.element.style.transformOrigin = `${newOriginX}px ${newOriginY}px`;\n        state.element.style.transform = getMatrix({ scale: newScale, translateX, translateY });\n        state.transformation = { originX: newOriginX, originY: newOriginY, translateX, translateY, scale: newScale };\n    }\n});\n\nconst getScale = ({ scale, minScale, maxScale, scaleSensitivity, deltaScale }: any) => {\n    let newScale = scale + (deltaScale / (scaleSensitivity / scale));\n    newScale = Math.max(minScale, Math.min(newScale, maxScale));\n    return [scale, newScale];\n};\n\nconst hasPositionChanged = ({ pos, prevPos }: any) => pos !== prevPos;\n\nconst valueInRange = ({ minScale, maxScale, scale }: any) => scale <= maxScale && scale >= minScale;\n\nconst getTranslate = ({ minScale, maxScale, scale }: any) => ({ pos, prevPos, translate }: any) =>\n    valueInRange({ minScale, maxScale, scale }) && hasPositionChanged({ pos, prevPos })\n        ? translate + (pos - prevPos * scale) * (1 - 1 / scale)\n        : translate;\n\nconst getMatrix = ({ scale, translateX, translateY }: any) =>\n    `matrix(${scale}, 0, 0, ${scale}, ${translateX}, ${translateY})`;\n\nconst listeners: any = [];\n\nfunction listen (ele: HTMLElement|Document|Window, event: string, cb: any, opts: any = {}) {\n    ele.addEventListener(event, cb);\n    const rem = () => ele.removeEventListener(event, cb, opts);\n    listeners.push(rem)\n    return rem;\n}\n\nexport default function Draggable(ele: HTMLElement, parent: HTMLElement) {\n    const instance = renderer(.65, 5, ele, 10);\n    let dragging = false;\n    let lx=0, ly=0;\n    // Global vars to cache event state\n    let evCache: any = [], noScroll = new Set();\n    let prevDiff = -1;\n    listen(parent, \"wheel\", (event: WheelEvent) => {\n        event.preventDefault();\n        instance.zoom({\n            deltaScale: Math.sign(event.deltaY) > 0 ? -1 : 1,\n            x: event.pageX,\n            y: event.pageY\n        });\n    }, { blocking: true });\n\n    listen(parent, 'mouseup', (ev: MouseEvent) => {\n        evCache.splice(0, evCache.length); // Don't cache events for mice.\n        noScroll.clear();\n        dragging = false;\n        prevDiff = -1;\n    });\n\n    // Pointer stuff:\n    listen(parent, 'pointerdown', (ev: PointerEvent) => {\n        evCache.push(ev);\n        lx = ev.clientX;\n        ly = ev.clientY;\n        dragging = true;\n    });\n    listen(window, 'pointermove', (ev: PointerEvent) => {\n        ev.preventDefault();\n        if (!dragging) return;\n        // Find this event in the cache and update its record with this event\n        for (let i = 0; i < evCache.length; i++) {\n            if (ev.pointerId === evCache[i].pointerId) {\n                evCache[i] = ev;\n                break;\n            }\n        }\n        // If two pointers are down, check for pinch gestures\n        if (evCache.length === 2) {\n            // Calculate the distance between the two pointers\n            let curDiff = Math.abs(Math.sqrt(Math.pow(evCache[0].clientX - evCache[1].clientX, 2) + Math.pow(evCache[0].clientY - evCache[1].clientY, 2)));\n\n            if (prevDiff > 0) {\n                let delta = prevDiff - curDiff;\n                let change = (Math.sign(delta) > 0 ? -0.2 : 0.2) * Math.abs(delta)/10;\n                instance.zoom({\n                    deltaScale: change,\n                    x: ev.pageX,\n                    y: ev.pageY\n                });\n                noScroll.add(evCache[0].pointerId);\n                noScroll.add(evCache[1].pointerId);\n            }\n\n            // Cache the distance for the next move event\n            prevDiff = curDiff;\n        } else if (evCache.length === 1 && dragging && !noScroll.has(ev.pointerId)) {\n            instance.panBy({\n                originX: ev.clientX - lx,\n                originY: ev.clientY - ly\n            });\n            lx = ev.clientX;\n            ly = ev.clientY;\n        }\n    });\n\n    listen(window, 'pointerup', (ev: PointerEvent) => {\n        // Remove this event from the target's cache\n        for (let i = 0; i < evCache.length; i++) {\n            if (evCache[i].pointerId === ev.pointerId) {\n                evCache.splice(i, 1);\n                break;\n            }\n        }\n        noScroll.delete(ev.pointerId);\n\n        if (evCache.length < 1) {\n            dragging = false;\n        }\n\n        // If the number of pointers down is less than two then reset diff tracker\n        if (evCache.length < 2) {\n            prevDiff = -1;\n        }\n    });\n\n    return Object.assign({}, instance, {unregister: () => listeners.forEach((l: any) => l())})\n}\n","/** The width of each image/tile, in pixels. */\nexport const imageWidthPx = 48;\n/** The height of each image/tile, in pixels. */\nexport const imageHeightPx = 48;\n\n/** The amount of terrain the board is wide. */\nexport const boardTileWidth = 100;\n/** The amount of terrain the board is tall. */\nexport const boardTileHeight = 100;\n","import sheetSRC from '../../resources/sheet-composite.enc.png';\nimport {SpriteInterface} from \"../data/interfaces/sprite\";\nconst rawData = require('../../resources/sheet-data.json');\nconst unscramble = require('./unscramble');\n\ninterface DataSheet {\n\tmetadata: {\n\t\twidth: number;\n\t\theight: number;\n\t\tcount: number;\n\t\tuid: string;\n\t};\n\tsprites: Record<string, DataSprite>;\n}\n\ninterface DataSprite {\n\tname: string;\n\tanimated?: number;\n\timages: DataImage[];\n}\n\ninterface DataImage {\n\tx: number;\n\ty: number;\n\tblocker: boolean;\n}\n\nconst data: DataSheet = rawData;  // Type casting here for clarity.\nlet sheet: HTMLCanvasElement = document.createElement('canvas');\nlet spriteWidth: number = data.metadata.width;\nlet spriteHeight: number = data.metadata.height;\nlet globalFrameIndex: number = 0;\nlet fpsTicker: NodeJS.Timeout;\n\nexport const waitForSpriteLoad: Promise<any> = new Promise(res => {\n\tconst img = new Image();\n\timg.onerror = err => {\n\t\tconsole.error(err);\n\t\talert('Failed to load sprite sheet! \\nTry hard reloading the page (ctrl+F5).');\n\t};\n\timg.onload = () => {\n\t\tsheet = unscramble(img, 24, process.env.REACT_APP_SPRITE_KEY); // Support the artists - buy from them!\n\t\tres();\n\t};\n\timg.src = sheetSRC;\n\n\tclearInterval(fpsTicker);\n\tfpsTicker = setInterval(() => {\n\t\tglobalFrameIndex++;\n\t\tglobalFrameIndex %= 1000;\n\t}, 200);\n});\n\n/**\n * Locates the metadata for a given Sprite. Raises an Error if the key cannot be found.\n * @param key\n */\nfunction findSpriteData(key: Sprite): DataSprite {\n\tconst ret = data.sprites[key.id];\n\tif (!ret) throw Error(`Unable to locate sprite for key: ${key.composite}`);\n\treturn ret;\n}\n\n/**\n * Render the image, denoted by the given Sprite, to the given Graphics 2D context.\n * @param ctx\n * @param key\n * @param x\n * @param y\n */\nfunction drawImageTo(ctx: CanvasRenderingContext2D, key: Sprite, x: number, y: number) {\n\tconst sprites = findSpriteData(key);\n\tconst img = key.idx < 0 ? sprites.images[globalFrameIndex % sprites.images.length] : sprites.images[key.idx];\n\n\tctx.drawImage(sheet, img.x, img.y, spriteWidth, spriteHeight, x, y, spriteWidth, spriteHeight);\n}\n\n/** Search for images matching the given term. */\nexport function searchImages(term: string, animated: boolean = false, nameOnly: boolean = false) {\n\tconst res: Sprite[] = [];\n\tconst search = Object.entries(data.sprites).filter( (obj) => {\n\t\tif (animated && !obj[1].animated) {\n\t\t\treturn false;\n\t\t}\n\t\tif (nameOnly) {\n\t\t\treturn obj[1].name.includes(term);\n\t\t}\n\n\t\treturn obj[0].includes(term.toLowerCase())\n\t}).map(o => ({ path: o[0], sprite: o[1]}));\n\tif (!animated) {\n\t\tsearch.forEach(o => {\n\t\t\tfor(let i=0; i < o.sprite.images.length; i++) {\n\t\t\t\tres.push(new Sprite(o.path, i));\n\t\t\t}\n\t\t})\n\t} else {\n\t\tsearch.forEach(o => {\n\t\t\tres.push(new Sprite(o.path, -1));\n\t\t})\n\t}\n\n\treturn res;\n}\n\n/**\n * Sprites are used to concisely represent an image (by ID) from the datasheet,\n * as well as which index to use for animating.\n */\nexport class Sprite implements SpriteInterface {\n\tpublic readonly id: string;\n\tpublic readonly idx: number;\n\n\tconstructor(id: string, idx: number) {\n\t\tthis.id = id;\n\t\tthis.idx = idx;\n\t}\n\n\tget composite(): string {\n\t\treturn `${this.id}:${this.idx}`;\n\t}\n\n\tget animated(): boolean {\n\t\treturn this.idx < 0;\n\t}\n\n\tget isBlocker(): boolean {\n\t\tif (this.idx < 0) return false;\n\t\treturn findSpriteData(this).images[this.idx].blocker;\n\t}\n\n\tget name(): string {\n\t\treturn findSpriteData(this).name;\n\t}\n\n\tpublic drawTo(ctx: CanvasRenderingContext2D, x: number, y: number) {\n\t\tdrawImageTo(ctx, this, x, y);\n\t}\n}\n","import Draggable from '../util/draggable';\nimport Middleware from \"../middleware/middleware\";\nimport EntityLayer from \"./entities\";\nimport {boardTileHeight, boardTileWidth, imageHeightPx, imageWidthPx} from \"../consts\";\n\n\nexport class CanvasContainer {\n    private readonly base: HTMLDivElement;\n    private readonly wrapper: HTMLDivElement;\n    private readonly canvases: (Canvas|EntityLayer)[] = [];\n    private width: number;\n    private height: number;\n    private renderer: any;\n\n    constructor(width: number = 4800, height: number = 4800) {\n        this.width = width;\n        this.height = height;\n        this.base = document.createElement('div');\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'canvasWrapper';\n        this.wrapper.style.backgroundColor = 'gray';\n        this.base.className = 'canvasBase';\n\n        this.base.prepend(this.wrapper);\n        document.body.prepend(this.base);\n        this.renderer = Draggable(this.wrapper, this.base);\n        this.setCanvasSize(width, height);\n        this.resetView();\n    }\n\n    public addLayer(canvas: Canvas|EntityLayer) {\n        this.canvases.push(canvas);\n        canvas.setSize(this.width, this.height);\n        canvas.appendTo(this.wrapper);\n    }\n\n    public addElement(object: HTMLElement) {\n        return this.wrapper.appendChild(object);\n    }\n\n    public removeElement(object: HTMLElement) {\n        return this.wrapper.removeChild(object);\n    }\n\n    public setCanvasSize(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.wrapper.style.width = `${this.width}px`;\n        this.wrapper.style.height = `${this.height}px`;\n        this.canvases.forEach(c => c.setSize(width, height));\n        this.resetView();\n    }\n\n    public resetView() {\n        this.renderer.panTo({\n            originX: this.width/2 * -1 + this.base.getBoundingClientRect().width/2,\n            originY: this.height/2 * -1 + this.base.getBoundingClientRect().height/2,\n            scale: 0.99\n        });\n    }\n\n    /**\n     * Convert the given screen pixel coords to the (nearest) Board tile (x,y) pair.\n     */\n    public screenToBoard(x: number, y: number) {\n        const rect = this.wrapper.getBoundingClientRect();\n        const scale = this.renderer.state.transformation.scale;\n\n        console.log('locating:', x, y, scale, rect);\n        const coords = {\n            x: Math.max(0, Math.min(boardTileWidth-1, Math.floor((x - rect.x) / scale / imageWidthPx))),\n            y: Math.max(0, Math.min(boardTileHeight-1, Math.floor((y - rect.y) / scale / imageHeightPx)))\n        };\n\n        console.log(coords);\n\n        return coords\n    }\n}\n\nexport class Canvas {\n    public readonly name: string;\n    protected readonly canvas: HTMLCanvasElement;\n    private readonly context: CanvasRenderingContext2D;\n\n    constructor(name: string) {\n        this.name = name;\n        this.canvas = document.createElement('canvas');\n        this.canvas.id = `canvas-${name}`;\n        this.canvas.className = 'canvasBackground';\n\n        // @ts-ignore\n        this.context = this.canvas.getContext('2d');\n        this.canvas.addEventListener('contextmenu', e => e.preventDefault());\n    }\n\n    public get ctx(): CanvasRenderingContext2D {\n        return this.context;\n    }\n\n    public get width(): number {\n        return this.canvas.width;\n    }\n\n    public get height(): number {\n        return this.canvas.height;\n    }\n\n    public setSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    }\n\n    public appendTo(ele: HTMLDivElement) {\n        ele.append(this.canvas);\n    }\n\n    public registerMiddleware(mdl: Middleware) {\n        mdl.attach(this.canvas);\n    }\n}\n","import {TerrainAddPacket, TerrainErasePacket} from \"./terrainPackets\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard, ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"./entityPackets\";\nimport {PingPacket, ReadyPacket, SignaturePacket} from \"./util-packets\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"./media-packets\";\n\n/**\n * The order of this list is important, as the index represents the packet ID for messages and saved boards.\n */\nexport const packetList: typeof ProtoWrapper[] = [\n    SignaturePacket,\n    ReadyPacket,\n    TerrainErasePacket,\n    TerrainAddPacket,\n    ProtoBoard,\n    ProtoTileStack,\n    EntityUpdatePacket,\n    EntityDeletePacket,\n    PingPacket,\n    MediaStatusPacket,\n    MediaRequestPacket\n];\n\nexport const packetMap: Record<string, number> = {};\n\nfor (let i=0; i<packetList.length; i++) {\n    packetMap[packetList[i].$type.name] = i;\n}\n","import { useSnackbar, WithSnackbarProps, OptionsObject } from 'notistack'\nimport React from 'react'\n\nlet snackbarRef: WithSnackbarProps;\n\n\nexport const SnackbarUtilsConfigurator: React.FC = () => {\n    snackbarRef = useSnackbar();\n    return null;\n};\n\nexport default {\n    success(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'success' })\n    },\n    warning(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'warning' })\n    },\n    info(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'info' })\n    },\n    error(msg: string, options: OptionsObject = {}) {\n        this.toast(msg, { ...options, variant: 'error' })\n    },\n    toast(msg: string, options: OptionsObject = {}) {\n        snackbarRef.enqueueSnackbar(msg, options)\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\nexport default abstract class Handler {\n    /** The type of packet this handler is listening for. */\n    public abstract readonly packets: typeof ProtoWrapper[];\n    private isHost: boolean = false;\n\n    setHost(isHost: boolean) {\n        this.isHost = isHost;\n    }\n\n    async handlePacket(client: Client, packet: ProtoWrapper) {\n        return this.isHost ? this.hostHandler(client, packet) : this.clientHandler(client, packet);\n    }\n\n    abstract async clientHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n    abstract async hostHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n}\n","import {Message} from \"protobufjs/light\";\n\n/**\n * Wrapper for protobuf Message, which allows quick & typed constructor unpacking.\n */\nexport default class ProtoWrapper<T extends object = object> extends Message<T>{\n    /**\n     * Shortcut to assign the given values to this object, then return it.\n     */\n    assign(values: Partial<this>): this {\n        return Object.assign(this, values)\n    }\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\n\n@Type.d(\"ProtoSprite\")\nexport class ProtoSprite extends ProtoWrapper<ProtoSprite> {\n    @Field.d(1, \"string\", \"required\", \"\")\n    public id: string = '';\n\n    @Field.d(2, \"int32\", \"required\", 0)  // Use \"sint32\" if idx will be negative often.\n    public idx: number = 0;\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\nimport {ProtoSprite} from \"./proto-sprite\";\n\n@Type.d(\"ProtoEntity\")\nexport class ProtoEntity extends ProtoWrapper<ProtoEntity> {\n    @Field.d(1, ProtoSprite, \"required\")\n    public sprite: ProtoSprite = new ProtoSprite();\n\n    @Field.d(2, 'int32', \"required\")\n    public x: number = 0;\n\n    @Field.d(3, 'int32', \"required\")\n    public y: number = 0;\n\n    @Field.d(4, 'bool', \"required\")\n    public visible: boolean = false;\n\n    @Field.d(5, 'string', \"required\")\n    public color: string = '';\n\n    @Field.d(6, 'string', \"required\")\n    public id: string = '';\n\n    @Field.d(7, 'string', \"repeated\")\n    public owners: string[] = [];\n\n    @Field.d(8, 'bool', \"required\")\n    public saveToCampaign: boolean = false;\n\n    @Field.d(9, 'string', \"required\")\n    public name: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from './proto-wrapper';\nimport {ProtoSprite} from \"./proto-sprite\";\nimport {ProtoEntity} from \"./proto-entity\";\n\n\n@Type.d(\"ProtoTile\")\nexport class ProtoTile extends ProtoWrapper<ProtoTile> {\n    @Field.d(1, \"int32\", \"required\", 0)\n    public x: number = 0;\n\n    @Field.d(2, \"int32\", \"required\", 0)\n    public y: number = 0;\n\n    @Field.d(3, \"int32\", \"required\", 0)\n    public z: number = 0;\n\n    @Field.d(4, \"int32\", \"required\", 0)\n    public spriteIdx: number = 0;\n}\n\n@Type.d(\"ProtoTileStack\")\nexport class ProtoTileStack extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTile, \"repeated\")\n    public tiles: ProtoTile[] = [];\n\n    @Field.d(2, ProtoSprite, \"repeated\")\n    public sprites: ProtoSprite[] = [];\n}\n\n\n@Type.d(\"ProtoBoard\")\nexport class ProtoBoard extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTileStack, \"required\")\n    public terrain: ProtoTileStack|null = null;\n    @Field.d(2, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\n\n@Type.d(\"TerrainAddPacket\")\nexport class TerrainAddPacket extends ProtoWrapper<TerrainAddPacket> {\n    @Field.d(1, ProtoTileStack, \"repeated\")\n    public tileStacks: ProtoTileStack[] = [];\n}\n\n@Type.d(\"TerrainCoordPacket\")\nexport class TerrainCoordPacket extends ProtoWrapper<TerrainCoordPacket> {\n    @Field.d(1, 'int32', \"required\")\n    public x: number = 0;\n    @Field.d(2, 'int32', \"required\")\n    public y: number = 0;\n}\n\n@Type.d(\"TerrainErasePacket\")\nexport class TerrainErasePacket extends ProtoWrapper<TerrainErasePacket> {\n    @Field.d(1, TerrainCoordPacket, \"repeated\")\n    public coords: TerrainCoordPacket[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\n@Type.d(\"EntityUpdatePacket\")\nexport class EntityUpdatePacket extends ProtoWrapper<EntityUpdatePacket> {\n    @Field.d(1, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n\n\n@Type.d(\"EntityDeletePacket\")\nexport class EntityDeletePacket extends ProtoWrapper<EntityDeletePacket> {\n    @Field.d(1, 'string', \"required\")\n    public entityID: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"PingPacket\")\nexport class PingPacket extends ProtoWrapper<PingPacket> {}\n\n@Type.d(\"SignaturePacket\")\nexport class SignaturePacket extends ProtoWrapper<SignaturePacket> {\n    @Field.d(1, \"string\", \"required\", 'def')\n    public username: string = '';\n}\n\n@Type.d(\"ReadyPacket\")\nexport class ReadyPacket extends ProtoWrapper<ReadyPacket> {}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"MediaStatusPacket\")\nexport class MediaStatusPacket extends ProtoWrapper<MediaStatusPacket> {\n    @Field.d(1, 'string', \"required\")\n    public currentVideo: string = '';\n    @Field.d(2, 'uint32', \"required\")\n    public playbackRate: number = 1;\n    @Field.d(3, 'bool', \"required\")\n    public paused: boolean = false;\n    @Field.d(4, 'uint32', \"required\")\n    public currentTime: number = 0;\n}\n\n\n@Type.d(\"MediaRequestPacket\")\nexport class MediaRequestPacket extends ProtoWrapper<MediaRequestPacket> {}\n","import * as worker from './messageEncoder.worker';\nimport { packetList, packetMap } from \"./packets/packet-list\";\n\n/**\n * Use a Web Worker thread to encode the given ProtoWrapper object into a compressed binary buffer.\n * @param packet\n */\nexport async function encode(packet: any): Promise<Uint8Array> {\n    const id = packetMap[packet.$type.name];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error encoding packet: Unknown type: \"${packet.constructor.name}\"!`)\n\n    return await worker.workerEncode(packet, id)\n}\n\n/**\n * Use a Web Worker thread to decompress a binary buffer into a ProtoWrapper object, properly cast to the correct subclass.\n * @param data\n */\nexport async function decode(data: Uint8Array): Promise<any> {\n    const id = data.slice(0,1)[0];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error decoding packet: Unknown ID: [${id}], (${data.length})!`);\n\n    return new clazz().assign(await worker.workerDecode(data));\n}\n","/**\n * Chain promises sequentially, with a maximum stack size.\n */\nexport default class PromiseStream {\n    private prom: Promise<any> = Promise.resolve();\n    private readonly maxBackpressure: number;\n    private backPressure: number = 0;\n\n    constructor(maxBackpressure: number = 0) {\n        this.maxBackpressure = maxBackpressure\n    }\n\n    get length() {\n        return this.backPressure;\n    }\n\n    public queue(fn: Function, onError: Function|null = null) {\n        if (this.maxBackpressure && this.backPressure >= this.maxBackpressure) {\n            throw Error('Max backpressure reached!')\n        }\n        this.backPressure++;\n\n        this.prom = this.prom.then( async () => {\n            await fn();\n        }).catch( async err => {\n            if (onError) {\n                await onError(err);\n            } else {\n                console.error(err);\n            }\n        }).then(() => {\n            this.backPressure--;\n        })\n    }\n}\n","import Dexie from \"dexie\";\nimport {BoardWrapper} from \"./board-db\";\nimport Campaign from \"../controllers/campaign\";\nimport {UserData} from \"./user-db\";\nimport {exportDB, importDB} from \"dexie-export-import\";\n\n\nclass DB extends Dexie {\n    boards: Dexie.Table<any, BoardWrapper>;\n    campaigns: Dexie.Table<any, Campaign>;\n    metadata: Dexie.Table<any, string>;\n    users: Dexie.Table<any, UserData>;\n\n    constructor() {\n        super('terra-db');\n\n        // Define tables and indexes\n        this.version(1).stores({\n            boards: '&[campaignID+name]',\n            campaigns: '++id, name',\n            metadata: 'id',\n            users: '++id, &username, *keyCodes, lastSeen'\n        });\n        this.boards = this.table(\"boards\");\n        this.campaigns = this.table(\"campaigns\");\n        this.metadata = this.table(\"metadata\");\n        this.users = this.table(\"users\");\n    }\n\n    /**\n     * Replaces the database with the given Blob data, then reloads the page.\n     * If cb is given, waits for the callback before reloading.\n     * @param data\n     * @param cb\n     */\n    async importData(data: Blob, cb?: Function) {\n        console.debug('Restoring database from blob...');\n        await this.delete();\n        await importDB(data);\n        console.log(\"Import complete\");\n        if (cb) await cb();\n        // @ts-ignore\n        window.location = window.location.href.split('#')[0];\n    }\n\n    async toBlob() {\n        // @ts-ignore\n        return await exportDB(this, {\n            prettyJson: false,\n            progressCallback: (progress: any) => {\n                console.debug('\\t+ Packing DB:', progress);\n            }\n        });\n    }\n}\n\nexport const db = new DB();\n\ndb.on(\"ready\", async () => {\n    if (await db.metadata.count() <= 0) {\n        console.debug(\"Migrating from old databases...\");\n        await copyOldDB(db, 'metadata-db', 'data', 'metadata');\n        await copyOldDB(db, 'campaign-db', 'campaigns', 'campaigns');\n        await copyOldDB(db, 'user-db', 'users', 'users');\n        await copyOldDB(db, 'board-db', 'boards', 'boards');\n    }\n});\n\ndb.open();\n\n\nasync function copyOldDB(newDB: DB, dbName: string, tableName: string, newTable: string) {\n    if (await Dexie.exists(dbName)) {\n        const d = new Dexie(dbName);\n        await d.open();\n        console.log('\\t+', dbName, tableName);\n        for (const tbl of d.tables) {\n            if (tbl.name === tableName) {\n                for (const ele of await tbl.toArray()) {\n                    console.log('Migrating:', ele);\n                    // @ts-ignore\n                    await newDB[newTable].add(ele);\n                }\n            }\n        }\n        d.close();\n        d.delete();\n    }\n}\n","import {observable} from \"mobx\";\nimport {db} from './database';\n\nexport const currentUsername = observable.box<string>('');\n\nexport enum Meta {\n    CERT_SEED = 'secret_cert_seed',\n    USERNAME = 'username',\n    CAMPAIGN_CURRENT = 'campaign_current',\n    PLAYER_CONFIG = 'player_config',\n}\n\nasync function get(id: Meta): Promise<any> {\n    return JSON.parse((await db.metadata\n        .where({id})\n        .first())?.val || 'null');\n}\n\nasync function store(id: Meta, value: any): Promise<string> {\n    return db.metadata.put({\n        id,\n        val: JSON.stringify(value),\n    });\n}\n\nexport const metadata = {\n    get,\n    store\n};\n","import Handler from \"./handlers/handler\";\nimport {IObservableValue, observable, ObservableSet} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\nimport * as encoder from './messageEncoder';\nimport ProtoWrapper from \"../data/protobufs/proto-wrapper\";\nimport PromiseStream from \"../util/promiseStream\";\nimport {PreCheck} from \"./prechecks/precheck\";\nimport {UserData} from \"../db/user-db\";\nimport {PingPacket} from \"./packets/util-packets\";\nimport {Switchboard} from \"switchboard.js/build/module/switchboard\"; // TODO: Clean this up when lib is done.\nimport {ConnectedPeer} from \"switchboard.js/build/module/tracker\";\nimport {metadata, Meta} from \"../db/metadata-db\";\n\nexport enum NetworkStatus {\n    IDLE,\n    CONNECTED,\n    CONNECTING,\n    RECONNECTING,\n    DISCONNECTED,\n    MATCHMAKING_FAIL,\n    WAITING_FOR_HOST\n}\n\nexport enum NetworkMode {\n    UNKNOWN,\n    HOST,\n    CLIENT,\n}\n\nlet handlers: Handler[] = [];\nlet preConn: PreCheck[] = [];\n\nexport const clients: ObservableSet<Client> = observable(new Set<Client>());\n\nlet sb: Switchboard | null = null;\nexport let netStatus: IObservableValue<NetworkStatus> = observable.box(NetworkStatus.IDLE);\nexport let netMode: IObservableValue<NetworkMode> = observable.box(NetworkMode.UNKNOWN);\n\nexport function setHandlers(newHandlers: Handler[], newPreConn: PreCheck[]) {\n    handlers = newHandlers;\n    preConn = newPreConn\n}\n\n/**\n * Get the seed that can regenerate the public/private key.\n * If one does not exist already, it is created.\n */\nasync function getSeed(): Promise<string> {\n    let seed = await metadata.get(Meta.CERT_SEED);\n\n    if (!seed) {\n        await metadata.store(Meta.CERT_SEED, seed = Switchboard.makeSeed());\n    }\n\n    return seed;\n}\n\n/**\n * Get the current local peer ID. Generates a new one if it does not already exist.\n * @param useLongform\n */\nexport async function getMyID(useLongform: boolean = false) {\n    if (sb) {\n        return useLongform ? sb.fullID : sb.peerID;\n    }\n    return Switchboard.getIdFromSeed(await getSeed(), useLongform);\n}\n\n/**\n * Kill any running SwitchBoard, and start a new one.\n */\nexport async function makeSB() {\n    if (sb) {\n        sb.kill(new Error('Closed to launch new Peer connection.'));\n    }\n    return new Switchboard({\n        seed: await getSeed()\n    });\n}\n\nexport async function connectTo(hostID: string): Promise<any> {\n    await setMode(NetworkMode.CLIENT);\n    if (netStatus.get() !== NetworkStatus.RECONNECTING) netStatus.set(NetworkStatus.CONNECTING);\n\n    sb = await makeSB();\n\n    sb.on('peer', async (peer) => {\n        notifications.success('Connected to host!');\n\n        const client = new Client(peer, handlers);\n        peer.on('close', () => clientError('host disconnected', client));\n        peer.on('error', (err) => console.error(err));\n\n        try {\n            netStatus.set(NetworkStatus.WAITING_FOR_HOST);\n            for (const pc of preConn) {\n                await pc.run(false, client);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            client.verified = true;\n            clients.add(client);\n            netStatus.set(NetworkStatus.CONNECTED);\n        } catch (err) {\n            console.error('failed validation', err);\n        }\n    });\n\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n    });\n\n    sb.findHost(hostID);\n}\n\nexport async function clientError(err: any, client: Client): Promise<any> {\n    console.warn('Client Error:', err);\n    removeClient(client);\n    client.close();\n\n    console.log('Reconnecting to host...');\n    netStatus.set(NetworkStatus.RECONNECTING);\n}\n\nexport async function openHost() {\n    await setMode(NetworkMode.HOST);\n\n    sb = await makeSB();\n\n    netStatus.set(NetworkStatus.CONNECTED);\n\n    sb.on('peer', async peer => {\n        console.warn('Client connected!');\n        const cli = new Client(peer, handlers);\n\n        peer.on('close', () => {\n            console.debug('Client dropped:', cli);\n            removeClient(cli);\n        });\n\n        try {\n            for (const pc of preConn) {\n                await pc.run(true, cli);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            cli.verified = true;\n            clients.add(cli);\n        } catch (err) {\n            console.error(err);\n            cli.close();\n        }\n    });\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n    });\n    sb.host();\n}\n\nexport async function kill(): Promise<void> {\n    if (sb) {\n        clients.forEach(p => {\n            p.close();\n            removeClient(p);\n        });\n        netMode.set(NetworkMode.UNKNOWN);\n        netStatus.set(NetworkStatus.IDLE);\n        sb.kill();\n        sb = null;\n    }\n}\n\n/**\n * Destroy the connection and set the new mode.\n * @param mode\n */\nasync function setMode(mode: NetworkMode) {\n    await kill();\n    netMode.set(mode);\n}\n\nfunction removeClient(client: Client) {\n    clients.delete(client);\n}\n\n\nexport class Client {\n    private peer: ConnectedPeer;\n    private listener: Function|null = null;\n    private readonly handlers: Handler[];\n    public verified: boolean = false;\n    private lastSend = Promise.resolve();\n    private stream = new PromiseStream();\n    public userData: UserData = {id: -1, username: 'null', keyCodes:[], lastSeen: 0};\n    private readonly pingTimer: any = null;\n    public lastPing: number = 0;\n\n    constructor(peer: ConnectedPeer, handlers: Handler[]) {\n        this.peer = peer;\n        this.handlers = handlers;\n        this.hook();\n\n        this.pingTimer = setInterval(() => {\n            if (!this.verified) return;\n            if (this.peer.isClosed) return this.close();\n            if (!this.lastPing) {\n                this.lastPing = Date.now();\n                return;\n            } else if (Date.now() - this.lastPing > 15000) {\n                console.warn('Ping timeout.')\n                return this.close();\n            }\n            this.send(new PingPacket()).then();\n        }, 10000)\n    }\n\n    hook() {\n        const self = this;\n        this.peer.on('data', (data: any) => {\n            self.stream.queue(() => self.handleMessage(data), ()=>this.peer.close())\n        });\n        this.peer.on('error', (err) => {\n            console.error('Client error:', err);\n            this.peer.close();\n        });\n    }\n\n    get id() {\n        return this.peer.id;\n    }\n\n    async handleMessage(packetBinary: ArrayBuffer) {\n        try {\n            const packet: ProtoWrapper = await encoder.decode(new Uint8Array(packetBinary));\n            if (this.listener) {\n                this.listener(packet);\n            } else if (!this.verified) {\n                // noinspection ExceptionCaughtLocallyJS\n                throw Error(`Error: Unexpected packet sent before verification: ${packet}`);\n            } else {\n                console.debug('Incoming Packet:', packet);\n                for (const h of this.handlers) {\n                    // @ts-ignore\n                    if (h.packets.some(p => packet.$type === p.$type)) {\n                        return await h.handlePacket(this, packet);\n                    }\n                }\n            }\n        } catch (err) {\n            console.error(err);\n            this.close();\n        }\n    }\n\n    close() {\n        if (this.listener) {\n            // TODO: Add to blacklist on current SwitchBoard.\n            this.listener(null);\n        }\n        if (this.pingTimer) clearTimeout(this.pingTimer);\n\n        this.peer.close();\n    }\n\n    /**\n     * Sends the given Packet to the client.\n     * Utilizes an internal \"rolling Promise\" to assure that all messages are sent in order.\n     * @param packet\n     */\n    async send(packet: ProtoWrapper) {\n        console.debug('Sending client:', packet);\n        this.lastSend = this.lastSend.then(async () => {\n            this.sendBuffer(await encoder.encode(packet));\n        }).catch(err => {\n           console.error(`Error sending message to client:`, err);\n        });\n    }\n\n    sendBuffer(data: Uint8Array) {\n        this.peer.send(data);\n    }\n\n    /**\n     * Wait for the next packet, whatever it may be.\n     * Only one listener may be waiting at any given time, or an error will be thrown on subsequent registrations.\n     * @param expectedType\n     */\n    getNextPacket(expectedType: any): Promise<any> {\n        if (this.listener) throw Error('Attempted to overwrite client listener!');\n\n        return new Promise((res, rej) => {\n            this.listener = (packet: any) => {\n                this.listener = null;\n                if (!(packet instanceof expectedType)) {\n                    return rej(`Unexpected packet type: ${packet} !== ${expectedType}`)\n                }\n                return res(packet);\n            }\n        });\n    }\n}\n\n/**\n * Broadcast the given data to all connected connections.\n * If `requireHost` is true, will only send while we are hosting.\n * @param packet\n * @param requireHost\n */\nexport async function broadcast(packet: ProtoWrapper, requireHost: boolean) {\n    if (requireHost && netMode.get() !== NetworkMode.HOST) {\n        return;\n    }\n    const data = await encoder.encode(packet)\n\n    clients.forEach(c => c.sendBuffer(data));\n}\n\nexport function isHost() {\n    return netMode.get() === NetworkMode.HOST\n}\n","import {Sprite} from \"../../util/sprite-loading\";\n\nexport class Tile {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public sprite: Sprite;\n\n    constructor(sprite: Sprite) {\n        this.sprite = sprite;\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport * as packer from '../../data/board-packer.worker';\nimport {TerrainAddPacket} from \"../packets/terrainPackets\";\nimport {Tile} from \"../../data/interfaces/tile\";\n\n\nexport default class TerrainAddHandler extends Handler {\n    private static tiles: Tile[][] = [];\n    readonly packets: typeof ProtoWrapper[] = [TerrainAddPacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainAddHandler.broadcastChanges();\n            TerrainAddHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainAddPacket): Promise<void> {\n        for (const data of packet.tileStacks) {\n            if (!data) return;\n            const stack = data.tiles;\n\n            if (stack.length) {\n                this.terrain.removeAt(stack[0].x, stack[0].y, false);\n                for (let i=0; i < stack.length; i++) {\n                    const dt = stack[i];\n                    const sp = data.sprites[dt.spriteIdx];\n                    const t = new Tile(new Sprite(sp.id, sp.idx));\n                    this.terrain.placeAt(dt.x, dt.y, t, i === stack.length-1, false);\n                }\n            }\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        throw Error('Client sent host new Terrain data. Not allowed.')\n    }\n\n    static async broadcastChanges() {\n        if (TerrainAddHandler.tiles.length) {\n            const packedStacks: ProtoTileStack[] = []\n            const updateTiles = TerrainAddHandler.tiles.splice(0, TerrainAddHandler.tiles.length);\n\n            for (const t of updateTiles) {\n                packedStacks.push(await packer.packTiles(t));\n            }\n\n            await broadcast(new TerrainAddPacket().assign({\n                tileStacks: packedStacks\n            }), true);\n        }\n    }\n\n    static sendTerrainAdd(tiles: Tile[]) {\n        if (isHost()) TerrainAddHandler.tiles.push(tiles);\n    }\n}\n\nTerrainAddHandler.pollChanges();\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {TerrainCoordPacket, TerrainErasePacket} from \"../packets/terrainPackets\";\n\nexport default class TerrainEraseHandler extends Handler {\n    private static tiles: Set<TerrainCoordPacket> = new Set();\n    readonly packets: typeof ProtoWrapper[] = [TerrainErasePacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainEraseHandler.broadcastChanges();\n            TerrainEraseHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainErasePacket): Promise<void> {\n        for (const t of packet.coords) {\n            this.terrain.removeAt(t.x, t.y, true);\n        }\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client attempted to erase terrain. Not allowed.')\n    }\n\n    /**\n     * Batches the removed terrain coords, to be sent shortly after.\n     * @param x\n     * @param y\n     */\n    static sendTerrainRemove(x: number, y: number) {\n        if (isHost()) TerrainEraseHandler.tiles.add(new TerrainCoordPacket().assign({ x, y}));\n    }\n\n    /**\n     * Sends all the batched changes. Runs on a loop. Can be called manually to instantly send all changes.\n     */\n    static async broadcastChanges() {\n        if (TerrainEraseHandler.tiles.size) {\n            const tep  = new TerrainErasePacket().assign({\n                coords: Array.from(TerrainEraseHandler.tiles)\n            });\n            TerrainEraseHandler.tiles.clear();\n            await broadcast(tep, true);\n        }\n    }\n}\n\nTerrainEraseHandler.pollChanges();\n","import {Canvas} from \"./canvas\";\nimport {Sprite} from \"../util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport {Tile} from \"../data/interfaces/tile\";\n\n\nexport default class Terrain extends Canvas {\n    private readonly terrain: Record<string, Tile[]> = {};\n    public boardWidth: number = 0;\n    public boardHeight: number = 0;\n    public tileIDX: number = 0; // Simple counter to track terrain in the order they were placed.\n    @observable public selectedSprite: Sprite | null = null;\n    @observable public isBoardDirty: boolean = false;\n\n    constructor(width: number, height: number) {\n        super('terrain');\n        this.resizeBoard(width, height);\n    }\n\n    public resizeBoard(width: number, height: number) {\n        this.boardWidth = width;\n        this.boardHeight = height;\n        for (const tList of Object.values(this.terrain)) {\n            const x = tList[0].x;\n            const y = tList[0].y;\n            if (x > this.boardWidth || y > this.boardHeight) {\n                this.removeAt(x, y);\n            }\n        }\n    }\n\n    /**  Derive new tile widthxheight whenever this canvas is resized. */\n    public setSize(width: number, height: number) {\n        super.setSize(width, height);\n        this.resizeBoard(Math.floor(width/imageWidthPx), Math.floor(height/imageHeightPx));\n    }\n\n    public removeAt(x: number, y: number, redraw: boolean = true): boolean {\n        const exists = this.terrain[Terrain.mkKey(x, y)]?.length;\n        if (exists) {\n            delete this.terrain[Terrain.mkKey(x, y)];\n            if (redraw) this.redrawAt(x, y);\n        }\n        return !!exists;\n    }\n\n    /**\n     * Same as removeAt, but send events to clients.\n     * @param x\n     * @param y\n     */\n    public eraseAt(x: number, y: number) {\n        if (this.removeAt(x, y, true)) {\n            TerrainEraseHandler.sendTerrainRemove(x, y);\n            if (!this.isBoardDirty) this.isBoardDirty = true;\n        }\n    }\n\n    /**\n     * Place the given Tile at the given coords, optionally skipping redrawing.\n     * This method is smart, and auto-handles tile overlay logic.\n     * @param x\n     * @param y\n     * @param tile\n     * @param redraw\n     * @param broadcast\n     */\n    public placeAt(x: number, y: number, tile: Tile, redraw: boolean = true, broadcast: boolean = false): boolean {\n        const existing = this.getAt(x, y);\n        if (existing.length && existing[existing.length-1].sprite.composite === tile.sprite.composite) {\n            // The given sprite is already at the top of the stack; Skip adding because it won't do anything.\n            return false;\n        }\n        if (tile.sprite.isBlocker) {\n            this.removeAt(x, y, false);\n        }\n        const k = Terrain.mkKey(x, y);\n        this.terrain[k] = this.terrain[k]?.filter(t => t.sprite.composite !== tile.sprite.composite) || [];  // Filter duplicates.\n        this.terrain[k].push(tile);\n        tile.x = x;\n        tile.y = y;\n        tile.z = this.tileIDX++;\n        if (redraw) this.redrawAt(x, y);\n        if (broadcast) TerrainAddHandler.sendTerrainAdd(this.terrain[k]);\n        if (!this.isBoardDirty) this.isBoardDirty = true;\n        return true;\n    }\n\n    /**\n     * Draw the currently-selected sprite onto the given coords.\n     * @param x\n     * @param y\n     */\n    public drawAt(x: number, y: number): boolean {\n        if (x < 0 || x >= this.boardWidth || y < 0 || y >= this.boardHeight) {\n            return false;\n        }\n        if (this.selectedSprite) {\n            return this.placeAt(x, y, new Tile(this.selectedSprite), true, true);\n        }\n        return false;\n    }\n\n    public getAt(x: number, y: number): Tile[] {\n        return this.terrain[Terrain.mkKey(x, y)] || [];\n    }\n\n    private redrawAt(x: number, y: number) {\n        const tiles = this.getAt(x, y);\n        const covered = tiles.some(t => t.sprite.isBlocker);\n        const px = x * imageWidthPx;\n        const py = y * imageHeightPx;\n        if (!covered || !tiles.length) {\n            this.ctx.clearRect(px, py, imageWidthPx, imageHeightPx);\n        }\n        tiles.map(t => t.sprite.drawTo(this.ctx, px, py));\n    }\n\n    /**\n     * Directly export the underlying terrain map, for serialization.\n     */\n    getDirectMap() {\n        return this.terrain;\n    }\n\n    /**\n     * Import a serialized tile map, over the current data.\n     * @param newTerrain\n     */\n    setDirectMap(newTerrain: ProtoBoard) {\n        if (!newTerrain.terrain) throw Error('Malformed packet.')\n        for (const k of Object.keys(this.terrain)) {\n            const t = this.terrain[k][0];\n            this.removeAt(t.x, t.y, true);\n        }\n\n        for (const k of newTerrain.terrain.tiles.sort((a, b) => a.z - b.z)) {\n            const sp = newTerrain.terrain.sprites[k.spriteIdx];\n            this.placeAt(k.x, k.y, new Tile(new Sprite(sp.id, sp.idx)), false, false);\n        }\n        for (const k of Object.keys(this.terrain)) {\n            this.redrawAt(this.terrain[k][0].x, this.terrain[k][0].y)\n        }\n    }\n\n    private static mkKey(x: number, y: number): string {\n        return `${x},${y}`;\n    }\n}\n","\nexport default abstract class Middleware {\n    private ele: HTMLElement|null = null;\n    private hooks: any[] = [];\n\n    public eject() {\n        this.hooks.forEach(h => h());\n        this.onCleanup();\n        this.ele = null;\n    }\n\n    public attach(ele: HTMLElement) {\n        this.ele = ele;\n        this.register();\n    }\n\n    /** Attach an event listener that is automatically cleaned up when this middleware is ejected.\n     * The `cb` callback should return `true` if the event should stop here. */\n    protected listen(event: string, cb: any, target?: HTMLElement|Window): Function {\n        const wrapped = (event: Event) => {\n            const res = cb(event);\n            if (res) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            return res;\n        };\n        const trg = target || this.ele;\n        const rem = () => trg?.removeEventListener(event, wrapped);\n        trg?.addEventListener(event, wrapped);\n        this.hooks.push(rem);\n        return rem;\n    }\n\n    /** Called once an element is registered and ready to call `listen()`. */\n    protected abstract register(): void;\n    /** Called after all hooks have been cleaned up. */\n    protected abstract onCleanup(): void;\n}\n","import Middleware from \"./middleware\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport EntityLayer, {EntityEle} from \"../controllers/entities\";\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\nexport default class EntityMiddleware extends Middleware {\n    private ent: EntityEle|null = null;\n    private readonly container: HTMLElement;\n    private moveListener: Function|null = null;\n    private movePoints: Point[] = [];\n    private moveTrackers: HTMLElement[] = [];\n    private entityLayer: EntityLayer;\n\n    constructor(container: HTMLElement, entLayer: EntityLayer) {\n        super();\n        this.container = container;\n        this.entityLayer = entLayer;\n    }\n\n    public setTarget(entEle: EntityEle|null) {\n        this.ent = entEle;\n        this.clearMover();\n        if (this.ent) {\n            this.entityLayer.toggleInput(false);\n            this.ent.bringToFront();\n            this.moveListener = this.listen('pointermove', (ev: PointerEvent) => {\n                const [x, y] = EntityMiddleware.toGrid(ev);\n                this.addPoint(x, y);\n                return true;\n            }, this.container);\n        }\n    }\n\n    register(): void {\n        this.listen('pointerup', (ev: PointerEvent) => {\n            if (this.moveListener) {\n                this.entityLayer.toggleInput(true);\n                return this.clearMover();\n            }\n        }, window);\n    }\n\n    private clearMover(): boolean {\n        this.moveTrackers.forEach(mp => mp.remove());\n        this.moveTrackers = [];\n        this.movePoints = [];\n        if (this.moveListener) {\n            this.moveListener();\n            this.moveListener = null;\n            return true;\n        }\n        return false;\n    }\n\n    private addPoint(x: number, y: number) {\n        const last = this.movePoints[this.movePoints.length-1];\n        if (last && last.x === x && last.y === y) return;\n\n        const idx = this.movePoints.findIndex(p => p.x === x && p.y === y);\n        if (idx >=0) {\n            this.movePoints.splice(idx, this.movePoints.length);\n        }\n        this.movePoints.push({x, y});\n        this.checkDiag();\n        this.redrawPath();\n        if (this.ent) {\n            this.entityLayer.updateEntity(this.ent.entity.id,{x, y});\n        }\n    }\n\n    private checkDiag() {\n        if (this.movePoints.length < 3) return;\n        const last = this.movePoints[this.movePoints.length - 1];\n        const third = this.movePoints[this.movePoints.length - 3];\n        const dist = EntityMiddleware.distance(third, last);\n\n        if (dist < 2) {\n            // Corner we can cut!\n            this.movePoints.splice(this.movePoints.length-2, 1);\n        }\n    }\n\n    private static distance(p1: Point, p2: Point) {\n        return Math.sqrt(Math.pow(p1.x-p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    }\n\n    private pathLength(): number {\n        let val = 0;\n        this.movePoints.reduce((prev, next) => {\n            let dst = EntityMiddleware.distance(prev, next);\n            if (dst > 1) dst = 1.5;\n            val += dst;\n            return next;\n        })\n\n        return Math.floor(val);\n    }\n\n    private redrawPath() {\n        this.moveTrackers.forEach(mp => mp.remove());\n        this.moveTrackers = [];\n\n        let id = 0;\n\n        for (const p of this.movePoints) {\n            const ele = document.createElement('div');\n            ele.className = 'entityMoveTracker';\n            Object.assign(ele.style, {\n                width: `${imageWidthPx}px`,\n                height: `${imageHeightPx}px`,\n                left: `${p.x*imageWidthPx}px`,\n                top: `${p.y*imageHeightPx}px`\n            });\n            if (++id === this.movePoints.length) {\n                ele.innerText = `${this.pathLength()*5}`;\n            }\n            this.moveTrackers.push(ele);\n            this.container.append(ele);\n        }\n    }\n\n    private static toGrid(ev: any) {\n        const x = Math.floor(ev.offsetX/imageWidthPx);\n        const y = Math.floor(ev.offsetY/imageHeightPx);\n        return [x, y]\n    }\n\n    protected onCleanup(): void {\n        this.clearMover();\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport EntityLayer, {Entity} from \"../../controllers/entities\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"../packets/entityPackets\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoSprite} from \"../../data/protobufs/proto-sprite\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\nexport default class EntityUpdateHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [EntityUpdatePacket, EntityDeletePacket];\n    private readonly entities: EntityLayer;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    async clientHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n                if (!this.entities.updateEntity(ent.id, {\n                    ...ent,\n                    sprite\n                }, false)) {\n                    console.debug('Adding new entity:', ent);\n                    this.entities.addEntity(sprite, { ...ent, sprite }, false)\n                }\n            }\n        } else if (packet instanceof EntityDeletePacket) {\n            console.debug('Deleting:', packet.entityID);\n            this.entities.remove(packet.entityID, false);\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                if (!this.entities.entityIsOwned(ent.id, client.userData.username)) {\n                    throw Error('Client attempted to edit entity the do not own!')\n                }\n                this.entities.updateEntity(ent.id, {\n                    x: ent.x,\n                    y: ent.y\n                });\n            }\n        } else {\n            throw Error(`Client sent invalid Entity packet! ${typeof packet}`)\n        }\n    }\n\n    static sendUpdate(entity: Entity) {\n        if (!entity.canMove() || !entity.visible) return;\n        const proto = new ProtoEntity().assign({\n            ...entity,\n            sprite: new ProtoSprite().assign({...entity.sprite}),\n            owners: Array.from(entity.owners)\n        });\n        const packet = new EntityUpdatePacket().assign({entities: [proto]});\n        broadcast(packet, false);\n    }\n\n    static sendDelete(entity: Entity) {\n        if (!entity.canMove()) return;\n        const packet = new EntityDeletePacket().assign({entityID: entity.id});\n        console.debug(packet);\n        broadcast(packet, true);\n    }\n}\n\n","import {Sprite} from \"../util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {v4 as uuid} from 'uuid';\nimport EntityMiddleware from \"../middleware/entity-events\";\nimport {observable} from \"mobx\";\nimport {isHost} from \"../net/peerconnection\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport {currentUsername} from \"../db/metadata-db\";\nimport {EntityInterface} from \"../data/interfaces/entity\";\n\n\nexport class Entity implements EntityInterface{\n    @observable sprite: Sprite;\n    @observable name: string;\n    @observable color: string = '#000000';\n    id: string;\n    x: number = 0;\n    y: number = 0;\n    @observable visible: boolean = true;\n    @observable owners: string[] = [];\n    @observable saveToCampaign: boolean = false;\n\n    constructor(sprite: Sprite, init?: Partial<Entity>) {\n        this.sprite = sprite;\n        this.id = uuid();\n        this.name = this.id;\n        if (init) {\n            Object.assign(this, init)\n        }\n    }\n\n   canMove() {\n        return isHost() || this.owners.includes(currentUsername.get());\n   }\n}\n\nexport class NamePlate {\n    static plates: NamePlate[] = [];\n    static updateTimer: any = null;\n    private readonly ele = document.createElement('div');\n    private targY: number = 0;\n    protected x: number = 0;\n    protected y: number = 0;\n    public width: number = 0;\n    public height: number = 0;\n    private parent: HTMLElement;\n    private color: string;\n\n    constructor(text: string, color: string, parent: HTMLElement) {\n        this.ele.className = 'entityNamePlate';\n        this.parent = parent;\n        this.color = color;\n        NamePlate.plates.push(this);\n        this.update(text, this.x, this.y, this.color,false);\n    }\n\n    public update(name: string, x: number, y: number, color: string, redraw: boolean = true) {\n        this.x = x;\n        this.y = y;\n        this.targY = y;\n        this.color = color;\n        this.ele.innerText = name;\n\n        if (redraw) NamePlate.plates.map(p => p.reposition()); // Update all plate positions, since one has moved.\n    }\n\n    reposition() {\n        this.y = this.targY;\n        this.width = this.ele.offsetWidth;\n        this.height = this.ele.offsetHeight;\n\n        for (let i=0; i < 10; i+=1) {\n            if (NamePlate.plates.some(o => o !== this && this.overlaps(o))) {\n                this.y -= this.height+1;\n            }\n        }\n\n        Object.assign(this.ele.style, {\n            position: 'absolute',\n            top: `${this.y}px`,\n            left: `${this.x}px`,\n            color: this.color\n        });\n    }\n\n    public overlaps(other: NamePlate) {\n        return !(this.x > other.right ||\n            this.right < other.x ||\n            this.y > other.bottom ||\n            this.bottom < other.y);\n    }\n\n    public bringToFront() {\n        this.parent.append(this.ele);\n    }\n\n    public remove() {\n        this.ele.remove();\n        NamePlate.plates = NamePlate.plates.filter(n => n !== this);\n    }\n\n    get right() {\n        return this.x + this.width;\n    }\n\n    get bottom() {\n        return this.y + this.height;\n    }\n}\n\n\nexport class EntityEle {\n    public readonly ele = document.createElement('canvas');\n    public readonly namePlate: NamePlate;\n    public readonly entity: Entity;\n    private redrawTimer: any = null;\n    private readonly ctx: CanvasRenderingContext2D;\n    private readonly parent: HTMLElement;\n    private readonly onClick: Function;\n\n    constructor(parent: HTMLElement, plateParent: HTMLElement, entity: Entity, onClick: Function) {\n        this.parent = parent;\n        this.entity = entity;\n        this.onClick = onClick;\n        // @ts-ignore\n        this.ctx = this.ele.getContext('2d');\n        this.ele.width = imageWidthPx;\n        this.ele.height = imageHeightPx;\n        this.ele.className = 'entityWrapper';\n        this.ele.addEventListener('pointerdown', () => {\n            if (this.entity.canMove()) this.onClick(this)\n        });\n\n        this.namePlate = new NamePlate(entity.name, entity.color, plateParent);\n\n        this.ele.style.opacity = this.entity.visible ? '1' : '0.5';\n        this.reposition();\n        this.bringToFront();\n        this.redraw();\n    }\n\n    internalUpdate(props: Partial<Entity>) {\n        Object.assign(this.entity, props);\n        this.ele.style.opacity = this.entity.visible ? '1' : '0.5';\n        this.reposition();\n        if (this.redrawTimer === null) this.redraw()\n    }\n\n    remove() {\n        if (this.redrawTimer !== null) {\n            clearTimeout(this.redrawTimer);\n        }\n        this.ele.remove();\n        this.namePlate.remove();\n    }\n\n    redraw() {\n        requestAnimationFrame(() => {\n            this.ctx.clearRect(0, 0, this.ele.width, this.ele.height);\n            this.entity.sprite.drawTo(this.ctx, 0, 0);\n\n            if (this.redrawTimer !== null) {\n                clearTimeout(this.redrawTimer);\n                this.redrawTimer = null;\n            }\n            if (this.entity.sprite.animated) {\n                this.redrawTimer = setTimeout(this.redraw.bind(this), 200);\n            } else {\n                this.redrawTimer = null;\n            }\n        });\n    }\n\n    private reposition() {\n        Object.assign(this.ele.style, {\n            position: 'absolute',\n            top: `${this.entity.y * imageHeightPx}px`,\n            left: `${this.entity.x * imageWidthPx}px`,\n            cursor: 'pointer'\n        });\n\n        this.namePlate.update(\n            this.entity.name,\n            this.entity.x * imageWidthPx + imageWidthPx/2,\n            this.entity.y * imageHeightPx - 14,\n            this.entity.color\n        )\n    }\n\n    bringToFront() {\n        this.parent.append(this.ele);\n        this.namePlate.bringToFront();\n    }\n\n    setInput(useInput: boolean) {\n        Object.assign(this.ele.style, {\n            'pointer-events': useInput ? 'auto' : 'none'\n        });\n    }\n}\n\nexport default class EntityLayer {\n    private readonly entityElements: Record<string, EntityEle> = {};\n    private readonly ele: HTMLElement;\n    private readonly plateEle: HTMLElement;\n    public boardWidth: number = 0;\n    public boardHeight: number = 0;\n    private enableInput: boolean = true;\n    @observable public selected: EntityEle|null = null;\n    @observable public isDirty: boolean = false;\n    private middleware: EntityMiddleware;\n\n    constructor(tileWidth: number, tileHeight: number) {\n        this.ele = document.createElement('div');\n        this.ele.className = 'entityContainer';\n        this.plateEle = document.createElement('div');\n        this.plateEle.className = 'plateContainer';\n        this.middleware = new EntityMiddleware(this.ele, this);\n        this.middleware.attach(this.ele);\n\n        this.resizeBoard(tileWidth, tileHeight);\n    }\n\n    private resizeBoard(width: number, height: number) {\n        this.boardWidth = width;\n        this.boardHeight = height;\n        for (const {entity} of Object.values(this.entityElements)) {\n            const x = entity.x;\n            const y = entity.y;\n            if (x > this.boardWidth || y > this.boardHeight) {\n                this.remove(entity.id);\n            }\n        }\n    }\n\n    /**  Derive new tile widthxheight whenever this canvas is resized. */\n    public setSize(width: number, height: number) {\n        Object.assign(this.ele.style, { width: `${width}px`, height: `${height}px`});\n        Object.assign(this.plateEle.style, { width: `${width}px`, height: `${height}px`});\n        this.resizeBoard(Math.floor(width/imageWidthPx), Math.floor(height/imageHeightPx));\n    }\n\n    public remove(id: string, sendUpdate: boolean = true): boolean {\n        const existing = this.entityElements[id];\n        if (existing) {\n            this.entityElements[id].remove();\n            delete this.entityElements[id];\n            if (sendUpdate) EntityUpdateHandler.sendDelete(existing.entity);\n        }\n        if (existing === this.selected) this.selected = null;\n        return !!existing;\n    }\n\n    public addEntity(sprite: Sprite, opts?: Partial<Entity>, sendUpdate: boolean = true) {\n        const ent = new Entity(sprite, opts);\n        const entEle = new EntityEle(this.ele, this.plateEle, ent, this.select.bind(this));\n\n        this.remove(ent.id, sendUpdate);\n\n        entEle.setInput(this.enableInput);\n        this.entityElements[ent.id] = entEle;\n\n        if (sendUpdate) {\n            EntityUpdateHandler.sendUpdate(ent);\n            this.isDirty = true;\n        }\n\n        // Upon creation, we need a frame for the bounding box to update with the new name:\n        if (NamePlate.updateTimer !== null) clearTimeout(NamePlate.updateTimer);\n        NamePlate.updateTimer = setTimeout(() => NamePlate.plates.map(p => p.reposition()), 1);\n\n        return ent;\n    }\n\n    public select(entEle: EntityEle|null) {\n        this.selected = entEle;\n        console.debug('Selected entity:', this.selected);\n        this.middleware.setTarget(entEle);\n        if (this.selected) {\n            Object.values(this.entityElements).forEach(e => {\n                if (e !== this.selected) e.setInput(false)\n            });\n        }\n    }\n\n    public entityIsOwned(id: string, checkOwner: string) {\n        const existing = this.entityElements[id];\n        if (existing) {\n            return existing.entity.owners.includes(checkOwner);\n        }\n        return false;\n    }\n\n    public updateEntity(id: string, props: Partial<Entity>, sendUpdate: boolean=true) {\n        const existing = this.entityElements[id];\n        if (existing) {\n            existing.internalUpdate(props);\n            if (sendUpdate) {\n                EntityUpdateHandler.sendUpdate(existing.entity);\n                this.isDirty = true;\n            }\n        }\n        return !!existing;\n    }\n\n    public toggleInput(enabled: boolean, acceptHover: boolean = true) {\n        if (enabled !== this.enableInput) {\n            this.enableInput = enabled;\n            Object.values(this.entityElements).forEach(ent => {\n                ent.setInput(enabled);\n            });\n            Object.assign(this.ele.style, {\n                'pointer-events': (!acceptHover || this.enableInput) ? 'none' : 'auto'\n            });\n        }\n    }\n\n    /**\n     * Directly export the underlying terrain map, for serialization.\n     */\n    getEntityList() {\n        return Object.values(this.entityElements).map(e => e.entity);\n    }\n\n    public appendTo(ele: HTMLDivElement) {\n        ele.append(this.ele);\n        ele.append(this.plateEle)\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport abstract class PreCheck {\n    protected readonly controller: GameController;\n    run: OmitThisParameter<(isHost: boolean, client: Client) => Promise<void>>;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n        this.run = this.runHandler.bind(this);\n    }\n\n    private async runHandler(isHost: boolean, client: Client){\n        return isHost ? this.host(client) : this.client(client);\n    }\n\n    abstract async client(client: Client): Promise<void>;\n    abstract async host(client: Client): Promise<void>;\n}\n","import {db} from './database';\n\nexport interface UserData {\n    id: number;\n    username: string;\n    keyCodes: string[];\n    lastSeen: number;\n}\n\n\nexport async function addNewUser(user: Partial<UserData>): Promise<UserData> {\n    const data = {\n        id: 0,\n        username: '',\n        keyCodes: [],\n        ...user,\n        lastSeen: new Date().getTime()\n    };\n    await db.users.put(data);\n    return data;\n}\n\nexport async function updateUser(user: UserData): Promise<number> {\n    return db.users.update(user.id, user);\n}\n\nexport async function getUser(username: string): Promise<UserData|null> {\n    return db.users.where({username}).first();\n}\n\n/**\n * Checks if the given User code matches an existing username.\n * If so, also updates the lastSeen time of the user.\n * @param userName\n * @param keyCode\n */\nexport async function checkUserCredentials(userName: string, keyCode: string): Promise<UserData> {\n    const match = await db.users.where({username: userName, keyCodes: keyCode}).first();\n\n    if (match) {\n        match.lastSeen = new Date().getTime();\n        await updateUser(match);\n    }\n\n    return match;\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {addNewUser, checkUserCredentials, getUser, updateUser} from \"../../db/user-db\";\nimport {Meta, metadata} from '../../db/metadata-db';\nimport {ReadyPacket, SignaturePacket} from \"../packets/util-packets\";\n\n\nexport default class HandShakeCheck extends PreCheck {\n    /**\n     * Accepts a signed JSON packet, and validates the signature.\n     * The validation is an async race condition, so responds with an OK packet once finished.\n     * @param client\n     */\n    async client(client: Client): Promise<void> {\n        const username = await metadata.get(Meta.USERNAME);\n        const packet = new SignaturePacket().assign({\n            username\n        });\n        await client.send(packet);\n\n        await client.getNextPacket(ReadyPacket); // Wait for host to allow out login.\n    }\n\n    /**\n     * Sends a signed JSON packet, to validate this host ID.\n     * Awaits an OK Packet from the client, once validation is complete.\n     * @param client\n     */\n    async host(client: Client): Promise<void> {\n        // Wait for client to send a message containing username:\n        const data: SignaturePacket = await client.getNextPacket(SignaturePacket);\n        const {username} = data;\n\n        let user = await checkUserCredentials(username, client.id);\n        if (!user) {\n            let existing = await getUser(username);\n\n            await this.controller.lobby.addPendingLogin(username, client.id);  // Will be approved via UI, by the Host.\n\n            if (!existing) {\n                console.log(`Added new user: ${username}, ${client.id}`);\n                existing = await addNewUser({username, keyCodes: [client.id]});\n            } else {\n                console.log(`Updated existing user: ${username}, ${client.id}`);\n                existing.keyCodes.push(client.id);\n                await updateUser(existing);\n            }\n            user = existing;\n        }\n\n        client.userData = user;\n        await client.send(new ReadyPacket())\n    }\n}\n\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\n\n\nexport default class BoardSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        await client.send(await this.controller.buildProtoBoard(false));\n    }\n}\n","import {observable} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\n\n\nexport interface PendingUser {\n    username: string;\n    keyCode: string;\n    approve: Function;\n    reject: Function;\n}\n\nexport default class Lobby {\n    @observable public readonly pendingLogins: PendingUser[] = [];\n    @observable public myName: string = '';\n    private readonly blacklist: Set<String> = new Set();\n\n    private notify(title: string, body: string, iconURL: string='') {\n        Notification.requestPermission().then(function(result) {\n            if (result === 'granted') {\n                new Notification(title, {\n                    body,\n                    icon: iconURL // TODO: Path to alert icon image.\n                });\n            }\n        });\n    }\n\n    /**\n     * Adds the given login attempt to the pending list,\n     * and returns a Promise that will either resolve or reject eventually at the Hosts' discretion.\n     * @param username\n     * @param keyCode\n     */\n    public async addPendingLogin(username: string, keyCode: string) {\n        return new Promise((approve, reject) => {\n            const existing = Array.from(this.pendingLogins).find(pe => pe.keyCode === keyCode);\n            const pending = { username, keyCode, approve, reject };\n\n            if (existing) {\n                this.removePending(existing);\n            }\n            this.pendingLogins.push(pending);\n\n            if (!this.blacklist.has(keyCode)) {\n                notifications.warning(`Unknown device (${keyCode}) wants to join as \"${username}\".`, {});\n                this.notify('New Unknown User', `Unknown device (${keyCode}) wants to join as \"${username}\".`);\n            }\n        });\n    }\n\n    public approveUser(user: PendingUser) {\n        user.approve(true);\n        notifications.success(`Approved user \"${user.username}\".`)\n        this.removePending(user);\n    }\n\n    public rejectUser(user: PendingUser) {\n        user.reject(false);\n        notifications.error(`Rejected device (${user.keyCode}).`)\n        this.removePending(user);\n        this.blacklist.add(user.keyCode);\n    }\n\n    private removePending(user: PendingUser) {\n        const idx = this.pendingLogins.findIndex(u => u.keyCode === user.keyCode);\n        if (idx >= 0) {\n            this.pendingLogins.splice(idx, 1);\n        }\n    }\n}\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {PingPacket} from \"../packets/util-packets\";\nimport {Client} from \"../peerconnection\";\n\n\nexport default class PingHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [PingPacket];\n\n    async clientHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    private static handlePing(client: Client) {\n        client.lastPing = Date.now();\n    }\n}\n","import {db} from './database';\nimport Dexie from \"dexie\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as encoder  from '../net/messageEncoder'\nimport notifications from \"../../ui-components/notifications\";\n\nexport interface BoardWrapper {\n    name: string;\n    campaignID: number;\n    data: Uint8Array;\n}\n\n\nexport async function save(campaignID: number, name: string, board: ProtoBoard) {\n    try {\n        console.log('Persistent storage enabled:', await navigator.storage.persist());\n    } catch (err) {\n        console.error(err);\n    }\n    return db.boards.put({\n        name,\n        campaignID,\n        data: await encoder.encode(board)\n    }).catch(err => {\n        notifications.error('Error saving board!');\n        console.error(err);\n    })\n}\n\nexport async function load(campaignID: number, name: string): Promise<null|ProtoBoard> {\n    const res: BoardWrapper|null = await db.boards.where({campaignID, name}).first().catch(err => {\n        notifications.error('Error loading board!');\n        console.error(err);\n    })\n\n    if (res) {\n        return encoder.decode(res.data);\n    } else {\n        return null;\n    }\n}\n\nexport async function getAvailable(campaignID: number): Promise<string[]> {\n    try {\n        return (await db.boards.where('[campaignID+name]').between([campaignID, Dexie.minKey], [campaignID, Dexie.maxKey]).toArray()).map(b=>b.name);\n    } catch(err) {\n        notifications.error('Error fetching available boards!');\n        console.error(err);\n        return [];\n    }\n}\n\n\nexport async function deleteBoard(campaignID: number, name: string) {\n    return db.boards.where({campaignID, name}).delete();\n}\n","import {observable} from \"mobx\";\nimport {EntityInterface} from \"../data/interfaces/entity\";\n\nexport default class Campaign {\n    public readonly name: string;\n    @observable public boards: string[] = [];\n    @observable public loadedBoard: string|null = null;\n    @observable.shallow public readonly characters: EntityInterface[] = [];\n    public readonly id: number = -1;\n    public readonly timeCreated = Date.now();\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n","/**\n * Strip out any proxied observables, and convert them to standard values.\n * @param obj\n */\nexport default function stripProxy(obj: any): any {\n    const ret = {};\n    for (const e of Object.entries(obj)) {\n        let v = e[1];\n\n        if (v instanceof Array) {\n            v = Array.from(v);\n        }\n        // @ts-ignore\n        ret[e[0]] = v;\n    }\n    return ret;\n}\n","import Campaign from \"../controllers/campaign\";\nimport stripProxy from \"../util/deproxy\";\nimport {db} from './database';\n\ndb.campaigns.mapToClass(Campaign);\n\nexport async function saveCampaign(camp: Campaign) {\n    console.info('Saved campaign:', camp);\n    return db.campaigns.update(camp.id, stripProxy(camp));\n}\n\nexport async function createCampaign(name: string): Promise<any> {\n    const obj = {...new Campaign(name), id: null};\n    delete obj.id;\n\n    const res = await db.campaigns.put(stripProxy(obj));\n    console.info('Saved new campaign:', res);\n    return db.campaigns.get({id: res});\n}\n\nexport async function getAllCampaigns(): Promise<Campaign[]> {\n    return db.campaigns.toArray()\n}\n\nexport async function getCampaign(id: number): Promise<Campaign|null> {\n    return db.campaigns.where({id}).first()\n}\n","import {getAllCampaigns, getCampaign, saveCampaign, createCampaign} from \"../db/campaign-db\";\nimport * as boardDB from '../db/board-db';\nimport Campaign from \"../controllers/campaign\";\n\n\nexport default class CampaignLoader {\n    /**\n     * Get an array of all saved Campaign objects.\n     */\n    public static async getAvailable(): Promise<Campaign[]> {\n        return getAllCampaigns()\n    }\n\n    /**\n     * Load a Campaign object from the db, using its unique ID.\n     * @param id\n     */\n    public static async loadCampaign(id: number): Promise<Campaign|null> {\n        const campaign = await getCampaign(id);\n\n        if (campaign) campaign.boards = await boardDB.getAvailable(id);\n\n        if (campaign && campaign.loadedBoard && !campaign.boards.includes(campaign.loadedBoard)) {\n            campaign.loadedBoard = null;\n        }\n\n        return campaign;\n    }\n\n    /**\n     * Save an existing Campaign object back to the database.\n     * @param camp\n     */\n    public static async saveCampaign(camp: Campaign): Promise<number> {\n        return saveCampaign({\n            ...camp,\n            boards: Array.from(camp.boards),\n            characters: Array.from(camp.characters)\n        }).catch(err => {\n            console.error(err)\n            return -1;\n        });\n    }\n\n    /**\n     * Create a new Campaign object, pre-saved in the database.\n     * @param name\n     */\n    public static async createCampaign(name: string): Promise<Campaign> {\n        return createCampaign(name);\n    }\n}\n\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard} from \"../../data/protobufs/proto-tiles\";\nimport {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport default class BoardReloadHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [ProtoBoard];\n    private readonly controller: any;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n    async clientHandler(client: Client, packet: ProtoBoard): Promise<void> {\n        return this.controller.loadFromProtoBoard(packet);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client tried to send Board Update!')\n    }\n}\n","import React from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField\n} from \"@material-ui/core\";\n\nexport function InputDialog(props: {\n    open: boolean\n    title: string,\n    body: string,\n    tooltip: string,\n    onSubmit: Function,\n    onCancel: Function,\n    acceptText?: string\n}) {\n    const [text, setText] = React.useState('');\n\n    const handleClose = () => {\n        props.onCancel();\n    };\n    const handleText = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setText(event.target.value);\n    }\n\n    return (\n        <div>\n            <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {props.body}\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label={props.tooltip}\n                        type=\"text\"\n                        fullWidth\n                        value={text}\n                        onChange={handleText}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => {\n                        handleClose();\n                        props.onCancel()\n                    }} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => {\n                        props.onSubmit(text);\n                        setText('')\n                    }} color=\"primary\">\n                        {props.acceptText || 'Connect'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n\n\nexport default function ConfirmPrompt(props: {\n    open: boolean,\n    onCancel: any,\n    onConfirm: any,\n    title: string,\n    prompt: string,\n    confirmButton?: string,\n    cancelButton?: string\n}) {\n    return (\n        <div>\n            <Dialog\n                open={props.open}\n                onClose={props.onCancel}\n                aria-labelledby=\"confirm-dialog-title\"\n                aria-describedby=\"confirm-dialog-description\"\n            >\n                <DialogTitle className=\"confirm-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText className=\"prompt-dialog-description\">\n                        {props.prompt}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onCancel} color=\"primary\">\n                        {props.cancelButton||'cancel'}\n                    </Button>\n                    <Button onClick={props.onConfirm} color=\"primary\" autoFocus>\n                        {props.confirmButton||'confirm'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from 'react';\nimport '../styles/yt-player-style.scss';\nimport YouTube from 'react-youtube';\nimport {broadcast, netMode, NetworkMode, isHost} from \"../game/net/peerconnection\";\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport {Button, Fab, IconButton, Tooltip} from \"@material-ui/core\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../game/net/packets/media-packets\";\nimport {observer} from \"mobx-react-lite\";\nimport {InputDialog} from \"./prompts\";\nimport {observable} from \"mobx\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\n\nconst PLAYER_OPTS = {\n    playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        mute: 0\n    },\n};\n\ninterface PlayerConfig {\n    volume: number;\n    loop: boolean;\n    shuffle: boolean;\n}\n\nconst config: PlayerConfig = observable.object({\n    volume: 100,\n    loop: true,\n    shuffle: true\n});\n\nfunction saveConf() {\n    metadata.store(Meta.PLAYER_CONFIG, config).catch(console.error);\n}\n\n/**\n * The current player. There should only ever be one at a time. May be null until initialized.\n */\nexport let player: any = null;\n\n/**\n * Get a summary of the currently-playing media, if any is available.\n */\nexport const getPlayerStatus = (): Partial<MediaStatusPacket>|null => {\n    if (!player) return null;\n\n    const currentVideo: string = player.getVideoData().video_id;\n    const currentTime: number = Math.floor(player.getCurrentTime());\n    const playbackRate: number = player.getPlaybackRate();\n    const paused: boolean = player.getPlayerState() === YouTube.PlayerState.PAUSED;\n\n    if (!currentVideo) return null;\n\n    return {\n        currentVideo,\n        currentTime,\n        playbackRate,\n        paused\n    }\n};\n\n\nexport const YoutubePlayerInterface = observer(() => {\n    const [visible, setVisible] = React.useState(false);\n\n    React.useMemo(() => {\n        metadata.get(Meta.PLAYER_CONFIG).then(async (res: PlayerConfig|null) => {\n            if (res) {\n                Object.assign(config, res);\n            }\n        })\n    }, []);\n\n    const tools = (netMode.get() === NetworkMode.HOST && player) ?\n        <div className={'ytPlayerHostToolbar'}>\n            <LoadVideoButton player={player} />\n            <LoadPlaylistButton player={player} />\n            <ShuffleButton player={player}/>\n        </div> : null;\n\n    return <div style={{pointerEvents: 'auto'}} className={`ytPlayerIcon ${visible? 'visible':'hidden'}`}>\n        <Tooltip\n            title={\"Media Controls\"}\n        >\n            <Fab\n                color=\"default\"\n                onClick={()=>{setVisible(!visible)}}\n            >\n                <YouTubeIcon className={`ytPlayerIconInner ${visible? 'visible':'hidden'}`} />\n            </Fab>\n        </Tooltip>\n\n        <div className={`ytPlayerWrapper ${visible? 'visible':'hidden'}`}>\n            {tools}\n            <YoutubePlayer\n                loop={config.loop}\n                shuffle={config.shuffle}\n                volume={config.volume}\n            />\n        </div>\n    </div>;\n});\n\n\nexport const YoutubePlayer = (props: {loop: boolean, shuffle: boolean, volume: number}) => {\n    const [mediaPlayer, setPlayer] = React.useState<any>(null);\n\n    React.useEffect(() => {\n        if (!mediaPlayer) return;\n\n        player = mediaPlayer;\n\n        if (!isHost()) broadcast(new MediaRequestPacket(), false).catch(console.error);\n\n        const timer = setInterval(() => {\n            // Periodically poll for a new user-set volume, and save the new result.\n            const v = mediaPlayer.getVolume();\n            if (mediaPlayer.getPlayerState() === YouTube.PlayerState.PLAYING && v !== config.volume) {\n                config.volume = v;\n                saveConf();\n            }\n        }, 15000);\n\n        return () => {\n            player = null;\n            clearInterval(timer);\n        }\n    }, [mediaPlayer]);\n\n    const onReady = (event: any) => { // target, data\n        setPlayer(event.target);\n    }\n\n    const onPlay = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video play:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onPause = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video pause:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onError = (event: any) => {\n        event.target.nextVideo();\n    }\n\n    const onStateChange = (event: any) => {\n        /*  BUFFERING: 3, CUED: 5, ENDED: 0, PAUSED: 2, PLAYING: 1, UNSTARTED: -1 */\n        if (event.data === YouTube.PlayerState.CUED) {\n            console.info('Video/Playlist Cued!', mediaPlayer, mediaPlayer.getVideoData());\n            // Reference: https://developers.google.com/youtube/iframe_api_reference#onStateChange\n            mediaPlayer.setLoop(props.loop);  // Loop the playlist.\n            mediaPlayer.setShuffle(props.shuffle); // Can be toggled to shuffle/restore order.\n            mediaPlayer.setVolume(props.volume); // 0-100.\n\n            if (mediaPlayer.getPlaylist()) {\n                mediaPlayer.playVideoAt(0);\n            } else {\n                mediaPlayer.playVideo();\n            }\n        }\n    }\n\n    return <div style={{pointerEvents: 'auto'}}>\n        <YouTube\n            // @ts-ignore\n            opts={PLAYER_OPTS}\n            id={'yt-player'}\n            onReady={onReady}\n            onPlay={onPlay}\n            onPause={onPause}\n            onError={onError}\n            onStateChange={onStateChange}\n        />\n    </div>;\n};\n\n\nexport const LoadPlaylistButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadPlaylist = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input);\n        let id = parser.get('list') || input;\n\n        if (id.includes('=')) id = input.split('=')[1];\n\n        props.player.cuePlaylist({\n            list: id,\n            listType: 'playlist',\n            index: 0,\n            startSeconds: 0\n        });\n    };\n\n    return <div className={'ytPlayerPlaylistButton'}>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Playlist\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Playlist'}\n            body={'Enter a YouTube Playlist:'}\n            tooltip={'Playlist URL'}\n            onSubmit={loadPlaylist}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\nexport const LoadVideoButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadVideo = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input);\n        let id = parser.get('v') || input;\n\n        if (id.includes('=')) id = input.split('=')[1];\n\n        props.player.cueVideoById(id);\n    };\n\n    return <div className={'ytPlayerVideoButton'}>\n        <Button\n            style={{color: 'rgb(14,142,191)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Video\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Video'}\n            body={'Enter a YouTube Video:'}\n            tooltip={'Video URL'}\n            onSubmit={loadVideo}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\n\nexport const ShuffleButton = observer((props: {player: any}) => {\n    const toggle = () => {\n        config.shuffle = !config.shuffle;\n        props.player.setShuffle(config.shuffle);\n\n        saveConf();\n    }\n\n    return <Tooltip title={\"Shuffle\"}>\n        <IconButton\n            children={<ShuffleIcon className={`ytPlayerShuffleIcon ${config.shuffle ? 'active': 'inactive'}`}/>}\n            onClick={toggle}\n        />\n    </Tooltip>\n});\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {Client} from \"../peerconnection\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../packets/media-packets\";\nimport GameController from \"../../controllers/game\";\nimport notifications from \"../../../ui-components/notifications\";\nimport {getPlayerStatus, player} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSyncHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [MediaStatusPacket, MediaRequestPacket];\n    private readonly controller: GameController;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n\n    async clientHandler(client: Client, packet: MediaStatusPacket): Promise<void> {\n        if (!player) {\n            notifications.warning('Media not available yet.');\n            return;\n        }\n        if (packet.paused) {\n            player.pauseVideo();\n            return;\n        }\n        player.setPlaybackRate(packet.playbackRate);\n        player.cueVideoById({\n            videoId: packet.currentVideo,\n            startSeconds: packet.currentTime\n        });\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        if (packet instanceof MediaRequestPacket) {\n            const status = getPlayerStatus();\n\n            if (status) {\n                await client.send(new MediaStatusPacket().assign(status));\n            }\n        } else {\n            throw new Error('Client attempted to send media commands!');\n        }\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {MediaStatusPacket} from \"../packets/media-packets\";\nimport {getPlayerStatus} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        const status = getPlayerStatus();\n\n        if (status) {\n            await client.send(new MediaStatusPacket().assign(status));\n        }\n    }\n}\n","import {CanvasContainer} from \"./canvas\";\nimport {Sprite, waitForSpriteLoad} from \"../util/sprite-loading\";\nimport Terrain from \"./terrain\";\nimport {boardTileHeight, boardTileWidth, imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport * as connection from '../net/peerconnection'\nimport {broadcast, NetworkStatus, getMyID} from \"../net/peerconnection\";\nimport EntityLayer from \"./entities\";\nimport HandShakeCheck from \"../net/prechecks/signature-check\";\nimport BoardSync from \"../net/prechecks/board-sync-check\";\nimport {PreCheck} from \"../net/prechecks/precheck\";\nimport Handler from \"../net/handlers/handler\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport Lobby from \"./lobby\";\nimport PingHandler from \"../net/handlers/ping-handler\";\nimport Campaign from \"./campaign\";\nimport * as boardDB from \"../db/board-db\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as packer from \"../data/board-packer.worker\";\nimport {ProtoEntity} from \"../data/protobufs/proto-entity\";\nimport CampaignLoader from \"../data/campaign-loader\";\nimport BoardReloadHandler from \"../net/handlers/board-reload-handler\";\nimport MediaSyncHandler from \"../net/handlers/media-sync-handler\";\nimport MediaSync from \"../net/prechecks/media-sync\";\nimport {ProtoSprite} from \"../data/protobufs/proto-sprite\";\n\n\nexport default class GameController {\n    public canvasContainer: CanvasContainer;\n    public terrain: Terrain;\n    public entities: EntityLayer;\n    @observable public ready: boolean = false;\n    private readonly preChecks: PreCheck[];\n    private readonly handlers: Handler[];\n    public readonly lobby: Lobby;\n    @observable public campaign: Campaign|null = null;\n\n    constructor() {\n        this.canvasContainer = new CanvasContainer(1, 1);\n        this.terrain = new Terrain(boardTileWidth, boardTileHeight);\n        this.entities = new EntityLayer(boardTileWidth, boardTileHeight);\n        this.lobby = new Lobby();\n\n        // Initialize networking stuff:\n        this.preChecks = [\n            new HandShakeCheck(this),\n            new BoardSync(this),\n            new MediaSync(this)\n        ];\n        this.handlers = [\n            new TerrainAddHandler(this.terrain),\n            new TerrainEraseHandler(this.terrain),\n            new EntityUpdateHandler(this.entities),\n            new PingHandler(),\n            new BoardReloadHandler(this),\n            new MediaSyncHandler(this)\n        ];\n    }\n\n    /**\n     * Starts the main game client, waiting for the Sprite Loader to become ready.\n     * Also initializes any required keys or other async setup.\n     * Automatically starts the Client/Host connection if a URL Hash has been set already.\n     */\n    public async start() {\n        console.debug('Main game controller started.');\n        this.canvasContainer.addLayer(this.terrain);\n        this.canvasContainer.addLayer(this.entities);\n\n        await waitForSpriteLoad;\n        console.debug('-- Sprite loader ready! --');\n\n        this.canvasContainer.setCanvasSize(boardTileWidth * imageWidthPx, boardTileHeight * imageHeightPx);\n\n        console.log('Local Room ID Key:', await getMyID());\n\n        const hash = window.location.hash.replace('#', '');\n        if (hash) {\n            if ((await getMyID()) === hash) {\n                // This is our URL - hosting.\n                await this.startHost();\n            } else {\n                // At someone else's URL - join them.\n                await this.startClient(hash);\n            }\n        }\n        this.ready = true;\n\n        // Treadmill to block back button:\n        window.history.pushState(null, document.title, window.location.href);\n        window.addEventListener('popstate', () => {\n            window.history.pushState(null, document.title, window.location.href);\n        });\n    }\n\n    public async startHost(): Promise<void> {\n        await connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Hosting lobby at:', await getMyID());\n        window.location.hash = await getMyID();\n\n        this.handlers.forEach(h => h.setHost(true));\n        connection.setHandlers(this.handlers, this.preChecks);\n\n        await connection.openHost();\n    }\n\n    public async startClient(connectID: string) {\n        await connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Connecting to host:', connectID);\n        window.location.hash = connectID;\n\n        this.handlers.forEach(h => h.setHost(false));\n        connection.setHandlers(this.handlers, this.preChecks)\n\n        await connection.connectTo(connectID);\n    }\n\n    get isNetworkReady() {\n        return connection.netStatus.get() === NetworkStatus.CONNECTED;\n    }\n\n    /**\n     * Loads the given board, and broadcasts the new board state to all clients.\n     * @param name\n     */\n    public async loadBoard(name: string): Promise<boolean> {\n        if (!this.campaign) return false;\n        await waitForSpriteLoad;\n\n        this.campaign.loadedBoard = name;\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        const board: ProtoBoard|null = await boardDB.load(this.campaign.id, name);\n\n        if (!board) return false;  // Erase existing only if the loaded board actually exists.\n\n        await this.loadFromProtoBoard(board);\n\n        broadcast(await this.buildProtoBoard(false), true).catch(console.error);\n\n        this.terrain.isBoardDirty = false;  // May have triggered a \"redraw\", so reset these flags here.\n        this.entities.isDirty = false;\n\n        return true;\n    }\n\n    public async loadFromProtoBoard(pb: ProtoBoard) {\n        this.terrain.setDirectMap(pb);\n\n        this.entities.getEntityList().forEach(e => this.entities.remove(e.id, false));\n        pb.entities.forEach(ent => {\n            const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n            this.entities.addEntity(sprite, {\n                ...ent,\n                sprite\n            }, false)\n        });\n    }\n\n    public async buildProtoBoard(includeHidden: boolean = true) {\n        const tiles = Object.values(this.terrain.getDirectMap()).flat();\n        const pb = new ProtoBoard().assign(await packer.packBoard(tiles));\n\n        pb.entities = this.entities.getEntityList().filter(e=>includeHidden||e.visible).map(e => {\n            const sprite = new ProtoSprite().assign({id: e.sprite.id, idx: e.sprite.idx})\n            return new ProtoEntity().assign({\n                ...e,\n                sprite,\n                owners: Array.from(e.owners)\n            });\n        });\n\n        return pb;\n    }\n\n    public async saveBoard(): Promise<boolean> {\n        if (!this.campaign || !this.campaign.loadedBoard) return false;\n\n        const pb = await this.buildProtoBoard(true);\n        await boardDB.save(this.campaign.id, this.campaign.loadedBoard, pb);\n\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        await CampaignLoader.saveCampaign(this.campaign);\n\n        return true;\n    }\n\n    public async deleteBoard(campaign: Campaign, name: string): Promise<boolean> {\n        const idx = campaign.boards.indexOf(name);\n\n        if (idx < 0) {\n            return false;\n        }\n\n        campaign.boards.splice(idx, 1);\n\n        if (campaign.loadedBoard === name) {\n            campaign.loadedBoard = null;\n        }\n\n        await boardDB.deleteBoard(campaign.id, name);\n        await CampaignLoader.saveCampaign(campaign);\n\n        return true;\n    }\n}\n","import GameController from \"../game/controllers/game\";\n\n/**\n * A wrapper to connect the UI controls to the actual game, typically through middleware.\n * The interfaces generated should be agnostic of the platform, for maximum compatibility.\n */\nexport default abstract class UITool {\n    public readonly abstract name: string;\n    public readonly abstract icon: JSX.Element;\n    protected readonly controller: GameController;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n    }\n\n    abstract getControlUI(forMobile: boolean): JSX.Element|null;\n    abstract register(): any;\n    abstract unregister(): any;\n    abstract isOption(forMobile: boolean, isHost: boolean): boolean;\n}\n","import Middleware from \"./middleware\";\nimport Terrain from \"../controllers/terrain\";\nimport {imageHeightPx, imageWidthPx} from \"../consts\";\nimport {observable} from \"mobx\";\nimport {CanvasContainer} from \"../controllers/canvas\";\nimport EntityLayer from \"../controllers/entities\";\n\nexport default class PenMiddleware extends Middleware {\n    private readonly terrain: Terrain;\n    private state: number = -1;\n    private readonly canUsePen: boolean;\n    @observable public penSize: number = 1;\n    private container: CanvasContainer;\n    private readonly hoverBox: HTMLElement;\n    private readonly entities: EntityLayer;\n    private toggle: boolean = false;\n\n    constructor(terrain: Terrain, entities: EntityLayer, container: CanvasContainer, canUsePen: boolean=true) {\n        super();\n        this.terrain = terrain;\n        this.entities = entities;\n        this.container = container;\n        this.canUsePen = canUsePen;\n        this.hoverBox = document.createElement('div');\n    }\n\n    register(): void {\n        this.container.addElement(this.hoverBox);\n        this.entities.toggleInput(false, false);\n\n        this.listen('keydown', (ke: KeyboardEvent) => {\n            if (ke.code.startsWith('Shift') && !this.toggle) {\n                this.toggle = true;\n                this.entities.toggleInput(true);\n                this.hoverBox.remove();\n            }\n        }, document.body);\n\n        this.listen('keyup', (ke: KeyboardEvent) => {\n            if (ke.code.startsWith('Shift')) {\n                this.toggle = false;\n                this.entities.toggleInput(false, false);\n                this.container.addElement(this.hoverBox);\n            }\n        }, window);\n\n        this.listen('mousemove', (ev: MouseEvent) => {\n            this.updateHighlight(ev);\n        });\n\n        this.listen('pointerdown', (ev: PointerEvent) => {\n            if (ev.shiftKey) {\n                return;\n            }\n            if (ev.button === 1) {\n                // Middle mouse \"dropper\":\n                const [xx, yy] = PenMiddleware.toGrid(ev);\n                const sp = this.terrain.getAt(xx, yy);\n                if (sp.length) {\n                    this.terrain.selectedSprite = sp[sp.length-1].sprite;\n                    return true;\n                }\n            }\n            this.state = ev.button;\n            return this.draw(ev);\n        });\n\n        this.listen('pointerup', (ev: PointerEvent) => {\n            if (this.state >= 0) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.state = -1;\n            }\n        }, window);\n\n        this.listen('pointermove', (ev: PointerEvent) => {\n            return this.draw(ev);\n        });\n\n        this.listen('wheel', (ev: WheelEvent) => {\n            if (!ev.shiftKey) {\n                const out = Math.sign(ev.deltaY) * -1;\n                this.penSize = Math.max(1, Math.min(8, this.penSize += out));\n                this.updateHighlight(ev);\n                return true;\n            }\n        });\n    }\n\n    draw(ev: PointerEvent): boolean {\n        if (this.state >= 0) {\n            const [xx, yy] = PenMiddleware.toGrid(ev);\n            this.updateHighlight(ev);\n\n            switch (this.state) {\n                case 2:\n                    this.box(xx, yy, this.terrain.eraseAt.bind(this.terrain));\n                    break;\n                case 0:\n                    if (this.canUsePen) this.box(xx, yy, this.terrain.drawAt.bind(this.terrain));\n                    else if (!this.canUsePen) this.box(xx, yy, this.terrain.eraseAt.bind(this.terrain));\n            }\n            return true;\n        }\n        return false;\n    }\n\n    updateHighlight(ev: Event) {\n        const [x, y] = PenMiddleware.toGrid(ev);\n        Object.assign(this.hoverBox.style,{\n            border: '3px solid orangered',\n            left: `${x*imageWidthPx - (this.penSize-1) * imageWidthPx}px`,\n            top: `${y*imageHeightPx - (this.penSize-1) * imageHeightPx}px`,\n            width: `${(this.penSize*2-1) * imageWidthPx - 3}px`,\n            height: `${(this.penSize*2-1) * imageHeightPx - 3}px`,\n            position: 'absolute',\n            'pointer-events': 'none',\n            'z-index': 1\n        });\n    }\n\n    private static toGrid(ev: any) {\n        const x = Math.floor(ev.offsetX/imageWidthPx);\n        const y = Math.floor(ev.offsetY/imageHeightPx);\n        return [x, y]\n    }\n\n    private box(x: number, y: number, op: Function) {\n        for (let xx = x - (this.penSize-1); xx < x + this.penSize; xx++) {\n            for (let yy = y - (this.penSize-1); yy < y + this.penSize; yy++) {\n                op(xx, yy);\n            }\n        }\n    }\n\n    protected onCleanup(): void {\n        this.container.removeElement(this.hoverBox);\n        this.entities.toggleInput(true);\n    }\n}\n","import React from 'react';\nimport {FormControlLabel, Modal, Switch, TextField} from \"@material-ui/core\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport {searchImages, Sprite} from \"../game/util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from '../game/consts';\nimport '../styles/sprite-picker.scss'\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {FixedSizeGrid} from \"react-window\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Autocomplete} from \"@material-ui/lab\";\n\n\nexport default function SpritePicker (\n    props: {\n        onSelect: Function,\n        onSearch?: Function,\n        defaultTerm?: string,\n        selected?: Sprite|null,\n        animated?: boolean\n        canAnimate?: boolean\n    }) {\n    const [searchTerm, setSearch] = React.useState(props.defaultTerm || '');\n    const [animated, setAnimated] = React.useState(!!props.animated);\n    const [sprites, setSprites] = React.useState<Sprite[]>([]);\n\n    const handleChange = (value: string) => {\n        setSearch(value);\n        if (props.onSearch) {\n            props.onSearch(value);\n        }\n    };\n    const animChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAnimated(event.target.checked);\n    };\n\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const results = searchImages(searchTerm, animated, false);\n            setSprites(results);\n        }, 200)\n        return () => {\n            clearTimeout(timeout);\n        }\n    }, [searchTerm, animated]);\n\n\n    return <div style={{\n        maxWidth: '600px'\n    }}>\n        <form noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <FormGroup row>\n                <Autocomplete\n                    selectOnFocus={true}\n                    options={[]}\n                    style={{ width: 300 }}\n                    freeSolo={true}\n                    value={searchTerm}\n                    inputValue={searchTerm}\n                    onInputChange={(event, newInputValue) => {\n                        handleChange(newInputValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} label=\"Search Sprites!\" variant=\"outlined\" />}\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={animated}\n                            onChange={animChange}\n                            disabled={!props.canAnimate}\n                            name=\"checkedA\"\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        />\n                    }\n                    label=\"Animated\"\n                    labelPlacement=\"top\"\n                />\n            </FormGroup>\n        </form>\n        <div style={{height: '280px'}}>\n            <SpriteGrid sprites={sprites} onSelect={props.onSelect} selected={props.selected} />\n        </div>\n    </div>;\n}\n\n\nexport function SpriteGrid(props: {sprites: Sprite[], onSelect: Function, selected?: Sprite|null}) {\n    return <AutoSizer className={'autosizer'}>\n        {function size(size: { height: number, width: number }){\n            const wrapperSize = 52;\n            const perRow = Math.floor(size.width/wrapperSize);\n            const rowCount = Math.ceil(props.sprites.length/ perRow);\n\n            return <FixedSizeGrid\n                columnCount={perRow}\n                columnWidth={wrapperSize}\n                height={size.height}\n                width={size.width}\n                rowCount={rowCount}\n                rowHeight={wrapperSize}\n                className={'spriteGrid'}\n                style={{maxHeight: `${size.height}px`}}\n            >\n                {(data: { columnIndex: number, rowIndex: number, style: any }) => {\n                    const spr = props.sprites[data.columnIndex + data.rowIndex * perRow];\n                    if (spr) {\n                        return <div style={data.style}>\n                            <SpriteImage sprite={spr} onSelect={props.onSelect} selected={props.selected?.composite === spr.composite}/>\n                        </div>\n                    } else {\n                        return <div/>\n                    }\n                }}\n            </FixedSizeGrid>\n        }}\n    </AutoSizer>\n}\n\n\nexport function SpriteImage(props: {sprite: Sprite|null, onSelect?: Function, selected?: boolean}) {\n    const canv: any = React.useRef(null);\n    // @ts-ignore\n    const sel = props.onSelect ? () => props.onSelect(props.sprite) : ()=>{};\n\n    React.useEffect(() => {\n        const redraw = () => {\n            if (canv.current){\n                // @ts-ignore\n                const ctx: CanvasRenderingContext2D = canv.current.getContext('2d');\n                ctx.clearRect(0,0,canv.current.width, canv.current.height);\n                props.sprite?.drawTo(ctx, 0, 0);\n            }\n        };\n        const cancel: any = props.sprite?.animated ? setInterval(redraw, 200) : null;\n        redraw();\n\n        return () => {\n            if (cancel !== null) {\n                clearInterval(cancel);\n            }\n        }\n    }, [props.sprite])\n\n    return <canvas\n        ref={canv}\n        width={imageWidthPx}\n        height={imageHeightPx}\n        style={{width: '48px', height: '48px', background: 'gray'}}\n        className={`spriteImage ${props.selected ? 'selected': ''}`}\n        title={props.sprite?.name || 'No Sprite'}\n        onClick={sel}\n    />\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto',\n            maxWidth: '600px',\n            minWidth: '400px',\n            position: 'fixed',\n            left: '50%',\n            top: '50%',\n            transform: `translate(-50%, -50%)`,\n        }\n    }),\n);\n\nexport function SpritePickerModal(props: {open: boolean, onClose: Function, onSelect: Function, currentSprite: Sprite|null}) {\n    const classes = useStyles();\n    return <Modal\n        open={props.open}\n        aria-labelledby=\"sprite-picker-modal\"\n        aria-describedby=\"pick a sprite to use\"\n        onClose={()=>props.onClose()}\n    >\n        <div className={classes.paper}>\n            <SpritePicker\n                defaultTerm={props.currentSprite?.name || ''}\n                selected={props?.currentSprite || null}\n                animated={props?.currentSprite?.animated || true}\n                onSelect={(sp: Sprite) => {\n                    props.onClose();\n                    props.onSelect(sp);\n                }}\n                canAnimate={true}\n            />\n        </div>\n    </Modal>\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport SpritePicker from \"../ui-components/spritepicker\";\nimport { Sprite } from \"../game/util/sprite-loading\";\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport {observer} from \"mobx-react-lite\";\nimport Terrain from \"../game/controllers/terrain\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIPenTool extends UITool {\n    readonly icon: JSX.Element = <TerrainIcon />;\n    readonly name: string = 'Terrain';\n    readonly middleware: PenMiddleware;\n    private searchTerm: string = 'ground';\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, controller.entities, controller.canvasContainer);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <PenControlInterface\n            terrain={this.controller.terrain}\n            term={this.searchTerm}\n            setSearch={(term: string) => this.searchTerm = term}\n            pen={this.middleware}\n        />\n    }\n\n    register(): any {\n        this.controller.terrain.registerMiddleware(this.middleware);\n        console.log('Mounted pen tool.')\n    }\n\n    unregister(): any {\n       this.middleware.eject();\n       console.log('Unmounted pen tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst PenControlInterface = observer((props: {terrain: Terrain, setSearch: Function, term: string, pen: PenMiddleware}) => {\n    return <div className={'cont'}>\n        <PenSizeSlider pen={props.pen}/>\n        <SpritePicker\n            onSelect={(sp: Sprite) => props.terrain.selectedSprite = sp}\n            onSearch={props.setSearch}\n            defaultTerm={props.term}\n            selected={props.terrain.selectedSprite}\n            canAnimate={false}\n        />\n    </div>\n});\n\nconst PenSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Pen Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.penSize = newValue}\n        />\n    </div>\n});\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport ControlCameraIcon from '@material-ui/icons/ControlCamera';\n\nexport default class UICameraTool extends UITool {\n    readonly icon: JSX.Element = <ControlCameraIcon />;\n    readonly name: string = 'Camera';\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return null;\n    }\n\n    register(): any {}\n\n    unregister(): any {}\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return true;\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {observer} from \"mobx-react-lite\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIEraserTool extends UITool {\n    readonly icon: JSX.Element = <ClearIcon />;\n    readonly name: string = 'Eraser';\n    readonly middleware: PenMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, controller.entities, controller.canvasContainer, false);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return <EraserSizeSlider pen={this.middleware}/>\n    }\n\n    register(): any {\n        this.controller.terrain.registerMiddleware(this.middleware);\n        console.log('Mounted eraser tool.')\n    }\n\n    unregister(): any {\n        this.middleware.eject();\n        console.log('Unmounted eraser tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return forMobile && isHost;\n    }\n}\n\nconst EraserSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    console.log('PS:', props.pen.penSize)\n\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Eraser Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.penSize = newValue}\n        />\n    </div>\n});\n","import UITool from \"./ui-tool\";\nimport FaceIcon from '@material-ui/icons/Face';\nimport React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {SpriteImage, SpritePickerModal} from \"../ui-components/spritepicker\";\nimport EntityLayer, {Entity} from \"../game/controllers/entities\";\nimport {\n    Button,\n    Checkbox,\n    Dialog, DialogActions,\n    DialogContent, DialogContentText,\n    DialogTitle,\n    FormControlLabel, Input, InputLabel, ListItemText, MenuItem, Select,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {Sprite} from \"../game/util/sprite-loading\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport GameController from \"../game/controllers/game\";\nimport EntityUpdateHandler from \"../game/net/handlers/entity-update-handler\";\nimport {clients} from '../game/net/peerconnection';\nimport Campaign from \"../game/controllers/campaign\";\nimport {EntityInterface} from \"../game/data/interfaces/entity\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport stripProxy from \"../game/util/deproxy\";\n\n\nexport default class UIEntityTool extends UITool {\n    readonly icon: JSX.Element = <FaceIcon />;\n    readonly name: string = 'Entity';\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <EntityEditorInterface\n            entities={this.controller.entities}\n            controller={this.controller}\n        />\n    }\n\n    register(): any {\n        console.log('Mounted entity tool.')\n    }\n\n    unregister(): any {\n        console.log('Unmounted entity tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    })\n);\n\nconst EntityEditorInterface = observer((props: {entities: EntityLayer, controller: GameController}) => {\n    const [promptSprite, setSpritePrompt] = React.useState(false);\n    const [selectedSprite, setSprite] = React.useState(null);\n    const [entName, setName] = React.useState('');\n    const [visible, setVisible] = React.useState(true);\n    const [loadExisting, setLoadExisting] = React.useState(false);\n\n    const resetValues = () => {\n        setSpritePrompt(false);\n        setSprite(null);\n        setName('');\n        setVisible(true);\n    }\n\n    if (props.entities.selected) return <EntityEditInterface entities={props.entities} campaign={props.controller.campaign}/>\n\n    return <div className={'cont'}>\n        <h2>Create Entity</h2>\n        <FormGroup row>\n            <TextField\n                id=\"ent-name\"\n                label=\"Name\"\n                variant=\"filled\"\n                value={entName}\n                onChange={(evt) => setName(evt.target.value)}\n            />\n            <div style={{marginLeft: '12px'}} >\n                <SpriteImage\n                    sprite={selectedSprite}\n                    onSelect={() => {setSpritePrompt(true)}}\n                />\n            </div>\n        </FormGroup>\n\n        <FormGroup row>\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={visible}\n                        onChange={(evt)=> setVisible(evt.target.checked)}\n                        name=\"visible\"\n                    />\n                }\n                label=\"Visible\"\n            />\n        </FormGroup>\n\n        <FormGroup row style={{justifyContent: 'space-between'}}>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={()=>{createEntity(props.entities, props.controller, selectedSprite, entName, visible); resetValues();}}\n                disabled={!selectedSprite}\n            >\n                Create\n            </Button>\n            <Button variant=\"contained\" color=\"default\" onClick={()=>setLoadExisting(true)} disabled={!props.controller.campaign?.characters.length}>\n                Load Character\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" onClick={resetValues} >\n                Clear\n            </Button>\n        </FormGroup>\n\n        <SpritePickerModal\n            open={promptSprite}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={setSprite}\n            currentSprite={selectedSprite||null}\n        />\n\n        <CampaignCharacterSelector\n            entities={props.entities}\n            controller={props.controller}\n            campaign={props.controller.campaign}\n            open={loadExisting}\n            onClose={()=>setLoadExisting(false)}\n        />\n    </div>\n});\n\n\nconst EntityEditInterface = observer((props: {entities: EntityLayer, campaign: Campaign|null}) => {\n    const ent = props.entities.selected?.entity;\n    if (!ent) return null;\n\n    const [prompt, setSpritePrompt] = React.useState(false);\n    const [promptClone, setClonePrompt] = React.useState(false);\n    const update = React.useMemo(() => {\n        let timeout: any = null;\n        return (info: Partial<Entity>) => {\n            if (timeout !== null) {\n                clearTimeout(timeout);\n            }\n            const ent = props.entities.selected?.entity;\n            if (ent) {\n                timeout = setTimeout(() => {\n                    props.entities.updateEntity(ent.id, info);\n                    if (props.campaign) {\n                        updateCampaign(props.campaign, ent);\n                    }\n                }, 200);\n            }\n        }\n    }, [props.entities, props.campaign])\n    const classes = useStyles();\n    const updateInstant = (info: Partial<Entity>) => {\n        props.entities.updateEntity(ent.id, info);\n        if (props.campaign) {\n            updateCampaign(props.campaign, ent);\n        }\n    }\n    const clientNames: string[] = Array.from(clients).filter(c=>c.userData).map(cl =>{\n        // @ts-ignore\n        return cl.userData.username\n    });\n    const userList: string[] = Array.from(new Set([\n        ...clientNames,\n        ...ent.owners\n    ])).sort();\n\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Edit {ent.name}</h2>\n            <FormGroup row>\n                <TextField\n                    id=\"ent-name\"\n                    label=\"Name\"\n                    variant=\"filled\"\n                    value={ent.name}\n                    onChange={(evt) => updateInstant({name: evt.target.value})}\n                />\n                <div style={{marginLeft: '12px'}} >\n                    <SpriteImage\n                        sprite={ent.sprite}\n                        onSelect={() => {setSpritePrompt(true)}}\n                    />\n                </div>\n\n            </FormGroup>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <input\n                            type=\"color\"\n                            value={ent.color}\n                            className={classes.spriteColor}\n                            onChange={evt => update({color: evt.target.value})}\n                        />\n                    }\n                    label={<Typography style={{marginTop: '12px'}}>Color</Typography>}\n                />\n            </FormGroup>\n            <FormGroup row>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.visible}\n                            onChange={(evt)=> {\n                                updateInstant({visible: evt.target.checked});\n                                if (!evt.target.checked) {\n                                    EntityUpdateHandler.sendDelete(ent);\n                                }\n                            }}\n                            name=\"visible\"\n                        />\n                    }\n                    label=\"Visible\"\n                />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.saveToCampaign}\n                            onChange={(evt)=> updateInstant({saveToCampaign: evt.target.checked})}\n                            name=\"saveToCampaign\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Campaign-wide\"\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <InputLabel>Owners</InputLabel>\n                <Select\n                    multiple\n                    value={ent.owners}\n                    onChange={(evt)=>updateInstant({owners: evt.target.value as string[]})}\n                    input={<Input />}\n                    renderValue={(selected: any) => selected.join(', ')}\n                    style={{marginBottom: '25px'}}\n                >\n                    {userList.map((id: string) => (\n                        <MenuItem key={id} value={id}>\n                            <Checkbox checked={ent.owners.indexOf(id) > -1} />\n                            <ListItemText primary={id} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormGroup>\n\n            <FormGroup row style={{justifyContent: 'space-between'}}>\n                <Button variant=\"contained\" color=\"default\" onClick={()=>setClonePrompt(true)}>\n                    Duplicate\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>props.entities.remove(ent.id)} >\n                    Delete\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>props.entities.select(null)} >\n                    Close\n                </Button>\n            </FormGroup>\n        </form>\n\n        <SpritePickerModal\n            open={prompt}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={(sp: Sprite) => {ent.sprite = sp}}\n            currentSprite={ent.sprite}\n        />\n\n        <PromptForNumber\n            onCancel={()=>{ setClonePrompt(false)}}\n            onSubmit={(num: number) => {\n                setClonePrompt(false);\n                if (num) {\n                    cloneEntity(props.entities, ent, num);\n                }\n            }}\n            open = {promptClone}\n            prompt='How many extra clones would you like?'\n            title='Clone Amount'\n            label='Clones'\n        />\n    </div>\n});\n\n\nconst CampaignCharacterSelector = observer((props: {\n    open: boolean,\n    entities: EntityLayer,\n    controller: GameController,\n    campaign: Campaign|null,\n    onClose: Function\n}) => {\n    if (!props.campaign) return null;\n    const characters = props.campaign.characters;\n    const [selected, setSelected] = React.useState(characters.length > 0 ? characters[0]?.id : '');\n\n    const onSelect = (id: any) => {\n        console.log('Selected character ID:', id);\n        setSelected(id);\n    };\n\n    const getSelected = (id: any) => {\n        return props.campaign?.characters.find(c => c.id === id);\n    }\n\n    return <Dialog open={props.open} onClose={()=>props.onClose()}>\n            <DialogTitle>Select a Campaign Character</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Select a character saved to this campaign:\n                </DialogContentText>\n                <Select\n                    onChange={(evt)=>onSelect(evt.target.value)}\n                    input={<Input />}\n                    renderValue={(selected: any) => {\n                        const sel = getSelected(selected);\n                        if (!sel) return '';\n\n                        return <MenuItem style={{pointerEvents: 'none'}}>\n                            <SpriteImage sprite={new Sprite(sel.sprite.id, sel.sprite.idx)} />\n                            {sel.name}\n                        </MenuItem>\n                    }}\n                    style={{marginBottom: '25px',  width: '100%'}}\n                    value={selected}\n                >\n                    {props.campaign.characters.map((cha: EntityInterface) => (\n                        <MenuItem key={cha.id} value={cha.id}>\n                            <SpriteImage sprite={new Sprite(cha.sprite.id, cha.sprite.idx)} />\n                            <ListItemText primary={cha.name} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => {\n                    props.onClose()\n                }} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={() => {\n                    const sel = getSelected(selected);\n                    if (sel) {\n                        const sp = new Sprite(sel.sprite.id, sel.sprite.idx);\n                        createEntity(props.entities, props.controller, sp, sel.name, true, sel);\n                        props.onClose();\n                    }\n                }} color=\"primary\">\n                    Load\n                </Button>\n            </DialogActions>\n        </Dialog>\n});\n\n\nfunction PromptForNumber(props: {title: string, prompt: string, label?: string, open: boolean, onCancel: Function, onSubmit: Function}) {\n    const [num, setNum] = React.useState(0);\n    const handleClose = () => {\n        props.onSubmit(num);\n    };\n\n    return <Dialog open={props.open} onClose={()=>{props.onCancel()}} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                {props.prompt}\n            </DialogContentText>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                label={props.label || ''}\n                type=\"number\"\n                fullWidth\n                onChange={(event) => setNum(parseInt(event.target.value))}\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={()=>{props.onCancel()}} color=\"primary\">\n                Cancel\n            </Button>\n            <Button onClick={handleClose} color=\"primary\">\n                Submit\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n\n\nfunction cloneEntity(entities: EntityLayer, ent: Entity, num: number) {\n    if (num) {\n        for (let i=0; i<num; i++) {\n            entities.addEntity(ent.sprite, {\n                x: ent.x,\n                y: ent.y,\n                color: ent.color,\n                owners: [...ent.owners],\n                visible: ent.visible,\n                name: `${ent.name} ${i+2}`\n            });\n        }\n        entities.updateEntity(ent.id, {\n            name: `${ent.name} 1`\n        })\n    }\n}\n\n\nfunction createEntity(entities: EntityLayer, controller: GameController, sprite: Sprite|null, name: string, visible: boolean, ext?: EntityInterface) {\n    if (!sprite) return;\n\n    const coords = controller.canvasContainer.screenToBoard(window.innerWidth/2, window.innerHeight/2)\n    entities.addEntity(sprite, {\n        ...(ext||{}),\n        sprite,\n        name,\n        visible,\n        x: coords.x,\n        y: coords.y\n    })\n}\n\nlet campUpdateTimer: any = null;\n\n/**\n * Updates, adds, or removes the current Entity from the given Campaign's saved characters.\n * Maintains its own timer, to avoid spam-updating the DB.\n * @param campaign\n * @param ent\n */\nfunction updateCampaign(campaign: Campaign, ent: Entity) {\n    clearTimeout(campUpdateTimer);\n    campUpdateTimer = setTimeout(() => {\n        const savedIdx = campaign.characters.findIndex(c => c.id === ent.id);\n\n        if (ent.saveToCampaign) {\n            const newData: EntityInterface = {\n                color: ent.color,\n                id: ent.id,\n                name: ent.name,\n                owners: Array.from(ent.owners),\n                saveToCampaign: true,\n                sprite: {\n                    id: ent.sprite.id,\n                    idx: ent.sprite.idx\n                }\n            }\n            campaign.characters.splice(savedIdx >= 0 ? savedIdx : campaign.characters.length, 1, stripProxy(newData));\n            CampaignLoader.saveCampaign(campaign).then(() => console.debug('Updated campaign.'));\n        } else if (savedIdx >= 0) {\n            campaign.characters.splice(savedIdx, 1);\n            CampaignLoader.saveCampaign(campaign).then(() => console.debug('Removed entity from campaign.'));\n        }\n    }, 500);\n}\n","import {observer} from \"mobx-react-lite\";\nimport React from \"react\";\nimport UITool from \"./ui-tool\";\nimport GroupIcon from '@material-ui/icons/Group';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport Lobby, {PendingUser} from \"../game/controllers/lobby\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {MenuItem, MenuList, Tooltip} from \"@material-ui/core\";\nimport { IconButton } from '@material-ui/core';\nimport * as network from '../game/net/peerconnection'\nimport {updateUser, UserData} from \"../game/db/user-db\";\n\nexport default class UILobbyTool extends UITool {\n    readonly icon: JSX.Element = <GroupIcon />;\n    readonly name: string = 'Lobby';\n\n    getControlUI(forMobile: boolean): JSX.Element | null {\n        return <LobbyInterface lobby={this.controller.lobby}/>;\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n\n    register(): any {}\n\n    unregister(): any {}\n}\n\nconst useStyles = makeStyles(() => createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    }));\n\n\nconst LobbyInterface = observer((props: {lobby: Lobby}) => {\n    const classes = useStyles();\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Lobby</h2>\n            <PendingList lobby={props.lobby} />\n            <UserList />\n        </form>\n    </div>\n});\n\nconst PendingList = observer((props: {lobby: Lobby}) => {\n    const eles = props.lobby.pendingLogins.map(pl => {\n        return <PendingUserEle key={pl.keyCode} user={pl} lobby={props.lobby}/>\n    });\n\n    if(!eles.length) return null;\n\n    return <div>\n        <div style={{border: '1px solid black'}}>\n            <h4 style={{marginBottom: '5px'}}>Pending:</h4>\n            <MenuList>\n                {eles}\n            </MenuList>\n        </div>\n    </div>\n});\n\nconst PendingUserEle = (props: {user: PendingUser, lobby: Lobby}) => {\n    const approve = (ev: any) => {\n        props.lobby.approveUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n    const reject = (ev: any) => {\n        props.lobby.rejectUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    return <MenuItem style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n        <Tooltip title={'Device: ' + props.user.keyCode}><div>{props.user.username}</div></Tooltip>\n        <Tooltip title=\"Approve\"><IconButton children={<ThumbUpIcon/>} color=\"primary\" onClick={approve}/></Tooltip>\n        <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n    </MenuItem>\n}\n\n\nconst UserList =  observer((props: {}) => {\n    const eles = Array.from(network.clients).filter(c=>c.userData).map(c => {\n        // @ts-ignore\n        const dat: UserData = c.userData;\n        const reject = (ev: any) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            updateUser({\n                ...dat,\n                keyCodes: []\n            }).then(() => {\n                c.close()\n            })\n        }\n\n        return <MenuItem key={dat.id} style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n            {dat.username}\n            <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n        </MenuItem>\n    });\n\n    if (!eles.length) return null;\n\n    return <div>\n        <h4 style={{marginBottom: '5px'}}>Online:</h4>\n        <MenuList>\n            {eles}\n        </MenuList>\n    </div>\n});\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport UIPenTool from \"../ui-tools/ui-pen-tool\";\nimport GameController from \"../game/controllers/game\";\nimport UITool from \"../ui-tools/ui-tool\";\nimport {Avatar, Modal} from \"@material-ui/core\";\nimport UICameraTool from \"../ui-tools/ui-camera-tool\";\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport UIEraserTool from \"../ui-tools/ui-eraser-tool\";\nimport {observer} from \"mobx-react-lite\";\nimport * as connection from \"../game/net/peerconnection\";\nimport {NetworkMode} from \"../game/net/peerconnection\";\nimport UIEntityTool from \"../ui-tools/ui-entity-tool\";\nimport UILobbyTool from \"../ui-tools/ui-lobby-tool\";\nimport hotkeys from 'hotkeys-js';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            height: 380,\n            transform: 'translateZ(0px)',\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto'\n        }\n    }),\n);\n\n\nconst ControlMenu = observer((props: {controller: GameController, forMobile: boolean}) => {\n    const isHost = connection.netMode.get() === NetworkMode.HOST;\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [modalOpen, setModalOpen] = React.useState(false);\n    const [tools, setTools] = React.useState<UITool[]>([]);\n    const [selectedTool, setSelected] = React.useState<UITool|null>(null);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleModalClose = () => {\n        setModalOpen(false);\n    };\n\n    const handleModalOpen = () => {\n        setModalOpen(true);\n    }\n\n    const handleSelect = (action: UITool) => {\n        handleClose();\n        if (action === selectedTool) {\n            return;\n        }\n        if (selectedTool) {\n            selectedTool.unregister();\n        }\n        setSelected(action);\n        action.register();\n        setModalOpen(true);\n    }\n\n    React.useEffect(() => {\n        // When the back button is used, close the modal.\n        window.addEventListener('popstate', handleModalClose);\n\n        hotkeys('1,2,3,4,5,6,7,8,9', (event, handler) => {\n            const key = parseInt(handler.key);\n            const tool = tools.filter(t=>t.isOption(props.forMobile, isHost))[key-1];\n            console.log('Hotkey:', key, tool);\n            if (tool && tool !== selectedTool) {\n                handleSelect(tool);\n            }\n        });\n\n        return () => {\n            window.removeEventListener('popstate', handleModalClose);\n            hotkeys.unbind('1,2,3,4,5,6,7,8,9');\n        }\n    });\n\n    React.useEffect(() => {\n        const newTools = [\n            new UICameraTool(props.controller),\n            new UIPenTool(props.controller),\n            new UIEraserTool(props.controller),\n            new UIEntityTool(props.controller),\n            new UILobbyTool(props.controller)\n        ];\n\n        setTools(newTools);\n        setSelected(newTools[0]);\n        newTools[0].register();\n    }, [props.controller]);\n\n    let ui;\n    const emb = selectedTool?.getControlUI(true);\n    if (emb) {\n        if (props.forMobile) {\n            ui = <div>\n                <Avatar\n                    className={'useMouse'}\n                    onClick={handleModalOpen}\n                    style={{\n                        position: 'fixed',\n                        bottom: '10px',\n                        left: '10px',\n                        transform: `translateY(-50%)`,\n                        background: '#3eec10',\n                        cursor: 'pointer'\n                    }}\n                >\n                    <MoreHorizIcon/>\n                </Avatar>\n                <Modal open={modalOpen} onClose={handleModalClose}>\n                    <div className={classes.paper}>\n                        {emb}\n                    </div>\n                </Modal>\n            </div>\n        } else {\n            ui = <div\n                style={{position: \"fixed\", left: '10px', top: '50%', minWidth: '400px', transform: `translateY(-50%)`}}\n                className={classes.paper}\n            >\n                {selectedTool?.getControlUI(false)}\n            </div>\n        }\n    }\n\n    return <div>\n        {ui}\n        <SpeedDial\n            ariaLabel=\"Control SpeedDial\"\n            className={classes.speedDial}\n            hidden={false}\n            icon={selectedTool?.icon || <SpeedDialIcon />}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            open={!props.forMobile || open}\n        >\n            {tools.filter(t=>t.isOption(props.forMobile, isHost)).map((action, idx) => (\n                <SpeedDialAction\n                    key={action.name}\n                    icon={action.icon}\n                    tooltipTitle={action.name}\n                    tooltipOpen\n                    onClick={() => {handleSelect(action)}}\n                    title={action.name + ` (Hotkey: ${idx+1})`}\n                />\n            ))}\n        </SpeedDial>\n    </div>\n});\n\nexport default ControlMenu;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport {InputDialog} from \"./prompts\";\n\n/**\n * Helper UI to prompt the user for their connection action, if no Room ID hashcode is set.\n * @param props\n * @constructor\n */\nexport default function LoginHelper (props: {controller: GameController}) {\n    const [promptLogin, setPrompt] = React.useState(true);\n    const [needClient, setNeedClient] = React.useState(false);\n\n    const setHosting = (hosting: boolean) => {\n        setPrompt(false);\n        if (hosting) {\n            return props.controller.startHost();\n        } else {\n           setNeedClient(true);\n        }\n    };\n\n    return <div>\n        { promptLogin ? <PromptNetwork select={setHosting}/> : null }\n        <InputDialog\n            open={needClient}\n            title={'Enter host ID'}\n            body={'Enter the ID of the host lobby you\\'d like to join'}\n            tooltip={'Host ID'}\n            onCancel={() => {setNeedClient(false); setPrompt(true)}}\n            onSubmit={(txt: string) => props.controller.startClient(txt)}\n        />\n    </div>\n}\n\n\nfunction PromptNetwork (props: {select: Function}) {\n\n    return <Dialog open={true} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Network Mode</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Would you like to join a campaign, or host your own campaign?\n            </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={() => {props.select(true)}}>\n                Host\n            </Button>\n            <Button onClick={() => { props.select(false)}}>\n                Join\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n","import * as connection from \"../game/net/peerconnection\";\nimport {NetworkMode, NetworkStatus} from \"../game/net/peerconnection\";\nimport LoginHelper from \"./loginHelper\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\n\n/**\n * Util to display network status to the user.\n * @param props\n * @constructor\n */\nexport default function ConnectionOverlay(props: {controller: GameController}) {\n    let content = null;\n    let message = null;\n\n    if (connection.netMode.get() === NetworkMode.UNKNOWN) {\n        content = <LoginHelper controller={props.controller} />\n\n    } else {\n        switch (connection.netStatus.get()) {\n            case NetworkStatus.DISCONNECTED:\n                message = `Error connecting to service. Cannot reconnect.`;\n                break;\n            case NetworkStatus.RECONNECTING:\n                message = 'Error with connection to Host. Attempting reconnection...';\n                break;\n            case NetworkStatus.CONNECTING:\n                message = 'Connecting to Host...';\n                break;\n            case NetworkStatus.MATCHMAKING_FAIL:\n                message = 'Connection to matchmaking server failed. Please reload.';\n                break;\n            case NetworkStatus.WAITING_FOR_HOST:\n                message = 'Waiting for the Host to approve our login...';\n                break;\n            default:\n                message = null;\n        }\n    }\n\n    if (message) {\n        content =  <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h4\" component=\"h4\" gutterBottom>\n                {message}\n            </Typography>\n        </Backdrop>;\n    }\n    return content;\n}\n","import {observable} from \"mobx\";\nimport {db} from '../db/database';\n\nclass GoogleApi {\n    private injected = false;\n    private apiReady: any = null;\n    private apiFailed: any = null;\n    public readonly waitForLoad = new Promise((res, fail) => {\n        this.apiReady = res;\n        this.apiFailed = fail;\n    });\n    @observable public isSignedIn: boolean = false;\n\n    /**\n     * Injects a script object into the base page node, which loads and initiates the Google API.\n     * This is automatically called initially before export, in order for this client to work.\n     */\n    public inject() {\n        if (this.injected) return;\n        this.injected = true;\n        const script = document.createElement(\"script\");\n        script.src = \"https://apis.google.com/js/client.js\";\n\n        script.onload = () => {\n            gapi.load('client:auth2', () => {\n                gapi.client.init({\n                    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n                    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n                    scope: 'https://www.googleapis.com/auth/drive.appdata',\n                }).then(() => {\n                    // Listen for sign-in state changes.\n                    gapi.auth2.getAuthInstance().isSignedIn.listen(res => this.isSignedIn = res);\n                    this.isSignedIn = gapi.auth2.getAuthInstance().isSignedIn.get();\n                    this.apiReady();\n                }, (error) => {\n                    console.error(error);\n                    this.apiFailed(error);\n                });\n            });\n        };\n        document.body.appendChild(script);\n    }\n\n    /**\n     * Fire a callback when the sign-in status changes.\n     * Always fires an initial value, so that it cannot be missed if no update occurs.\n     * @param callback\n     */\n    public onSignInChange(callback: Function) {\n        this.waitForLoad.then(() => {\n            callback(gapi.auth2.getAuthInstance().isSignedIn.get());\n            gapi.auth2.getAuthInstance().isSignedIn.listen(res => callback(res));\n        })\n    }\n\n    /**\n     * Prompts the user to sign in, using a popup Google homepage.\n     */\n    public async promptSignIn() {\n        await this.waitForLoad;\n        localStorage['lastDriveUpdate'] = 0;\n        if (!this.isSignedIn) {\n            return gapi.auth2.getAuthInstance().signIn().then(res => {\n                console.log('Login res:', res);\n                console.log(this.isSignedIn, gapi.auth2.getAuthInstance().isSignedIn.get())\n            })\n        }\n    }\n\n    /**\n     * Disconnects the current user from the API.\n     */\n    public async signOut() {\n        return gapi.auth2.getAuthInstance().signOut();\n    }\n\n    /**\n     * Uploads the given Blob to the connected Google Drive, if one is available.\n     *\n     * Either creates a new file if one does not exist already, or replaces the old one.\n     * @param data\n     * @param mimeType\n     */\n    private async upload(data: Blob, mimeType: string = 'application/json') {\n        if (!this.isSignedIn) throw Error('Attempted to upload when not signed in!');\n        const user = gapi.auth2.getAuthInstance().currentUser.get();\n        const oauthToken = user.getAuthResponse().access_token;\n        const latest = await this.getLatestBackup();\n        const latestID = latest?.id || '';\n        const body = { parents: ['appDataFolder'], name: \"terra-db-backup.json\", mimeType };\n\n        if(latest) delete body.parents;  // In a PATCH, this field cannot be updated.\n\n        return fetch(`https://www.googleapis.com/upload/drive/v3/files/${latestID}?uploadType=resumable`, {\n            method: latest ? 'PATCH' : 'POST',\n            headers: {\n                Authorization: `Bearer ${oauthToken}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n        }).then(resp => {\n            const loc = resp.headers.get('location');\n            if (!loc) throw Error('No upload redirect location was given.');\n            return fetch(loc, {\n                method: latest ? 'PATCH':'PUT',\n                body: data\n            })\n        })\n    }\n\n    /**\n     * Get a list of all files uploaded to the application's data folder.\n     */\n    private async listFiles() {\n        await this.waitForLoad;\n        if (!this.isSignedIn) throw Error('Cannot get files when not signed in!');\n\n        return gapi.client.drive.files.list({\n            pageSize: 10,\n            fields: \"nextPageToken, files(id, name, modifiedTime)\",\n            spaces: 'appDataFolder'\n        }).then(function(response) {\n            return response.result.files;\n        });\n    }\n\n    /**\n     * Get the most recent file uploaded to the application's data folder.\n     */\n    private async getLatestBackup(): Promise<gapi.client.drive.File|null> {\n        const files = (await this.listFiles()) || [];\n\n        return files.sort((a, b) => {\n            return new Date(b.modifiedTime || 0).getTime() - new Date(a.modifiedTime || 0).getTime();\n        })[0] || null;\n    }\n\n    /**\n     * Download the given file as a blob. If no file is provided, defaults to the latest version.\n     * @param latest\n     * @private\n     */\n    private async downloadLatestBackup(latest: gapi.client.drive.File|null = null) {\n        latest = latest || await this.getLatestBackup();\n        const user = gapi.auth2.getAuthInstance().currentUser.get();\n        const oauthToken = user.getAuthResponse().access_token;\n\n        if (!latest?.id) {\n            throw Error('Cannot locate latest file for downloading.')\n        } else {\n            return fetch(`https://www.googleapis.com/drive/v3/files/${latest.id}?alt=media`, {\n                headers: {\n                    Authorization: `Bearer ${oauthToken}`\n                }\n            }).then(res => {\n                return res.blob()\n            })\n        }\n    }\n\n    /**\n     * Returns the latest File from GDrive, if an updated version is available. Otherwise, returns null.\n     */\n    public async getLatestUpgrade() {\n        const latest = await this.getLatestBackup();\n        const lastUpdate = localStorage['lastDriveUpdate'] || -1;\n        const driveUpdateTime = new Date(latest?.modifiedTime || 0).getTime();\n\n        return (latest && (driveUpdateTime > lastUpdate)) ? latest : null;\n    }\n\n    /**\n     * Restores the local DB from the given backup stored on GDrive.\n     */\n    public async downloadDB(latest: gapi.client.drive.File) {\n        const driveUpdateTime = new Date(latest?.modifiedTime || 0).getTime();\n\n        return this.downloadLatestBackup(latest).then(async res => {\n            await db.importData(res, () => {\n                localStorage['lastDriveUpdate'] = driveUpdateTime;\n            })\n        });\n    }\n\n    /**\n     * Uploads the local database contents to Google Drive.\n     */\n    public async uploadLocalDB() {\n        // @ts-ignore\n        const blob = await db.toBlob();\n\n        return this.upload(blob, 'application/json').then(async res => {\n            const txt = await res.text();\n            console.debug('Upload result:', txt);\n            localStorage['lastDriveUpdate'] = Date.now();\n            return JSON.parse(txt);\n        }).catch(err => {\n            console.error('Upload error:');\n            console.error(err);\n            return null;\n        });\n    }\n}\n\nconst api = new GoogleApi();\napi.inject();\n\n\n// @ts-ignore\nwindow.google = api;\n\nexport default api;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport {observer} from \"mobx-react-lite\";\nimport Campaign from \"../game/controllers/campaign\";\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport BackupIcon from '@material-ui/icons/Backup';\nimport CloudOffIcon from '@material-ui/icons/CloudOff';\nimport {Button, Dialog, DialogContent, DialogTitle, Fab, InputLabel, Menu, MenuItem, Tooltip} from \"@material-ui/core\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport {InputDialog} from \"./prompts\";\nimport {db} from \"../game/db/database\";\nimport * as download from 'downloadjs';\nimport google from '../game/util/google-api';\n\n\nexport const CampaignSelector = observer((props: {controller: GameController}) => {\n    const [need, setNeed] = React.useState(true);\n    const [wantOpen, setWantOpen] = React.useState(false);\n    const [promptNew, setPromptNew] = React.useState(false);\n    const [campaignList, setList] = React.useState<Campaign[]>([]);\n    const [storage, setStorage] = React.useState({q: 1, u: 0});\n\n    const selectCampaign = React.useMemo(() => {\n        return (camp: Campaign) => {\n            setNeed(false);\n            props.controller.campaign = camp;\n            metadata.store(Meta.CAMPAIGN_CURRENT, camp.id).then();\n            if (props.controller.campaign.loadedBoard) {\n                props.controller.loadBoard(props.controller.campaign.loadedBoard).then();\n            }\n        }\n    }, [props.controller]);\n\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.CAMPAIGN_CURRENT).then(async (id: number) => {\n            if (id === null) return;\n            console.debug('Current campaign:', id);\n            const camp = await CampaignLoader.loadCampaign(id);\n            if (!camp) return;\n            selectCampaign(camp);\n        });\n\n        // Load all available campaigns:\n        CampaignLoader.getAvailable().then(campaigns => setList(campaigns));\n\n        // Lookup used storage:\n        navigator.storage.estimate().then(function(estimate) {\n            const u = estimate.usage;\n            const q = estimate.quota\n            if (u !== undefined && q !== undefined) setStorage({ q, u});\n        });\n    }, [selectCampaign]);\n\n    const addCampaign = async (name: string) => {\n        setPromptNew(false);\n        if (name.trim().length) {\n            const c = await CampaignLoader.createCampaign(name);\n            setList([...campaignList, c]);\n        }\n    }\n\n    const handleModalClose = () => {\n        if (!need) {\n            setWantOpen(false);\n        }\n    }\n\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    return <div className={'menu_button'}>\n        <Tooltip\n            title=\"Campaign Settings\"\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <Fab\n                color=\"primary\"\n                onClick={()=>{setWantOpen(true)}}\n            >\n                <SettingsIcon />\n            </Fab>\n        </Tooltip>\n\n        <Dialog open={need || wantOpen} onClose={handleModalClose}>\n            <DialogTitle style={{textAlign: \"center\"}}>Campaign Info</DialogTitle>\n            <DialogContent style={{textAlign: \"center\"}}>\n                <CampaignMenu campaigns={campaignList} onSelect={selectCampaign} selected={props.controller.campaign}/>\n                <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    onClick={()=>setPromptNew(true)}\n                    startIcon={<AddCircleOutlineIcon />}\n                >\n                    Create New Campaign\n                </Button>\n                <p style={{color: 'gray'}}>\n                    {\n                        storage ?\n                            `${(storage.u/storage.q * 100).toFixed(2)}% used of ${formatBytes(storage.q)}`\n                            : 'Storage metrics unknown'\n                    }\n                </p>\n                <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={exportLocalDB}\n                    startIcon={<SaveAltIcon />}\n                >\n                   Save Backup\n                </Button>\n                <input\n                    id=\"backup-input\"\n                    type=\"file\"\n                    style={{display: \"none\"}}\n                    onChange={restoreLocalDB}\n                    accept={'application/json'}\n                />\n                <Button\n                    variant=\"outlined\"\n                    color=\"default\"\n                    onClick={() => document.getElementById('backup-input')?.click()}\n                    startIcon={<RestoreIcon />}\n                    style={{marginLeft: '2px'}}\n                >\n                    Restore\n                </Button>\n                <h2>Google Drive:</h2>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => google.promptSignIn()}\n                    startIcon={<BackupIcon />}\n                    style={{display: google.isSignedIn ? 'none':''}}\n                >\n                    Sign In\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => google.signOut()}\n                    startIcon={<CloudOffIcon />}\n                    style={{display: google.isSignedIn ? '':'none'}}\n                >\n                    Sign Out\n                </Button>\n            </DialogContent>\n        </Dialog>\n        <InputDialog\n            open={promptNew}\n\t\t\ttitle='New Campaign'\n\t\t\tbody='Enter a name for the new Campaign:'\n\t\t\tacceptText={'Create'}\n\t\t\ttooltip={'Campaign Name'}\n\t\t\tonSubmit={addCampaign}\n\t\t\tonCancel={()=>setPromptNew(false)}\n\t\t/>\n    </div>\n})\n\n\nexport function CampaignMenu(props: {campaigns: Campaign[], onSelect: Function, selected: Campaign|null}) {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [selected, setSelected] = React.useState<Campaign|null>(props.selected);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (campaign: Campaign|null) => {\n        if (campaign) {\n            setSelected(campaign);\n            props.onSelect(campaign);\n        }\n        setAnchorEl(null);\n    };\n\n    const camps = props.campaigns.sort((c1, c2)=>c1.timeCreated-c2.timeCreated).map(c => {\n        return <MenuItem key={c.id} onClick={()=>handleClose(c)}>\n            <b>{c.name}</b>&nbsp;-&nbsp;<i>[{new Date(c.timeCreated).toLocaleString()}]</i>\n        </MenuItem>\n    });\n\n    return (\n        <div style={{marginBottom: '20px'}}>\n            <InputLabel htmlFor='campaign-list-btn'>Current Campaign:</InputLabel>\n            <Button\n                variant='outlined'\n                onClick={handleClick}\n                id={'campaign-list-btn'}\n                disabled={props.campaigns.length===0}\n                style={{maxWidth: '300px', minWidth: '200px', overflowX: 'hidden'}}\n            >\n                {selected? selected.name : (props.campaigns.length ? 'Select a Campaign':'No campaigns exist')}\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={()=>handleClose(null)}\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            >\n                {camps}\n            </Menu>\n        </div>\n    );\n}\n\n\nfunction formatBytes(bytes: number, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Export the full database as a JSON file.\n */\nasync function exportLocalDB() {\n    // @ts-ignore\n    const blob = await db.toBlob();\n\n    // @ts-ignore\n    download(blob, `terra-backup.json`, 'application/json');\n}\n\nasync function restoreLocalDB() {\n    // @ts-ignore\n    const file = document.getElementById('backup-input')?.files[0];\n    await db.importData(file);\n}\n","import React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {Button, Fab, MenuItem, MenuList, Popover, Tooltip, Typography} from \"@material-ui/core\";\nimport MapIcon from '@material-ui/icons/Map';\nimport GameController from \"../game/controllers/game\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport Campaign from \"../game/controllers/campaign\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport notifications from './notifications';\nimport ConfirmPrompt, {InputDialog} from \"./prompts\";\n\n\n\nexport const BoardSelector = observer((props: {controller: GameController}) => {\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n    const campaign = props.controller.campaign;\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    if (!campaign) return null;\n\n    return <div style={{pointerEvents: 'auto',}}>\n        <Tooltip\n            title=\"Selected Board\"\n        >\n            <Fab\n                variant=\"extended\"\n                onClick={(evt: any)=>{setAnchorEl(evt.currentTarget)}}\n                style={{width: '200px', overflowX: 'hidden', marginTop: '5px'}}\n            >\n                <MapIcon style={{marginRight: '5px'}}/>\n                <Typography variant=\"inherit\" noWrap>\n                    {campaign?.loadedBoard ? campaign.loadedBoard : '[Untitled Board]'}\n                </Typography>\n            </Fab>\n        </Tooltip>\n        <Popover\n            open={!!anchorEl}\n            anchorEl={anchorEl}\n            onClose={()=>setAnchorEl(null)}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <BoardControlMenu campaign={campaign} controller={props.controller}/>\n        </Popover>\n    </div>\n});\n\nexport const BoardControlMenu = (props: {controller: GameController, campaign: Campaign}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const handleSelected = (board: string) => {\n        setSelected(board);\n    }\n\n    return <form\n        style={{\n            flexGrow: 1,\n            width: '300px'\n        }}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={e => e.preventDefault()}\n    >\n        <FormGroup row>\n            <BoardSelectMenu campaign={props.campaign} onSelect={handleSelected}/>\n        </FormGroup>\n        <FormGroup row>\n            <BoardLoadButton controller={props.controller} selected={selected} setSelected={setSelected} />\n            <BoardDeleteButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n            <BoardCreateButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n        </FormGroup>\n    </form>\n}\n\n\nexport const BoardSelectMenu = observer((props: {campaign: Campaign, onSelect: Function}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const boards = props.campaign.boards.map(b => {\n        return <MenuItem\n            key={b}\n            onClick={() => {setSelected(b); props.onSelect(b)}}\n            selected={b === selected}\n        >\n            <Typography\n                variant=\"inherit\"\n                noWrap\n                color={b === props.campaign.loadedBoard ? 'textSecondary':'initial'}\n            >\n                {b}\n            </Typography>\n        </MenuItem>\n    });\n\n    return <MenuList style={{maxHeight: '400px',  overflow: 'auto', width: '100%'}}>\n        {boards}\n    </MenuList>;\n});\n\nexport const BoardLoadButton = (props: {controller: GameController, selected: string|null, setSelected: Function}) => {\n    return <Button\n        color=\"primary\"\n        disabled={props.controller.campaign?.loadedBoard === props.selected}\n        onClick={() => {\n            if (props.selected) {\n                props.controller.loadBoard(props.selected).then();\n            }\n        }}\n    >\n        Load\n    </Button>\n};\n\nexport const BoardDeleteButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [confirm, needConfirm] = React.useState(false);\n\n    return <div>\n        <Button\n            disabled={!props.selected}\n            color=\"secondary\"\n            onClick={() => {needConfirm(true)}}\n        >\n            Delete\n        </Button>\n        <ConfirmPrompt\n            open={confirm}\n            onCancel={() => {needConfirm(false)}}\n            onConfirm={() => {\n                if (props.selected) {\n                    props.controller.deleteBoard(props.campaign, props.selected).catch(err => {\n                        notifications.error('Failed to delete board!');\n                        console.error(err);\n                    });\n                    props.setSelected(null);\n                    needConfirm(false);\n                }\n            }}\n            title={'Really delete?'}\n            prompt={`Are you sure you want to delete the board \"${props.selected}\"?`}\n            confirmButton={'Delete'}\n        />\n    </div>\n};\n\nexport const BoardCreateButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [needPrompt, setPrompt] = React.useState(false);\n    const handleCreate = (name: string) => {\n        setPrompt(false);\n        if (props.campaign.boards.includes(name)) {\n            return notifications.error('All board names must be unique!')\n        }\n        if (name && name.trim().length) {\n            props.campaign.boards.push(name);\n            props.setSelected(name);\n            props.controller.loadBoard(name).then();\n        }\n    }\n\n    return <div>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)'}}\n            onClick={() => {\n                setPrompt(true);\n            }}\n        >\n            New\n        </Button>\n        <InputDialog\n            open={needPrompt}\n            title='Create a Board'\n            body='Enter the name for the new Board:'\n            tooltip={'Board name'}\n            acceptText={'Create'}\n            onSubmit={handleCreate}\n            onCancel={handleCreate}\n        />\n    </div>\n};\n","import {observer} from \"mobx-react-lite\";\nimport {CircularProgress, Fab, Tooltip} from \"@material-ui/core\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport hotkeys from \"hotkeys-js\";\nimport google from '../game/util/google-api';\nimport notifications from \"./notifications\";\nimport ConfirmPrompt from \"./prompts\";\n\n\nexport const BoardSaveButton = observer( (props: {controller: GameController}) => {\n    const shouldSave = props.controller.campaign?.loadedBoard &&\n        (props.controller.entities.isDirty || props.controller.terrain.isBoardDirty);\n    const [saving, setSaving] = React.useState(false);\n    const [dbUpdate, setUpdate] = React.useState<any>(null);\n\n    const saveBoard = React.useMemo(() => {\n        if (!shouldSave) return ()=>{};\n        return async () => {\n            if (netMode.get() !== NetworkMode.HOST) return;\n            setSaving(true);\n            await props.controller.saveBoard();\n            if (google.isSignedIn) {\n                await google.uploadLocalDB();\n            }\n            setSaving(false);\n        }\n    }, [props.controller, shouldSave]);\n\n    React.useMemo(() => {\n        // Check for updated DB files in Google Drive whenever a user connects their account:\n        google.onSignInChange(async (loggedIn: boolean) => {\n            if (loggedIn) {\n                const latest = await google.getLatestUpgrade();\n                if (latest) {\n                    setUpdate(latest);\n                } else {\n                    notifications.info('Local save up to date!');\n                }\n            } else {\n                notifications.warning('Not syncing with Google Drive.');\n            }\n        })\n    }, [])\n\n    React.useEffect(() => {\n        // Enable hotkey for saving:\n        hotkeys('ctrl+s', (event, handler) => {\n            event.preventDefault();\n            event.stopPropagation();\n            saveBoard();\n        });\n\n        return () => {\n            hotkeys.unbind('ctrl+s');\n        }\n    }, [props.controller, saveBoard])\n\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    let title = shouldSave ? \"Save Board (ctrl+s)\" : \"No changes to save.\";\n\n    if (saving) title = 'Save in progress...';\n\n    return <div>\n        <Tooltip\n            title={title}\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <span>\n                <Fab\n                    color=\"primary\"\n                    onClick={saveBoard}\n                    disabled={!shouldSave}\n                >\n                    {saving ? <CircularProgress /> : <SaveIcon />}\n                </Fab>\n            </span>\n        </Tooltip>\n        <ConfirmPrompt\n            open={!!dbUpdate}\n            onCancel={()=>setUpdate(null)}\n            onConfirm={()=>{\n                console.log('Updating from GDrive...');\n                google.downloadDB(dbUpdate).then();\n                setUpdate(null);\n            }}\n            title={'Database Update'}\n            prompt={'You have a recently updated save stored in Google Drive. Which version would you prefer to use?'}\n            confirmButton={'Google Drive'}\n            cancelButton={'Local Save'}\n        />\n    </div>\n});\n","import React from 'react';\nimport './styles/App.scss';\nimport './styles/canvas-style.scss';\nimport GameController from \"./game/controllers/game\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {Typography} from \"@material-ui/core\";\nimport ControlMenu from \"./ui-components/controlMenu\";\nimport {observer} from \"mobx-react-lite\";\nimport ConnectionOverlay from \"./ui-components/connectionOverlay\";\nimport {SnackbarProvider} from 'notistack';\nimport * as connection from \"./game/net/peerconnection\";\nimport {NetworkMode} from \"./game/net/peerconnection\";\nimport {SnackbarUtilsConfigurator} from \"./ui-components/notifications\";\nimport {Meta, metadata, currentUsername} from './game/db/metadata-db';\nimport {CampaignSelector} from \"./ui-components/campaignSelector\";\nimport {BoardSelector} from \"./ui-components/boardSelector\";\nimport {BoardSaveButton} from \"./ui-components/boardSaveButton\";\nimport {InputDialog} from \"./ui-components/prompts\";\nimport {YoutubePlayerInterface} from \"./ui-components/youtubePlayer\";\n\n\nif (!('PointerEvent' in window)) {\n    alert('This browser does not support pointer events - please use a different one!');\n}\n\nconst controller = new GameController();\n\nif (process.env.NODE_ENV !== 'development' && !window.location.href.includes('unstable')) {\n    console.info('Shutting the console up for non-dev build.');\n    function noop() {}\n    const oldConsole = Object.assign({}, console);\n    // @ts-ignore\n    window.restoreLog = () => {\n        Object.assign(console, oldConsole);\n    };\n    console.debug = noop;\n    console.log = noop;\n    console.info = noop;\n}\n\nconst App = observer(() => {\n    const desktop = useMediaQuery('(min-width:900px)');\n    const [needName, setNeedName] = React.useState(false);\n    const setName = async (name: string) => {\n        if (name && name.length) {\n            setNeedName(false);\n            currentUsername.set(name);\n            await metadata.store(Meta.USERNAME, name);\n            await controller.start();\n        } else {\n            window.location.reload();\n        }\n    }\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.USERNAME).then(async (name: string) => {\n            if (name && name.length) {\n               currentUsername.set(name);\n               setNeedName(false);\n               await controller.start();\n            } else {\n                setNeedName(true);\n            }\n        })\n    }, []);\n\n    let content: JSX.Element|null = null;\n\n    if (needName) {\n        content = <InputDialog\n            open={needName}\n            title='Choose a Name'\n            body='Enter the name you want to go by:'\n            tooltip={'Name'}\n            onSubmit={setName}\n            onCancel={setName}\n        />;\n    } else if (!controller.ready && connection.netMode.get() === NetworkMode.UNKNOWN) {\n        content = <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                Loading <CircularProgress color=\"inherit\" />\n            </Typography>\n        </Backdrop>;\n    } else if (controller.isNetworkReady) {\n        content = <ControlMenu controller={controller} forMobile={!desktop}/>\n    } else if (!controller.isNetworkReady) {\n        content = <ConnectionOverlay controller={controller} />;\n    }\n\n    return (\n        <SnackbarProvider maxSnack={5}>\n            <SnackbarUtilsConfigurator />\n            <div className=\"App noMouse\">\n                <div style={{\n                    display: 'flex',\n                    pointerEvents: 'none',\n                    flexDirection: 'row',\n                    position: 'fixed',\n                    top: '10px',\n                    left: '10px'\n                }}>\n                    <CampaignSelector controller={controller}/>\n                    <BoardSelector controller={controller}/>\n                    <BoardSaveButton controller={controller} />\n                    <YoutubePlayerInterface />\n                </div>\n\n                {content}\n            </div>\n        </SnackbarProvider>\n    )\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app waitForSpriteLoad faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'mobx-react-lite/batchingForReactDom'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/web-ui/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/web-ui/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/web-ui/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/web-ui/src/game/data/board-packer.worker.ts\")());module.exports.__esModule = true;"],"sourceRoot":""}