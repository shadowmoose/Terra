{"version":3,"sources":["game/net/messageEncoder.worker.ts","resources/sheet-composite.enc.png","game/util/unscramble.js","webpack:///./src/game/net/messageEncoder.worker.ts?773d","webpack:///./src/game/data/board-packer.worker.ts?e9c0","game/util/sprite-loading.ts","game/net/packets/packet-list.ts","ui-components/notifications.ts","game/net/handlers/handler.ts","game/data/protobufs/proto-wrapper.ts","game/data/protobufs/proto-sprite.ts","game/data/protobufs/proto-entity.ts","game/data/protobufs/proto-tiles.ts","game/net/packets/terrainPackets.ts","game/net/packets/entityPackets.ts","game/net/packets/util-packets.ts","game/net/packets/media-packets.ts","game/net/packets/measure-packets.ts","game/net/messageEncoder.ts","game/util/promiseStream.ts","game/db/database.ts","game/db/metadata-db.ts","game/net/peerconnection.ts","game/data/interfaces/tile.ts","game/net/handlers/terrain-add-handler.ts","game/net/handlers/terrain-erase-handler.ts","game/renderer/ui-data/globals.ts","game/renderer/ui-data/ui-util.ts","game/renderer/ui-data/ui-event-stream.ts","game/renderer/ui-data/image-loader.ts","game/renderer/ui-components/ui-terrain.ts","game/controllers/terrain.ts","game/net/handlers/entity-update-handler.ts","game/renderer/ui-components/ui-name-plate.ts","game/renderer/ui-components/ui-entity.ts","game/controllers/entities.ts","game/net/prechecks/precheck.ts","game/db/user-db.ts","game/net/prechecks/signature-check.ts","game/net/prechecks/board-sync-check.ts","game/controllers/lobby.tsx","game/net/handlers/ping-handler.ts","game/db/board-db.ts","game/controllers/campaign.ts","game/util/deproxy.ts","game/db/campaign-db.ts","game/data/campaign-loader.ts","game/net/handlers/board-reload-handler.ts","ui-components/prompts.tsx","ui-components/youtubePlayer.tsx","game/net/handlers/media-sync-handler.ts","game/net/prechecks/media-sync.ts","game/renderer/ui-components/ui-grid.ts","game/renderer/ui-components/ui-tooltip.ts","game/renderer/index.ts","game/renderer/ui-components/ui-shape.ts","game/renderer/ui-components/ui-marker.ts","game/net/handlers/measure-handler.ts","game/controllers/game.ts","ui-tools/ui-tool.tsx","game/middleware/middleware.ts","game/middleware/pen-events.ts","ui-components/spritepicker.tsx","game/consts.ts","ui-tools/ui-pen-tool.tsx","game/middleware/entity-events.ts","ui-tools/ui-camera-tool.tsx","ui-tools/ui-eraser-tool.tsx","ui-tools/ui-entity-tool.tsx","ui-tools/ui-lobby-tool.tsx","game/middleware/measure-events.ts","ui-tools/ui-measure-tool.tsx","ui-components/controlMenu.tsx","ui-components/loginHelper.tsx","ui-components/connectionOverlay.tsx","game/util/google-api.ts","ui-components/campaignSelector.tsx","game/data/local-storage.ts","ui-components/boardSelector.tsx","ui-components/boardSaveButton.tsx","ui-components/preferencesMenu.tsx","App.tsx","serviceWorker.ts","index.tsx","game/data/board-packer.worker.ts"],"names":["module","exports","wrap","__esModule","shuffleSeed","require","img","sliceSize","seed","bmp","i","ctx","totalParts","Math","ceil","width","height","inds","push","canvas","document","createElement","getContext","verticalSlices","getGroup","slices","self","length","cols","t","y","getColsInGroup","rows","x","slice","row","parseInt","col","getSlices","g","group","shuffleInd","shuffle","s","drawImage","Worker","fpsTicker","rawData","unscramble","data","sheet","spriteWidth","metadata","spriteHeight","globalFrameIndex","waitForSpriteLoad","Promise","res","Image","onerror","err","console","error","alert","onload","process","src","sheetSRC","clearInterval","setInterval","findSpriteData","key","id","startsWith","animated","images","name","ret","sprites","Error","composite","snackbarRef","Sprite","idx","this","frame","drawImageTo","mkKey","blocker","imgs","uid","source","map","atlas","px","py","w","h","Handler","packets","isHost","client","packet","hostHandler","clientHandler","SnackbarUtilsConfigurator","useSnackbar","success","msg","options","toast","variant","warning","info","enqueueSnackbar","close","closeSnackbar","ProtoWrapper","values","Object","assign","Message","ProtoSprite","Type","d","Field","ProtoEntity","ProtoTile","ProtoTileStack","ProtoBoard","TerrainAddPacket","TerrainCoordPacket","TerrainErasePacket","EntityUpdatePacket","EntityDeletePacket","PingPacket","SignaturePacket","ReadyPacket","MediaStatusPacket","MediaRequestPacket","MeasurePacket","packetList","packetMap","$type","encode","a","constructor","worker","decode","clazz","PromiseStream","maxBackpressure","prom","resolve","backPressure","fn","onError","then","catch","db","boards","campaigns","users","version","stores","table","cb","debug","delete","importDB","log","window","location","href","split","exportDB","prettyJson","progressCallback","progress","Dexie","copyOldDB","newDB","dbName","tableName","newTable","exists","open","tables","tbl","toArray","ele","add","on","count","Meta","currentUsername","observable","box","JSON","where","first","val","parse","value","put","stringify","NetworkStatus","NetworkMode","get","store","handlers","preConn","clients","Set","sb","netStatus","IDLE","netMode","UNKNOWN","setHandlers","newHandlers","newPreConn","getSeed","CERT_SEED","Switchboard","makeSeed","getMyID","useLongform","fullID","peerID","getIdFromSeed","makeSB","kill","connectTo","hostID","setMode","CLIENT","RECONNECTING","set","CONNECTING","peer","notifications","Client","clientError","WAITING_FOR_HOST","pc","run","verified","CONNECTED","DISCONNECTED","findHost","warn","removeClient","openHost","HOST","cli","userData","username","preventDuplicate","host","forEach","p","undefined","mode","listener","lastSend","stream","keyCodes","lastSeen","pingTimer","lastPing","hook","isClosed","Date","now","send","queue","handleMessage","packetBinary","encoder","Uint8Array","some","handlePacket","e","clearTimeout","sendBuffer","expectedType","rej","broadcast","requireHost","skip","c","Tile","sprite","z","TerrainAddHandler","terrain","tileStacks","stack","tiles","removeAt","dt","sp","spriteIdx","placeAt","setTimeout","broadcastChanges","pollChanges","packedStacks","updateTiles","splice","packer","TerrainEraseHandler","coords","size","tep","Array","from","clear","OVERLAY_DEPTHS","CULLER","Cull","TERRAIN_LAYER","Container","ENTITY_LAYER","OVERLAY_LAYER","forceNextCull","setForceCull","dirty","debugCullStats","stats","collides","r1","r2","combinedHalfWidths","combinedHalfHeights","vx","vy","centerX","centerY","halfWidth","halfHeight","abs","EVENT_STREAM","events","history","permanentHandlers","event","callback","useHistory","hasOwnProperty","unsub","listeners","l","handler","keys","k","ev","lx","ly","updateHover","tx","max","min","GRID_DIMENSIONS","floor","getLocalPosition","ty","emit","hitArea","PIXI","interactive","position","debugEvents","evName","cache","gifCache","makeTexture","texture","loader","Loader","can","imageSmoothingEnabled","Texture","resource","toLowerCase","onComplete","resources","load","message","makeFailTexture","destroy","releaseGif","gifURI","loaded","releaseTexture","r","txt","removeFromCache","makeFailImage","fillStyle","fillRect","strokeStyle","lineWidth","moveTo","lineTo","stroke","resizeCanvas","input","can2","ctx2","globalAlpha","loadFramesFromGif","frames","fetch","replace","resp","arrayBuffer","buff","parseGIF","gif","decompressFrames","iDat","dims","createImageData","disposalType","clearRect","patch","putImageData","delay","cached","debugImageCache","sortableChildren","sortTimers","getAt","all","sort","t1","t2","tz","zIndex","scheduleSort","sortAt","UiTile","texID","txtID","removeChild","children","addTerrain","texKey","tile","addChild","erase","debugTerrainList","Terrain","tileIDX","TERRAIN","sendTerrainRemove","isBoardDirty","selectedSprite","existing","isBlocker","filter","textureData","sendTerrainAdd","newTerrain","b","EntityUpdateHandler","entities","ent","updateEntity","addEntity","entityID","remove","entityIsOwned","sendUpdate","getEntity","entity","canMove","visible","proto","owners","defaultStyle","fontFamily","fontSize","fill","plates","shiftPlates","p1","p2","dy","plate","dx","util","moveBkg","UiNamePlate","text","TextStyle","added","bkg","Graphics","resolution","NAMEPLATE","roundPixels","color","style","calculateBounds","round","beginFill","drawRect","endFill","baseTexture","Text","UiEntity","WHITE","autoFlip","textureIDs","destroyed","currentGif","animationSpeed","setAnimationSpeed","tileX","tileY","play","scale","anchor","place","GRID_TILE_PX","stop","setColor","hidden","alpha","setName","show","setVisible","textures","newIDs","newGifUri","loadedGif","tid","find","_durations","gotoAndPlay","multiplier","AnimatedSprite","createEntity","setTextures","releaseEntity","debugEntityList","Entity","init","uuid","includes","EntityLayer","ENTITIES","isDirty","sendDelete","selected","opts","setHidden","setShowName","showNames","entEle","checkOwner","props","oldSprite","getEntityList","PreCheck","controller","runHandler","bind","addNewUser","user","getTime","updateUser","update","getUser","checkUserCredentials","userName","keyCode","match","HandShakeCheck","USERNAME","getNextPacket","lobby","addPendingLogin","BoardSync","buildProtoBoard","Lobby","blacklist","title","body","iconURL","Notification","requestPermission","result","icon","approve","reject","pendingLogins","pe","pending","removePending","has","tID","action","Button","onClick","approveUser","notify","findIndex","u","PingHandler","handlePing","save","campaignID","board","navigator","storage","persist","getAvailable","between","minKey","maxKey","deleteBoard","Campaign","shallow","timeCreated","stripProxy","obj","entries","v","saveCampaign","camp","createCampaign","getAllCampaigns","getCampaign","mapToClass","CampaignLoader","campaign","boardDB","loadedBoard","characters","BoardReloadHandler","loadFromProtoBoard","InputDialog","React","useState","setText","handleClose","onCancel","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","tooltip","type","fullWidth","onChange","target","DialogActions","onSubmit","acceptText","ConfirmPrompt","aria-describedby","className","prompt","cancelButton","onConfirm","confirmButton","PLAYER_OPTS","playerVars","autoplay","mute","config","object","volume","loop","saveConf","YT_PLAYER_CONFIG","player","getPlayerStatus","currentVideo","getVideoData","video_id","currentTime","getCurrentTime","playbackRate","getPlaybackRate","paused","getPlayerState","YouTube","PlayerState","PAUSED","YoutubePlayerInterface","observer","useMemo","tools","ShuffleButton","pointerEvents","Tooltip","Fab","YoutubePlayer","mediaPlayer","setPlayer","useEffect","timer","getVolume","PLAYING","onReady","onPlay","stat","onPause","nextVideo","onStateChange","CUED","setLoop","setShuffle","setVolume","getPlaylist","playVideoAt","playVideo","LoadPlaylistButton","needPrompt","URLSearchParams","cuePlaylist","list","listType","index","startSeconds","LoadVideoButton","parser","substring","lastIndexOf","indexOf","time","cueVideoById","IconButton","MediaSyncHandler","pauseVideo","setPlaybackRate","videoId","status","MediaSync","SCALE_MODE","NEAREST","grid","render","dim","pow","findPow","makeGridTexture","showGrid","debugGridToggle","cx","cy","setTilePos","setSize","draw","lineStyle","TOOLTIP","zoomEnabled","app","resizeTo","backgroundColor","view","classList","appendChild","addEventListener","preventDefault","SHAPE_TYPES","viewport","Viewport","screenWidth","offsetWidth","screenHeight","offsetHeight","worldWidth","worldHeight","fireMouseEvent","bounds","getBoundingClientRect","clientX","left","clientY","top","screenWidthInWorldPixels","screenHeightInWorldPixels","toggleViewportInput","enabled","pause","getCenterViewportTile","updateInPage","center","resize","moveCenter","WORLD_SIZE_PX","stage","drag","bounce","wheel","smooth","decelerate","friction","clamp","direction","clampZoom","minScale","maxScale","GRID","addContainer","cull","getVisibleBounds","shared","button","UiShape","gr","_type","_thickness","_color","_fill","_alpha","_width","_height","SHAPES","redraw","widthTiles","heightTiles","thickness","circle","drawCircle","pivot","rectangle","cone","drawPolygon","setPos","nx","ny","xd","yd","radians","rotation","border","fillAlpha","snap","snapRads","slideCone","rad","atan2","setRotation","tw","th","UiMarker","textOpts","background","bgAlpha","MARKER_BKG","MARKER_TXT","updatePosition","MeasureHandler","handleShape","pkt","exist","userShapes","marker","shape","angle","setPosPx","setFillColor","displayMeasures","sendMeasure","getGraphicDetails","getType","dimensions","m","GameController","preChecks","RENDER","hash","startHost","startClient","ready","pushState","connection","pu","rejectUser","setHost","connectID","pb","setDirectMap","includeHidden","getDirectMap","flat","UITool","Middleware","hooks","setActive","onCleanup","register","isShiftDown","ke","code","active","onShiftPress","onShiftRelease","PEN_STATE","middle","PenMiddleware","canUsePen","state","NONE","penSize","DRAW","ERASE","wheelCB","contains","shiftKey","out","sign","deltaY","setPenSize","removeEventListener","eraseAt","drawAt","op","xx","yy","SpritePicker","defaultTerm","searchTerm","setSearch","setAnimated","setSprites","timeout","getFavorites","forEntity","fe","results","term","nameOnly","favorites","seen","search","o","path","f","comparatorId","searchImages","maxWidth","noValidate","autoComplete","FormGroup","Autocomplete","selectOnFocus","freeSolo","inputValue","onInputChange","newInputValue","onSearch","renderInput","params","FormControlLabel","control","Switch","checked","disabled","canAnimate","inputProps","labelPlacement","SpriteGrid","onSelect","perRow","rowCount","columnCount","columnWidth","rowHeight","maxHeight","spr","columnIndex","rowIndex","SpriteImage","canv","useRef","sel","isGif","current","drawTo","cancel","FavoriteSpriteButton","alt","ref","isFavorite","setIsFavorite","isHovered","setIsHovered","getIsFavorite","fav","cursor","onMouseEnter","onMouseLeave","setFavorite","cachedFavorites","isForEntity","tag","FAVORITE_SPRITES","favorite","useStyles","makeStyles","theme","createStyles","paper","palette","boxShadow","shadows","padding","spacing","minWidth","transform","SpritePickerModal","classes","gifUrl","setGifUrl","Modal","currentSprite","marginTop","trim","UIPenTool","middleware","forMobile","PenControlInterface","pen","attach","eject","PenSizeSlider","Typography","gutterBottom","Slider","getAriaValueText","valueLabelDisplay","step","marks","newValue","EntityMiddleware","movePoints","moveTrackers","trg","addPoint","clearMovers","mp","last","pathLength","checkDiag","third","distance","reduce","prev","next","dst","sqrt","UICameraTool","UIEraserTool","EraserSizeSlider","UIEntityTool","EntityEditorInterface","root","flexGrow","speedDial","bottom","right","spriteColor","marginLeft","marginRight","promptSprite","setSpritePrompt","setSprite","entName","loadExisting","setLoadExisting","resetValues","EntityEditInterface","evt","Checkbox","justifyContent","CampaignCharacterSelector","promptClone","setClonePrompt","updateCampaign","updateInstant","clientNames","cl","userList","saveToCampaign","InputLabel","Select","multiple","Input","renderValue","join","marginBottom","MenuItem","ListItemText","primary","select","setEntitySprite","PromptForNumber","num","cloneEntity","setSelected","getSelected","cha","setNum","ext","campUpdateTimer","savedIdx","newData","UILobbyTool","LobbyInterface","rel","PendingList","UserList","eles","pl","MenuList","PendingUserEle","disableTouchRipple","stopPropagation","network","dat","MeasureMiddleware","measure","counter","dot","moving","setShape","shapeType","sentUpdate","pxd","td","pointTowards","sizePx","UIMeasuretool","MeasureUI","Radio","RadioGroup","aria-label","ControlMenu","ui","setOpen","modalOpen","setModalOpen","setTools","selectedTool","handleModalClose","handleSelect","unregister","hotkeys","tool","isOption","unbind","newTools","emb","getControlUI","Avatar","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","tooltipOpen","LoginHelper","promptLogin","setPrompt","needClient","setNeedClient","PromptNetwork","hosting","ConnectionOverlay","content","MATCHMAKING_FAIL","Backdrop","transitionDuration","component","api","injected","apiReady","apiFailed","waitForLoad","fail","script","gapi","clientId","discoveryDocs","scope","auth2","getAuthInstance","isSignedIn","listen","localStorage","signIn","signOut","mimeType","currentUser","oauthToken","getAuthResponse","access_token","getLatestBackup","latest","latestID","parents","method","headers","Authorization","loc","drive","files","pageSize","fields","spaces","response","listFiles","modifiedTime","blob","lastUpdate","driveUpdateTime","downloadLatestBackup","importData","toBlob","upload","inject","google","CampaignSelector","need","setNeed","wantOpen","setWantOpen","promptNew","setPromptNew","campaignList","setList","q","setStorage","selectCampaign","CAMPAIGN_CURRENT","loadBoard","loadCampaign","estimate","usage","quota","addCampaign","textAlign","CampaignMenu","startIcon","toFixed","bytes","decimals","dm","sizes","parseFloat","formatBytes","exportLocalDB","display","restoreLocalDB","accept","getElementById","click","promptSignIn","anchorEl","setAnchorEl","camps","c1","c2","toLocaleString","htmlFor","currentTarget","overflowX","Menu","keepMounted","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","download","file","STORAGE","BoardSelector","noWrap","Popover","BoardControlMenu","BoardSelectMenu","overflow","BoardLoadButton","BoardDeleteButton","confirm","needConfirm","BoardCreateButton","handleCreate","BoardSaveButton","shouldSave","saving","setSaving","dbUpdate","setUpdate","saveBoard","uploadLocalDB","autoHideDuration","onSignInChange","loggedIn","getLatestUpgrade","CircularProgress","downloadDB","def","getItem","setItem","PreferencesButton","LS","SHOW_GRID","showMeasures","SHOW_MEASURES","setDisplayNamePlates","SHOW_NAMES","toString","GridSwitch","useGrid","setGrid","NameSwitch","useName","setNames","MeasureSwitch","useMeasure","ZoomSlider","setScale","updateScale","setZoom","NameChange","showPrompt","setShowPrompt","reload","noop","oldConsole","debugRestoreLog","App","desktop","useMediaQuery","needName","setNeedName","start","isNetworkReady","maxSnack","flexDirection","isLocalhost","hostname","registerValidSW","swUrl","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","ReactDOM","needReload","URL","origin","contentType","checkValidServiceWorker","waiting","postMessage"],"mappings":"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","file":"static/js/main.0b9ad91c.chunk.js","sourcesContent":["module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/src/game/net/messageEncoder.worker.ts\")());module.exports.__esModule = true;","module.exports = __webpack_public_path__ + \"static/media/sheet-composite.enc.c54111ee.png\";","/*\n * converted from https://www.npmjs.com/package/image-scramble\n */\nvar shuffleSeed = require('shuffle-seed');\n\nvar self = function(img,sliceSize,seed,bmp){\n\tvar i;\n\tvar totalParts = Math.ceil(img.width/sliceSize)*Math.ceil(img.height/sliceSize);\n\tvar inds = [];\n\tvar ctx;\n\tfor(i=0;i<totalParts;i++) inds.push(i);\n\tif(!bmp){\n\t\tvar canvas=document.createElement(\"canvas\");\n\t\tctx=canvas.getContext('2d');\n\t\tcanvas.width=img.width;\n\t\tcanvas.height=img.height;\n\t}\n\n\n\tvar verticalSlices=Math.ceil(img.width/sliceSize);\n\n\tvar getSlices = function(){\n\t\tvar slices = {};\n\t\tvar i;\n\t\tfor(i=0;i<totalParts;i++){\n\t\t\tvar slice = {};\n\t\t\tvar row=parseInt(i/verticalSlices);\n\t\t\tvar col=i-row*verticalSlices;\n\t\t\tslice.x=col*sliceSize;\n\t\t\tslice.y=row*sliceSize;\n\t\t\tslice.width=(sliceSize-(slice.x+sliceSize<=img.width ?  0 : (slice.x+sliceSize)-img.width));\n\t\t\tslice.height=(sliceSize-(slice.y+sliceSize<=img.height ?  0 : (slice.y+sliceSize)-img.height));\n\t\t\tif(!slices[slice.width+\"-\"+slice.height]) slices[slice.width+\"-\"+slice.height]=[];\n\t\t\tslices[slice.width+\"-\"+slice.height].push(slice);\n\t\t}\n\t\treturn slices;\n\t}\n\n\tvar getColsInGroup = function(slices){\n\t\tif(slices.length===1) return 1;\n\t\tvar t = 'init';\n\t\tfor(var i=0;i<slices.length;i++){\n\t\t\tif(t==='init') t = slices[i].y;\n\t\t\tif(t!==slices[i].y){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t}\n\n\tvar getGroup = function(slices){\n\t\tvar self = {};\n\t\tself.slices = slices.length;\n\t\tself.cols = getColsInGroup(slices);\n\t\tself.rows = slices.length/self.cols;\n\t\tself.width = slices[0].width*self.cols;\n\t\tself.height = slices[0].height*self.rows;\n\t\tself.x = slices[0].x;\n\t\tself.y = slices[0].y;\n\t\treturn self;\n\t}\n\n\tvar slices = getSlices();\n\tfor(var g in slices){\n\t\tvar group = getGroup(slices[g]);\n\t\tvar shuffleInd = [];\n\t\tfor(i=0;i<slices[g].length;i++) shuffleInd.push(i);\n\t\tshuffleInd = shuffleSeed.shuffle(shuffleInd,seed);\n\t\tfor(i=0;i<slices[g].length;i++){\n\t\t\tvar s=shuffleInd[i];\n\n\t\t\tvar row=parseInt(s/group.cols);\n\t\t\tvar col=s-row*group.cols;\n\t\t\tvar x=col*slices[g][i].width;\n\t\t\tvar y=row*slices[g][i].height;\n\n\t\t\tctx.drawImage(\n\t\t\t\timg,\n\t\t\t\tgroup.x+x,\n\t\t\t\tgroup.y+y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height,\n\t\t\t\tslices[g][i].x,\n\t\t\t\tslices[g][i].y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height\n\t\t\t);\n\t\t}\n\t}\n\treturn canvas;\n}\n\nmodule.exports=self;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"a2c88eea25f722e5640b.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"2b618f774c2ce2f215f0.worker.js\");\n};","import sheetSRC from '../../resources/sheet-composite.enc.png';\nimport {SpriteInterface} from \"../data/interfaces/sprite\";\nimport {TextureKey} from \"../renderer/ui-data/globals\";\nconst rawData = require('../../resources/sheet-data.json');\nconst unscramble = require('./unscramble');\n\ninterface DataSheet {\n\tmetadata: {\n\t\twidth: number;\n\t\theight: number;\n\t\tcount: number;\n\t\tuid: string;\n\t};\n\tsprites: Record<string, DataSprite>;\n}\n\ninterface DataSprite {\n\tname: string;\n\tanimated?: number;\n\timages: DataImage[];\n}\n\ninterface DataImage {\n\tx: number;\n\ty: number;\n\tblocker: boolean;\n}\n\nconst data: DataSheet = rawData;  // Type casting here for clarity.\nlet sheet: HTMLCanvasElement = document.createElement('canvas');\nlet spriteWidth: number = data.metadata.width;\nlet spriteHeight: number = data.metadata.height;\nlet globalFrameIndex: number = 0;\nlet fpsTicker: NodeJS.Timeout;\n\nexport const waitForSpriteLoad: Promise<HTMLCanvasElement> = new Promise(res => {\n\tconst img = new Image();\n\timg.onerror = (err: any) => {\n\t\tconsole.error(err);\n\t\talert('Failed to load sprite sheet! \\nTry hard reloading the page (ctrl+F5).');\n\t};\n\timg.onload = () => {\n\t\tsheet = unscramble(img, 24, process.env.REACT_APP_SPRITE_KEY); // Support the artists - buy from them!\n\t\tres(sheet);\n\t};\n\timg.src = sheetSRC;\n\n\tclearInterval(fpsTicker);\n\tfpsTicker = setInterval(() => {\n\t\tglobalFrameIndex++;\n\t\tglobalFrameIndex %= 1000;\n\t}, 200);\n});\n\n/**\n * Locates the metadata for a given Sprite. Raises an Error if the key cannot be found.\n * @param key\n */\nfunction findSpriteData(key: Sprite): DataSprite {\n\tif (key.id.startsWith(\"gif:\")) {\n\t\treturn {\n\t\t\tanimated: -1,\n\t\t\timages: [],\n\t\t\tname: \"loaded gif\"\n\t\t}\n\t}\n\tconst ret = data.sprites[key.id];\n\tif (!ret) throw Error(`Unable to locate sprite for key: ${key.composite}`);\n\treturn ret;\n}\n\n/**\n * Render the image, denoted by the given Sprite, to the given Graphics 2D context.\n * @param ctx\n * @param key\n * @param x\n * @param y\n */\nfunction drawImageTo(ctx: CanvasRenderingContext2D, key: Sprite, x: number, y: number) {\n\tconst sprites = findSpriteData(key);\n\tconst img = key.idx < 0 ? sprites.images[globalFrameIndex % sprites.images.length] : sprites.images[key.idx];\n\n\tctx.drawImage(sheet, img.x, img.y, spriteWidth, spriteHeight, x, y, spriteWidth, spriteHeight);\n}\n\n\n/** Search for images matching the given term. */\nexport function searchImages(term: string, animated: boolean = false, nameOnly: boolean = false, favorites?: SpriteInterface[]) {\n\tconst res: Sprite[] = [];\n\tconst seen: Record<string, boolean> = {};\n\n\tconst search = Object.entries(data.sprites).filter( (obj) => {\n\t\tif (animated && !obj[1].animated) {\n\t\t\treturn false;\n\t\t}\n\t\tif (nameOnly) {\n\t\t\treturn obj[1].name.includes(term);\n\t\t}\n\n\t\treturn obj[0].includes(term.toLowerCase())\n\t}).map(o => ({ path: o[0], sprite: o[1]}));\n\n\tfavorites?.forEach(f => {\n\t\tlet comparatorId = f.id;\n\t\tif (comparatorId.startsWith(\"gif:\")) {\n\t\t\tcomparatorId = \"loaded gif\";\n\t\t}\n\t\tif (comparatorId.includes(term.toLowerCase())) {\n\t\t\tres.push(new Sprite(f.id, f.idx));\n\t\t\tseen[f.id+\":\"+f.idx] = true;\n\t\t}\n\t});\n\n\tif (!animated) {\n\t\tsearch.forEach(o => {\n\t\t\tfor(let i=0; i < o.sprite.images.length; i++) {\n\t\t\t\tif (!seen[o.path+ \":\" + i]) {\n\t\t\t\t\tres.push(new Sprite(o.path, i));\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t} else {\n\t\tsearch.forEach(o => {\n\t\t\tif (!seen[o.path+\":-1\"]) {\n\t\t\t\tres.push(new Sprite(o.path, -1));\n\t\t\t}\n\t\t})\n\t}\n\n\treturn res;\n}\n\n/**\n * Sprites are used to concisely represent an image (by ID) from the datasheet,\n * as well as which index to use for animating.\n */\nexport class Sprite implements SpriteInterface {\n\tpublic readonly id: string;\n\tpublic readonly idx: number;\n\n\tconstructor(id: string, idx: number) {\n\t\tthis.id = id;\n\t\tthis.idx = idx;\n\t}\n\n\tget composite(): string {\n\t\treturn this.mkKey(this.idx);\n\t}\n\n\tget animated(): boolean {\n\t\treturn this.idx < 0;\n\t}\n\n\tget isBlocker(): boolean {\n\t\tif (this.idx < 0) return false;\n\t\treturn findSpriteData(this).images[this.idx].blocker;\n\t}\n\n\tget name(): string {\n\t\treturn findSpriteData(this).name;\n\t}\n\n\t/** Generates a unique ID for this sprite, which can be transmitted as needed. */\n\tprivate mkKey(frame: number) {\n\t\treturn `${this.id}:${frame}`;\n\t}\n\n\tpublic drawTo(ctx: CanvasRenderingContext2D, x: number, y: number) {\n\t\tdrawImageTo(ctx, this, x, y);\n\t}\n\n\t/**\n\t * Get the data required for the Renderer to create a Texture from this Sprite.\n\t */\n\tget textureData(): TextureKey[] {\n\t\tconst sprites = findSpriteData(this);\n\t\tconst imgs = this.idx < 0 ? sprites.images : [sprites.images[this.idx]];\n\n\t\tif (this.id.startsWith(\"gif:\")) {\n\t\t\treturn [{\n\t\t\t\tuid: this.id,\n\t\t\t\tsource: waitForSpriteLoad\n\t\t\t}]\n\t\t}\n\n\t\treturn imgs.map((img, idx) => {\n\t\t\treturn {\n\t\t\t\tuid: this.mkKey(this.idx < 0 ? idx : this.idx),\n\t\t\t\tatlas: waitForSpriteLoad,\n\t\t\t\tpx: img.x,\n\t\t\t\tpy: img.y,\n\t\t\t\tw: spriteWidth,\n\t\t\t\th: spriteHeight\n\t\t\t}\n\t\t})\n\t}\n}\n","import {TerrainAddPacket, TerrainErasePacket} from \"./terrainPackets\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard, ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"./entityPackets\";\nimport {PingPacket, ReadyPacket, SignaturePacket} from \"./util-packets\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"./media-packets\";\nimport {MeasurePacket} from \"./measure-packets\";\n\n/**\n * The order of this list is important, as the index represents the packet ID for messages and saved boards.\n */\nexport const packetList: typeof ProtoWrapper[] = [\n    SignaturePacket,\n    ReadyPacket,\n    TerrainErasePacket,\n    TerrainAddPacket,\n    ProtoBoard,\n    ProtoTileStack,\n    EntityUpdatePacket,\n    EntityDeletePacket,\n    PingPacket,\n    MediaStatusPacket,\n    MediaRequestPacket,\n    MeasurePacket\n];\n\nexport const packetMap: Record<string, number> = {};\n\nfor (let i=0; i<packetList.length; i++) {\n    packetMap[packetList[i].$type.name] = i;\n}\n","import {useSnackbar, WithSnackbarProps, OptionsObject, SnackbarKey} from 'notistack'\nimport React from 'react'\n\nlet snackbarRef: WithSnackbarProps;\n\n\nexport const SnackbarUtilsConfigurator: React.FC = () => {\n    snackbarRef = useSnackbar();\n    return null;\n};\n\nexport default {\n    success(msg: string, options: OptionsObject = {}) {\n        return this.toast(msg, { ...options, variant: 'success' })\n    },\n    warning(msg: string, options: OptionsObject = {}) {\n        return this.toast(msg, { ...options, variant: 'warning' })\n    },\n    info(msg: string, options: OptionsObject = {}) {\n        return this.toast(msg, { ...options, variant: 'info' })\n    },\n    error(msg: string, options: OptionsObject = {}) {\n        return this.toast(msg, { ...options, variant: 'error' })\n    },\n    toast(msg: string, options: OptionsObject = {}) {\n        return snackbarRef.enqueueSnackbar(msg, options)\n    },\n    close(key: SnackbarKey) {\n        return snackbarRef.closeSnackbar(key)\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\nexport default abstract class Handler {\n    /** The type of packet this handler is listening for. */\n    public abstract readonly packets: typeof ProtoWrapper[];\n    private isHost: boolean = false;\n\n    setHost(isHost: boolean) {\n        this.isHost = isHost;\n    }\n\n    async handlePacket(client: Client, packet: ProtoWrapper) {\n        return this.isHost ? this.hostHandler(client, packet) : this.clientHandler(client, packet);\n    }\n\n    abstract clientHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n    abstract hostHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n}\n","import {Message} from \"protobufjs/light\";\n\n/**\n * Wrapper for protobuf Message, which allows quick & typed constructor unpacking.\n */\nexport default class ProtoWrapper<T extends object = object> extends Message<T>{\n    /**\n     * Shortcut to assign the given values to this object, then return it.\n     */\n    assign(values: Partial<this>): this {\n        return Object.assign(this, values)\n    }\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\n\n@Type.d(\"ProtoSprite\")\nexport class ProtoSprite extends ProtoWrapper<ProtoSprite> {\n    @Field.d(1, \"string\", \"required\", \"\")\n    public id: string = '';\n\n    @Field.d(2, \"int32\", \"required\", 0)  // Use \"sint32\" if idx will be negative often.\n    public idx: number = 0;\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\nimport {ProtoSprite} from \"./proto-sprite\";\n\n@Type.d(\"ProtoEntity\")\nexport class ProtoEntity extends ProtoWrapper<ProtoEntity> {\n    @Field.d(1, ProtoSprite, \"required\")\n    public sprite: ProtoSprite = new ProtoSprite();\n\n    @Field.d(2, 'int32', \"required\")\n    public x: number = 0;\n\n    @Field.d(3, 'int32', \"required\")\n    public y: number = 0;\n\n    @Field.d(4, 'bool', \"required\")\n    public visible: boolean = false;\n\n    @Field.d(5, 'string', \"required\")\n    public color: string = '';\n\n    @Field.d(6, 'string', \"required\")\n    public id: string = '';\n\n    @Field.d(7, 'string', \"repeated\")\n    public owners: string[] = [];\n\n    @Field.d(8, 'bool', \"required\")\n    public saveToCampaign: boolean = false;\n\n    @Field.d(9, 'string', \"required\")\n    public name: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from './proto-wrapper';\nimport {ProtoSprite} from \"./proto-sprite\";\nimport {ProtoEntity} from \"./proto-entity\";\n\n\n@Type.d(\"ProtoTile\")\nexport class ProtoTile extends ProtoWrapper<ProtoTile> {\n    @Field.d(1, \"int32\", \"required\", 0)\n    public x: number = 0;\n\n    @Field.d(2, \"int32\", \"required\", 0)\n    public y: number = 0;\n\n    @Field.d(3, \"int32\", \"required\", 0)\n    public z: number = 0;\n\n    @Field.d(4, \"int32\", \"required\", 0)\n    public spriteIdx: number = 0;\n}\n\n@Type.d(\"ProtoTileStack\")\nexport class ProtoTileStack extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTile, \"repeated\")\n    public tiles: ProtoTile[] = [];\n\n    @Field.d(2, ProtoSprite, \"repeated\")\n    public sprites: ProtoSprite[] = [];\n}\n\n\n@Type.d(\"ProtoBoard\")\nexport class ProtoBoard extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTileStack, \"required\")\n    public terrain: ProtoTileStack|null = null;\n    @Field.d(2, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\n\n@Type.d(\"TerrainAddPacket\")\nexport class TerrainAddPacket extends ProtoWrapper<TerrainAddPacket> {\n    @Field.d(1, ProtoTileStack, \"repeated\")\n    public tileStacks: ProtoTileStack[] = [];\n}\n\n@Type.d(\"TerrainCoordPacket\")\nexport class TerrainCoordPacket extends ProtoWrapper<TerrainCoordPacket> {\n    @Field.d(1, 'int32', \"required\")\n    public x: number = 0;\n    @Field.d(2, 'int32', \"required\")\n    public y: number = 0;\n}\n\n@Type.d(\"TerrainErasePacket\")\nexport class TerrainErasePacket extends ProtoWrapper<TerrainErasePacket> {\n    @Field.d(1, TerrainCoordPacket, \"repeated\")\n    public coords: TerrainCoordPacket[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\n@Type.d(\"EntityUpdatePacket\")\nexport class EntityUpdatePacket extends ProtoWrapper<EntityUpdatePacket> {\n    @Field.d(1, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n\n\n@Type.d(\"EntityDeletePacket\")\nexport class EntityDeletePacket extends ProtoWrapper<EntityDeletePacket> {\n    @Field.d(1, 'string', \"required\")\n    public entityID: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"PingPacket\")\nexport class PingPacket extends ProtoWrapper<PingPacket> {}\n\n@Type.d(\"SignaturePacket\")\nexport class SignaturePacket extends ProtoWrapper<SignaturePacket> {\n    @Field.d(1, \"string\", \"required\", 'def')\n    public username: string = '';\n}\n\n@Type.d(\"ReadyPacket\")\nexport class ReadyPacket extends ProtoWrapper<ReadyPacket> {}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"MediaStatusPacket\")\nexport class MediaStatusPacket extends ProtoWrapper<MediaStatusPacket> {\n    @Field.d(1, 'string', \"required\")\n    public currentVideo: string = '';\n    @Field.d(2, 'uint32', \"required\")\n    public playbackRate: number = 1;\n    @Field.d(3, 'bool', \"required\")\n    public paused: boolean = false;\n    @Field.d(4, 'uint32', \"required\")\n    public currentTime: number = 0;\n}\n\n\n@Type.d(\"MediaRequestPacket\")\nexport class MediaRequestPacket extends ProtoWrapper<MediaRequestPacket> {}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n\n@Type.d(\"MeasurePacket\")\nexport class MeasurePacket extends ProtoWrapper<MeasurePacket> {\n    @Field.d(1, 'int32', \"required\")\n    public px: number = 0;\n    @Field.d(2, 'int32', \"required\")\n    public py: number = 0;\n    @Field.d(3, 'int32', \"required\")\n    public tw: number = 0;\n    @Field.d(4, 'int32', \"required\")\n    public th: number = 0;\n    @Field.d(5, 'int32', \"required\")\n    public color: number = 0;\n    @Field.d(6, 'float', \"required\")\n    public angle: number = 0;\n    @Field.d(7, 'bool', \"required\")\n    public visible: boolean = false;\n    @Field.d(8, 'string', \"required\")\n    public type: string = '';\n    @Field.d(9, 'int32', \"required\")\n    public thickness: number = 0;\n    @Field.d(10, 'int32', \"required\")\n    public fill: number = 0;\n    @Field.d(11, 'float', \"required\")\n    public alpha: number = 0;\n    @Field.d(12, 'int32', \"required\")\n    public tx: number = 0;\n    @Field.d(13, 'int32', \"required\")\n    public ty: number = 0;\n}\n","import * as worker from './messageEncoder.worker';\nimport { packetList, packetMap } from \"./packets/packet-list\";\n\n/**\n * Use a Web Worker thread to encode the given ProtoWrapper object into a compressed binary buffer.\n * @param packet\n */\nexport async function encode(packet: any): Promise<Uint8Array> {\n    const id = packetMap[packet.$type.name];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error encoding packet: Unknown type: \"${packet.constructor.name}\"!`)\n\n    return await worker.workerEncode(packet, id)\n}\n\n/**\n * Use a Web Worker thread to decompress a binary buffer into a ProtoWrapper object, properly cast to the correct subclass.\n * @param data\n */\nexport async function decode(data: Uint8Array): Promise<any> {\n    const id = data.slice(0,1)[0];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error decoding packet: Unknown ID: [${id}], (${data.length})!`);\n\n    return new clazz().assign(await worker.workerDecode(data));\n}\n","/**\n * Chain promises sequentially, with a maximum stack size.\n */\nexport default class PromiseStream {\n    private prom: Promise<any> = Promise.resolve();\n    private readonly maxBackpressure: number;\n    private backPressure: number = 0;\n\n    constructor(maxBackpressure: number = 0) {\n        this.maxBackpressure = maxBackpressure\n    }\n\n    get length() {\n        return this.backPressure;\n    }\n\n    public queue(fn: Function, onError: Function|null = null) {\n        if (this.maxBackpressure && this.backPressure >= this.maxBackpressure) {\n            throw Error('Max backpressure reached!')\n        }\n        this.backPressure++;\n\n        this.prom = this.prom.then( async () => {\n            await fn();\n        }).catch( async err => {\n            if (onError) {\n                await onError(err);\n            } else {\n                console.error(err);\n            }\n        }).then(() => {\n            this.backPressure--;\n        })\n    }\n}\n","import Dexie from \"dexie\";\nimport {BoardWrapper} from \"./board-db\";\nimport Campaign from \"../controllers/campaign\";\nimport {UserData} from \"./user-db\";\nimport {exportDB, importDB} from \"dexie-export-import\";\n\n\nclass DB extends Dexie {\n    boards: Dexie.Table<any, BoardWrapper>;\n    campaigns: Dexie.Table<any, Campaign>;\n    metadata: Dexie.Table<any, string>;\n    users: Dexie.Table<any, UserData>;\n\n    constructor() {\n        super('terra-db');\n\n        // Define tables and indexes\n        this.version(1).stores({\n            boards: '&[campaignID+name]',\n            campaigns: '++id, name',\n            metadata: 'id',\n            users: '++id, &username, *keyCodes, lastSeen'\n        });\n        this.boards = this.table(\"boards\");\n        this.campaigns = this.table(\"campaigns\");\n        this.metadata = this.table(\"metadata\");\n        this.users = this.table(\"users\");\n    }\n\n    /**\n     * Replaces the database with the given Blob data, then reloads the page.\n     * If cb is given, waits for the callback before reloading.\n     * @param data\n     * @param cb\n     */\n    async importData(data: Blob, cb?: Function) {\n        console.debug('Restoring database from blob...');\n        await this.delete();\n        await importDB(data);\n        console.log(\"Import complete\");\n        if (cb) await cb();\n        // @ts-ignore\n        window.location = window.location.href.split('#')[0];\n    }\n\n    async toBlob() {\n        // @ts-ignore\n        return await exportDB(this, {\n            prettyJson: false,\n            progressCallback: (progress: any) => {\n                console.debug('\\t+ Packing DB:', progress);\n            }\n        });\n    }\n}\n\nexport const db = new DB();\n\ndb.on(\"ready\", async () => {\n    if (await db.metadata.count() <= 0) {\n        console.debug(\"Migrating from old databases...\");\n        await copyOldDB(db, 'metadata-db', 'data', 'metadata');\n        await copyOldDB(db, 'campaign-db', 'campaigns', 'campaigns');\n        await copyOldDB(db, 'user-db', 'users', 'users');\n        await copyOldDB(db, 'board-db', 'boards', 'boards');\n    }\n});\n\ndb.open();\n\n\nasync function copyOldDB(newDB: DB, dbName: string, tableName: string, newTable: string) {\n    if (await Dexie.exists(dbName)) {\n        const d = new Dexie(dbName);\n        await d.open();\n        console.log('\\t+', dbName, tableName);\n        for (const tbl of d.tables) {\n            if (tbl.name === tableName) {\n                for (const ele of await tbl.toArray()) {\n                    console.log('Migrating:', ele);\n                    // @ts-ignore\n                    await newDB[newTable].add(ele);\n                }\n            }\n        }\n        d.close();\n        d.delete();\n    }\n}\n","import {observable} from \"mobx\";\nimport {db} from './database';\n\nexport const currentUsername = observable.box<string>('');\n\nexport enum Meta {\n    CERT_SEED = 'secret_cert_seed',\n    USERNAME = 'username',\n    CAMPAIGN_CURRENT = 'campaign_current',\n    YT_PLAYER_CONFIG = 'player_config',\n    FAVORITE_SPRITES = \"favoriteSprites\",\n}\n\nasync function get(id: Meta): Promise<any> {\n    return JSON.parse((await db.metadata\n        .where({id})\n        .first())?.val || 'null');\n}\n\nasync function store(id: Meta, value: any): Promise<string> {\n    return db.metadata.put({\n        id,\n        val: JSON.stringify(value),\n    });\n}\n\nexport const metadata = {\n    get,\n    store\n};\n","import Handler from \"./handlers/handler\";\nimport {IObservableValue, observable, ObservableSet} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\nimport * as encoder from './messageEncoder';\nimport ProtoWrapper from \"../data/protobufs/proto-wrapper\";\nimport PromiseStream from \"../util/promiseStream\";\nimport {PreCheck} from \"./prechecks/precheck\";\nimport {UserData} from \"../db/user-db\";\nimport {PingPacket} from \"./packets/util-packets\";\nimport {Switchboard, ConnectedPeer} from \"switchboard.js\";\nimport {metadata, Meta} from \"../db/metadata-db\";\n\nexport enum NetworkStatus {\n    IDLE,\n    CONNECTED,\n    CONNECTING,\n    RECONNECTING,\n    DISCONNECTED,\n    MATCHMAKING_FAIL,\n    WAITING_FOR_HOST\n}\n\nexport enum NetworkMode {\n    UNKNOWN,\n    HOST,\n    CLIENT,\n}\n\nlet handlers: Handler[] = [];\nlet preConn: PreCheck[] = [];\n\nexport const clients: ObservableSet<Client> = observable(new Set<Client>());\n\nlet sb: Switchboard | null = null;\nexport let netStatus: IObservableValue<NetworkStatus> = observable.box(NetworkStatus.IDLE);\nexport let netMode: IObservableValue<NetworkMode> = observable.box(NetworkMode.UNKNOWN);\n\nexport function setHandlers(newHandlers: Handler[], newPreConn: PreCheck[]) {\n    handlers = newHandlers;\n    preConn = newPreConn\n}\n\n/**\n * Get the seed that can regenerate the public/private key.\n * If one does not exist already, it is created.\n */\nasync function getSeed(): Promise<string> {\n    let seed = await metadata.get(Meta.CERT_SEED);\n\n    if (!seed) {\n        await metadata.store(Meta.CERT_SEED, seed = Switchboard.makeSeed());\n    }\n\n    return seed;\n}\n\n/**\n * Get the current local peer ID. Generates a new one if it does not already exist.\n * @param useLongform\n */\nexport async function getMyID(useLongform: boolean = false) {\n    if (sb) {\n        return useLongform ? sb.fullID : sb.peerID;\n    }\n    return Switchboard.getIdFromSeed(await getSeed(), useLongform);\n}\n\n/**\n * Kill any running SwitchBoard, and start a new one.\n */\nexport async function makeSB() {\n    if (sb) {\n        sb.kill(new Error('Closed to launch new Peer connection.'));\n    }\n    return new Switchboard({\n        seed: await getSeed()\n    });\n}\n\nexport async function connectTo(hostID: string): Promise<any> {\n    await setMode(NetworkMode.CLIENT);\n    if (netStatus.get() !== NetworkStatus.RECONNECTING) netStatus.set(NetworkStatus.CONNECTING);\n\n    sb = await makeSB();\n\n    sb.on('peer', async (peer) => {\n        notifications.success('Connected to host!');\n\n        const client = new Client(peer, handlers);\n        peer.on('close', () => clientError('host disconnected', client));\n        peer.on('error', (err) => console.error(err));\n\n        try {\n            netStatus.set(NetworkStatus.WAITING_FOR_HOST);\n            for (const pc of preConn) {\n                await pc.run(false, client);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            client.verified = true;\n            clients.add(client);\n            netStatus.set(NetworkStatus.CONNECTED);\n        } catch (err) {\n            console.error('failed validation', err);\n        }\n    });\n\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n    });\n\n    sb.findHost(hostID);\n}\n\nexport async function clientError(err: any, client: Client): Promise<any> {\n    console.warn('Client Error:', err);\n    removeClient(client);\n    client.close();\n\n    console.log('Reconnecting to host...');\n    netStatus.set(NetworkStatus.RECONNECTING);\n}\n\nexport async function openHost() {\n    await setMode(NetworkMode.HOST);\n\n    sb = await makeSB();\n\n    netStatus.set(NetworkStatus.CONNECTED);\n\n    sb.on('peer', async peer => {\n        console.warn('Client connected!');\n        const cli = new Client(peer, handlers);\n\n        peer.on('close', () => {\n            console.debug('Client dropped:', cli);\n            removeClient(cli);\n        });\n\n        try {\n            for (const pc of preConn) {\n                await pc.run(true, cli);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            cli.verified = true;\n            clients.add(cli);\n            notifications.info(`User \"${cli.userData.username}\" has joined.`, {preventDuplicate: true});\n        } catch (err) {\n            console.error(err);\n            cli.close();\n        }\n    });\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n        notifications.error(`Unable to establish network connection.`, {preventDuplicate: true});\n    });\n    sb.host();\n}\n\nexport function kill(): void {\n    if (sb) {\n        clients.forEach(p => {\n            p.close();\n            removeClient(p);\n        });\n        netMode.set(NetworkMode.UNKNOWN);\n        netStatus.set(NetworkStatus.IDLE);\n        sb.kill(undefined, true);\n        sb = null;\n        console.debug('Killed networking stack.');\n    }\n}\n\n/**\n * Destroy the connection and set the new mode.\n * @param mode\n */\nasync function setMode(mode: NetworkMode) {\n    kill();\n    netMode.set(mode);\n}\n\nfunction removeClient(client: Client) {\n    clients.delete(client);\n}\n\n\nexport class Client {\n    private peer: ConnectedPeer;\n    private listener: Function|null = null;\n    private readonly handlers: Handler[];\n    public verified: boolean = false;\n    private lastSend = Promise.resolve();\n    private stream = new PromiseStream();\n    public userData: UserData = {id: -1, username: 'null', keyCodes:[], lastSeen: 0};\n    private readonly pingTimer: any = null;\n    public lastPing: number = 0;\n\n    constructor(peer: ConnectedPeer, handlers: Handler[]) {\n        this.peer = peer;\n        this.handlers = handlers;\n        this.hook();\n\n        this.pingTimer = setInterval(() => {\n            if (!this.verified) return;\n            if (this.peer.isClosed) return this.close();\n            if (!this.lastPing) {\n                this.lastPing = Date.now();\n                return;\n            } else if (Date.now() - this.lastPing > 15000) {\n                console.warn('Ping timeout.')\n                return this.close();\n            }\n            this.send(new PingPacket()).then();\n        }, 10000)\n    }\n\n    hook() {\n        const self = this;\n        this.peer.on('data', (data: any) => {\n            self.stream.queue(() => self.handleMessage(data), ()=>this.peer.close())\n        });\n        this.peer.on('error', (err) => {\n            console.error('Client error:', err);\n            this.peer.close();\n        });\n    }\n\n    get id() {\n        return this.peer.id;\n    }\n\n    async handleMessage(packetBinary: ArrayBuffer) {\n        try {\n            const packet: ProtoWrapper = await encoder.decode(new Uint8Array(packetBinary));\n            if (this.listener) {\n                this.listener(packet);\n            } else if (!this.verified) {\n                // noinspection ExceptionCaughtLocallyJS\n                throw Error(`Error: Unexpected packet sent before verification: ${packet}`);\n            } else {\n                console.debug('Incoming Packet:', packet);\n                for (const h of this.handlers) {\n                    // @ts-ignore\n                    if (h.packets.some(p => packet.$type === p.$type)) {\n                        return await h.handlePacket(this, packet);\n                    }\n                }\n            }\n        } catch (err) {\n            console.error(err);\n            this.close();\n        }\n    }\n\n    close() {\n        if (this.listener) {\n            // TODO: Add to blacklist on current SwitchBoard.\n            this.listener(null);\n        }\n        if (this.pingTimer) clearTimeout(this.pingTimer);\n\n        this.peer.close();\n    }\n\n    /**\n     * Sends the given Packet to the client.\n     * Utilizes an internal \"rolling Promise\" to assure that all messages are sent in order.\n     * @param packet\n     */\n    async send(packet: ProtoWrapper) {\n        console.debug('Sending client:', packet);\n        this.lastSend = this.lastSend.then(async () => {\n            this.sendBuffer(await encoder.encode(packet));\n        }).catch(err => {\n           console.error(`Error sending message to client:`, err);\n        });\n    }\n\n    sendBuffer(data: Uint8Array) {\n        this.peer.send(data);\n    }\n\n    /**\n     * Wait for the next packet, whatever it may be.\n     * Only one listener may be waiting at any given time, or an error will be thrown on subsequent registrations.\n     * @param expectedType\n     */\n    getNextPacket(expectedType: any): Promise<any> {\n        if (this.listener) throw Error('Attempted to overwrite client listener!');\n\n        return new Promise((res, rej) => {\n            this.listener = (packet: any) => {\n                this.listener = null;\n                if (!(packet instanceof expectedType)) {\n                    return rej(`Unexpected packet type: ${packet} !== ${expectedType}`)\n                }\n                return res(packet);\n            }\n        });\n    }\n}\n\n/**\n * Broadcast the given data to all connected connections.\n * If `requireHost` is true, will only send while we are hosting.\n * @param packet\n * @param requireHost\n * @param skip\n */\nexport async function broadcast(packet: ProtoWrapper, requireHost: boolean, skip?: Client) {\n    if (requireHost && netMode.get() !== NetworkMode.HOST) {\n        return;\n    }\n    const data = await encoder.encode(packet)\n\n    clients.forEach(c => {\n        if (c !== skip) c.sendBuffer(data)\n    });\n}\n\nexport function isHost() {\n    return netMode.get() === NetworkMode.HOST\n}\n","import {Sprite} from \"../../util/sprite-loading\";\n\nexport class Tile {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public sprite: Sprite;\n\n    constructor(sprite: Sprite) {\n        this.sprite = sprite;\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport * as packer from '../../data/board-packer.worker';\nimport {TerrainAddPacket} from \"../packets/terrainPackets\";\nimport {Tile} from \"../../data/interfaces/tile\";\n\n\nexport default class TerrainAddHandler extends Handler {\n    private static tiles: Tile[][] = [];\n    readonly packets: typeof ProtoWrapper[] = [TerrainAddPacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainAddHandler.broadcastChanges();\n            TerrainAddHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainAddPacket): Promise<void> {\n        for (const data of packet.tileStacks) {\n            if (!data) return;\n            const stack = data.tiles;\n\n            if (stack.length) {\n                this.terrain.removeAt(stack[0].x, stack[0].y);\n                for (let i=0; i < stack.length; i++) {\n                    const dt = stack[i];\n                    const sp = data.sprites[dt.spriteIdx];\n                    const t = new Tile(new Sprite(sp.id, sp.idx));\n                    this.terrain.placeAt(dt.x, dt.y, t, i === stack.length-1);\n                }\n            }\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        throw Error('Client sent host new Terrain data. Not allowed.')\n    }\n\n    static async broadcastChanges() {\n        if (TerrainAddHandler.tiles.length) {\n            const packedStacks: ProtoTileStack[] = []\n            const updateTiles = TerrainAddHandler.tiles.splice(0, TerrainAddHandler.tiles.length);\n\n            for (const t of updateTiles) {\n                packedStacks.push(await packer.packTiles(t));\n            }\n\n            await broadcast(new TerrainAddPacket().assign({\n                tileStacks: packedStacks\n            }), true);\n        }\n    }\n\n    static sendTerrainAdd(tiles: Tile[]) {\n        if (isHost()) TerrainAddHandler.tiles.push(tiles);\n    }\n}\n\nTerrainAddHandler.pollChanges();\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {TerrainCoordPacket, TerrainErasePacket} from \"../packets/terrainPackets\";\n\nexport default class TerrainEraseHandler extends Handler {\n    private static tiles: Set<TerrainCoordPacket> = new Set();\n    readonly packets: typeof ProtoWrapper[] = [TerrainErasePacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainEraseHandler.broadcastChanges();\n            TerrainEraseHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainErasePacket): Promise<void> {\n        for (const t of packet.coords) {\n            this.terrain.removeAt(t.x, t.y);\n        }\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client attempted to erase terrain. Not allowed.')\n    }\n\n    /**\n     * Batches the removed terrain coords, to be sent shortly after.\n     * @param x\n     * @param y\n     */\n    static sendTerrainRemove(x: number, y: number) {\n        if (isHost()) TerrainEraseHandler.tiles.add(new TerrainCoordPacket().assign({ x, y}));\n    }\n\n    /**\n     * Sends all the batched changes. Runs on a loop. Can be called manually to instantly send all changes.\n     */\n    static async broadcastChanges() {\n        if (TerrainEraseHandler.tiles.size) {\n            const tep  = new TerrainErasePacket().assign({\n                coords: Array.from(TerrainEraseHandler.tiles)\n            });\n            TerrainEraseHandler.tiles.clear();\n            await broadcast(tep, true);\n        }\n    }\n}\n\nTerrainEraseHandler.pollChanges();\n","import {Container, TextureSource} from \"pixi.js\";\nimport * as Cull from \"pixi-cull\";\n\n/** The size of the world grid, in tiles. */\nexport const GRID_DIMENSIONS = 100;\n\n/** The dimensions of each tile, in pixels. */\nexport const GRID_TILE_PX = 48;\n\n/** The total size of the world, in pixels. */\nexport const WORLD_SIZE_PX = GRID_DIMENSIONS * GRID_TILE_PX;\n\n\n\n// PIXI Stuff:\n/** The cull implementation, which manages the visibility of layers added into it. */\nexport const CULLER = new Cull.SpatialHash();\n/** The layer which holds Terrain tiles. Culled. */\nexport const TERRAIN_LAYER = new Container();\n/** The layer which holds Entities. Not culled. */\nexport const ENTITY_LAYER = new Container();\n/** The layer for topmost UI Elements. */\nexport const OVERLAY_LAYER = new Container();\n\n/**\n * Since many things use the overlay layer, their respective z-index depths are tracked here.\n */\nexport enum OVERLAY_DEPTHS {\n    _,\n    NAMEPLATE,\n    MARKER_BKG,\n    MARKER_TXT,\n    SHAPES,\n    TOOLTIP\n}\n\n\nlet forceNextCull = false;\n\n/**\n * Override the default viewport dirty flag to force a re-cull after the next draw cycle.\n * Useful after adding sprites that may be culled.\n */\nexport function setForceCull(dirty = true) {\n    forceNextCull = dirty;\n}\nexport function getForceCull() {\n    return forceNextCull;\n}\n\nexport interface TextureKeySource {\n    uid: string;\n    source: TextureSource|Promise<TextureSource>;\n}\nexport interface TextureKeyAtlas {\n    uid: string;\n    atlas: Promise<HTMLCanvasElement>;\n    px: number;\n    py: number;\n    w: number;\n    h: number;\n    delay?: number;\n}\nexport type TextureKey = TextureKeySource | TextureKeyAtlas;\n\n\n// @ts-ignore\nwindow.debugCullStats = ()=>CULLER.stats();\n","\n\nexport function collides(r1: any, r2: any) {\n    //Define the variables we'll need to calculate\n    let hit, combinedHalfWidths, combinedHalfHeights, vx, vy;\n\n    //Find the center points of each sprite\n    r1.centerX = r1.x + r1.width / 2;\n    r1.centerY = r1.y + r1.height / 2;\n    r2.centerX = r2.x + r2.width / 2;\n    r2.centerY = r2.y + r2.height / 2;\n\n    //Find the half-widths and half-heights of each sprite\n    r1.halfWidth = r1.width / 2;\n    r1.halfHeight = r1.height / 2;\n    r2.halfWidth = r2.width / 2;\n    r2.halfHeight = r2.height / 2;\n\n    //Calculate the distance vector between the sprites\n    vx = r1.centerX - r2.centerX;\n    vy = r1.centerY - r2.centerY;\n\n    //Figure out the combined half-widths and half-heights\n    combinedHalfWidths = r1.halfWidth + r2.halfWidth;\n    combinedHalfHeights = r1.halfHeight + r2.halfHeight;\n\n    //Check for a collision on the x axis\n    if (Math.abs(vx) < combinedHalfWidths) {\n        //A collision might be occurring. Check for a collision on the y axis\n        hit = Math.abs(vy) < combinedHalfHeights;\n    } else {\n        //There's no collision on the x axis\n        hit = false;\n    }\n\n    //`hit` will be either `true` or `false`\n    return hit;\n}\n\n\n/**\n * Basic event emitter implementation, to avoid extra requirements.\n * @internal\n */\nexport default class Subscribable {\n    private events: Record<string, Set<any>> = {};\n    private history: Record<string, any> = {};\n    private permanentHandlers: Record<string, any[]> = {};\n\n    /**\n     * Listen for events that are emitted of a specific type.\n     * @param event\n     * @param callback\n     * @param useHistory If existing historic data should be returned.\n     * @returns A function which, when called, will unregister the callback.\n     */\n    public on(event: string, callback: any, useHistory = false) {\n        this.events[event] = this.events[event] || new Set();\n        this.events[event].add(callback);\n\n        if (useHistory && this.history.hasOwnProperty(event)) {\n            callback(this.history[event]);\n        }\n\n        return () => {\n            if (this.events[event]) {\n                this.events[event].delete(callback);\n                if (!this.events[event].size) {\n                    delete this.events[event];\n                }\n            }\n        }\n    }\n\n    /**\n     * Same as {@link on on()}, but only triggers one time & automatically cleans up.\n     * @param event\n     * @param callback\n     * @param useHistory\n     * @see {@link on} for the available specific events.\n     */\n    public once(event: string, callback: Function, useHistory = false) {\n        const unsub = this.on(event, (val: any) => {\n            unsub();\n            callback(val)\n        }, useHistory);\n\n        return unsub;\n    }\n\n    /**\n     * Emit the given value for the given event, to all listeners.\n     * @param event\n     * @param val\n     * @param useHistory If this data should be stored in history.\n     * @protected\n     */\n    public emit(event: string, val?: any, useHistory = true) {\n        const listeners = this.events[event];\n\n        if (useHistory) this.history[event] = val;\n\n        if (listeners) {\n            listeners.forEach(l => {\n                l(val);\n            })\n        }\n        if (this.events['']) {\n            this.events[''].forEach(l => {\n                l(event, val);\n            })\n        }\n    }\n\n    /**\n     * Register an event that cannot be cleared, even by {@link removeAllListeners}.\n     * Used internally to guarantee certain events (close, etc.) are detected.\n     * @param event\n     * @param handler\n     * @ignore\n     */\n    public permanent(event: string, handler: any) {\n        this.permanentHandlers[event] = this.permanentHandlers[event] || [];\n        this.permanentHandlers[event].push(handler);\n        this.on(event, handler);\n    }\n\n    /**\n     * Removes all non-permanent callbacks for the given event type, or every event type if none is given.\n     * @param event\n     */\n    public removeAllListeners(event?: string): this {\n        if (event) {\n            delete this.events[event];\n        } else {\n            for (const k of Object.keys(this.events)) {\n                delete this.events[k];\n            }\n        }\n\n        const events = event? [event] : Object.keys(this.permanentHandlers);\n        events.forEach(ev => {\n            const handlers = this.permanentHandlers[ev];\n            if (handlers) {\n                handlers.forEach(h => this.on(ev, h, false))\n            }\n        })\n\n        return this;\n    }\n}\n\n","import Subscribable from \"./ui-util\";\nimport {GRID_DIMENSIONS, GRID_TILE_PX, OVERLAY_LAYER, WORLD_SIZE_PX} from \"./globals\";\nimport * as PIXI from \"pixi.js\";\n\nexport interface SubscribeStream {\n    /** The mouse/pointer has been moved over the board. */\n    on(event: 'hover', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'hover', val: GridPoint): void;\n\n    /** Precise coordinates for a pointer movement. */\n    on(event: 'pointer-coords', callback: (coords: PixelPoint)=>void): () => void;\n    emit(event: 'pointer-coords', val: PixelPoint): void;\n\n    /** The mouse/pointer has been pressed down on the board. */\n    on(event: 'mouse-down', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'mouse-down', val: GridPoint): void;\n\n    /** The mouse/pointer has been released on the board. */\n    on(event: 'mouse-up', callback: ()=>void): () => void;\n    emit(event: 'mouse-up', val: GridPoint): void;\n\n    /** The mouse RMD has been pressed down on the board. */\n    on(event: 'mouse-right-down', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'mouse-right-down', val: GridPoint): void;\n\n    /** The mouse RMD has been released on the board. */\n    on(event: 'mouse-right-up', callback: ()=>void): () => void;\n    emit(event: 'mouse-right-up', val: GridPoint): void;\n\n    /** The mouse/pointer has been clicked on the board. */\n    on(event: 'click', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'click', val: GridPoint): void;\n\n    /** The mouse Middle mouse button has been pressed down on the board. */\n    on(event: 'mouse-middle-down', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'mouse-middle-down', val: GridPoint): void;\n\n    /** The mouse Middle mouse button has been released. */\n    on(event: 'mouse-middle-up', callback: ()=>void): () => void;\n    emit(event: 'mouse-middle-up', val: GridPoint): void;\n\n    /** Emitted when a texture fails to load. */\n    on(event: 'texture-fail', callback: (val: {uid: string, msg: string})=>void): () => void;\n    emit(event: 'texture-fail', val: {uid: string, msg: string}): void;\n}\nexport const EVENT_STREAM: SubscribeStream = new Subscribable();\n\n\n/** A coordinate pair of x/y tiles, from the current map OVERLAY_LAYER. */\nexport interface GridPoint {\n    /** Tile x-coordinate. */\n    tx: number;\n    /** Tile y-coordinate. */\n    ty: number;\n}\n\n/** Represents an exact pixel coordinate. */\nexport interface PixelPoint {\n    px: number;\n    py: number;\n}\n\n\n// =====  EVENTS  =====\n\nlet lx = 0, ly = 0;\n\n/**\n * Convert the given Event coordinates into world-based tile coords, clamping them within the grid size.\n * @param ev\n */\nfunction updateHover(ev: any) {\n    const tx = Math.max(0, Math.min(GRID_DIMENSIONS-1, Math.floor(ev.data.getLocalPosition(OVERLAY_LAYER).x / GRID_TILE_PX)));\n    const ty = Math.max(0, Math.min(GRID_DIMENSIONS-1, Math.floor(ev.data.getLocalPosition(OVERLAY_LAYER).y / GRID_TILE_PX)));\n\n    EVENT_STREAM.emit('pointer-coords', {px: ev.data.getLocalPosition(OVERLAY_LAYER).x, py: ev.data.getLocalPosition(OVERLAY_LAYER).y});\n\n    if (lx !== tx || ly !== ty) {\n        lx = tx;\n        ly = ty;\n        EVENT_STREAM.emit('hover', {tx, ty});\n    }\n\n    return {tx, ty};\n}\n\n\nOVERLAY_LAYER.hitArea = new PIXI.Rectangle(0, 0, WORLD_SIZE_PX, WORLD_SIZE_PX);\nOVERLAY_LAYER.interactive = true;\nOVERLAY_LAYER.position.set(0,0);\n\n\n// @ts-ignore\nOVERLAY_LAYER.on('pointermove', ev => {\n    updateHover(ev);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('click', ev => {\n    const coords = updateHover(ev);\n    EVENT_STREAM.emit('click', coords);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('tap', ev => {\n    const coords = updateHover(ev);\n    EVENT_STREAM.emit('click', coords);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('touchstart', ev => {\n    const coords = updateHover(ev);\n\n    EVENT_STREAM.emit('mouse-down', coords);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('touchend', ev => {\n    const coords = updateHover(ev);\n\n    EVENT_STREAM.emit('mouse-up', coords);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('touchendoutside', ev => {\n    const coords = updateHover(ev);\n\n    EVENT_STREAM.emit('mouse-up', coords);\n});\n\n\n\n\n// @ts-ignore\nwindow.debugEvents = (evName: any) => {\n    return EVENT_STREAM.on(evName, (...ev) => {\n        // @ts-ignore\n        if (ev[0] === 'pointer-coords' || ev[0] === 'hover') return;  // Screen out spam.\n        console.debug(...ev);\n    });\n}\n","/*\n    PIXI's asset loader sucks a lot, so this is a custom implementation to load and track resources.\n */\nimport {Loader, Texture} from 'pixi.js';\nimport { parseGIF, decompressFrames } from 'gifuct-js'\nimport {GRID_TILE_PX, TextureKey} from \"./globals\";\nimport {EVENT_STREAM} from \"./ui-event-stream\";\n\nconst cache: Record<string, LoadedRes> = {};\nconst gifCache: Record<string, Promise<LoadedGif>> = {};\n\ninterface LoadedRes {\n    texture: Promise<Texture>;\n    users: number;\n}\n\ninterface LoadedGif {\n    users: number;\n    frames: TextureKey[];\n}\n\n/**\n * Loads the given texture, and caches it. If one is already loaded or in progress, returns the cached version.\n * Be careful to also release any textures generated in this way.\n *\n * Accepts URLS, or other DOM image sources - such as `createImageBitmap(image, sx, sy, sw, sh)`.\n */\nexport async function makeTexture(key: TextureKey): Promise<Texture> {\n    const {uid} = key;\n\n    if (cache[uid]) {\n        cache[uid].users ++;\n        return cache[uid].texture;\n    }\n\n    const loader = new Loader();\n\n    const prom = new Promise(async (res, rej) => {\n        if (\"atlas\" in key) {\n            const can = document.createElement('canvas');\n            const ctx = can.getContext('2d')!;\n            can.width = key.w;\n            can.height = key.h;\n            ctx.imageSmoothingEnabled = false;\n            ctx.drawImage(await key.atlas, key.px, key.py, key.w, key.h, 0, 0, key.w, key.h);\n            return res(Texture.from(can));\n        }\n        const resource = await key.source;\n        if ((typeof resource).toLowerCase() !== 'string') {\n            return res(Texture.from(resource));\n        }\n        console.log('Loading image resource:', resource);\n        loader.add(uid, resource as string);\n        loader.onComplete.add(() => {\n            // @ts-ignore\n            res(loader.resources[uid].texture)\n        });\n        loader.onError.add((err: any) => {\n            rej(err);\n        });\n        loader.load();\n    }).catch(err => {\n        console.error(err);\n        EVENT_STREAM.emit('texture-fail', { uid, msg: `${err.message}` });\n        return makeFailTexture();\n    }).then((res: any) => {\n        loader.destroy();\n        return res;\n    }) as Promise<Texture>;\n\n    cache[uid] = {\n        texture: prom,\n        users: 1\n    };\n\n    return prom;\n}\n\nexport async function releaseGif(gifURI: string) {\n    const loaded = await gifCache[gifURI];\n    if (!loaded) return;\n    loaded.users--;\n    if (!loaded.users) {\n        delete gifCache[gifURI];\n        console.log(\"Destroyed GIF:\", gifURI);\n    }\n}\n\n\n/**\n * Attempts to free the given texture. If it is still in use by other Sprites, does nothing. Otherwise, destroys the texture.\n * @param uid\n */\nexport async function releaseTexture(uid: string) {\n    const r = cache[uid];\n    if (!r) return;\n    r.users -= 1;\n\n    if (!r.users) {\n        delete cache[uid];\n        const txt = await r.texture;\n        Texture.removeFromCache(uid);\n        Texture.removeFromCache(txt);\n        txt.destroy(true);\n\n        console.log(\"Destroyed texture:\", uid);\n    }\n}\n\n\nfunction makeFailImage() {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n    canvas.width = GRID_TILE_PX;\n    canvas.height = GRID_TILE_PX;\n    ctx.imageSmoothingEnabled = false;\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillRect(0, 0, GRID_TILE_PX, GRID_TILE_PX);\n    ctx.strokeStyle = '#FF0000';\n    ctx.lineWidth = 3;\n\n    ctx.moveTo(0, 0);\n    ctx.lineTo(GRID_TILE_PX, GRID_TILE_PX);\n    ctx.stroke();\n    ctx.moveTo(GRID_TILE_PX, 0);\n    ctx.lineTo(0, GRID_TILE_PX);\n    ctx.stroke();\n    return canvas;\n}\n\nfunction makeFailTexture() {\n    return Texture.from(makeFailImage());\n}\n\n/**\n * Resize the given canvas to fit the current grid tile dimensions.\n */\nfunction resizeCanvas(input: HTMLCanvasElement) {\n    const can2 = document.createElement('canvas');\n    const ctx2 = can2.getContext('2d')!;\n    can2.width = GRID_TILE_PX;\n    can2.height = GRID_TILE_PX;\n    ctx2.imageSmoothingEnabled = false;\n    ctx2.globalAlpha = 1;\n    ctx2.drawImage(input, 0, 0, input.width, input.height, 0, 0, GRID_TILE_PX, GRID_TILE_PX);\n    return can2;\n}\n\nexport async function loadFramesFromGif(gifURI: string): Promise<LoadedGif> {\n    if (!gifURI.startsWith(\"gif:\")) throw Error(\"Invalid GIF URI: \" + gifURI);\n\n    if (!gifCache[gifURI]) {\n        gifCache[gifURI] = new Promise(async resolve => {\n            const res: LoadedGif = {frames: [], users: 0};\n            try {\n                const gif = await fetch(gifURI.replace(/^gif:/, \"\"))\n                    .then(resp => resp.arrayBuffer())\n                    .then(buff => parseGIF(buff))\n                    .then(gif => decompressFrames(gif, true));\n\n                const can = document.createElement('canvas');\n                const ctx = can.getContext('2d')!;\n                let iDat: ImageData|null = null;\n\n                ctx.imageSmoothingEnabled = false;\n                ctx.globalAlpha = 1;\n\n                gif.forEach((frame, idx) => {\n                    if (iDat == null || frame.dims.width !== iDat.width || frame.dims.height !== iDat.height) {\n                        can.width = frame.dims.width;\n                        can.height = frame.dims.height;\n                        iDat = ctx.createImageData(frame.dims.width, frame.dims.height);\n                    }\n                    if (frame.disposalType === 2) {\n                        ctx.clearRect(0,0, can.width, can.height);\n                    }\n                    iDat.data.set(frame.patch);\n                    ctx.putImageData(iDat, 0, 0);\n\n                    res.frames.push({\n                        uid: gifURI+\":\"+idx,\n                        source: resizeCanvas(can),\n                        delay: frame.delay\n                    });\n                });\n            } catch (err) {\n                console.error(err);\n                res.frames.push({\n                    uid: gifURI+\":failed\",\n                    source: makeFailImage()\n                });\n            }\n            if (!res.frames.length) {\n                res.frames.push({\n                    uid: gifURI+\":failed\",\n                    source: makeFailImage()\n                });\n            }\n            resolve(res);\n        });\n    }\n\n    const cached = await gifCache[gifURI];\n    cached.users += 1;\n\n    return cached;\n}\n\n\n// @ts-ignore\nwindow.debugImageCache = cache;  // Expose cache for debugging.\n","import { Texture, Sprite } from \"pixi.js\";\nimport {GRID_TILE_PX, setForceCull, TERRAIN_LAYER, TextureKey} from \"../ui-data/globals\";\nimport {makeTexture, releaseTexture} from \"../ui-data/image-loader\";\n\nTERRAIN_LAYER.sortableChildren = true;\n\nconst tiles: Record<string, Set<Promise<UiTile>>> = {};\nconst sortTimers: Record<any, any> = {};\n\nfunction key(tx: number, ty: number) {\n    return `${tx},${ty}`;\n}\n\nexport function getAt(tx: number, ty: number) {\n    return tiles[key(tx, ty)] || new Set();\n}\n\n/**\n * Set the Z-Index for each tile at the given coords.\n * @param tx\n * @param ty\n */\nasync function sortAt(tx: number, ty: number) {\n    const arr = await Promise.all(Array.from(getAt(tx, ty)));\n    arr.sort((t1, t2) => t1.tz - t2.tz).forEach((t, idx) => {\n        t.zIndex = idx;\n    });\n}\n\nfunction scheduleSort(tx: number, ty: number) {\n    const k = key(tx, ty);\n    if (sortTimers[k]) clearTimeout(sortTimers[k]);\n    sortTimers[k] = setTimeout(() => {\n        sortAt(tx, ty).catch(console.error);\n    }, 50);\n}\n\n/** Internal renderer's representation of a static Tile. */\nclass UiTile extends Sprite{\n    public readonly tx: number;\n    public readonly ty: number;\n    public readonly tz: number;\n    public readonly txtID: string;\n\n    constructor(tx: number, ty: number, z: number, texture: Texture, texID: string) {\n        super(texture);\n        this.tx = tx;\n        this.ty = ty;\n        this.position.set(tx * GRID_TILE_PX, ty * GRID_TILE_PX);\n        this.tz = z;\n        this.txtID = texID;\n    }\n\n    /**\n     * Clean up the resources used by this tile.\n     */\n    erase() {\n        TERRAIN_LAYER.removeChild(this);\n        this.destroy({\n            children: true\n        });\n        releaseTexture(this.txtID).catch(console.error);\n    }\n}\n\n/**\n * Generate a new Tile, and place it at the given tile coords.\n * @param tx\n * @param ty\n * @param height The real z-index is set automatically relative to other tile heights at the same coords.\n * @param texKey\n */\nexport function addTerrain(tx: number, ty: number, height: number, texKey: TextureKey) {\n    const set = tiles[key(tx, ty)] = getAt(tx, ty);\n    const prom = makeTexture(texKey).then( async txt => {\n        const tile = new UiTile(tx, ty, height, txt, texKey.uid);\n\n        TERRAIN_LAYER.addChild(tile);\n        scheduleSort(tx, ty);\n\n        setForceCull(true);\n\n        return tile;\n    });\n\n    set.add(prom);\n}\n\n/**\n * Clear all placed or pending tiles at the given coordinates.\n * Any tiles added after/during this call go into a new set, and are not erased.\n * @param tx\n * @param ty\n */\nexport async function removeTerrainAt(tx: number, ty: number) {\n    const set = getAt(tx, ty);\n    delete tiles[key(tx, ty)];\n    set.forEach(t => t.then(tile => {\n        tile.erase()\n    }));\n}\n\n\n// @ts-ignore\nwindow.debugTerrainList = tiles;\n","import {Sprite} from \"../util/sprite-loading\";\nimport {observable} from \"mobx\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport {Tile} from \"../data/interfaces/tile\";\nimport * as TERRAIN from '../renderer/ui-components/ui-terrain';\nimport {GRID_DIMENSIONS} from \"../renderer/ui-data/globals\";\n\n\nexport default class Terrain{\n    private readonly terrain: Record<string, Tile[]> = {};\n    public tileIDX: number = 0; // Simple counter to track terrain in the order they were placed.\n    @observable public selectedSprite: Sprite | null = null;\n    @observable public isBoardDirty: boolean = false;\n\n\n    public removeAt(x: number, y: number): boolean {\n        const exists = this.terrain[Terrain.mkKey(x, y)]?.length;\n        if (exists) {\n            delete this.terrain[Terrain.mkKey(x, y)];\n        }\n        TERRAIN.removeTerrainAt(x, y).catch(console.error);\n        return !!exists;\n    }\n\n    /**\n     * Same as removeAt, but send events to clients.\n     * @param x\n     * @param y\n     */\n    public eraseAt(x: number, y: number) {\n        if (this.removeAt(x, y)) {\n            TerrainEraseHandler.sendTerrainRemove(x, y);\n            this.isBoardDirty = true;\n        }\n    }\n\n    /**\n     * Draw the currently-selected sprite onto the given coords.\n     * @param x\n     * @param y\n     */\n    public drawAt(x: number, y: number): boolean {\n        if (x < 0 || x > GRID_DIMENSIONS-1 || y < 0 || y > GRID_DIMENSIONS-1) return false;\n        if (this.selectedSprite) {\n            return this.placeAt(x, y, new Tile(this.selectedSprite), true);\n        }\n        return false;\n    }\n\n    /**\n     * Place the given Tile at the given coords.\n     * This method is smart, and auto-handles tile overlay logic.\n     * @param x\n     * @param y\n     * @param tile\n     * @param broadcast\n     */\n    public placeAt(x: number, y: number, tile: Tile, broadcast: boolean = false): boolean {\n        const existing = this.getAt(x, y);\n        if (existing.length && existing[existing.length-1].sprite.composite === tile.sprite.composite) {\n            // The given sprite is already at the top of the stack; Skip adding because it won't do anything.\n            return false;\n        }\n        if (tile.sprite.isBlocker) {\n            this.removeAt(x, y);\n        }\n        const k = Terrain.mkKey(x, y);\n        this.terrain[k] = this.terrain[k]?.filter(t => t.sprite.composite !== tile.sprite.composite) || [];  // Filter duplicates.\n        this.terrain[k].push(tile);\n        tile.x = x;\n        tile.y = y;\n        tile.z = this.tileIDX++;\n        TERRAIN.addTerrain(tile.x, tile.y, tile.z, tile.sprite.textureData[0]);\n        if (broadcast) TerrainAddHandler.sendTerrainAdd(this.terrain[k]);\n        if (!this.isBoardDirty) this.isBoardDirty = true;\n        return true;\n    }\n\n    public getAt(x: number, y: number): Tile[] {\n        return this.terrain[Terrain.mkKey(x, y)] || [];\n    }\n\n    /**\n     * Directly export the underlying terrain map, for serialization.\n     */\n    getDirectMap() {\n        return this.terrain;\n    }\n\n    /**\n     * Import a serialized tile map, over the current data.\n     * @param newTerrain\n     */\n    setDirectMap(newTerrain: ProtoBoard) {\n        if (!newTerrain.terrain) throw Error('Malformed packet.')\n        for (const k of Object.keys(this.terrain)) {\n            const t = this.terrain[k][0];\n            this.removeAt(t.x, t.y);\n        }\n\n        for (const k of newTerrain.terrain.tiles.sort((a, b) => a.z - b.z)) {\n            const sp = newTerrain.terrain.sprites[k.spriteIdx];\n            this.placeAt(k.x, k.y, new Tile(new Sprite(sp.id, sp.idx)), false);\n        }\n    }\n\n    private static mkKey(x: number, y: number): string {\n        return `${x},${y}`;\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport EntityLayer, {Entity} from \"../../controllers/entities\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"../packets/entityPackets\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoSprite} from \"../../data/protobufs/proto-sprite\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\nexport default class EntityUpdateHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [EntityUpdatePacket, EntityDeletePacket];\n    private readonly entities: EntityLayer;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    async clientHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n                if (!this.entities.updateEntity(ent.id, {\n                    ...ent,\n                    sprite\n                }, false)) {\n                    console.debug('Adding new entity:', ent);\n                    this.entities.addEntity(sprite, { ...ent, sprite }, false)\n                }\n            }\n        } else if (packet instanceof EntityDeletePacket) {\n            console.debug('Deleting:', packet.entityID);\n            this.entities.remove(packet.entityID, false);\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                if (!this.entities.entityIsOwned(ent.id, client.userData.username)) {\n                    throw Error('Client attempted to edit entity the do not own!')\n                }\n                const exists = this.entities.updateEntity(ent.id, {\n                    x: ent.x,\n                    y: ent.y\n                }, false);\n                if (exists) EntityUpdateHandler.sendUpdate(this.entities.getEntity(ent.id), client);\n            }\n        } else {\n            throw Error(`Client sent invalid Entity packet! ${typeof packet}`)\n        }\n    }\n\n    static sendUpdate(entity: Entity, skip?: Client) {\n        if (!entity.canMove() || !entity.visible) return;\n        const proto = new ProtoEntity().assign({\n            ...entity,\n            sprite: new ProtoSprite().assign({...entity.sprite}),\n            owners: Array.from(entity.owners)\n        });\n        const packet = new EntityUpdatePacket().assign({entities: [proto]});\n        broadcast(packet, false, skip);\n    }\n\n    static sendDelete(entity: Entity) {\n        if (!entity.canMove()) return;\n        const packet = new EntityDeletePacket().assign({entityID: entity.id});\n        console.debug(packet);\n        broadcast(packet, true);\n    }\n}\n\n","import {Graphics, Text, TextStyle} from 'pixi.js'\nimport * as util from '../ui-data/ui-util';\nimport {OVERLAY_DEPTHS, OVERLAY_LAYER} from \"../ui-data/globals\";\n\nconst defaultStyle = {\n    fontFamily: \"Arial Black\",\n    fontSize: 18,\n    fill: \"#000000\"\n};\n\nconst plates = new Set<UiNamePlate>();\n\n/**\n * Replace all plates, and shift them all to not overlap.\n */\nexport function shiftPlates() {\n    Array.from(plates).sort((p1, p2) => p1.dy - p2.dy).forEach(plate => {\n        plate.position.set(plate.dx, plate.dy);\n        plates.forEach(p => {\n            if (p === plate) return;\n            while (util.collides(plate, p)) {\n                plate.position.set(plate.dx, plate.y -= (plate.height+2));\n            }\n        });\n        plate.moveBkg();\n    })\n}\n\nexport class UiNamePlate extends Text{\n    public dx = 0;\n    public dy = 0;\n    private added = false;\n    private bkg = new Graphics();\n\n    constructor(text: string) {\n        super(text, new TextStyle(defaultStyle));\n        this.resolution = 8;\n        this.zIndex = OVERLAY_DEPTHS.NAMEPLATE;\n        this.roundPixels = true;\n    }\n\n    public setColor(color: string) {\n        if (this.style) this.style.fill = color;\n    }\n\n    public setName(name: string) {\n        this.text = name;\n    }\n\n    public setVisible(visible: boolean) {\n        if (!this.text) visible = false;\n        this.visible = visible;\n        this.bkg.visible = visible;\n    }\n\n    /**\n     * Place this plate near the given coords, sliding up to make space for preexisting plates.\n     * @param x\n     * @param y\n     */\n    public place (x: number, y: number) {\n        if (!this.added) {\n            this.added = true;\n            OVERLAY_LAYER.addChild(this);\n            OVERLAY_LAYER.addChild(this.bkg);\n            plates.add(this);\n        }\n        this.calculateBounds();\n        this.dx = Math.round(x - this.width/2);\n        this.dy = Math.round(y - this.height);\n        shiftPlates();\n    }\n\n    public moveBkg() {\n        this.bkg.clear();\n        this.bkg.beginFill(0xFFFFFF, 0.5);\n        this.bkg.drawRect(0,0,this.width+4, this.height+4);\n        this.bkg.endFill();\n        this.bkg.position.set(this.position.x-2, this.position.y-2);\n    }\n\n    /**\n     * Delete this plate, cleaning up any positioning problems.\n     */\n    remove() {\n        plates.delete(this);\n        this.destroy({\n            children: true,\n            texture: true,\n            baseTexture: true\n        });\n        this.bkg.destroy({\n            texture: true,\n            baseTexture: true,\n            children: true\n        })\n\n        shiftPlates();\n    }\n}\n","import {AnimatedSprite} from \"pixi.js\";\nimport {UiNamePlate} from \"./ui-name-plate\";\nimport {loadFramesFromGif, makeTexture, releaseGif, releaseTexture} from \"../ui-data/image-loader\";\nimport {ENTITY_LAYER, GRID_TILE_PX, TextureKey} from \"../ui-data/globals\";\nimport {Texture} from 'pixi.js';\n\nconst entities: Record<string, Promise<UiEntity>> = {};\n\nexport class UiEntity extends AnimatedSprite {\n    public readonly id: string;\n    public name: string;\n    public autoFlip = true;\n    private textureIDs: string[] = [];\n    private plate: UiNamePlate;\n    private added = false;\n    private destroyed = false;\n    private currentGif: string|null = null;\n\n    constructor(id: string, name: string) {\n        super([Texture.WHITE], true);\n        this.animationSpeed = 5/60;\n        this.id = id;\n        this.name = name;\n        this.plate = new UiNamePlate(name);\n        this.setAnimationSpeed(60);\n    }\n\n    place (tileX: number, tileY: number) {\n        if (this.destroyed) return;\n        if (!this.added) {\n            this.added = true;\n            this.play();\n            ENTITY_LAYER.addChild(this);\n        }\n        if (this.autoFlip && tileX*GRID_TILE_PX !== this.position.x){\n            if (tileX*GRID_TILE_PX > this.position.x) {\n                this.scale.x = -1;\n                this.anchor.x = 1;\n            } else {\n                this.scale.x = 1;\n                this.anchor.x = 0;\n            }\n        }\n\n        this.position.set(tileX * GRID_TILE_PX, tileY * GRID_TILE_PX);\n        this.plate.place(this.position.x + GRID_TILE_PX/2, this.position.y);\n        return this;\n    }\n\n    /**\n     * Destroy and clean up this Entity and its name plate/textures.\n     * Also flips a flag to prevent any race conditions with destroying and adding.\n     */\n    remove() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            this.stop();\n            this.destroy();\n            this.plate.remove();\n            this.textureIDs.forEach(t => releaseTexture(t));\n            if (this.currentGif) {\n                releaseGif(this.currentGif).then();\n            }\n        }\n    }\n\n    setColor(color: string) {\n        this.plate.setColor(color);\n        return this;\n    }\n\n    setHidden(hidden: boolean) {\n        this.alpha = hidden ? 0.5 : 1;\n        return this;\n    }\n\n    setName(name: string) {\n        this.name = name;\n        this.plate.setName(name);\n        return this;\n    }\n\n    setShowName(show: boolean) {\n        this.plate.setVisible(show);\n    }\n\n    async setTextures(textures: TextureKey[]) {\n        const newIDs = textures.map(t => t.uid);\n        this.stop();\n\n        const newGifUri = textures[0]?.uid.startsWith(\"gif:\") ? textures[0].uid : null;\n        if (this.currentGif && newGifUri !== this.currentGif) {\n            await releaseGif(this.currentGif);\n        }\n        this.currentGif = newGifUri;\n        if (this.currentGif) {\n            const loadedGif = await loadFramesFromGif(this.currentGif);\n            textures = loadedGif.frames;\n        }\n\n        await Promise.all(textures.map(t => makeTexture(t))).then(loaded => {\n            this.textureIDs.forEach(tid => {\n                if (!newIDs.find(id => id === tid)) releaseTexture(tid);\n            });\n            this.textureIDs = textures.map(t => t.uid);\n            this.textures = loaded;\n            // @ts-ignore\n            this._durations = textures.map(t=>t.delay || 160);\n        });\n\n        this.gotoAndPlay(1);\n        return this;\n    }\n\n    setAnimationSpeed(multiplier: number) {\n        this.animationSpeed = multiplier/60;\n    }\n}\n\n/**\n * Creates a unique entity with the given ID, or returns the existing entity that matches.\n * @param id\n * @param name\n * @param textures\n */\nexport async function createEntity(id: string, name: string, textures: TextureKey[]) {\n    if (entities[id]) {\n        return entities[id];\n    }\n    return entities[id] = new UiEntity(id, name).setTextures(textures);\n}\n\n/**\n * Fetch the requested entity, once it is finished loading.\n * @param id\n */\nexport async function getEntity(id: string) {\n    if (entities[id]) {\n        return await entities[id];\n    }\n    return null;\n}\n\n/**\n * Wait for the entity to load, if required, then destroy it safely.\n * @param id\n */\nexport async function releaseEntity(id: string) {\n    if (entities[id]) {\n        const prom = entities[id];\n        delete entities[id];\n        (await prom).remove();\n    } else {\n        console.warn(\"Tried to delete missing entity:\", id);\n    }\n}\n\n\n// @ts-ignore\nwindow.debugEntityList = entities;\n","import {Sprite} from \"../util/sprite-loading\";\nimport {v4 as uuid} from 'uuid';\nimport {observable} from \"mobx\";\nimport {isHost} from \"../net/peerconnection\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport {currentUsername} from \"../db/metadata-db\";\nimport {EntityInterface} from \"../data/interfaces/entity\";\nimport * as ENTITIES from '../renderer/ui-components/ui-entity';\n\n\nexport class Entity implements EntityInterface{\n    @observable sprite: Sprite;\n    @observable name: string;\n    @observable color: string = '#000000';\n    id: string;\n    x: number = 0;\n    y: number = 0;\n    @observable visible: boolean = true;\n    @observable owners: string[] = [];\n    @observable saveToCampaign: boolean = false;\n\n    constructor(sprite: Sprite, init?: Partial<Entity>) {\n        this.sprite = sprite;\n        this.id = uuid();\n        this.name = this.id;\n        if (init) {\n            Object.assign(this, init)\n        }\n    }\n\n   canMove() {\n        return isHost() || this.owners.includes(currentUsername.get());\n   }\n}\n\nexport default class EntityLayer {\n    private readonly entities: Record<string, Entity> = {};\n    @observable public showNames = true;\n    @observable public selected: Entity|null = null;\n    @observable public isDirty: boolean = false;\n\n    public remove(id: string, sendUpdate: boolean = true): boolean {\n        const existing = this.entities[id];\n        if (existing) {\n            ENTITIES.releaseEntity(id).catch(console.error);\n            delete this.entities[id];\n            if (sendUpdate) {\n                this.isDirty = true;\n                EntityUpdateHandler.sendDelete(existing);\n            }\n        }\n        if (existing === this.selected) this.selected = null;\n        return !!existing;\n    }\n\n    public addEntity(sprite: Sprite, opts?: Partial<Entity>, sendUpdate: boolean = true) {\n        const ent = new Entity(sprite, opts);\n\n        this.remove(ent.id, sendUpdate);\n\n        ENTITIES.createEntity(ent.id, ent.name, sprite.textureData).then(e => {\n            e.setColor(ent.color);\n            e.setHidden(!ent.visible);\n            e.place(ent.x, ent.y);\n            e.setShowName(this.showNames);\n        }).catch(console.error);\n\n        this.entities[ent.id] = ent;\n\n        if (sendUpdate) {\n            EntityUpdateHandler.sendUpdate(ent);\n            this.isDirty = true;\n        }\n\n        return ent;\n    }\n\n    public select(entEle: Entity|null) {\n        this.selected = entEle;\n        console.debug('Selected entity:', this.selected);\n    }\n\n    public entityIsOwned(id: string, checkOwner: string) {\n        const existing = this.entities[id];\n        if (existing) {\n            return existing.owners.includes(checkOwner);\n        }\n        return false;\n    }\n\n    public getEntity(id: string) {\n        return this.entities[id];\n    }\n\n    public updateEntity(id: string, props: Partial<Entity>, sendUpdate: boolean=true) {\n        const existing = this.entities[id];\n        if (existing) {\n            const oldSprite = existing.sprite;\n\n            Object.assign(existing, props);\n            ENTITIES.getEntity(id).then(ent => {\n                if (ent) {\n                    ent.setColor(existing.color);\n                    ent.setHidden(!existing.visible);\n                    ent.setName(existing.name);\n                    ent.place(existing.x, existing.y);\n                    if (existing.sprite.composite !== oldSprite.composite) {\n                        ent.setTextures(existing.sprite.textureData).catch(console.error);\n                    }\n                }\n            })\n            if (sendUpdate) {\n                EntityUpdateHandler.sendUpdate(existing);\n                this.isDirty = true;\n            }\n        }\n        return !!existing;\n    }\n\n    public setEntitySprite(entity: Entity, sprite: Sprite) {\n        this.isDirty = true;\n        entity.sprite = sprite;\n        ENTITIES.getEntity(entity.id).then(e => {\n            e?.setTextures(sprite.textureData);\n        });\n        EntityUpdateHandler.sendUpdate(entity);\n    }\n\n    setDisplayNamePlates(show: boolean) {\n        this.showNames = show;\n        this.getEntityList().forEach(ent => {\n            ENTITIES.getEntity(ent.id).then(ent => {\n                ent?.setShowName(show);\n            })\n        })\n    }\n\n    /**\n     * Directly export the underlying entity list, for serialization.\n     */\n    getEntityList() {\n        return Object.values(this.entities);\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport abstract class PreCheck {\n    protected readonly controller: GameController;\n    run: OmitThisParameter<(isHost: boolean, client: Client) => Promise<void>>;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n        this.run = this.runHandler.bind(this);\n    }\n\n    private async runHandler(isHost: boolean, client: Client){\n        return isHost ? this.host(client) : this.client(client);\n    }\n\n    abstract client(client: Client): Promise<void>;\n    abstract host(client: Client): Promise<void>;\n}\n","import {db} from './database';\n\nexport interface UserData {\n    id: number;\n    username: string;\n    keyCodes: string[];\n    lastSeen: number;\n}\n\n\nexport async function addNewUser(user: Partial<UserData>): Promise<UserData> {\n    const data = {\n        id: 0,\n        username: '',\n        keyCodes: [],\n        ...user,\n        lastSeen: new Date().getTime()\n    };\n    await db.users.put(data);\n    return data;\n}\n\nexport async function updateUser(user: UserData): Promise<number> {\n    return db.users.update(user.id, user);\n}\n\nexport async function getUser(username: string): Promise<UserData|null> {\n    return db.users.where({username}).first();\n}\n\n/**\n * Checks if the given User code matches an existing username.\n * If so, also updates the lastSeen time of the user.\n * @param userName\n * @param keyCode\n */\nexport async function checkUserCredentials(userName: string, keyCode: string): Promise<UserData> {\n    const match = await db.users.where({username: userName, keyCodes: keyCode}).first();\n\n    if (match) {\n        match.lastSeen = new Date().getTime();\n        await updateUser(match);\n    }\n\n    return match;\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {addNewUser, checkUserCredentials, getUser, updateUser} from \"../../db/user-db\";\nimport {Meta, metadata} from '../../db/metadata-db';\nimport {ReadyPacket, SignaturePacket} from \"../packets/util-packets\";\n\n\nexport default class HandShakeCheck extends PreCheck {\n    /**\n     * Accepts a signed JSON packet, and validates the signature.\n     * The validation is an async race condition, so responds with an OK packet once finished.\n     * @param client\n     */\n    async client(client: Client): Promise<void> {\n        const username = await metadata.get(Meta.USERNAME);\n        const packet = new SignaturePacket().assign({\n            username\n        });\n        await client.send(packet);\n\n        await client.getNextPacket(ReadyPacket); // Wait for host to allow out login.\n    }\n\n    /**\n     * Sends a signed JSON packet, to validate this host ID.\n     * Awaits an OK Packet from the client, once validation is complete.\n     * @param client\n     */\n    async host(client: Client): Promise<void> {\n        // Wait for client to send a message containing username:\n        const data: SignaturePacket = await client.getNextPacket(SignaturePacket);\n        const {username} = data;\n\n        let user = await checkUserCredentials(username, client.id);\n        if (!user) {\n            let existing = await getUser(username);\n\n            await this.controller.lobby.addPendingLogin(username, client.id);  // Will be approved via UI, by the Host.\n\n            if (!existing) {\n                console.log(`Added new user: ${username}, ${client.id}`);\n                existing = await addNewUser({username, keyCodes: [client.id]});\n            } else {\n                console.log(`Updated existing user: ${username}, ${client.id}`);\n                existing.keyCodes.push(client.id);\n                await updateUser(existing);\n            }\n            user = existing;\n        }\n\n        client.userData = user;\n        await client.send(new ReadyPacket())\n    }\n}\n\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\n\n\nexport default class BoardSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        await client.send(await this.controller.buildProtoBoard(false));\n    }\n}\n","import {observable} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\nimport {Button} from \"@material-ui/core\";\nimport React from \"react\";\n\n\nexport interface PendingUser {\n    username: string;\n    keyCode: string;\n    approve: Function;\n    reject: Function;\n}\n\nexport default class Lobby {\n    @observable public readonly pendingLogins: PendingUser[] = [];\n    @observable public myName: string = '';\n    private readonly blacklist: Set<String> = new Set();\n\n    private notify(title: string, body: string, iconURL: string='') {\n        Notification.requestPermission().then(function(result) {\n            if (result === 'granted') {\n                new Notification(title, {\n                    body,\n                    icon: iconURL\n                });\n            }\n        });\n    }\n\n    /**\n     * Adds the given login attempt to the pending list,\n     * and returns a Promise that will either resolve or reject eventually at the Hosts' discretion.\n     * @param username\n     * @param keyCode\n     */\n    public async addPendingLogin(username: string, keyCode: string) {\n        return new Promise((approve, reject) => {\n            const existing = Array.from(this.pendingLogins).find(pe => pe.keyCode === keyCode);\n            const pending = { username, keyCode, approve, reject };\n\n            if (existing) {\n                this.removePending(existing);\n            }\n            this.pendingLogins.push(pending);\n\n            if (!this.blacklist.has(keyCode)) {\n                const tID = notifications.warning(`Unknown device (${keyCode}) wants to join as \"${username}\".`, {\n                    preventDuplicate: true,\n                    action: <Button\n                        variant={\"outlined\"}\n                        onClick={()=>{notifications.close(tID); this.approveUser(pending)}}\n                    >\n                        Approve\n                    </Button>\n                });\n                this.notify('New Unknown User', `Unknown device (${keyCode}) wants to join as \"${username}\".`);\n            }\n        });\n    }\n\n    public approveUser(user: PendingUser) {\n        user.approve(true);\n        notifications.success(`Approved user \"${user.username}\".`)\n        this.removePending(user);\n    }\n\n    public rejectUser(user: PendingUser) {\n        user.reject(false);\n        notifications.error(`Rejected device (${user.keyCode}).`)\n        this.removePending(user);\n        this.blacklist.add(user.keyCode);\n    }\n\n    private removePending(user: PendingUser) {\n        const idx = this.pendingLogins.findIndex(u => u.keyCode === user.keyCode);\n        if (idx >= 0) {\n            this.pendingLogins.splice(idx, 1);\n        }\n    }\n}\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {PingPacket} from \"../packets/util-packets\";\nimport {Client} from \"../peerconnection\";\n\n\nexport default class PingHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [PingPacket];\n\n    async clientHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    private static handlePing(client: Client) {\n        client.lastPing = Date.now();\n    }\n}\n","import {db} from './database';\nimport Dexie from \"dexie\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as encoder  from '../net/messageEncoder'\nimport notifications from \"../../ui-components/notifications\";\n\nexport interface BoardWrapper {\n    name: string;\n    campaignID: number;\n    data: Uint8Array;\n}\n\n\nexport async function save(campaignID: number, name: string, board: ProtoBoard) {\n    try {\n        console.log('Persistent storage enabled:', await navigator.storage.persist());\n    } catch (err) {\n        console.error(err);\n    }\n    return db.boards.put({\n        name,\n        campaignID,\n        data: await encoder.encode(board)\n    }).catch(err => {\n        notifications.error('Error saving board!');\n        console.error(err);\n    })\n}\n\nexport async function load(campaignID: number, name: string): Promise<null|ProtoBoard> {\n    const res: BoardWrapper|null = await db.boards.where({campaignID, name}).first().catch(err => {\n        notifications.error('Error loading board!');\n        console.error(err);\n    })\n\n    if (res) {\n        return encoder.decode(res.data);\n    } else {\n        return null;\n    }\n}\n\nexport async function getAvailable(campaignID: number): Promise<string[]> {\n    try {\n        return (await db.boards.where('[campaignID+name]').between([campaignID, Dexie.minKey], [campaignID, Dexie.maxKey]).toArray()).map(b=>b.name);\n    } catch(err) {\n        notifications.error('Error fetching available boards!');\n        console.error(err);\n        return [];\n    }\n}\n\n\nexport async function deleteBoard(campaignID: number, name: string) {\n    return db.boards.where({campaignID, name}).delete();\n}\n","import {observable} from \"mobx\";\nimport {EntityInterface} from \"../data/interfaces/entity\";\n\nexport default class Campaign {\n    public readonly name: string;\n    @observable public boards: string[] = [];\n    @observable public loadedBoard: string|null = null;\n    @observable.shallow public readonly characters: EntityInterface[] = [];\n    public readonly id: number = -1;\n    public readonly timeCreated = Date.now();\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n","/**\n * Strip out any proxied observables, and convert them to standard values.\n * @param obj\n */\nexport default function stripProxy(obj: any): any {\n    const ret = {};\n    for (const e of Object.entries(obj)) {\n        let v = e[1];\n\n        if (v instanceof Array) {\n            v = Array.from(v);\n        }\n        // @ts-ignore\n        ret[e[0]] = v;\n    }\n    return ret;\n}\n","import Campaign from \"../controllers/campaign\";\nimport stripProxy from \"../util/deproxy\";\nimport {db} from './database';\n\ndb.campaigns.mapToClass(Campaign);\n\nexport async function saveCampaign(camp: Campaign) {\n    console.info('Saved campaign:', camp);\n    return db.campaigns.update(camp.id, stripProxy(camp));\n}\n\nexport async function createCampaign(name: string): Promise<any> {\n    const obj: any = {...new Campaign(name), id: null};\n    delete obj.id;\n\n    const res = await db.campaigns.put(stripProxy(obj));\n    console.info('Saved new campaign:', res);\n    return db.campaigns.get({id: res});\n}\n\nexport async function getAllCampaigns(): Promise<Campaign[]> {\n    return db.campaigns.toArray()\n}\n\nexport async function getCampaign(id: number): Promise<Campaign|null> {\n    return db.campaigns.where({id}).first()\n}\n","import {getAllCampaigns, getCampaign, saveCampaign, createCampaign} from \"../db/campaign-db\";\nimport * as boardDB from '../db/board-db';\nimport Campaign from \"../controllers/campaign\";\n\n\nexport default class CampaignLoader {\n    /**\n     * Get an array of all saved Campaign objects.\n     */\n    public static async getAvailable(): Promise<Campaign[]> {\n        return getAllCampaigns()\n    }\n\n    /**\n     * Load a Campaign object from the db, using its unique ID.\n     * @param id\n     */\n    public static async loadCampaign(id: number): Promise<Campaign|null> {\n        const campaign = await getCampaign(id);\n\n        if (campaign) campaign.boards = await boardDB.getAvailable(id);\n\n        if (campaign && campaign.loadedBoard && !campaign.boards.includes(campaign.loadedBoard)) {\n            campaign.loadedBoard = null;\n        }\n\n        return campaign;\n    }\n\n    /**\n     * Save an existing Campaign object back to the database.\n     * @param camp\n     */\n    public static async saveCampaign(camp: Campaign): Promise<number> {\n        return saveCampaign({\n            ...camp,\n            boards: Array.from(camp.boards),\n            characters: Array.from(camp.characters)\n        }).catch(err => {\n            console.error(err)\n            return -1;\n        });\n    }\n\n    /**\n     * Create a new Campaign object, pre-saved in the database.\n     * @param name\n     */\n    public static async createCampaign(name: string): Promise<Campaign> {\n        return createCampaign(name);\n    }\n}\n\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard} from \"../../data/protobufs/proto-tiles\";\nimport {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport default class BoardReloadHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [ProtoBoard];\n    private readonly controller: any;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n    async clientHandler(client: Client, packet: ProtoBoard): Promise<void> {\n        return this.controller.loadFromProtoBoard(packet);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client tried to send Board Update!')\n    }\n}\n","import React from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField\n} from \"@material-ui/core\";\n\nexport function InputDialog(props: {\n    open: boolean\n    title: string,\n    body: string,\n    tooltip: string,\n    onSubmit: Function,\n    onCancel: Function,\n    acceptText?: string\n}) {\n    const [text, setText] = React.useState('');\n\n    const handleClose = () => {\n        props.onCancel();\n    };\n    const handleText = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setText(event.target.value);\n    }\n\n    return (\n        <div>\n            <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {props.body}\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label={props.tooltip}\n                        type=\"text\"\n                        fullWidth\n                        value={text}\n                        onChange={handleText}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => {\n                        handleClose();\n                        props.onCancel()\n                    }} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => {\n                        props.onSubmit(text);\n                        setText('')\n                    }} color=\"primary\">\n                        {props.acceptText || 'Connect'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n\n\nexport default function ConfirmPrompt(props: {\n    open: boolean,\n    onCancel: any,\n    onConfirm: any,\n    title: string,\n    prompt: string,\n    confirmButton?: string,\n    cancelButton?: string\n}) {\n    return (\n        <div>\n            <Dialog\n                open={props.open}\n                onClose={props.onCancel}\n                aria-labelledby=\"confirm-dialog-title\"\n                aria-describedby=\"confirm-dialog-description\"\n            >\n                <DialogTitle className=\"confirm-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText className=\"prompt-dialog-description\">\n                        {props.prompt}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onCancel} color=\"primary\">\n                        {props.cancelButton||'cancel'}\n                    </Button>\n                    <Button onClick={props.onConfirm} color=\"primary\" autoFocus>\n                        {props.confirmButton||'confirm'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from 'react';\nimport '../styles/yt-player-style.scss';\nimport YouTube from 'react-youtube';\nimport {broadcast, netMode, NetworkMode, isHost} from \"../game/net/peerconnection\";\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport {Button, Fab, IconButton, Tooltip} from \"@material-ui/core\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../game/net/packets/media-packets\";\nimport {observer} from \"mobx-react-lite\";\nimport {InputDialog} from \"./prompts\";\nimport {observable} from \"mobx\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\n\nconst PLAYER_OPTS = {\n    playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        mute: 0\n    },\n};\n\ninterface PlayerConfig {\n    volume: number;\n    loop: boolean;\n    shuffle: boolean;\n}\n\nconst config: PlayerConfig = observable.object({\n    volume: 100,\n    loop: true,\n    shuffle: true\n});\n\nfunction saveConf() {\n    metadata.store(Meta.YT_PLAYER_CONFIG, config).catch(console.error);\n}\n\n/**\n * The current player. There should only ever be one at a time. May be null until initialized.\n */\nexport let player: any = null;\n\n/**\n * Get a summary of the currently-playing media, if any is available.\n */\nexport const getPlayerStatus = (): Partial<MediaStatusPacket>|null => {\n    if (!player) return null;\n\n    const currentVideo: string = player.getVideoData().video_id;\n    const currentTime: number = Math.floor(player.getCurrentTime());\n    const playbackRate: number = player.getPlaybackRate();\n    const paused: boolean = player.getPlayerState() === YouTube.PlayerState.PAUSED;\n\n    if (!currentVideo) return null;\n\n    return {\n        currentVideo,\n        currentTime,\n        playbackRate,\n        paused\n    }\n};\n\n\nexport const YoutubePlayerInterface = observer(() => {\n    const [visible, setVisible] = React.useState(false);\n\n    React.useMemo(() => {\n        metadata.get(Meta.YT_PLAYER_CONFIG).then(async (res: PlayerConfig|null) => {\n            if (res) {\n                Object.assign(config, res);\n            }\n        })\n    }, []);\n\n    const tools = (netMode.get() === NetworkMode.HOST && player) ?\n        <div className={'ytPlayerHostToolbar'}>\n            <LoadVideoButton player={player} />\n            <LoadPlaylistButton player={player} />\n            <ShuffleButton player={player}/>\n        </div> : null;\n\n    return <div style={{pointerEvents: 'auto'}} className={`ytPlayerIcon ${visible? 'visible':'hidden'}`}>\n        <Tooltip\n            title={\"Media Controls\"}\n        >\n            <Fab\n                color=\"default\"\n                onClick={()=>{setVisible(!visible)}}\n            >\n                <YouTubeIcon className={`ytPlayerIconInner ${visible? 'visible':'hidden'}`} />\n            </Fab>\n        </Tooltip>\n\n        <div className={`ytPlayerWrapper ${visible? 'visible':'hidden'}`}>\n            {tools}\n            <YoutubePlayer\n                loop={config.loop}\n                shuffle={config.shuffle}\n                volume={config.volume}\n            />\n        </div>\n    </div>;\n});\n\n\nexport const YoutubePlayer = (props: {loop: boolean, shuffle: boolean, volume: number}) => {\n    const [mediaPlayer, setPlayer] = React.useState<any>(null);\n\n    React.useEffect(() => {\n        if (!mediaPlayer) return;\n\n        player = mediaPlayer;\n\n        if (!isHost()) broadcast(new MediaRequestPacket(), false).catch(console.error);\n\n        const timer = setInterval(() => {\n            // Periodically poll for a new user-set volume, and save the new result.\n            const v = mediaPlayer.getVolume();\n            if (mediaPlayer.getPlayerState() === YouTube.PlayerState.PLAYING && v !== config.volume) {\n                config.volume = v;\n                saveConf();\n            }\n        }, 15000);\n\n        return () => {\n            player = null;\n            clearInterval(timer);\n        }\n    }, [mediaPlayer]);\n\n    const onReady = (event: any) => { // target, data\n        setPlayer(event.target);\n    }\n\n    const onPlay = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video play:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onPause = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video pause:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onError = (event: any) => {\n        event.target.nextVideo();\n    }\n\n    const onStateChange = (event: any) => {\n        /*  BUFFERING: 3, CUED: 5, ENDED: 0, PAUSED: 2, PLAYING: 1, UNSTARTED: -1 */\n        if (event.data === YouTube.PlayerState.CUED) {\n            console.info('Video/Playlist Cued!', mediaPlayer, mediaPlayer.getVideoData());\n            // Reference: https://developers.google.com/youtube/iframe_api_reference#onStateChange\n            mediaPlayer.setLoop(props.loop);  // Loop the playlist.\n            mediaPlayer.setShuffle(props.shuffle); // Can be toggled to shuffle/restore order.\n            mediaPlayer.setVolume(props.volume); // 0-100.\n\n            if (mediaPlayer.getPlaylist()) {\n                mediaPlayer.playVideoAt(0);\n            } else {\n                mediaPlayer.playVideo();\n            }\n        }\n    }\n\n    return <div style={{pointerEvents: 'auto'}}>\n        <YouTube\n            // @ts-ignore\n            opts={PLAYER_OPTS}\n            id={'yt-player'}\n            onReady={onReady}\n            onPlay={onPlay}\n            onPause={onPause}\n            onError={onError}\n            onStateChange={onStateChange}\n            className={'yt-player-class'}\n        />\n    </div>;\n};\n\n\nexport const LoadPlaylistButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadPlaylist = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input);\n        let id = parser.get('list') || input;\n\n        if (id.includes('=')) id = input.split('=')[1];\n\n        props.player.cuePlaylist({\n            list: id,\n            listType: 'playlist',\n            index: 0,\n            startSeconds: 0\n        });\n    };\n\n    return <div className={'ytPlayerPlaylistButton'}>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Playlist\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Playlist'}\n            body={'Enter a YouTube Playlist:'}\n            tooltip={'Playlist URL'}\n            onSubmit={loadPlaylist}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\nexport const LoadVideoButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadVideo = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input.split('?')[1] || '');\n        let id = parser.get('v') || input.substring(input.lastIndexOf('/')+1, input.indexOf('?'));\n        let time = parseInt(parser.get('t') || '0');\n\n        if (id.includes('/')) id = input.split('/')[input.split('/').length-1];\n\n        props.player.cueVideoById(id, time);\n    };\n\n    return <div className={'ytPlayerVideoButton'}>\n        <Button\n            style={{color: 'rgb(14,142,191)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Video\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Video'}\n            body={'Enter a YouTube Video:'}\n            tooltip={'Video URL'}\n            onSubmit={loadVideo}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\n\nexport const ShuffleButton = observer((props: {player: any}) => {\n    const toggle = () => {\n        config.shuffle = !config.shuffle;\n        props.player.setShuffle(config.shuffle);\n\n        saveConf();\n    }\n\n    return <Tooltip title={\"Shuffle\"}>\n        <IconButton\n            children={<ShuffleIcon className={`ytPlayerShuffleIcon ${config.shuffle ? 'active': 'inactive'}`}/>}\n            onClick={toggle}\n        />\n    </Tooltip>\n});\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {Client} from \"../peerconnection\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../packets/media-packets\";\nimport GameController from \"../../controllers/game\";\nimport notifications from \"../../../ui-components/notifications\";\nimport {getPlayerStatus, player} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSyncHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [MediaStatusPacket, MediaRequestPacket];\n    private readonly controller: GameController;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n\n    async clientHandler(client: Client, packet: MediaStatusPacket): Promise<void> {\n        if (!player) {\n            notifications.warning('Media not available yet.');\n            return;\n        }\n        if (packet.paused) {\n            player.pauseVideo();\n            return;\n        }\n        player.setPlaybackRate(packet.playbackRate);\n        player.cueVideoById({\n            videoId: packet.currentVideo,\n            startSeconds: packet.currentTime\n        });\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        if (packet instanceof MediaRequestPacket) {\n            const status = getPlayerStatus();\n\n            if (status) {\n                await client.send(new MediaStatusPacket().assign(status));\n            }\n        } else {\n            throw new Error('Client attempted to send media commands!');\n        }\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {MediaStatusPacket} from \"../packets/media-packets\";\nimport {getPlayerStatus} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        const status = getPlayerStatus();\n\n        if (status) {\n            await client.send(new MediaStatusPacket().assign(status));\n        }\n    }\n}\n","// Build grid (also functions as the input handler):\nimport * as PIXI from \"pixi.js\";\nimport { Texture } from \"pixi.js\";\nimport {GRID_TILE_PX} from \"../ui-data/globals\";\n\n\nPIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST\n\nexport const grid = new PIXI.TilingSprite(makeGridTexture(), 100, 100);\ngrid.roundPixels = false;\ngrid.position.set(0,0);\ngrid.visible = true;\ngrid.alpha = 0.5;\n\n/**\n * Extremely naive implementation to find optimal repeating texture size.\n */\nfunction findPow() {\n    for (let i=1; i < 20; i++) {\n        if (Math.pow(i, 2) % GRID_TILE_PX === 0) return Math.pow(i, 2);\n    }\n    console.warn('Unable to find satisfactory texture size for grid.');\n    return GRID_TILE_PX*3;\n}\n\nfunction makeGridTexture() {\n    const render = document.createElement('canvas');\n    const ctx = render.getContext('2d')!;\n    const dim = findPow();// Power of two divisible by 48px (tile width).\n    render.width = dim;\n    render.height = dim;\n    ctx.imageSmoothingEnabled = false;\n    ctx.clearRect(0,0,dim,dim);\n    ctx.fillStyle = 'rgba(255,255,255,0.5)';\n\n    for (let y=0; y < Math.ceil(dim / GRID_TILE_PX); y++) {\n        for (let x=0; x < Math.ceil(dim / GRID_TILE_PX); x++) {\n            ctx.fillRect(0,y*GRID_TILE_PX, dim, 2);\n\n            ctx.fillRect(x*GRID_TILE_PX,0, 2, dim);\n        }\n    }\n    return Texture.from(render);\n}\n\n/**\n * Toggle grid visibility.\n * @param showGrid\n */\nexport function setVisible(showGrid: boolean) {\n    grid.visible = showGrid;\n}\n\n// @ts-ignore\nwindow.debugGridToggle = setVisible;\n","import * as PIXI from \"pixi.js\";\nimport {GRID_TILE_PX, OVERLAY_DEPTHS, OVERLAY_LAYER} from \"../ui-data/globals\";\n\nexport const DEFAULT_PEN_COLOR = 0xFFFF00;\nlet cx = 0, cy = 0, w = 0, c = DEFAULT_PEN_COLOR;\nlet tx = 0, ty = 0;\n\nOVERLAY_LAYER.sortableChildren = true;\n\nexport const tooltip = new PIXI.Graphics();\ntooltip.zIndex = OVERLAY_DEPTHS.TOOLTIP;\nsetSize(1);\nOVERLAY_LAYER.addChild(tooltip);\n\nexport function setTilePos(x: number, y: number) {\n    tx = x;\n    ty = y;\n    cx = x * GRID_TILE_PX - (w-GRID_TILE_PX)/2;\n    cy = y * GRID_TILE_PX - (w-GRID_TILE_PX)/2;\n    tooltip.position.set(cx, cy);\n}\n\n/** Center the tooltip without resizing. */\nexport function recenter() {\n    setTilePos(tx, ty);\n}\n\n/** Sets the length of each side of the tooltip. */\nexport function setSize(tiles: number) {\n    w = (Math.max(1, tiles)-1)*2*GRID_TILE_PX+GRID_TILE_PX;\n    draw();\n    recenter();\n}\n\nexport function setColor(color: number) {\n    c = color;\n    draw();\n}\n\nexport function setVisible(visible: boolean) {\n    tooltip.visible = visible;\n}\n\nfunction draw() {\n    tooltip.clear();\n    tooltip.lineStyle(4, c);\n    tooltip.drawRect(0, 0, w, w);\n}\n","import * as PIXI from 'pixi.js'\nimport {Viewport} from 'pixi-viewport'\nimport {\n    CULLER,\n    ENTITY_LAYER,\n    getForceCull, GRID_DIMENSIONS,\n    GRID_TILE_PX,\n    OVERLAY_LAYER,\n    setForceCull,\n    TERRAIN_LAYER,\n    WORLD_SIZE_PX\n} from './ui-data/globals';\nimport * as GRID from './ui-components/ui-grid';\nimport {EVENT_STREAM, GridPoint} from \"./ui-data/ui-event-stream\";\nimport * as TOOLTIP from \"./ui-components/ui-tooltip\";\n\n/*\nexport * as CONSTS from './ui-data/globals';\nexport * as EVENTS from './ui-data/ui-event-stream';\nexport * as TERRAIN from './ui-components/ui-terrain';\nexport * as ENTITIES from './ui-components/ui-entity';\nexport * as SHAPES from './ui-components/ui-shape';\nexport * as MARKER from './ui-components/ui-marker';\n*/\n\nlet zoomEnabled = true;\nconst app = new PIXI.Application({ resizeTo: document.body, backgroundColor: 0x484848 });\napp.view.classList.add(\"MAIN-GAME-CANVAS\");\ndocument.body.appendChild(app.view);\n\napp.view.addEventListener('contextmenu', (ev: any) => {\n    ev.preventDefault();\n    return false;\n});\n\nPIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n\n// create viewport\nconst viewport = new Viewport({\n    screenWidth: app.view.offsetWidth,\n    screenHeight: app.view.offsetHeight,\n    worldWidth: WORLD_SIZE_PX,\n    worldHeight: WORLD_SIZE_PX\n});\n\napp.stage.addChild(viewport);\nviewport\n    .drag()\n    //.pinch()  // Disabled, because this is buggy & not really required for mobile.\n    .bounce()\n    .wheel({smooth: 60/5})\n    .decelerate({ friction: .92 })\n    .clamp({direction: 'all'})\n    .clampZoom({minScale: 0.5, maxScale: 4})\n    .moveCenter(WORLD_SIZE_PX/2, WORLD_SIZE_PX/2);\n\n\n// Add all parents to viewport:\nviewport.addChild(TERRAIN_LAYER);\nviewport.addChild(GRID.grid);\nviewport.addChild(ENTITY_LAYER);\nviewport.addChild(OVERLAY_LAYER);\n\nCULLER.addContainer(TERRAIN_LAYER, true);\nCULLER.cull(viewport.getVisibleBounds());\n\n// cull whenever the viewport moves\nPIXI.Ticker.shared.add(() => {\n    if (viewport.dirty || getForceCull()) {\n        CULLER.cull(viewport.getVisibleBounds());\n        viewport.dirty = false;\n        setForceCull(false);\n\n        // Rather than rendering a huge grid texture, creep the grid along with the camera:\n        GRID.grid.position.set(Math.max(0, viewport.left - viewport.left % GRID_TILE_PX), Math.max(0, viewport.top - viewport.top % GRID_TILE_PX));\n        GRID.grid.width = Math.min(WORLD_SIZE_PX, viewport.screenWidthInWorldPixels + GRID_TILE_PX);\n        GRID.grid.height = Math.min(WORLD_SIZE_PX, viewport.screenHeightInWorldPixels + GRID_TILE_PX);\n    }\n});\n\n\nwindow.addEventListener('resize', () => {\n    const t = getCenterViewportTile();\n    updateInPage(false);\n    viewport.moveCenter(t.tx*GRID_TILE_PX+GRID_TILE_PX/2, t.ty*GRID_TILE_PX+GRID_TILE_PX/2);\n});\nwindow.addEventListener('load', function () {\n    updateInPage(true);\n})\n\nEVENT_STREAM.on('hover', ev => {\n    TOOLTIP.setTilePos(ev.tx , ev.ty);\n});\n\n\napp.view.addEventListener('mousedown', e => {\n    const type = e.button === 1 ? 'mouse-middle-down' : e.button === 0 ? 'mouse-down' : 'mouse-right-down';\n    fireMouseEvent(type, e);\n});\n\napp.view.addEventListener(\"mouseenter\", () => {\n    viewport.pause = !zoomEnabled;\n});\napp.view.addEventListener(\"mouseleave\", () => {\n    viewport.pause = true;\n});\n\nwindow.addEventListener('mouseup', e => {\n    const type = e.button === 1 ? 'mouse-middle-up' : e.button === 0 ? 'mouse-up' : 'mouse-right-up';\n    fireMouseEvent(type, e);\n});\n\n\nfunction fireMouseEvent(type: any, e: any) {\n    const bounds = e.target.getBoundingClientRect();\n    const x = e.clientX - bounds.left;\n    const y = e.clientY - bounds.top;\n    const px = viewport.left + (x/bounds.width) * viewport.screenWidthInWorldPixels;\n    const py = viewport.top + (y/bounds.height) * viewport.screenHeightInWorldPixels;\n\n    EVENT_STREAM.emit(type, {\n        tx: Math.min(GRID_DIMENSIONS-1, Math.max(0, Math.floor(px/GRID_TILE_PX))),\n        ty: Math.min(GRID_DIMENSIONS-1, Math.max(0, Math.floor(py/GRID_TILE_PX)))\n    })\n}\n\n\n/**\n * Enable or disable camera zoom+pan inputs.\n * @param enabled\n */\nexport function toggleViewportInput(enabled: boolean) {\n    zoomEnabled = enabled;\n    viewport.pause = !enabled;\n}\n\n/**\n * Find the tile that is currently centered within the viewport.\n */\nexport function getCenterViewportTile(): GridPoint {\n    return {\n        tx: Math.floor((viewport.left + viewport.screenWidthInWorldPixels/2)/GRID_TILE_PX),\n        ty: Math.floor((viewport.top + viewport.screenHeightInWorldPixels/2)/GRID_TILE_PX)\n    }\n}\n\nexport function setZoom(scale: number) {\n    viewport.setZoom(scale, true);\n}\n\nexport function getZoom() {\n    return viewport.scaled;\n}\n\n/**\n * Adjusts all sizes and elements to be sure they fit within the window properly.\n * Automatically called when the window resizes and when the DOM initially loads.\n * @param center\n */\nexport function updateInPage(center = false) {\n    app.resize();  // Trigger resize right away so we can resize viewport without a race condition.\n    viewport.resize(app.view.offsetWidth, app.view.offsetHeight);\n    viewport.dirty = true\n\n    if (center) {\n        viewport.moveCenter(WORLD_SIZE_PX/2, WORLD_SIZE_PX/2);\n    }\n}\n","import { Graphics } from \"pixi.js\";\nimport {GRID_TILE_PX, OVERLAY_DEPTHS, OVERLAY_LAYER} from \"../ui-data/globals\";\n\nexport enum SHAPE_TYPES {\n    circle = 'circle',\n    rectangle = 'rectangle',\n    cone = 'cone'\n}\n\n\nexport class UiShape {\n    private readonly gr: Graphics;\n    private _type: SHAPE_TYPES;\n    private _thickness: number = 1;\n    private _color: number = 0x000000;\n    private _fill: number = -1;\n    private _alpha: number = 1;\n    private _width: number = 0;\n    private _height: number = 0;\n    private tx: number = 0;\n    private ty: number = 0;\n    private added = false;\n\n    constructor(type: SHAPE_TYPES) {\n        this._type = type;\n        this.gr = new Graphics();\n        this.gr.zIndex = OVERLAY_DEPTHS.SHAPES;\n    }\n\n    type(type: SHAPE_TYPES) {\n        this._type = type;\n        this.redraw();\n        return this;\n    }\n\n    setVisible(visible: boolean) {\n        this.gr.visible = visible;\n        return this;\n    }\n\n    /**\n     * Set the size of this object.\n     * If ignored, height matches width. Height currently only applies to rectangles.\n     * @param widthTiles\n     * @param heightTiles\n     */\n    size(widthTiles: number, heightTiles = -1) {\n        this._width = widthTiles * GRID_TILE_PX;\n        this._height = (heightTiles > -1 ? heightTiles : widthTiles) * GRID_TILE_PX;\n        this.redraw();\n        return this;\n    }\n\n    sizePx(px: number) {\n        this._width = this._height = px;\n        this.redraw();\n        return this;\n    }\n\n    color(col: number) {\n        if (this._color !== col) {\n            this._color = col;\n            this.redraw();\n        }\n        this.redraw();\n        return this;\n    }\n\n    setFillColor(col: number, alpha: number = 0.5) {\n        this._fill = col;\n        this._alpha = alpha;\n        this.redraw();\n        return this;\n    }\n\n    thickness(thickness: number) {\n        if (this._thickness !== thickness) {\n            this._thickness = thickness;\n            this.redraw();\n        }\n        return this;\n    }\n\n    private redraw() {\n        this.gr.clear();\n        this.gr.lineStyle(this._thickness, this._color);\n        if (this._fill >= 0) {\n            this.gr.beginFill(this._fill, this._alpha);\n            this.draw();\n            this.gr.endFill();\n        }\n        this.gr.lineStyle(this._thickness, this._color);\n        this.draw();\n        return this;\n    }\n\n    private draw() {\n        if (!this._width) return;\n        switch (this._type) {\n            case SHAPE_TYPES.circle:\n                this.gr.drawCircle(this._width, this._width, this._width);\n                this.gr.pivot.x = this.gr.width/2;\n                this.gr.pivot.y = this.gr.height/2;\n                break\n            case SHAPE_TYPES.rectangle:\n                this.gr.drawRect(0, 0, this._width, this._height);\n                this.gr.pivot.x = this.gr.width/2;\n                this.gr.pivot.y = this.gr.height/2;\n                break;\n            case SHAPE_TYPES.cone:\n                this.gr.drawPolygon([\n                    0, this._width/2,\n                    this._width, 0,\n                    this._width, this._width,\n                    0, this._width/2\n                ]);\n                this.gr.pivot.x = 0;\n                this.gr.pivot.y = this._width/2;\n                break;\n        }\n        // this.gr.drawCircle(this.gr.pivot.x, this.gr.pivot.y, 1);\n    }\n\n    setPos(tx: number, ty: number) {\n        this.tx = tx;\n        this.ty = ty;\n        if (!this.added) {\n            this.added = true;\n            OVERLAY_LAYER.addChild(this.gr);\n        }\n        this.gr.position.set(this.tx * GRID_TILE_PX ,this.ty * GRID_TILE_PX);\n        return this;\n    }\n\n    setPosPx(px: number, py: number) {\n        this.setPos(px/GRID_TILE_PX, py/GRID_TILE_PX);\n        this.gr.position.set(px, py);\n        return this;\n    }\n\n    private slideCone(px: number, py: number) {\n        let nx = this.tx * GRID_TILE_PX;\n        let ny = this.ty * GRID_TILE_PX;\n        let xd = Math.min(GRID_TILE_PX, Math.max(0, px - nx));\n        let yd = Math.min(GRID_TILE_PX, Math.max(0, py - ny));\n\n        this.gr.position.set(nx+xd, ny+yd);\n    }\n\n    setRotation(radians: number) {\n        this.gr.rotation = radians;\n        return this;\n    }\n\n    /** Current rotation, in radians. */\n    get rotation () {\n        return this.gr.rotation;\n    }\n\n    /** Current real-world position of this shape, in Pixels. */\n    get position () {\n        return {\n            px: this.gr.position.x,\n            py: this.gr.position.y,\n            tx: this.tx,\n            ty: this.ty\n        };\n    }\n\n    get dimensions () {\n        return {\n            tw: this._width/GRID_TILE_PX,\n            th: this._height/GRID_TILE_PX\n        }\n    }\n\n    getGraphicDetails() {\n        return {\n            border: this._color,\n            fill: this._fill,\n            fillAlpha: this._alpha,\n            thickness: this._thickness\n        };\n    }\n\n    getType() {\n        return this._type;\n    }\n\n    onClick(cb: any) {\n        this.gr.interactive = true;\n        this.gr.on('click', cb);\n    }\n\n    /**\n     * Angle the shape to point towards some real-world pixel coordinates.\n     * If this shape is a cone, repositions the origin to start from the nearest border point of the tile.\n     * @param px\n     * @param py\n     * @param snap Optionally round off the angle\n     * @param snapRads Resolution to round off, is enabled. Defaults to 10deg increments.\n     */\n    pointTowards(px: number, py: number, snap = false, snapRads = 0.174533) {\n        if (this._type === SHAPE_TYPES.cone) this.slideCone(px, py);\n\n        let rad = Math.atan2(py - this.gr.position.y, px - this.gr.position.x);\n        if (snap) {\n            rad = Math.floor(rad/snapRads) * snapRads;\n        }\n        this.setRotation(rad);\n        return this;\n    }\n\n    /**\n     * Destroy this Shape, cleaning up any GL resources it uses.\n     */\n    remove() {\n        OVERLAY_LAYER.removeChild(this.gr);\n        this.gr.destroy({\n            children: true,\n            texture: true\n        });\n    }\n}\n","import {Graphics, ITextStyle, Text} from \"pixi.js\";\nimport {GRID_TILE_PX, OVERLAY_DEPTHS, OVERLAY_LAYER} from \"../ui-data/globals\";\n\nconst defaultStyle: Partial<ITextStyle> = {\n    fontFamily: \"Helvetica\",\n    fontSize: 14,\n    fill: \"white\",\n};\n\n/** A small 1x1 tile token, which contains text. */\nexport class UiMarker {\n    private readonly background: number;\n    private readonly alpha: number;\n    private readonly gr = new Graphics();\n    private readonly txt: Text;\n    private readonly border: number;\n    private added = false;\n    private tx = 0;\n    private ty = 0;\n\n    constructor(text: string, textOpts: Partial<ITextStyle> = {}, background = 0x000000, bgAlpha = 0.5, border=3) {\n        this.background = background;\n        this.alpha = bgAlpha;\n        this.txt = new Text(text, {...defaultStyle, ...textOpts});\n        this.border = border;\n        this.gr.zIndex = OVERLAY_DEPTHS.MARKER_BKG;\n        this.txt.zIndex = OVERLAY_DEPTHS.MARKER_TXT;\n        this.txt.resolution = 8;\n    }\n\n    private draw() {\n        this.gr.beginFill(this.background, this.alpha);\n        this.gr.drawRect(0, 0, GRID_TILE_PX, GRID_TILE_PX);\n        this.gr.endFill();\n        this.gr.lineStyle(4, this.background);\n        if (this.border > -1) {\n            this.gr.drawRect(0, 0, GRID_TILE_PX, GRID_TILE_PX);\n        }\n    }\n\n    place (tx: number, ty: number) {\n        if (!this.added) {\n            this.added = true;\n            this.draw();\n            OVERLAY_LAYER.addChild(this.gr, this.txt);\n        }\n        this.tx = tx;\n        this.ty = ty;\n        this.updatePosition();\n        return this;\n    }\n\n    private updatePosition() {\n        const px = this.tx*GRID_TILE_PX, py = this.ty*GRID_TILE_PX;\n        this.gr.position.set(px, py);\n        this.txt.position.set(px + GRID_TILE_PX/2 - this.txt.width/2, py + GRID_TILE_PX/2 - this.txt.height/2);\n    }\n\n    setText(text: string) {\n        this.txt.text = text;\n        this.updatePosition();\n        return this;\n    }\n\n    setVisible(visible: boolean) {\n        this.txt.visible = visible;\n        this.gr.visible = visible;\n        return this;\n    }\n\n    remove() {\n        OVERLAY_LAYER.removeChild(this.gr, this.txt);\n        this.gr.destroy({\n            children: true,\n            texture: true,\n            baseTexture: true\n        });\n        this.txt.destroy({\n            children: true,\n            texture: true,\n            baseTexture: true\n        });\n    }\n}\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\nimport {MeasurePacket} from \"../packets/measure-packets\";\nimport {SHAPE_TYPES, UiShape} from \"../../renderer/ui-components/ui-shape\";\nimport {UiMarker} from \"../../renderer/ui-components/ui-marker\";\nimport {observable} from \"mobx\";\n\ninterface MeasureElements {\n    shape: UiShape;\n    marker: UiMarker;\n}\n\nexport default class MeasureHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [MeasurePacket];\n    private readonly controller: GameController;\n    public static readonly userShapes: Record<string, MeasureElements> = {};\n    @observable public static displayMeasures = true;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n\n    async clientHandler(client: Client, packet: MeasurePacket): Promise<void> {\n        this.handleShape(client.id, packet);\n    }\n\n    async hostHandler(client: Client, packet: MeasurePacket): Promise<void> {\n        this.handleShape(client.id, packet);\n        broadcast(packet, true, client);\n    }\n\n    private handleShape(id: string, pkt: MeasurePacket|null) {\n        const exist = MeasureHandler.userShapes[id];\n        if (exist) {\n            exist.marker.remove();\n            exist.shape.remove();\n            delete MeasureHandler.userShapes[id];\n        }\n        if (pkt && pkt.visible) {\n            MeasureHandler.userShapes[id] = {\n                shape: new UiShape(pkt.type as SHAPE_TYPES)\n                    .color(pkt.color)\n                    .setRotation(pkt.angle)\n                    .size(pkt.tw, pkt.th)\n                    .setPosPx(pkt.px, pkt.py)\n                    .thickness(pkt.thickness)\n                    .setFillColor(pkt.fill, pkt.alpha)\n                    .setVisible(MeasureHandler.displayMeasures),\n                marker: new UiMarker((pkt.tw*5)+'ft').place(pkt.tx, pkt.ty).setVisible(MeasureHandler.displayMeasures)\n            }\n            if (isHost()) {\n                MeasureHandler.userShapes[id].shape.onClick(() => {\n                    MeasureHandler.sendMeasure(MeasureHandler.userShapes[id].shape, false);\n                    this.handleShape(id, null);\n                })\n            }\n        }\n    }\n\n    public static sendMeasure(shape: UiShape, visible: boolean) {\n        const dt = shape.getGraphicDetails();\n        const pkt = new MeasurePacket().assign({\n            type: shape.getType(),\n            px: shape.position.px,\n            py: shape.position.py,\n            tw: shape.dimensions.tw,\n            th: shape.dimensions.th,\n            angle: shape.rotation,\n            color: dt.border,\n            thickness: dt.thickness,\n            fill: dt.fill,\n            alpha: dt.fillAlpha,\n            tx: shape.position.tx,\n            ty: shape.position.ty,\n            visible\n        });\n\n        console.log(visible, pkt);\n        return broadcast(pkt, false);\n    }\n\n    /**\n     * Toggle measure visibility.\n     * @param show\n     */\n    public static showMeasures(show: boolean) {\n        this.displayMeasures = show;\n        for (const m of Object.values(MeasureHandler.userShapes)) {\n            m.shape.setVisible(show);\n            m.marker.setVisible(show);\n        }\n    }\n}\n","import {Sprite, waitForSpriteLoad} from \"../util/sprite-loading\";\nimport Terrain from \"./terrain\";\nimport {observable} from \"mobx\";\nimport * as connection from '../net/peerconnection'\nimport {broadcast, NetworkStatus, getMyID} from \"../net/peerconnection\";\nimport EntityLayer from \"./entities\";\nimport HandShakeCheck from \"../net/prechecks/signature-check\";\nimport BoardSync from \"../net/prechecks/board-sync-check\";\nimport {PreCheck} from \"../net/prechecks/precheck\";\nimport Handler from \"../net/handlers/handler\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport Lobby from \"./lobby\";\nimport PingHandler from \"../net/handlers/ping-handler\";\nimport Campaign from \"./campaign\";\nimport * as boardDB from \"../db/board-db\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as packer from \"../data/board-packer.worker\";\nimport {ProtoEntity} from \"../data/protobufs/proto-entity\";\nimport CampaignLoader from \"../data/campaign-loader\";\nimport BoardReloadHandler from \"../net/handlers/board-reload-handler\";\nimport MediaSyncHandler from \"../net/handlers/media-sync-handler\";\nimport MediaSync from \"../net/prechecks/media-sync\";\nimport {ProtoSprite} from \"../data/protobufs/proto-sprite\";\nimport * as RENDER from '../renderer';\nimport MeasureHandler from \"../net/handlers/measure-handler\";\n\nexport default class GameController {\n    public terrain: Terrain;\n    public entities: EntityLayer;\n    @observable public ready: boolean = false;\n    private readonly preChecks: PreCheck[];\n    private readonly handlers: Handler[];\n    public readonly lobby: Lobby;\n    @observable public campaign: Campaign|null = null;\n\n    constructor() {\n        this.terrain = new Terrain();\n        this.entities = new EntityLayer();\n        this.lobby = new Lobby();\n\n        // Initialize networking stuff:\n        this.preChecks = [\n            new HandShakeCheck(this),\n            new BoardSync(this),\n            new MediaSync(this)\n        ];\n        this.handlers = [\n            new TerrainAddHandler(this.terrain),\n            new TerrainEraseHandler(this.terrain),\n            new EntityUpdateHandler(this.entities),\n            new PingHandler(),\n            new BoardReloadHandler(this),\n            new MediaSyncHandler(this),\n            new MeasureHandler(this)\n        ];\n    }\n\n    /**\n     * Starts the main game client, waiting for the Sprite Loader to become ready.\n     * Also initializes any required keys or other async setup.\n     * Automatically starts the Client/Host connection if a URL Hash has been set already.\n     */\n    public async start() {\n        console.debug('Main game controller started.');\n\n        await waitForSpriteLoad;\n\n        RENDER.toggleViewportInput(true);\n\n        console.log('Local Room ID Key:', await getMyID());\n\n        const hash = window.location.hash.replace('#', '');\n        if (hash) {\n            if ((await getMyID()) === hash) {\n                // This is our URL - hosting.\n                await this.startHost();\n            } else {\n                // At someone else's URL - join them.\n                await this.startClient(hash);\n            }\n        }\n        this.ready = true;\n\n        // Treadmill to block back button:\n        window.history.pushState(null, document.title, window.location.href);\n        window.addEventListener('popstate', () => {\n            window.history.pushState(null, document.title, window.location.href);\n        });\n        window.addEventListener(\"beforeunload\", () => {\n            connection.kill();\n            this.ready = false;\n        })\n    }\n\n    public async startHost(): Promise<void> {\n        connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Hosting lobby at:', await getMyID());\n        window.location.hash = await getMyID();\n\n        this.handlers.forEach(h => h.setHost(true));\n        connection.setHandlers(this.handlers, this.preChecks);\n\n        await connection.openHost();\n    }\n\n    public async startClient(connectID: string) {\n        connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Connecting to host:', connectID);\n        window.location.hash = connectID;\n\n        this.handlers.forEach(h => h.setHost(false));\n        connection.setHandlers(this.handlers, this.preChecks)\n\n        await connection.connectTo(connectID);\n    }\n\n    get isNetworkReady() {\n        return connection.netStatus.get() === NetworkStatus.CONNECTED;\n    }\n\n    /**\n     * Loads the given board, and broadcasts the new board state to all clients.\n     * @param name\n     */\n    public async loadBoard(name: string): Promise<boolean> {\n        if (!this.campaign) return false;\n        await waitForSpriteLoad;\n\n        this.campaign.loadedBoard = name;\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        const board: ProtoBoard|null = await boardDB.load(this.campaign.id, name);\n\n        if (!board) return false;  // Erase existing only if the loaded board actually exists.\n\n        await this.loadFromProtoBoard(board);\n\n        broadcast(await this.buildProtoBoard(false), true).catch(console.error);\n\n        this.terrain.isBoardDirty = false;  // May have triggered a \"redraw\", so reset these flags here.\n        this.entities.isDirty = false;\n\n        return true;\n    }\n\n    public async loadFromProtoBoard(pb: ProtoBoard) {\n        this.terrain.setDirectMap(pb);\n\n        this.entities.getEntityList().forEach(e => this.entities.remove(e.id, false));\n        pb.entities.forEach(ent => {\n            const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n            this.entities.addEntity(sprite, {\n                ...ent,\n                sprite\n            }, false)\n        });\n    }\n\n    public async buildProtoBoard(includeHidden: boolean = true) {\n        const tiles = Object.values(this.terrain.getDirectMap()).flat();\n        const pb = new ProtoBoard().assign(await packer.packBoard(tiles));\n\n        pb.entities = this.entities.getEntityList().filter(e=>includeHidden||e.visible).map(e => {\n            const sprite = new ProtoSprite().assign({id: e.sprite.id, idx: e.sprite.idx})\n            return new ProtoEntity().assign({\n                ...e,\n                sprite,\n                owners: Array.from(e.owners)\n            });\n        });\n\n        return pb;\n    }\n\n    public async saveBoard(): Promise<boolean> {\n        if (!this.campaign || !this.campaign.loadedBoard) return false;\n\n        const pb = await this.buildProtoBoard(true);\n        await boardDB.save(this.campaign.id, this.campaign.loadedBoard, pb);\n\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        await CampaignLoader.saveCampaign(this.campaign);\n\n        return true;\n    }\n\n    public async deleteBoard(campaign: Campaign, name: string): Promise<boolean> {\n        const idx = campaign.boards.indexOf(name);\n\n        if (idx < 0) {\n            return false;\n        }\n\n        campaign.boards.splice(idx, 1);\n\n        if (campaign.loadedBoard === name) {\n            campaign.loadedBoard = null;\n        }\n\n        await boardDB.deleteBoard(campaign.id, name);\n        await CampaignLoader.saveCampaign(campaign);\n\n        return true;\n    }\n}\n","import GameController from \"../game/controllers/game\";\n\n/**\n * A wrapper to connect the UI controls to the actual game, typically through middleware.\n * The interfaces generated should be agnostic of the platform, for maximum compatibility.\n */\nexport default abstract class UITool {\n    public readonly abstract name: string;\n    public readonly abstract icon: JSX.Element;\n    protected readonly controller: GameController;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n    }\n\n    abstract getControlUI(forMobile: boolean): JSX.Element|null;\n    abstract register(): any;\n    abstract unregister(): any;\n    abstract isOption(forMobile: boolean, isHost: boolean): boolean;\n}\n","\nexport default abstract class Middleware {\n    private hooks: any[] = [];\n    public static isShiftDown = false;\n\n    public eject() {\n        this.hooks.forEach(h => h());\n        setActive(null);\n        this.onCleanup();\n    }\n\n    public attach() {\n        setActive(this);\n        this.register();\n    }\n\n    /** Automatically cleaned up when this middleware is ejected. */\n    protected listener(cb: any): () => void {\n        this.hooks.push(cb);\n        return cb;\n    }\n\n    /** Called once an element is registered. */\n    protected abstract register(): void;\n    /** Called after all hooks have been cleaned up. */\n    protected abstract onCleanup(): void;\n\n    public onShiftPress(): void {};\n    public onShiftRelease(): void {};\n}\n\nwindow.addEventListener('keydown', ke => {\n    if (ke.code?.startsWith('Shift')) {\n        Middleware.isShiftDown = true;\n        if (active) {\n            active.onShiftPress();\n        }\n    }\n});\n\nwindow.addEventListener('keyup', ke => {\n    if (ke.code?.startsWith('Shift')) {\n        Middleware.isShiftDown = false;\n        if (active) {\n            active.onShiftRelease();\n        }\n    }\n});\n\n\nlet active: Middleware|null = null;\n\nexport function setActive(middle: Middleware|null) {\n    active = middle;\n}\n","import Middleware from \"./middleware\";\nimport Terrain from \"../controllers/terrain\";\nimport {observable} from \"mobx\";\nimport {EVENT_STREAM, GridPoint} from \"../renderer/ui-data/ui-event-stream\";\nimport {DEFAULT_PEN_COLOR, setColor, setSize} from \"../renderer/ui-components/ui-tooltip\";\nimport {toggleViewportInput} from \"../renderer\";\n\nenum PEN_STATE {\n    NONE,\n    DRAW,\n    ERASE\n}\n\nexport default class PenMiddleware extends Middleware {\n    private readonly terrain: Terrain;\n    private state: PEN_STATE = PEN_STATE.NONE;\n    private readonly canUsePen: boolean;\n    @observable public penSize: number = 1;\n\n    constructor(terrain: Terrain, canUsePen: boolean=true) {\n        super();\n        this.terrain = terrain;\n        this.canUsePen = canUsePen;\n    }\n\n    register(): void {\n        setSize(this.penSize);\n        toggleViewportInput(false);\n\n        this.listener(EVENT_STREAM.on('mouse-down', ev => {\n            if (Middleware.isShiftDown) return;\n            this.state = this.canUsePen ? PEN_STATE.DRAW : PEN_STATE.ERASE;\n            this.draw(ev);\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-right-down', ev => {\n            if (Middleware.isShiftDown) return;\n            this.state = PEN_STATE.ERASE;\n            this.draw(ev);\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-middle-down', ev => {\n            if (Middleware.isShiftDown) return;\n            const sp = this.terrain.getAt(ev.tx, ev.ty);\n            if (sp.length) {\n                this.terrain.selectedSprite = sp[sp.length-1].sprite;\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-up', () => {\n            this.state = PEN_STATE.NONE;\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-right-up', () => {\n            this.state = PEN_STATE.NONE;\n        }));\n\n        this.listener(EVENT_STREAM.on('hover', ev => {\n            if (Middleware.isShiftDown) return;\n            this.draw(ev);\n        }));\n\n        const wheelCB = (ev: WheelEvent) => {\n            if (!ev.target || !(ev.target as HTMLElement).classList.contains(\"MAIN-GAME-CANVAS\")) return true;\n            if (!ev.shiftKey) {\n                const out = Math.sign(ev.deltaY) * -1;\n                this.setPenSize(Math.max(1, Math.min(8, this.penSize += out)));\n                return true;\n            }\n        };\n        window.addEventListener('wheel', wheelCB);\n        this.listener(() => window.removeEventListener('wheel', wheelCB));\n    }\n\n    setPenSize(size: number) {\n        this.penSize = Math.max(1, Math.min(8, size));\n        setSize(this.penSize);\n    }\n\n    draw(ev: GridPoint): boolean {\n        if (this.state !== PEN_STATE.NONE) {\n            switch (this.state) {\n                case PEN_STATE.ERASE:\n                    this.box(ev.tx, ev.ty, this.terrain.eraseAt.bind(this.terrain));\n                    break;\n                case PEN_STATE.DRAW:\n                    this.box(ev.tx, ev.ty, this.terrain.drawAt.bind(this.terrain));\n            }\n            return true;\n        }\n        return false;\n    }\n\n    private box(x: number, y: number, op: Function) {\n        for (let xx = x - (this.penSize-1); xx < x + this.penSize; xx++) {\n            for (let yy = y - (this.penSize-1); yy < y + this.penSize; yy++) {\n                op(xx, yy);\n            }\n        }\n    }\n\n    protected onCleanup(): void {\n        toggleViewportInput(true);\n    }\n\n    onShiftPress() {\n        toggleViewportInput(true);\n        setColor(0x000000);\n    }\n    onShiftRelease() {\n        toggleViewportInput(false);\n        setColor(DEFAULT_PEN_COLOR)\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport {Button, FormControlLabel, Modal, Switch, TextField, Tooltip} from \"@material-ui/core\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport {searchImages, Sprite} from \"../game/util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from '../game/consts';\nimport '../styles/sprite-picker.scss'\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {FixedSizeGrid} from \"react-window\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport {Autocomplete} from \"@material-ui/lab\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport {SpriteInterface} from \"../game/data/interfaces/sprite\";\n\n\nexport default function SpritePicker (\n    props: {\n        onSelect: Function,\n        onSearch?: Function,\n        defaultTerm?: string,\n        selected?: Sprite|null,\n        animated?: boolean,\n        canAnimate?: boolean,\n        forEntity: boolean\n    }) {\n    const [searchTerm, setSearch] = React.useState(props.defaultTerm || '');\n    const [animated, setAnimated] = React.useState(!!props.animated);\n    const [sprites, setSprites] = React.useState<Sprite[]>([]);\n\n    const handleChange = (value: string) => {\n        setSearch(value);\n        if (props.onSearch) {\n            props.onSearch(value);\n        }\n    };\n    const animChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAnimated(event.target.checked);\n    };\n\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            getFavorites(props.forEntity).then(fe => {\n                const results = searchImages(searchTerm, animated, false, fe);\n                setSprites(results);\n            })\n        }, 200)\n        return () => {\n            clearTimeout(timeout);\n        }\n    }, [searchTerm, animated, props.forEntity]);\n\n\n    return <div style={{\n        maxWidth: '600px'\n    }}>\n        <form noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <FormGroup row>\n                <Autocomplete\n                    selectOnFocus={true}\n                    options={[]}\n                    style={{ width: 300 }}\n                    freeSolo={true}\n                    value={searchTerm}\n                    inputValue={searchTerm}\n                    onInputChange={(event, newInputValue) => {\n                        handleChange(newInputValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} label=\"Search Sprites!\" variant=\"outlined\" />}\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={animated}\n                            onChange={animChange}\n                            disabled={!props.canAnimate}\n                            name=\"checkedA\"\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        />\n                    }\n                    label=\"Animated\"\n                    labelPlacement=\"top\"\n                />\n            </FormGroup>\n        </form>\n        <div\n            style={{height: '280px'}}\n        >\n            <SpriteGrid sprites={sprites} onSelect={props.onSelect} selected={props.selected} forEntity={props.forEntity} />\n        </div>\n    </div>;\n}\n\n\nexport function SpriteGrid(props: {sprites: Sprite[], onSelect: Function, selected?: Sprite|null, forEntity: boolean}) {\n    return <AutoSizer className={'autosizer'}>\n        {function size(size: { height: number, width: number }){\n            const wrapperSize = 52;\n            const perRow = Math.floor(size.width/wrapperSize);\n            const rowCount = Math.ceil(props.sprites.length/ perRow);\n\n            return <FixedSizeGrid\n                columnCount={perRow}\n                columnWidth={wrapperSize}\n                height={size.height}\n                width={size.width}\n                rowCount={rowCount}\n                rowHeight={wrapperSize}\n                className={'spriteGrid'}\n                style={{maxHeight: `${size.height}px`}}\n            >\n                {(data: { columnIndex: number, rowIndex: number, style: any }) => {\n                    const spr = props.sprites[data.columnIndex + data.rowIndex * perRow];\n                    if (spr) {\n                        return <div style={data.style}>\n                            <SpriteImage sprite={spr} onSelect={props.onSelect} selected={props.selected?.composite === spr.composite} forEntity={props.forEntity}/>\n                        </div>\n                    } else {\n                        return <div/>\n                    }\n                }}\n            </FixedSizeGrid>\n        }}\n    </AutoSizer>\n}\n\n\nexport function SpriteImage(props: {sprite: Sprite|null, onSelect?: Function, selected?: boolean, forEntity: boolean}) {\n    const canv: any = React.useRef(null);\n    // @ts-ignore\n    const sel = props.onSelect ? () => props.onSelect(props.sprite) : ()=>{};\n    const isGif = props.sprite?.id.startsWith(\"gif:\");\n\n    React.useEffect(() => {\n        const redraw = () => {\n            if (isGif) return;\n            if (canv.current){\n                // @ts-ignore\n                const ctx: CanvasRenderingContext2D = canv.current.getContext('2d');\n                ctx.clearRect(0,0,canv.current.width, canv.current.height);\n                props.sprite?.drawTo(ctx, 0, 0);\n            }\n        };\n        const cancel: any = !isGif && props.sprite?.animated ? setInterval(redraw, 200) : null;\n        redraw();\n\n        return () => {\n            if (cancel !== null) {\n                clearInterval(cancel);\n            }\n        }\n    }, [props.sprite, isGif])\n\n    if (isGif) {\n        return <div style={{position: 'relative'}}>\n            <FavoriteSpriteButton sprite={props.sprite} forEntity={props.forEntity} />\n            <img\n                src={props.sprite?.id.replace(\"gif:\", \"\")}\n                width={imageWidthPx}\n                height={imageHeightPx}\n                style={{width: '48px', height: '48px', background: 'gray'}}\n                className={`spriteImage ${props.selected ? 'selected': ''}`}\n                title={props.sprite?.name || 'No Sprite'}\n                alt={props.sprite?.name || 'No Sprite'}\n                onClick={sel}\n            />\n        </div>\n    }\n\n    return <div style={{position: 'relative'}}>\n        <FavoriteSpriteButton sprite={props.sprite} forEntity={props.forEntity} />\n        <canvas\n            ref={canv}\n            width={imageWidthPx}\n            height={imageHeightPx}\n            style={{width: '48px', height: '48px', background: 'gray'}}\n            className={`spriteImage ${props.selected ? 'selected': ''}`}\n            title={props.sprite?.name || 'No Sprite'}\n            onClick={sel}\n        />\n    </div>\n}\n\nexport function FavoriteSpriteButton(props: {sprite: Sprite|null, forEntity: boolean}) {\n    const [isFavorite, setIsFavorite] = useState(false);\n    const [isHovered,setIsHovered] = useState(false);\n    const offset = 2;\n\n    function toggleFavorite() {\n        if (props.sprite) {\n            setFavorite(props.sprite, !isFavorite, props.forEntity).then(() => {\n                setIsFavorite(!isFavorite);\n            });\n        }\n    }\n\n    useEffect(()=>{\n        if (props.sprite) {\n            getIsFavorite(props.sprite, props.forEntity).then(fav => {\n                setIsFavorite(fav);\n            })\n        }\n    }, [props.sprite, props.forEntity]);\n\n    if (!props.sprite) return null;\n\n    return <>\n        <FavoriteIcon\n            style={{\n                position: 'absolute',\n                top: offset,\n                left: offset,\n                color: isFavorite ? \"red\" : \"gray\",\n            }}\n            fontSize={\"small\"}\n        />\n        <Tooltip title={\"Toggle favorite\"}>\n            <FavoriteBorderIcon\n                style={{\n                    position: 'absolute',\n                    top: offset,\n                    left: offset,\n                    color: isHovered ? \"cyan\" : \"white\",\n                    cursor: 'pointer'\n                }}\n                fontSize={\"small\"}\n                onMouseEnter={()=>setIsHovered(true)}\n                onMouseLeave={()=>setIsHovered(false)}\n                onClick={toggleFavorite}\n            />\n        </Tooltip>\n    </>\n}\n\n\ntype cacheTypeKey = 'entities' | 'terrain';\nlet cachedFavorites: Record<cacheTypeKey, SpriteInterface[]> = {} as any;\n\nasync function getFavorites(isForEntity: boolean) {\n    const tag = isForEntity ? 'entities' : 'terrain';\n    if (!cachedFavorites[tag] || !cachedFavorites[tag].length) {\n        const res: typeof cachedFavorites = await metadata.get(Meta.FAVORITE_SPRITES);\n        cachedFavorites = res || {};\n        cachedFavorites[tag] = cachedFavorites[tag] || [];\n    }\n    return cachedFavorites[tag];\n}\n\nasync function getIsFavorite(sprite: Sprite, isForEntity: boolean) {\n    const list = await getFavorites(isForEntity);\n    return !! list.find(o=>o.id === sprite.id && o.idx === sprite.idx);\n}\n\nasync function setFavorite(sprite: Sprite, favorite: boolean, isForEntity: boolean) {\n    const list = await getFavorites(isForEntity);\n\n    if (favorite) {\n         if (!list.find(s=>s.id === sprite.id && s.idx === sprite.idx)) {\n             list.push(sprite);\n         }\n    } else {\n        const idx = list.findIndex(v=>v.id === sprite.id && v.idx === sprite.idx);\n        if (idx>=0) {\n            list.splice(idx, 1);\n        }\n    }\n\n    await metadata.store(Meta.FAVORITE_SPRITES, cachedFavorites);\n\n    return true;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto',\n            maxWidth: '600px',\n            minWidth: '400px',\n            position: 'fixed',\n            left: '50%',\n            top: '50%',\n            transform: `translate(-50%, -50%)`,\n        }\n    }),\n);\n\nexport function SpritePickerModal(props: {open: boolean, onClose: Function, onSelect: Function, currentSprite: Sprite|null}) {\n    const classes = useStyles();\n    const [gifUrl, setGifUrl] = useState(\"\");\n\n    return <Modal\n        open={props.open}\n        aria-labelledby=\"sprite-picker-modal\"\n        aria-describedby=\"pick a sprite to use\"\n        onClose={()=>props.onClose()}\n    >\n        <div className={classes.paper}>\n            <SpritePicker\n                defaultTerm={props.currentSprite?.name || ''}\n                selected={props?.currentSprite || null}\n                animated={props?.currentSprite?.animated || true}\n                onSelect={(sp: Sprite) => {\n                    props.onClose();\n                    props.onSelect(sp);\n                }}\n                canAnimate={true}\n                forEntity={true}\n            />\n\n            <FormGroup style={{marginTop: 20}} row>\n                <Tooltip\n                    title=\"Try to use a reliable image host, like Imgur. This MUST be a direct link on an https site. Ideally, 48x48 resolution.\"\n                >\n                    <Autocomplete\n                        selectOnFocus={true}\n                        options={[]}\n                        style={{ width: 300 }}\n                        freeSolo={true}\n                        value={gifUrl}\n                        inputValue={gifUrl}\n                        onInputChange={(event, newInputValue) => {\n                            setGifUrl(newInputValue.trim());\n                        }}\n                        renderInput={(params) => <TextField {...params} label=\"Use a GIF URL\" variant=\"outlined\" />}\n                    />\n                </Tooltip>\n\n                <Button\n                    variant={\"outlined\"}\n                    onClick={()=>{\n                        props.onClose();\n                        props.onSelect(new Sprite(\"gif:\"+gifUrl, -1));\n                        console.log(\"Selected new Gif:\", gifUrl);\n                    }}\n                    disabled={!gifUrl.trim().startsWith(\"https:\")}\n                >\n                    Use GIF\n                </Button>\n            </FormGroup>\n        </div>\n    </Modal>\n}\n","/** The width of each image/tile, in pixels. */\nexport const imageWidthPx = 48;\n/** The height of each image/tile, in pixels. */\nexport const imageHeightPx = 48;\n\n/** The amount of terrain the board is wide. */\nexport const boardTileWidth = 100;\n/** The amount of terrain the board is tall. */\nexport const boardTileHeight = 100;\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport SpritePicker from \"../ui-components/spritepicker\";\nimport { Sprite } from \"../game/util/sprite-loading\";\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport {observer} from \"mobx-react-lite\";\nimport Terrain from \"../game/controllers/terrain\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIPenTool extends UITool {\n    readonly icon: JSX.Element = <TerrainIcon />;\n    readonly name: string = 'Terrain';\n    readonly middleware: PenMiddleware;\n    private searchTerm: string = 'ground';\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, true);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <PenControlInterface\n            terrain={this.controller.terrain}\n            term={this.searchTerm}\n            setSearch={(term: string) => this.searchTerm = term}\n            pen={this.middleware}\n        />\n    }\n\n    register(): any {\n        console.log('Mounted pen tool.');\n        this.middleware.attach();\n    }\n\n    unregister(): any {\n       this.middleware.eject();\n       console.log('Unmounted pen tool.');\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst PenControlInterface = observer((props: {terrain: Terrain, setSearch: Function, term: string, pen: PenMiddleware}) => {\n    return <div className={'cont'} >\n        <PenSizeSlider pen={props.pen}/>\n        <SpritePicker\n            onSelect={(sp: Sprite) => props.terrain.selectedSprite = sp}\n            onSearch={props.setSearch}\n            defaultTerm={props.term}\n            selected={props.terrain.selectedSprite}\n            canAnimate={false}\n            forEntity={false}\n        />\n    </div>\n});\n\nconst PenSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Pen Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.setPenSize(newValue)}\n        />\n    </div>\n});\n","import Middleware from \"./middleware\";\nimport EntityLayer, {Entity} from \"../controllers/entities\";\nimport {EVENT_STREAM, GridPoint} from \"../renderer/ui-data/ui-event-stream\";\nimport {UiMarker} from \"../renderer/ui-components/ui-marker\";\nimport {toggleViewportInput} from \"../renderer\";\nimport {DEFAULT_PEN_COLOR, setColor, setSize} from \"../renderer/ui-components/ui-tooltip\";\n\n\nexport default class EntityMiddleware extends Middleware {\n    private ent: Entity|null = null;\n    private movePoints: GridPoint[] = [];\n    private moveTrackers: UiMarker[] = [];\n    private entities: EntityLayer;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    register(): void {\n        setSize(1);\n        toggleViewportInput(true);\n\n        this.listener(EVENT_STREAM.on('mouse-down', ev => {\n            const trg = this.entities.getEntityList().find(ent => ent.canMove() && ent.x === ev.tx && ent.y === ev.ty);\n            if (trg) {\n                this.ent = trg;\n                this.entities.selected = trg;\n                toggleViewportInput(false);\n                this.addPoint(ev.tx, ev.ty);\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-up', () => {\n            this.clearMovers();\n            if (this.ent) {\n                this.ent = null;\n                toggleViewportInput(true);\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('hover', ev => {\n            if (this.ent) {\n                this.entities.updateEntity(this.ent.id, {\n                    x: ev.tx,\n                    y: ev.ty\n                });\n                this.addPoint(ev.tx, ev.ty);\n            }\n            if (this.entities.getEntityList().find(ent => ent.canMove() && ent.x === ev.tx && ent.y === ev.ty)) {\n                setColor(0xFF0000);\n            } else {\n                setColor(DEFAULT_PEN_COLOR);\n            }\n        }));\n    }\n\n    private clearMovers() {\n        this.moveTrackers.forEach(mp => mp.remove());\n        this.moveTrackers = [];\n        this.movePoints = [];\n    }\n\n    private addPoint(x: number, y: number) {\n        const last = this.movePoints[this.movePoints.length-1];\n        if (last && last.tx === x && last.ty === y) return;\n\n        const idx = this.movePoints.findIndex(p => p.tx === x && p.ty === y);\n        if (idx >=0) {\n            this.movePoints.splice(idx, this.movePoints.length);\n            this.moveTrackers.splice(idx, this.moveTrackers.length).forEach(t => t.remove());\n        }\n        this.movePoints.push({tx: x, ty: y});\n        this.moveTrackers.push(new UiMarker((this.pathLength()*5)+'ft').place(x, y));\n        this.checkDiag();\n    }\n\n    private checkDiag() {\n        if (this.movePoints.length < 3) return;\n        const last = this.movePoints[this.movePoints.length - 1];\n        const third = this.movePoints[this.movePoints.length - 3];\n        const dist = EntityMiddleware.distance(third, last);\n\n        if (dist < 2) {\n            // Corner we can cut!\n            this.movePoints.splice(this.movePoints.length-2, 1);\n            this.moveTrackers.splice(this.moveTrackers.length-2, 1).forEach(t => t.remove());\n            this.moveTrackers[this.moveTrackers.length-1].setText((this.pathLength()*5) + 'ft');\n        }\n    }\n\n    private static distance(p1: GridPoint, p2: GridPoint) {\n        return Math.sqrt(Math.pow(p1.tx-p2.tx, 2) + Math.pow(p1.ty - p2.ty, 2));\n    }\n\n    private pathLength(): number {\n        let val = 0;\n        this.movePoints.reduce((prev, next) => {\n            let dst = EntityMiddleware.distance(prev, next);\n            if (dst > 1) dst = 1.5;\n            val += dst;\n            return next;\n        })\n\n        return Math.floor(val);\n    }\n\n    protected onCleanup(): void {\n        this.clearMovers();\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport ControlCameraIcon from '@material-ui/icons/ControlCamera';\nimport EntityMiddleware from \"../game/middleware/entity-events\";\nimport GameController from \"../game/controllers/game\";\n\nexport default class UICameraTool extends UITool {\n    readonly icon: JSX.Element = <ControlCameraIcon />;\n    readonly name: string = 'Camera';\n    private readonly middleware: EntityMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new EntityMiddleware(controller.entities);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return null;\n    }\n\n    register(): any {\n        console.log('Mounted camera-entity tool.');\n        this.middleware.attach();\n    }\n\n    unregister(): any {\n        console.log('Unmounted camera-entity tool.');\n        this.middleware.eject();\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return true;\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {observer} from \"mobx-react-lite\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIEraserTool extends UITool {\n    readonly icon: JSX.Element = <ClearIcon />;\n    readonly name: string = 'Eraser';\n    readonly middleware: PenMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, false);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return <EraserSizeSlider pen={this.middleware}/>\n    }\n\n    register(): any {\n        this.middleware.attach();\n        console.log('Mounted eraser tool.')\n    }\n\n    unregister(): any {\n        this.middleware.eject();\n        console.log('Unmounted eraser tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return forMobile && isHost;\n    }\n}\n\nconst EraserSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Eraser Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.setPenSize(newValue)}\n        />\n    </div>\n});\n","import UITool from \"./ui-tool\";\nimport FaceIcon from '@material-ui/icons/Face';\nimport React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {SpriteImage, SpritePickerModal} from \"../ui-components/spritepicker\";\nimport EntityLayer, {Entity} from \"../game/controllers/entities\";\nimport {\n    Button,\n    Checkbox,\n    Dialog, DialogActions,\n    DialogContent, DialogContentText,\n    DialogTitle,\n    FormControlLabel, Input, InputLabel, ListItemText, MenuItem, Select,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {Sprite} from \"../game/util/sprite-loading\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport GameController from \"../game/controllers/game\";\nimport EntityUpdateHandler from \"../game/net/handlers/entity-update-handler\";\nimport {clients} from '../game/net/peerconnection';\nimport Campaign from \"../game/controllers/campaign\";\nimport {EntityInterface} from \"../game/data/interfaces/entity\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport stripProxy from \"../game/util/deproxy\";\nimport EntityMiddleware from \"../game/middleware/entity-events\";\nimport {getCenterViewportTile} from \"../game/renderer\";\n\n\nexport default class UIEntityTool extends UITool {\n    readonly icon: JSX.Element = <FaceIcon />;\n    readonly name: string = 'Entity';\n    private readonly middleware: EntityMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new EntityMiddleware(controller.entities);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <EntityEditorInterface\n            entities={this.controller.entities}\n            controller={this.controller}\n        />\n    }\n\n    register(): any {\n        console.log('Mounted entity tool.');\n        this.middleware.attach();\n    }\n\n    unregister(): any {\n        console.log('Unmounted entity tool.');\n        this.middleware.eject();\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    })\n);\n\nconst EntityEditorInterface = observer((props: {entities: EntityLayer, controller: GameController}) => {\n    const [promptSprite, setSpritePrompt] = React.useState(false);\n    const [selectedSprite, setSprite] = React.useState<Sprite|null>(null);\n    const [entName, setName] = React.useState('');\n    const [visible, setVisible] = React.useState(true);\n    const [loadExisting, setLoadExisting] = React.useState(false);\n\n    const resetValues = () => {\n        setSpritePrompt(false);\n        setSprite(null);\n        setName('');\n        setVisible(true);\n    }\n\n    if (props.entities.selected) return <EntityEditInterface entities={props.entities} campaign={props.controller.campaign}/>\n\n    return <div className={'cont'}>\n        <h2>Create Entity</h2>\n        <FormGroup row>\n            <TextField\n                id=\"ent-name\"\n                label=\"Name\"\n                variant=\"filled\"\n                value={entName}\n                onChange={(evt) => setName(evt.target.value)}\n            />\n            <div style={{marginLeft: '12px'}} >\n                <SpriteImage\n                    sprite={selectedSprite}\n                    onSelect={() => {setSpritePrompt(true)}}\n                    forEntity={true}\n                />\n            </div>\n        </FormGroup>\n\n        <FormGroup row>\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={visible}\n                        onChange={(evt)=> setVisible(evt.target.checked)}\n                        name=\"visible\"\n                    />\n                }\n                label=\"Visible\"\n            />\n        </FormGroup>\n\n        <FormGroup row style={{justifyContent: 'space-between'}}>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={()=>{createEntity(props.entities, selectedSprite, entName, visible); resetValues();}}\n                disabled={!selectedSprite}\n            >\n                Create\n            </Button>\n            <Button variant=\"contained\" color=\"default\" onClick={()=>setLoadExisting(true)} disabled={!props.controller.campaign?.characters.length}>\n                Load Character\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" onClick={resetValues} >\n                Clear\n            </Button>\n        </FormGroup>\n\n        <SpritePickerModal\n            open={promptSprite}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={setSprite}\n            currentSprite={selectedSprite||null}\n        />\n\n        <CampaignCharacterSelector\n            entities={props.entities}\n            controller={props.controller}\n            campaign={props.controller.campaign}\n            open={loadExisting}\n            onClose={()=>setLoadExisting(false)}\n        />\n    </div>\n});\n\n\nconst EntityEditInterface = observer((props: {entities: EntityLayer, campaign: Campaign|null}) => {\n    const ent = props.entities.selected;\n    if (!ent) return null;\n\n    const [prompt, setSpritePrompt] = React.useState(false);\n    const [promptClone, setClonePrompt] = React.useState(false);\n    const update = React.useMemo(() => {\n        let timeout: any = null;\n        return (info: Partial<Entity>) => {\n            if (timeout !== null) {\n                clearTimeout(timeout);\n            }\n            const ent = props.entities.selected;\n            if (ent) {\n                timeout = setTimeout(() => {\n                    props.entities.updateEntity(ent.id, info);\n                    if (props.campaign) {\n                        updateCampaign(props.campaign, ent);\n                    }\n                }, 200);\n            }\n        }\n    }, [props.entities, props.campaign])\n    const classes = useStyles();\n    const updateInstant = (info: Partial<Entity>) => {\n        props.entities.updateEntity(ent.id, info);\n        if (props.campaign) {\n            updateCampaign(props.campaign, ent);\n        }\n    }\n    const clientNames: string[] = Array.from(clients).filter(c=>c.userData).map(cl =>{\n        // @ts-ignore\n        return cl.userData.username\n    });\n    const userList: string[] = Array.from(new Set([\n        ...clientNames,\n        ...ent.owners\n    ])).sort();\n\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Edit {ent.name}</h2>\n            <FormGroup row>\n                <TextField\n                    id=\"ent-name\"\n                    label=\"Name\"\n                    variant=\"filled\"\n                    value={ent.name}\n                    onChange={(evt) => updateInstant({name: evt.target.value})}\n                />\n                <div style={{marginLeft: '12px'}} >\n                    <SpriteImage\n                        sprite={ent.sprite}\n                        onSelect={() => {setSpritePrompt(true)}}\n                        forEntity={true}\n                    />\n                </div>\n\n            </FormGroup>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <input\n                            type=\"color\"\n                            value={ent.color}\n                            className={classes.spriteColor}\n                            onChange={evt => update({color: evt.target.value})}\n                        />\n                    }\n                    label={<Typography style={{marginTop: '12px'}}>Color</Typography>}\n                />\n            </FormGroup>\n            <FormGroup row>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.visible}\n                            onChange={(evt)=> {\n                                updateInstant({visible: evt.target.checked});\n                                if (!evt.target.checked) {\n                                    EntityUpdateHandler.sendDelete(ent);\n                                }\n                            }}\n                            name=\"visible\"\n                        />\n                    }\n                    label=\"Visible\"\n                />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.saveToCampaign}\n                            onChange={(evt)=> updateInstant({saveToCampaign: evt.target.checked})}\n                            name=\"saveToCampaign\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Campaign-wide\"\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <InputLabel>Owners</InputLabel>\n                <Select\n                    multiple\n                    value={ent.owners}\n                    onChange={(evt)=>updateInstant({owners: evt.target.value as string[]})}\n                    input={<Input />}\n                    renderValue={(selected: any) => selected.join(', ')}\n                    style={{marginBottom: '25px'}}\n                >\n                    {userList.map((id: string) => (\n                        <MenuItem key={id} value={id}>\n                            <Checkbox checked={ent.owners.indexOf(id) > -1} />\n                            <ListItemText primary={id} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormGroup>\n\n            <FormGroup row style={{justifyContent: 'space-between'}}>\n                <Button variant=\"contained\" color=\"default\" onClick={()=>setClonePrompt(true)}>\n                    Duplicate\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>props.entities.remove(ent.id)} >\n                    Delete\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>props.entities.select(null)} >\n                    Close\n                </Button>\n            </FormGroup>\n        </form>\n\n        <SpritePickerModal\n            open={prompt}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={(sp: Sprite) => {props.entities.setEntitySprite(ent, sp)}}\n            currentSprite={ent.sprite}\n        />\n\n        <PromptForNumber\n            onCancel={()=>{ setClonePrompt(false)}}\n            onSubmit={(num: number) => {\n                setClonePrompt(false);\n                if (num) {\n                    cloneEntity(props.entities, ent, num);\n                }\n            }}\n            open = {promptClone}\n            prompt='How many extra clones would you like?'\n            title='Clone Amount'\n            label='Clones'\n        />\n    </div>\n});\n\n\nconst CampaignCharacterSelector = observer((props: {\n    open: boolean,\n    entities: EntityLayer,\n    controller: GameController,\n    campaign: Campaign|null,\n    onClose: Function\n}) => {\n    if (!props.campaign) return null;\n    const characters = props.campaign.characters;\n    const [selected, setSelected] = React.useState(characters.length > 0 ? characters[0]?.id : '');\n\n    const onSelect = (id: any) => {\n        console.log('Selected character ID:', id);\n        setSelected(id);\n    };\n\n    const getSelected = (id: any) => {\n        return props.campaign?.characters.find(c => c.id === id);\n    }\n\n    return <Dialog open={props.open} onClose={()=>props.onClose()}>\n            <DialogTitle>Select a Campaign Character</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Select a character saved to this campaign:\n                </DialogContentText>\n                <Select\n                    onChange={(evt)=>onSelect(evt.target.value)}\n                    input={<Input />}\n                    renderValue={(selected: any) => {\n                        const sel = getSelected(selected);\n                        if (!sel) return '';\n\n                        return <MenuItem style={{pointerEvents: 'none'}}>\n                            <SpriteImage sprite={new Sprite(sel.sprite.id, sel.sprite.idx)} forEntity={true} />\n                            {sel.name}\n                        </MenuItem>\n                    }}\n                    style={{marginBottom: '25px',  width: '100%'}}\n                    value={selected}\n                >\n                    {props.campaign.characters.map((cha: EntityInterface) => (\n                        <MenuItem key={cha.id} value={cha.id}>\n                            <SpriteImage sprite={new Sprite(cha.sprite.id, cha.sprite.idx)} forEntity={true} />\n                            <ListItemText primary={cha.name} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => {\n                    props.onClose()\n                }} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={() => {\n                    const sel = getSelected(selected);\n                    if (sel) {\n                        const sp = new Sprite(sel.sprite.id, sel.sprite.idx);\n                        createEntity(props.entities, sp, sel.name, true, sel);\n                        props.onClose();\n                    }\n                }} color=\"primary\">\n                    Load\n                </Button>\n            </DialogActions>\n        </Dialog>\n});\n\n\nfunction PromptForNumber(props: {title: string, prompt: string, label?: string, open: boolean, onCancel: Function, onSubmit: Function}) {\n    const [num, setNum] = React.useState(0);\n    const handleClose = () => {\n        props.onSubmit(num);\n    };\n\n    return <Dialog open={props.open} onClose={()=>{props.onCancel()}} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                {props.prompt}\n            </DialogContentText>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                label={props.label || ''}\n                type=\"number\"\n                fullWidth\n                onChange={(event) => setNum(parseInt(event.target.value))}\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={()=>{props.onCancel()}} color=\"primary\">\n                Cancel\n            </Button>\n            <Button onClick={handleClose} color=\"primary\">\n                Submit\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n\n\nfunction cloneEntity(entities: EntityLayer, ent: Entity, num: number) {\n    if (num) {\n        for (let i=0; i<num; i++) {\n            entities.addEntity(ent.sprite, {\n                x: ent.x,\n                y: ent.y,\n                color: ent.color,\n                owners: [...ent.owners],\n                visible: ent.visible,\n                name: `${ent.name} ${i+2}`\n            });\n        }\n        entities.updateEntity(ent.id, {\n            name: `${ent.name} 1`\n        })\n    }\n}\n\n\nfunction createEntity(entities: EntityLayer, sprite: Sprite|null, name: string, visible: boolean, ext?: EntityInterface) {\n    if (!sprite) return;\n\n    const coords = getCenterViewportTile();\n    entities.addEntity(sprite, {\n        ...(ext||{}),\n        sprite,\n        name,\n        visible,\n        x: coords.tx,\n        y: coords.ty\n    })\n}\n\nlet campUpdateTimer: any = null;\n\n/**\n * Updates, adds, or removes the current Entity from the given Campaign's saved characters.\n * Maintains its own timer, to avoid spam-updating the DB.\n * @param campaign\n * @param ent\n */\nfunction updateCampaign(campaign: Campaign, ent: Entity) {\n    clearTimeout(campUpdateTimer);\n    campUpdateTimer = setTimeout(() => {\n        const savedIdx = campaign.characters.findIndex(c => c.id === ent.id);\n\n        if (ent.saveToCampaign) {\n            const newData: EntityInterface = {\n                color: ent.color,\n                id: ent.id,\n                name: ent.name,\n                owners: Array.from(ent.owners),\n                saveToCampaign: true,\n                sprite: {\n                    id: ent.sprite.id,\n                    idx: ent.sprite.idx\n                }\n            }\n            campaign.characters.splice(savedIdx >= 0 ? savedIdx : campaign.characters.length, 1, stripProxy(newData));\n            CampaignLoader.saveCampaign(campaign).then(() => console.debug('Updated campaign.'));\n        } else if (savedIdx >= 0) {\n            campaign.characters.splice(savedIdx, 1);\n            CampaignLoader.saveCampaign(campaign).then(() => console.debug('Removed entity from campaign.'));\n        }\n    }, 500);\n}\n","import {observer} from \"mobx-react-lite\";\nimport React from \"react\";\nimport UITool from \"./ui-tool\";\nimport GroupIcon from '@material-ui/icons/Group';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport Lobby, {PendingUser} from \"../game/controllers/lobby\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {MenuItem, MenuList, Tooltip} from \"@material-ui/core\";\nimport { IconButton } from '@material-ui/core';\nimport * as network from '../game/net/peerconnection'\nimport {updateUser, UserData} from \"../game/db/user-db\";\n\nexport default class UILobbyTool extends UITool {\n    readonly icon: JSX.Element = <GroupIcon />;\n    readonly name: string = 'Lobby';\n\n    getControlUI(forMobile: boolean): JSX.Element | null {\n        return <LobbyInterface lobby={this.controller.lobby}/>;\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n\n    register(): any {}\n\n    unregister(): any {}\n}\n\nconst useStyles = makeStyles(() => createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    }));\n\n\nconst LobbyInterface = observer((props: {lobby: Lobby}) => {\n    const classes = useStyles();\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Lobby</h2>\n            <a href={window.location.href} target='_blank' rel=\"noopener noreferrer\">Invite Link</a>\n            <PendingList lobby={props.lobby} />\n            <UserList />\n        </form>\n    </div>\n});\n\nconst PendingList = observer((props: {lobby: Lobby}) => {\n    const eles = props.lobby.pendingLogins.map(pl => {\n        return <PendingUserEle key={pl.keyCode} user={pl} lobby={props.lobby}/>\n    });\n\n    if(!eles.length) return null;\n\n    return <div>\n        <div style={{border: '1px solid black'}}>\n            <h4 style={{marginBottom: '5px'}}>Pending:</h4>\n            <MenuList>\n                {eles}\n            </MenuList>\n        </div>\n    </div>\n});\n\nconst PendingUserEle = (props: {user: PendingUser, lobby: Lobby}) => {\n    const approve = (ev: any) => {\n        props.lobby.approveUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n    const reject = (ev: any) => {\n        props.lobby.rejectUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    return <MenuItem style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n        <Tooltip title={'Device: ' + props.user.keyCode}><div>{props.user.username}</div></Tooltip>\n        <Tooltip title=\"Approve\"><IconButton children={<ThumbUpIcon/>} color=\"primary\" onClick={approve}/></Tooltip>\n        <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n    </MenuItem>\n}\n\n\nconst UserList =  observer((props: {}) => {\n    const eles = Array.from(network.clients).filter(c=>c.userData).map(c => {\n        // @ts-ignore\n        const dat: UserData = c.userData;\n        const reject = (ev: any) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            updateUser({\n                ...dat,\n                keyCodes: []\n            }).then(() => {\n                c.close()\n            })\n        }\n\n        return <MenuItem key={dat.id} style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n            {dat.username}\n            <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n        </MenuItem>\n    });\n\n    if (!eles.length) return <div>\n        <h5>No users online</h5>\n    </div>;\n\n    return <div>\n        <h4 style={{marginBottom: '1px'}}>Online:</h4>\n        <MenuList>\n            {eles}\n        </MenuList>\n    </div>\n});\n","import Middleware from \"./middleware\";\nimport {EVENT_STREAM} from \"../renderer/ui-data/ui-event-stream\";\nimport {UiMarker} from \"../renderer/ui-components/ui-marker\";\nimport {toggleViewportInput} from \"../renderer\";\nimport {DEFAULT_PEN_COLOR, setColor, setSize, setVisible} from \"../renderer/ui-components/ui-tooltip\";\nimport {SHAPE_TYPES, UiShape} from \"../renderer/ui-components/ui-shape\";\nimport {observable} from \"mobx\";\nimport {GRID_TILE_PX} from \"../renderer/ui-data/globals\";\nimport EntityLayer from \"../controllers/entities\";\nimport MeasureHandler from \"../net/handlers/measure-handler\";\n\n\nexport default class MeasureMiddleware extends Middleware {\n    public measure: UiShape|null = null;\n    private counter: UiMarker|null = null;\n    private dot: UiShape|null = null;\n    private moving = false;\n    private px = 0;\n    private py = 0;\n    @observable public shapeType: SHAPE_TYPES = SHAPE_TYPES.cone;\n    @observable public size: number = 0;\n    private entities: EntityLayer;\n    @observable public sentUpdate = false;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    register(): void {\n        setSize(1);\n        toggleViewportInput(false);\n        this.setShape(this.shapeType);\n        this.listener(EVENT_STREAM.on('mouse-up', () => {\n            this.moving = false;\n            if (!this.size) {\n                if (this.measure && this.sentUpdate) {\n                    MeasureHandler.sendMeasure(this.measure, false);\n                    this.sentUpdate = false;\n                }\n                this.counter?.remove();\n                this.measure?.remove();\n                this.counter = null;\n                this.measure = null;\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-down', ev => {\n            if (Middleware.isShiftDown) return;\n            if (this.measure && this.sentUpdate) {\n                MeasureHandler.sendMeasure(this.measure, false);\n                this.sentUpdate = false;\n            }\n            this.size = 0;\n            this.measure?.remove();\n            this.counter?.remove();\n            this.measure = new UiShape(this.shapeType).setPos(ev.tx, ev.ty).size(this.size).thickness(3).setFillColor(0x000000, 0.5);\n            this.counter = new UiMarker('0ft').place(ev.tx, ev.ty);\n            this.px = ev.tx*GRID_TILE_PX+GRID_TILE_PX/2;\n            this.py = ev.ty*GRID_TILE_PX+GRID_TILE_PX/2;\n            this.moving = true;\n\n            const ent = this.entities.getEntityList().find(e => e.canMove() && e.x === ev.tx && ev.ty === e.y);\n            if (ent) {\n                this.measure.color(parseInt(ent.color.replace('#', '0x')));\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('pointer-coords', ev => {\n            if (!this.moving || Middleware.isShiftDown) return;\n            const pxd = Math.sqrt(Math.pow(ev.px-this.px, 2) + Math.pow(ev.py - this.py, 2));\n            let td = Math.floor(pxd/GRID_TILE_PX);\n            if (this.shapeType === SHAPE_TYPES.rectangle) td *= 2;\n            this.size = td;\n            this.measure?.size(td);\n            this.counter?.setText(td*5+'ft');\n            if (this.shapeType === SHAPE_TYPES.cone) this.measure?.pointTowards(ev.px, ev.py);\n        }));\n\n        this.listener(EVENT_STREAM.on('hover', (e) => {\n            if (!this.moving && this.dot) this.dot?.setPos(e.tx, e.ty);\n        }));\n    }\n\n    setShape(type: SHAPE_TYPES) {\n        this.shapeType = type;\n        setVisible(this.shapeType === SHAPE_TYPES.cone);\n        if (this.shapeType !== SHAPE_TYPES.cone) {\n            this.dot = new UiShape(SHAPE_TYPES.circle).sizePx(5).color(DEFAULT_PEN_COLOR).setFillColor(DEFAULT_PEN_COLOR, 1);\n        } else {\n            this.dot?.remove();\n            this.dot = null;\n        }\n    }\n\n    protected onCleanup(): void {\n        if (this.measure && this.sentUpdate) {\n            MeasureHandler.sendMeasure(this.measure, false);\n        }\n        this.counter?.remove();\n        this.measure?.remove();\n        this.dot?.remove();\n        this.counter = null;\n        this.measure = null;\n        this.dot = null;\n    }\n\n    onShiftPress() {\n        toggleViewportInput(true);\n        setColor(0x000000);\n        this.dot?.color(0x000000);\n        this.dot?.setFillColor(0x000000, 1);\n    }\n    onShiftRelease() {\n        toggleViewportInput(false);\n        setColor(DEFAULT_PEN_COLOR);\n        this.dot?.color(DEFAULT_PEN_COLOR);\n        this.dot?.setFillColor(DEFAULT_PEN_COLOR, 1);\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport ExploreIcon from '@material-ui/icons/Explore';\nimport GameController from \"../game/controllers/game\";\nimport MeasureMiddleware from \"../game/middleware/measure-events\";\nimport {observer} from \"mobx-react-lite\";\nimport {Button, FormControlLabel, Radio} from \"@material-ui/core\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport {SHAPE_TYPES} from \"../game/renderer/ui-components/ui-shape\";\nimport MeasureHandler from \"../game/net/handlers/measure-handler\";\n\nexport default class UIMeasuretool extends UITool {\n    readonly icon: JSX.Element = <ExploreIcon />;\n    readonly name: string = 'Measure';\n    private readonly middleware: MeasureMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new MeasureMiddleware(controller.entities);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return <MeasureUI measure={this.middleware} />\n    }\n\n    register(): any {\n        console.log('Mounted measure tool.');\n        this.middleware.attach();\n    }\n\n    unregister(): any {\n        console.log('Unmounted measure tool.');\n        this.middleware.eject();\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return true;\n    }\n}\n\nconst MeasureUI = observer((props: {measure: MeasureMiddleware}) => {\n    const handleChange = (event: any) => {\n        props.measure.setShape(event.target.value);\n    };\n\n    const shapes = Object.values(SHAPE_TYPES);\n    const opts = shapes.map(type => {\n        return <FormControlLabel value={type} control={<Radio />} label={type} key={`opt-${type}`}/>\n    })\n\n    return <div>\n        <h2>Measure {props.measure.size ? `(${props.measure.size*5}ft)` : ''}</h2>\n        <RadioGroup aria-label=\"shapes\" name=\"shape-select\" value={props.measure.shapeType} onChange={handleChange}>\n            {opts}\n        </RadioGroup>\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={()=>{\n                if (props.measure.measure) {\n                    MeasureHandler.sendMeasure(props.measure.measure, true);\n                    props.measure.sentUpdate = true;\n                }\n            }}\n            disabled={!props.measure.size || props.measure.sentUpdate}\n        >\n            Send Measurement\n        </Button>\n    </div>\n});\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport UIPenTool from \"../ui-tools/ui-pen-tool\";\nimport GameController from \"../game/controllers/game\";\nimport UITool from \"../ui-tools/ui-tool\";\nimport {Avatar, Modal} from \"@material-ui/core\";\nimport UICameraTool from \"../ui-tools/ui-camera-tool\";\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport UIEraserTool from \"../ui-tools/ui-eraser-tool\";\nimport {observer} from \"mobx-react-lite\";\nimport * as connection from \"../game/net/peerconnection\";\nimport {NetworkMode} from \"../game/net/peerconnection\";\nimport UIEntityTool from \"../ui-tools/ui-entity-tool\";\nimport UILobbyTool from \"../ui-tools/ui-lobby-tool\";\nimport hotkeys from 'hotkeys-js';\nimport UIMeasuretool from \"../ui-tools/ui-measure-tool\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            height: 380,\n            transform: 'translateZ(0px)',\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto'\n        }\n    }),\n);\n\n\nconst ControlMenu = observer((props: {controller: GameController, forMobile: boolean}) => {\n    const isHost = connection.netMode.get() === NetworkMode.HOST;\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [modalOpen, setModalOpen] = React.useState(false);\n    const [tools, setTools] = React.useState<UITool[]>([]);\n    const [selectedTool, setSelected] = React.useState<UITool|null>(null);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleModalClose = () => {\n        setModalOpen(false);\n    };\n\n    const handleModalOpen = () => {\n        setModalOpen(true);\n    }\n\n    const handleSelect = (action: UITool) => {\n        handleClose();\n        if (action === selectedTool) {\n            return;\n        }\n        if (selectedTool) {\n            selectedTool.unregister();\n        }\n        setSelected(action);\n        action.register();\n        setModalOpen(true);\n    }\n\n    React.useEffect(() => {\n        // When the back button is used, close the modal.\n        window.addEventListener('popstate', handleModalClose);\n\n        hotkeys('1,2,3,4,5,6,7,8,9', (event, handler) => {\n            const key = parseInt(handler.key);\n            const tool = tools.filter(t=>t.isOption(props.forMobile, isHost))[key-1];\n            console.log('Hotkey:', key, tool);\n            if (tool && tool !== selectedTool) {\n                handleSelect(tool);\n            }\n        });\n\n        return () => {\n            window.removeEventListener('popstate', handleModalClose);\n            hotkeys.unbind('1,2,3,4,5,6,7,8,9');\n        }\n    });\n\n    React.useEffect(() => {\n        const newTools = [\n            new UICameraTool(props.controller),\n            new UIPenTool(props.controller),\n            new UIEraserTool(props.controller),\n            new UIEntityTool(props.controller),\n            new UILobbyTool(props.controller),\n            new UIMeasuretool(props.controller)\n        ];\n\n        setTools(newTools);\n        setSelected(newTools[0]);\n        newTools[0].register();\n    }, [props.controller]);\n\n    let ui;\n    const emb = selectedTool?.getControlUI(true);\n    if (emb) {\n        if (props.forMobile) {\n            ui = <div>\n                <Avatar\n                    className={'useMouse'}\n                    onClick={handleModalOpen}\n                    style={{\n                        position: 'fixed',\n                        bottom: '10px',\n                        left: '10px',\n                        transform: `translateY(-50%)`,\n                        background: '#3eec10',\n                        cursor: 'pointer'\n                    }}\n                >\n                    <MoreHorizIcon/>\n                </Avatar>\n                <Modal open={modalOpen} onClose={handleModalClose}>\n                    <div className={classes.paper}>\n                        {emb}\n                    </div>\n                </Modal>\n            </div>\n        } else {\n            ui = <div\n                style={{position: \"fixed\", left: '10px', top: '50%', minWidth: '400px', transform: `translateY(-50%)`}}\n                className={classes.paper}\n            >\n                {selectedTool?.getControlUI(false)}\n            </div>\n        }\n    }\n\n    return <div>\n        {ui}\n        <SpeedDial\n            ariaLabel=\"Control SpeedDial\"\n            className={classes.speedDial}\n            hidden={false}\n            icon={selectedTool?.icon || <SpeedDialIcon />}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            open={!props.forMobile || open}\n        >\n            {tools.filter(t=>t.isOption(props.forMobile, isHost)).map((action, idx) => (\n                <SpeedDialAction\n                    key={action.name}\n                    icon={action.icon}\n                    tooltipTitle={action.name}\n                    tooltipOpen\n                    onClick={(ev) => {ev.stopPropagation(); handleSelect(action)}}\n                    title={action.name + ` (Hotkey: ${idx+1})`}\n                />\n            ))}\n        </SpeedDial>\n    </div>\n});\n\nexport default ControlMenu;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport {InputDialog} from \"./prompts\";\n\n/**\n * Helper UI to prompt the user for their connection action, if no Room ID hashcode is set.\n * @param props\n * @constructor\n */\nexport default function LoginHelper (props: {controller: GameController}) {\n    const [promptLogin, setPrompt] = React.useState(true);\n    const [needClient, setNeedClient] = React.useState(false);\n\n    const setHosting = (hosting: boolean) => {\n        setPrompt(false);\n        if (hosting) {\n            return props.controller.startHost();\n        } else {\n           setNeedClient(true);\n        }\n    };\n\n    return <div>\n        { promptLogin ? <PromptNetwork select={setHosting}/> : null }\n        <InputDialog\n            open={needClient}\n            title={'Enter host ID'}\n            body={'Enter the ID of the host lobby you\\'d like to join'}\n            tooltip={'Host ID'}\n            onCancel={() => {setNeedClient(false); setPrompt(true)}}\n            onSubmit={(txt: string) => props.controller.startClient(txt)}\n        />\n    </div>\n}\n\n\nfunction PromptNetwork (props: {select: Function}) {\n\n    return <Dialog open={true} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Network Mode</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Would you like to join a campaign, or host your own campaign?\n            </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={() => {props.select(true)}}>\n                Host\n            </Button>\n            <Button onClick={() => { props.select(false)}}>\n                Join\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n","import * as connection from \"../game/net/peerconnection\";\nimport {isHost, NetworkMode, NetworkStatus} from \"../game/net/peerconnection\";\nimport LoginHelper from \"./loginHelper\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\n\n/**\n * Util to display network status to the user.\n * @param props\n * @constructor\n */\nexport default function ConnectionOverlay(props: {controller: GameController}) {\n    let content = null;\n    let message = null;\n\n    if (connection.netMode.get() === NetworkMode.UNKNOWN) {\n        content = <LoginHelper controller={props.controller} />\n\n    } else {\n        switch (connection.netStatus.get()) {\n            case NetworkStatus.DISCONNECTED:\n                if (!isHost()) message = `Error connecting to service. Cannot reconnect.`; // client only, host can stay on editing.\n                break;\n            case NetworkStatus.RECONNECTING:\n                message = 'Error with connection to Host. Attempting reconnection...';\n                break;\n            case NetworkStatus.CONNECTING:\n                message = 'Connecting to Host...';\n                break;\n            case NetworkStatus.MATCHMAKING_FAIL:\n                message = 'Connection to matchmaking server failed. Please reload.';\n                break;\n            case NetworkStatus.WAITING_FOR_HOST:\n                message = 'Waiting for the Host to approve our login...';\n                break;\n            default:\n                message = null;\n        }\n    }\n\n    if (message) {\n        content =  <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h4\" component=\"h4\" gutterBottom>\n                {message}\n            </Typography>\n        </Backdrop>;\n    }\n    return content;\n}\n","import {observable} from \"mobx\";\nimport {db} from '../db/database';\n\nclass GoogleApi {\n    private injected = false;\n    private apiReady: any = null;\n    private apiFailed: any = null;\n    public readonly waitForLoad = new Promise((res, fail) => {\n        this.apiReady = res;\n        this.apiFailed = fail;\n    });\n    @observable public isSignedIn: boolean = false;\n\n    /**\n     * Injects a script object into the base page node, which loads and initiates the Google API.\n     * This is automatically called initially before export, in order for this client to work.\n     */\n    public inject() {\n        if (this.injected) return;\n        this.injected = true;\n        const script = document.createElement(\"script\");\n        script.src = \"https://apis.google.com/js/client.js\";\n\n        script.onload = () => {\n            gapi.load('client:auth2', () => {\n                gapi.client.init({\n                    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n                    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n                    scope: 'https://www.googleapis.com/auth/drive.appdata',\n                }).then(() => {\n                    // Listen for sign-in state changes.\n                    gapi.auth2.getAuthInstance().isSignedIn.listen(res => this.isSignedIn = res);\n                    this.isSignedIn = gapi.auth2.getAuthInstance().isSignedIn.get();\n                    this.apiReady();\n                }, (error) => {\n                    console.error(error);\n                    this.apiFailed(error);\n                });\n            });\n        };\n        document.body.appendChild(script);\n    }\n\n    /**\n     * Fire a callback when the sign-in status changes.\n     * Always fires an initial value, so that it cannot be missed if no update occurs.\n     * @param callback\n     */\n    public onSignInChange(callback: Function) {\n        this.waitForLoad.then(() => {\n            callback(gapi.auth2.getAuthInstance().isSignedIn.get());\n            gapi.auth2.getAuthInstance().isSignedIn.listen(res => callback(res));\n        })\n    }\n\n    /**\n     * Prompts the user to sign in, using a popup Google homepage.\n     */\n    public async promptSignIn() {\n        await this.waitForLoad;\n        localStorage['lastDriveUpdate'] = 0;\n        if (!this.isSignedIn) {\n            return gapi.auth2.getAuthInstance().signIn().then(res => {\n                console.log('Login res:', res);\n                console.log(this.isSignedIn, gapi.auth2.getAuthInstance().isSignedIn.get())\n            })\n        }\n    }\n\n    /**\n     * Disconnects the current user from the API.\n     */\n    public async signOut() {\n        return gapi.auth2.getAuthInstance().signOut();\n    }\n\n    /**\n     * Uploads the given Blob to the connected Google Drive, if one is available.\n     *\n     * Either creates a new file if one does not exist already, or replaces the old one.\n     * @param data\n     * @param mimeType\n     */\n    private async upload(data: Blob, mimeType: string = 'application/json') {\n        if (!this.isSignedIn) throw Error('Attempted to upload when not signed in!');\n        const user = gapi.auth2.getAuthInstance().currentUser.get();\n        const oauthToken = user.getAuthResponse().access_token;\n        const latest = await this.getLatestBackup();\n        const latestID = latest?.id || '';\n        const body: any = { parents: ['appDataFolder'], name: \"terra-db-backup.json\", mimeType };\n\n        if(latest) delete body.parents;  // In a PATCH, this field cannot be updated.\n\n        return fetch(`https://www.googleapis.com/upload/drive/v3/files/${latestID}?uploadType=resumable`, {\n            method: latest ? 'PATCH' : 'POST',\n            headers: {\n                Authorization: `Bearer ${oauthToken}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n        }).then(resp => {\n            const loc = resp.headers.get('location');\n            if (!loc) throw Error('No upload redirect location was given.');\n            return fetch(loc, {\n                method: latest ? 'PATCH':'PUT',\n                body: data\n            })\n        })\n    }\n\n    /**\n     * Get a list of all files uploaded to the application's data folder.\n     */\n    private async listFiles() {\n        await this.waitForLoad;\n        if (!this.isSignedIn) throw Error('Cannot get files when not signed in!');\n\n        return gapi.client.drive.files.list({\n            pageSize: 10,\n            fields: \"nextPageToken, files(id, name, modifiedTime)\",\n            spaces: 'appDataFolder'\n        }).then(function(response) {\n            return response.result.files;\n        });\n    }\n\n    /**\n     * Get the most recent file uploaded to the application's data folder.\n     */\n    private async getLatestBackup(): Promise<gapi.client.drive.File|null> {\n        const files = (await this.listFiles()) || [];\n\n        return files.sort((a, b) => {\n            return new Date(b.modifiedTime || 0).getTime() - new Date(a.modifiedTime || 0).getTime();\n        })[0] || null;\n    }\n\n    /**\n     * Download the given file as a blob. If no file is provided, defaults to the latest version.\n     * @param latest\n     * @private\n     */\n    private async downloadLatestBackup(latest: gapi.client.drive.File|null = null) {\n        latest = latest || await this.getLatestBackup();\n        const user = gapi.auth2.getAuthInstance().currentUser.get();\n        const oauthToken = user.getAuthResponse().access_token;\n\n        if (!latest?.id) {\n            throw Error('Cannot locate latest file for downloading.')\n        } else {\n            return fetch(`https://www.googleapis.com/drive/v3/files/${latest.id}?alt=media`, {\n                headers: {\n                    Authorization: `Bearer ${oauthToken}`\n                }\n            }).then(res => {\n                return res.blob()\n            })\n        }\n    }\n\n    /**\n     * Returns the latest File from GDrive, if an updated version is available. Otherwise, returns null.\n     */\n    public async getLatestUpgrade() {\n        const latest = await this.getLatestBackup();\n        const lastUpdate = localStorage['lastDriveUpdate'] || -1;\n        const driveUpdateTime = new Date(latest?.modifiedTime || 0).getTime();\n\n        return (latest && (driveUpdateTime > lastUpdate)) ? latest : null;\n    }\n\n    /**\n     * Restores the local DB from the given backup stored on GDrive.\n     */\n    public async downloadDB(latest: gapi.client.drive.File) {\n        const driveUpdateTime = new Date(latest?.modifiedTime || 0).getTime();\n\n        return this.downloadLatestBackup(latest).then(async res => {\n            await db.importData(res, () => {\n                localStorage['lastDriveUpdate'] = driveUpdateTime;\n            })\n        });\n    }\n\n    /**\n     * Uploads the local database contents to Google Drive.\n     */\n    public async uploadLocalDB() {\n        // @ts-ignore\n        const blob = await db.toBlob();\n\n        return this.upload(blob, 'application/json').then(async res => {\n            const txt = await res.text();\n            console.debug('Upload result:', txt);\n            localStorage['lastDriveUpdate'] = Date.now();\n            return JSON.parse(txt);\n        }).catch(err => {\n            console.error('Upload error:');\n            console.error(err);\n            return null;\n        });\n    }\n}\n\nconst api = new GoogleApi();\napi.inject();\n\n\n// @ts-ignore\nwindow.google = api;\n\nexport default api;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport {observer} from \"mobx-react-lite\";\nimport Campaign from \"../game/controllers/campaign\";\nimport PublicIcon from '@material-ui/icons/Public';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport BackupIcon from '@material-ui/icons/Backup';\nimport CloudOffIcon from '@material-ui/icons/CloudOff';\nimport {Button, Dialog, DialogContent, DialogTitle, Fab, InputLabel, Menu, MenuItem, Tooltip} from \"@material-ui/core\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport {InputDialog} from \"./prompts\";\nimport {db} from \"../game/db/database\";\nimport * as download from 'downloadjs';\nimport google from '../game/util/google-api';\n\n\nexport const CampaignSelector = observer((props: {controller: GameController}) => {\n    const [need, setNeed] = React.useState(true);\n    const [wantOpen, setWantOpen] = React.useState(false);\n    const [promptNew, setPromptNew] = React.useState(false);\n    const [campaignList, setList] = React.useState<Campaign[]>([]);\n    const [storage, setStorage] = React.useState({q: 1, u: 0});\n\n    const selectCampaign = React.useMemo(() => {\n        return (camp: Campaign) => {\n            setNeed(false);\n            props.controller.campaign = camp;\n            metadata.store(Meta.CAMPAIGN_CURRENT, camp.id).then();\n            if (props.controller.campaign.loadedBoard) {\n                props.controller.loadBoard(props.controller.campaign.loadedBoard).then();\n            }\n        }\n    }, [props.controller]);\n\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.CAMPAIGN_CURRENT).then(async (id: number) => {\n            if (id === null) return;\n            console.debug('Current campaign:', id);\n            const camp = await CampaignLoader.loadCampaign(id);\n            if (!camp) return;\n            selectCampaign(camp);\n        });\n\n        // Load all available campaigns:\n        CampaignLoader.getAvailable().then(campaigns => setList(campaigns));\n\n        // Lookup used storage:\n        navigator.storage?.estimate().then(function(estimate) {\n            const u = estimate.usage;\n            const q = estimate.quota\n            if (u !== undefined && q !== undefined) setStorage({ q, u});\n        });\n    }, [selectCampaign]);\n\n    const addCampaign = async (name: string) => {\n        setPromptNew(false);\n        if (name.trim().length) {\n            const c = await CampaignLoader.createCampaign(name);\n            setList([...campaignList, c]);\n        }\n    }\n\n    const handleModalClose = () => {\n        if (!need) {\n            setWantOpen(false);\n        }\n    }\n\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    return <div className={'menu_button'}>\n        <Tooltip\n            title=\"Campaign Settings\"\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <Fab\n                color=\"default\"\n                onClick={()=>{setWantOpen(true)}}\n            >\n                <PublicIcon style={{color: '#4d8a20'}}/>\n            </Fab>\n        </Tooltip>\n\n        <Dialog open={need || wantOpen} onClose={handleModalClose}>\n            <DialogTitle style={{textAlign: \"center\"}}>Campaign Info</DialogTitle>\n            <DialogContent style={{textAlign: \"center\"}}>\n                <CampaignMenu campaigns={campaignList} onSelect={selectCampaign} selected={props.controller.campaign}/>\n                <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    onClick={()=>setPromptNew(true)}\n                    startIcon={<AddCircleOutlineIcon />}\n                >\n                    Create New Campaign\n                </Button>\n                <p style={{color: 'gray'}}>\n                    {\n                        storage ?\n                            `${(storage.u/storage.q * 100).toFixed(2)}% used of ${formatBytes(storage.q)}`\n                            : 'Storage metrics unknown'\n                    }\n                </p>\n                <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={exportLocalDB}\n                    startIcon={<SaveAltIcon />}\n                >\n                   Save Backup\n                </Button>\n                <input\n                    id=\"backup-input\"\n                    type=\"file\"\n                    style={{display: \"none\"}}\n                    onChange={restoreLocalDB}\n                    accept={'application/json'}\n                />\n                <Button\n                    variant=\"outlined\"\n                    color=\"default\"\n                    onClick={() => document.getElementById('backup-input')?.click()}\n                    startIcon={<RestoreIcon />}\n                    style={{marginLeft: '2px'}}\n                >\n                    Restore\n                </Button>\n                <DialogTitle>Google Drive:</DialogTitle>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => google.promptSignIn()}\n                    startIcon={<BackupIcon />}\n                    style={{display: google.isSignedIn ? 'none':''}}\n                >\n                    Sign In\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => google.signOut()}\n                    startIcon={<CloudOffIcon />}\n                    style={{display: google.isSignedIn ? '':'none'}}\n                >\n                    Sign Out\n                </Button>\n            </DialogContent>\n        </Dialog>\n        <InputDialog\n            open={promptNew}\n\t\t\ttitle='New Campaign'\n\t\t\tbody='Enter a name for the new Campaign:'\n\t\t\tacceptText={'Create'}\n\t\t\ttooltip={'Campaign Name'}\n\t\t\tonSubmit={addCampaign}\n\t\t\tonCancel={()=>setPromptNew(false)}\n\t\t/>\n    </div>\n})\n\n\nexport function CampaignMenu(props: {campaigns: Campaign[], onSelect: Function, selected: Campaign|null}) {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [selected, setSelected] = React.useState<Campaign|null>(props.selected);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (campaign: Campaign|null) => {\n        if (campaign) {\n            setSelected(campaign);\n            props.onSelect(campaign);\n        }\n        setAnchorEl(null);\n    };\n\n    const camps = props.campaigns.sort((c1, c2)=>c1.timeCreated-c2.timeCreated).map(c => {\n        return <MenuItem key={c.id} onClick={()=>handleClose(c)}>\n            <b>{c.name}</b>&nbsp;-&nbsp;<i>[{new Date(c.timeCreated).toLocaleString()}]</i>\n        </MenuItem>\n    });\n\n    return (\n        <div style={{marginBottom: '20px'}}>\n            <InputLabel htmlFor='campaign-list-btn'>Current Campaign:</InputLabel>\n            <Button\n                variant='outlined'\n                onClick={handleClick}\n                id={'campaign-list-btn'}\n                disabled={props.campaigns.length===0}\n                style={{maxWidth: '300px', minWidth: '200px', overflowX: 'hidden'}}\n            >\n                {selected? selected.name : (props.campaigns.length ? 'Select a Campaign':'No campaigns exist')}\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={()=>handleClose(null)}\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            >\n                {camps}\n            </Menu>\n        </div>\n    );\n}\n\n\nfunction formatBytes(bytes: number, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Export the full database as a JSON file.\n */\nasync function exportLocalDB() {\n    // @ts-ignore\n    const blob = await db.toBlob();\n\n    // @ts-ignore\n    download(blob, `terra-backup.json`, 'application/json');\n}\n\nasync function restoreLocalDB() {\n    // @ts-ignore\n    const file = document.getElementById('backup-input')?.files[0];\n    await db.importData(file);\n}\n","// Small wrapper utility for storing arbitrary data.\n\nexport function get(key: string, def: any = null) {\n    const ret = localStorage.getItem(key)\n    return ret ? JSON.parse(ret) : def;\n}\n\n\nexport function set(key: string, val: any) {\n    localStorage.setItem(key, JSON.stringify(val));\n}\n\n\nexport enum STORAGE {\n    SHOW_GRID = 'showGrid',\n    SHOW_NAMES = 'showNames',\n    SHOW_MEASURES = 'showShapes',\n}\n","import React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {Button, Fab, MenuItem, MenuList, Popover, Tooltip, Typography} from \"@material-ui/core\";\nimport MapIcon from '@material-ui/icons/Map';\nimport GameController from \"../game/controllers/game\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport Campaign from \"../game/controllers/campaign\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport notifications from './notifications';\nimport ConfirmPrompt, {InputDialog} from \"./prompts\";\n\n\n\nexport const BoardSelector = observer((props: {controller: GameController}) => {\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n    const campaign = props.controller.campaign;\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    if (!campaign) return null;\n\n    return <div style={{pointerEvents: 'auto',}}>\n        <Tooltip\n            title=\"Selected Board\"\n        >\n            <Fab\n                variant=\"extended\"\n                onClick={(evt: any)=>{setAnchorEl(evt.currentTarget)}}\n                style={{width: '200px', overflowX: 'hidden', marginTop: '5px'}}\n            >\n                <MapIcon style={{marginRight: '5px'}}/>\n                <Typography variant=\"inherit\" noWrap>\n                    {campaign?.loadedBoard ? campaign.loadedBoard : '[Untitled Board]'}\n                </Typography>\n            </Fab>\n        </Tooltip>\n        <Popover\n            open={!!anchorEl}\n            anchorEl={anchorEl}\n            onClose={()=>setAnchorEl(null)}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <BoardControlMenu campaign={campaign} controller={props.controller}/>\n        </Popover>\n    </div>\n});\n\nexport const BoardControlMenu = (props: {controller: GameController, campaign: Campaign}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const handleSelected = (board: string) => {\n        setSelected(board);\n    }\n\n    return <form\n        style={{\n            flexGrow: 1,\n            width: '300px'\n        }}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={e => e.preventDefault()}\n    >\n        <FormGroup row>\n            <BoardSelectMenu campaign={props.campaign} onSelect={handleSelected}/>\n        </FormGroup>\n        <FormGroup row>\n            <BoardLoadButton controller={props.controller} selected={selected} setSelected={setSelected} />\n            <BoardDeleteButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n            <BoardCreateButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n        </FormGroup>\n    </form>\n}\n\n\nexport const BoardSelectMenu = observer((props: {campaign: Campaign, onSelect: Function}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const boards = props.campaign.boards.map(b => {\n        return <MenuItem\n            key={b}\n            onClick={() => {setSelected(b); props.onSelect(b)}}\n            selected={b === selected}\n        >\n            <Typography\n                variant=\"inherit\"\n                noWrap\n                color={b === props.campaign.loadedBoard ? 'textSecondary':'initial'}\n            >\n                {b}\n            </Typography>\n        </MenuItem>\n    });\n\n    return <MenuList style={{maxHeight: '400px',  overflow: 'auto', width: '100%'}}>\n        {boards}\n    </MenuList>;\n});\n\nexport const BoardLoadButton = (props: {controller: GameController, selected: string|null, setSelected: Function}) => {\n    return <Button\n        color=\"primary\"\n        disabled={props.controller.campaign?.loadedBoard === props.selected}\n        onClick={() => {\n            if (props.selected) {\n                props.controller.loadBoard(props.selected).then();\n            }\n        }}\n    >\n        Load\n    </Button>\n};\n\nexport const BoardDeleteButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [confirm, needConfirm] = React.useState(false);\n\n    return <div>\n        <Button\n            disabled={!props.selected}\n            color=\"secondary\"\n            onClick={() => {needConfirm(true)}}\n        >\n            Delete\n        </Button>\n        <ConfirmPrompt\n            open={confirm}\n            onCancel={() => {needConfirm(false)}}\n            onConfirm={() => {\n                if (props.selected) {\n                    props.controller.deleteBoard(props.campaign, props.selected).catch(err => {\n                        notifications.error('Failed to delete board!');\n                        console.error(err);\n                    });\n                    props.setSelected(null);\n                    needConfirm(false);\n                }\n            }}\n            title={'Really delete?'}\n            prompt={`Are you sure you want to delete the board \"${props.selected}\"?`}\n            confirmButton={'Delete'}\n        />\n    </div>\n};\n\nexport const BoardCreateButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [needPrompt, setPrompt] = React.useState(false);\n    const handleCreate = (name: string) => {\n        setPrompt(false);\n        if (props.campaign.boards.includes(name)) {\n            return notifications.error('All board names must be unique!')\n        }\n        if (name && name.trim().length) {\n            props.campaign.boards.push(name);\n            props.setSelected(name);\n            props.controller.loadBoard(name).then();\n        }\n    }\n\n    return <div>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)'}}\n            onClick={() => {\n                setPrompt(true);\n            }}\n        >\n            New\n        </Button>\n        <InputDialog\n            open={needPrompt}\n            title='Create a Board'\n            body='Enter the name for the new Board:'\n            tooltip={'Board name'}\n            acceptText={'Create'}\n            onSubmit={handleCreate}\n            onCancel={handleCreate}\n        />\n    </div>\n};\n","import {observer} from \"mobx-react-lite\";\nimport {CircularProgress, Fab, Tooltip} from \"@material-ui/core\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {isHost} from \"../game/net/peerconnection\";\nimport hotkeys from \"hotkeys-js\";\nimport google from '../game/util/google-api';\nimport notifications from \"./notifications\";\nimport ConfirmPrompt from \"./prompts\";\nimport Button from \"@material-ui/core/Button\";\n\n\nexport const BoardSaveButton = observer( (props: {controller: GameController}) => {\n    const shouldSave = props.controller.campaign?.loadedBoard &&\n        (props.controller.entities.isDirty || props.controller.terrain.isBoardDirty);\n    const [saving, setSaving] = React.useState(false);\n    const [dbUpdate, setUpdate] = React.useState<any>(null);\n\n    const saveBoard = React.useMemo(() => {\n        if (!shouldSave) return ()=>{};\n        return async () => {\n            if (!isHost()) return;\n            setSaving(true);\n            try {\n                await props.controller.saveBoard();\n                if (google.isSignedIn) {\n                    await google.uploadLocalDB();\n                }\n                notifications.success(`Saved ${props.controller.campaign?.loadedBoard}!`, {\n                    autoHideDuration: 2000,\n                    preventDuplicate: true\n                });\n            } catch (err) {\n                console.error(err);\n                notifications.error(`Failed to save! ${err.message}`);\n            }\n            setSaving(false);\n        }\n    }, [props.controller, shouldSave]);\n\n    React.useMemo(() => {\n        // Check for updated DB files in Google Drive whenever a user connects their account:\n        google.onSignInChange(async (loggedIn: boolean) => {\n            if (loggedIn) {\n                const latest = await google.getLatestUpgrade();\n                if (latest) {\n                    setUpdate(latest);\n                } else {\n                    notifications.info('Local save up to date!');\n                }\n            } else {\n                notifications.warning('Not (optionally) syncing with Google Drive.', {\n                    action: <Button onClick={()=>google.promptSignIn()} variant={'outlined'}>Connect</Button>,\n                    autoHideDuration: 6000\n                });\n            }\n        })\n    }, [])\n\n    React.useEffect(() => {\n        // Enable hotkey for saving:\n        hotkeys('ctrl+s', (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            saveBoard();\n        });\n\n        return () => {\n            hotkeys.unbind('ctrl+s');\n        }\n    }, [props.controller, saveBoard])\n\n    if (!isHost()) return null;\n\n    let title = shouldSave ? \"Save Board (ctrl+s)\" : \"No changes to save.\";\n\n    if (saving) title = 'Save in progress...';\n\n    return <div>\n        <Tooltip\n            title={title}\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <span>\n                <Fab\n                    color=\"primary\"\n                    onClick={saveBoard}\n                    disabled={!shouldSave}\n                >\n                    {saving ? <CircularProgress /> : <SaveIcon />}\n                </Fab>\n            </span>\n        </Tooltip>\n        <ConfirmPrompt\n            open={!!dbUpdate}\n            onCancel={()=>setUpdate(null)}\n            onConfirm={()=>{\n                console.log('Updating from GDrive...');\n                google.downloadDB(dbUpdate).then();\n                setUpdate(null);\n            }}\n            title={'Database Update'}\n            prompt={'You have a recently updated save stored in Google Drive. Which version would you prefer to use?'}\n            confirmButton={'Google Drive'}\n            cancelButton={'Local Save'}\n        />\n    </div>\n});\n","import {observer} from \"mobx-react-lite\";\nimport {\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Fab,\n    FormControlLabel, Slider,\n    Switch,\n    Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport * as GRID from '../game/renderer/ui-components/ui-grid';\nimport * as LS from '../game/data/local-storage';\nimport EntityLayer from \"../game/controllers/entities\";\nimport hotkeys from \"hotkeys-js\";\nimport MeasureHandler from \"../game/net/handlers/measure-handler\";\nimport * as RENDER from '../game/renderer';\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport {InputDialog} from \"./prompts\";\n\n\nexport const PreferencesButton = observer( (props: {controller: GameController}) => {\n    const [modalOpen, setModalOpen] = React.useState(false);\n\n    React.useEffect(() => {\n        GRID.setVisible(LS.get(LS.STORAGE.SHOW_GRID, true));\n        MeasureHandler.showMeasures(LS.get(LS.STORAGE.SHOW_MEASURES, true));\n        props.controller.entities.setDisplayNamePlates(LS.get(LS.STORAGE.SHOW_NAMES, true));\n\n        hotkeys('ctrl+p', (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            setModalOpen(true);\n        });\n\n        return () => {\n            hotkeys.unbind('ctrl+p');\n        }\n    }, [props.controller.entities]);\n\n    return <div style={{ width: '56px' }}>\n        <Tooltip\n            title='Preferences'\n            style={{\n                pointerEvents: 'auto',\n            }}\n        >\n            <span>\n                <Fab\n                    color=\"primary\"\n                    onClick={() => setModalOpen(true)}\n                    disabled={modalOpen}\n                >\n                    <SettingsIcon />\n                </Fab>\n            </span>\n        </Tooltip>\n\n        <Dialog open={modalOpen} onClose={() => setModalOpen(false)}>\n            <Tooltip\n                title={\"Built from commit ID: \" + (process.env.REACT_APP_CURRENT_SHA || 'Unknown')}\n                style={{\n                    pointerEvents: 'auto',\n                }}\n            >\n                <DialogTitle style={{textAlign: \"center\"}}>User Settings</DialogTitle>\n            </Tooltip>\n\n            <Button\n                onClick={() => {\n                    // @ts-ignore\n                    window.location = window.location.toString().replace(window.location.hash, '');\n                }}\n                color=\"secondary\"\n                variant={\"outlined\"}\n                style={{marginTop: '10px', marginBottom: '10px', width: '100%'}}\n            >\n                Disconnect\n            </Button>\n\n\n            <DialogContent style={{textAlign: \"center\"}}>\n                <Typography variant=\"h6\" component=\"h6\" gutterBottom>Display Options</Typography>\n            </DialogContent>\n\n            <DialogContent style={{textAlign: \"left\"}}>\n                <GridSwitch />\n                <NameSwitch entities={props.controller.entities} />\n                <MeasureSwitch />\n                <NameChange />\n                <ZoomSlider />\n            </DialogContent>\n        </Dialog>\n    </div>\n});\n\n\nconst GridSwitch = () => {\n    const [useGrid, setGrid] = React.useState(LS.get(LS.STORAGE.SHOW_GRID, true));\n\n    const toggleGrid = (ev: any) => {\n        setGrid(ev.target.checked);\n        LS.set(LS.STORAGE.SHOW_GRID, ev.target.checked);\n        GRID.setVisible(ev.target.checked);\n    };\n\n    return <div>\n        <FormControlLabel value={useGrid} control={\n            <Switch\n                checked={useGrid}\n                onChange={toggleGrid}\n                name=\"showGrid\"\n                inputProps={{ 'aria-label': 'show grid' }}\n            />\n        } label={'Grid'} style={{color: useGrid ? 'black' : 'gray'}}/>\n    </div>\n}\n\n\nconst NameSwitch = (props: {entities: EntityLayer}) => {\n    const [useName, setNames] = React.useState(props.entities.showNames);\n\n    const toggleGrid = (ev: any) => {\n        setNames(ev.target.checked);\n        LS.set(LS.STORAGE.SHOW_NAMES, ev.target.checked);\n        props.entities.setDisplayNamePlates(ev.target.checked);\n    };\n\n    return <div>\n        <FormControlLabel value={useName} control={\n            <Switch\n                checked={useName}\n                onChange={toggleGrid}\n                name=\"showName\"\n                inputProps={{ 'aria-label': 'show names' }}\n            />\n        } label={'Name plates'} style={{color: useName ? 'black' : 'gray'}}/>\n    </div>\n}\n\n\nconst MeasureSwitch = () => {\n    const [useMeasure, setNames] = React.useState(LS.get(LS.STORAGE.SHOW_MEASURES, true));\n\n    const toggleGrid = (ev: any) => {\n        setNames(ev.target.checked);\n        LS.set(LS.STORAGE.SHOW_MEASURES, ev.target.checked);\n        MeasureHandler.showMeasures(ev.target.checked);\n    };\n\n    return <div>\n        <FormControlLabel value={useMeasure} control={\n            <Switch\n                checked={useMeasure}\n                onChange={toggleGrid}\n                name=\"showName\"\n                inputProps={{ 'aria-label': 'show measures' }}\n            />\n        } label={'User Measurements'} style={{color: useMeasure ? 'black' : 'gray'}}/>\n    </div>\n}\n\n\nconst ZoomSlider = () => {\n    const [scale, setScale] = React.useState(1);\n\n    function updateScale(val: number) {\n        RENDER.setZoom(val);\n        setScale(val);\n    }\n\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom style={{textAlign: \"center\"}}>\n            Zoom Scale: {scale}x\n        </Typography>\n        <Slider\n            value={scale}\n            getAriaValueText={() => `${scale}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={.5}\n            marks\n            min={0.5}\n            max={4}\n            onChange={ (event: any, newValue: any)=> updateScale(newValue)}\n        />\n    </div>\n}\n\n\nconst NameChange = () => {\n    const [showPrompt, setShowPrompt] = React.useState(false);\n\n    function onChange(name: string) {\n        metadata.store(Meta.USERNAME, name).then(() => {\n            window.location.reload();\n        });\n    }\n\n    return <div>\n        <Button\n            onClick={() => {\n                setShowPrompt(true);\n            }}\n            color=\"primary\"\n            variant={\"outlined\"}\n            style={{marginTop: '10px', marginBottom: '10px', width: '100%'}}\n        >\n            Change Username\n        </Button>\n        <InputDialog\n            body={'Enter a new Name'}\n            onCancel={()=>setShowPrompt(false)}\n            onSubmit={(data: string) => onChange(data)}\n            open={showPrompt}\n            title={'Change Username'}\n            tooltip={'(requires reload)'}\n            acceptText={'Change'}\n        />\n    </div>\n}\n","import React from 'react';\nimport './styles/App.scss';\nimport './styles/canvas-style.scss';\nimport GameController from \"./game/controllers/game\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {Typography} from \"@material-ui/core\";\nimport ControlMenu from \"./ui-components/controlMenu\";\nimport {observer} from \"mobx-react-lite\";\nimport ConnectionOverlay from \"./ui-components/connectionOverlay\";\nimport {SnackbarProvider} from 'notistack';\nimport {SnackbarUtilsConfigurator} from \"./ui-components/notifications\";\nimport {Meta, metadata, currentUsername} from './game/db/metadata-db';\nimport {CampaignSelector} from \"./ui-components/campaignSelector\";\nimport {BoardSelector} from \"./ui-components/boardSelector\";\nimport {BoardSaveButton} from \"./ui-components/boardSaveButton\";\nimport {InputDialog} from \"./ui-components/prompts\";\nimport {YoutubePlayerInterface} from \"./ui-components/youtubePlayer\";\nimport {PreferencesButton} from \"./ui-components/preferencesMenu\";\n\n\nconsole.log(`This build was generated from the Git commit: https://github.com/shadowmoose/Terra/commit/${process.env.REACT_APP_CURRENT_SHA||\"\"}`);\n\nconst controller = new GameController();\n\nif (process.env.NODE_ENV !== 'development' && !window.location.href.includes('unstable')) {\n    console.info('Shutting the console up for non-dev build.');\n    function noop() {}\n    const oldConsole = Object.assign({}, console);\n    // @ts-ignore\n    window.debugRestoreLog = () => {\n        Object.assign(console, oldConsole);\n    };\n    console.debug = noop;\n    console.log = noop;\n    console.info = noop;\n}\n\nconst App = observer(() => {\n    const desktop = useMediaQuery('(min-width:900px)');\n    const [needName, setNeedName] = React.useState(false);\n    const setName = async (name: string) => {\n        if (name && name.length) {\n            setNeedName(false);\n            currentUsername.set(name);\n            await metadata.store(Meta.USERNAME, name);\n            await controller.start();\n        } else {\n            window.location.reload();\n        }\n    }\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.USERNAME).then(async (name: string) => {\n            if (name && name.length) {\n               currentUsername.set(name);\n               setNeedName(false);\n               await controller.start();\n            } else {\n                setNeedName(true);\n            }\n        })\n    }, []);\n\n    let content: JSX.Element|null = null;\n\n    if (needName) {\n        content = <InputDialog\n            open={needName}\n            title='Choose a Name'\n            body='Enter the name you want to go by:'\n            tooltip={'Name'}\n            onSubmit={setName}\n            onCancel={setName}\n        />;\n    } else if (!controller.ready) {\n        content = <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                Loading <CircularProgress color=\"inherit\" />\n            </Typography>\n        </Backdrop>;\n    } else if (controller.isNetworkReady) {\n        content = <ControlMenu controller={controller} forMobile={!desktop}/>\n    } else if (!controller.isNetworkReady) {\n        content = <ConnectionOverlay controller={controller} />;\n    }\n\n    return (\n        <SnackbarProvider maxSnack={5}>\n            <SnackbarUtilsConfigurator />\n            <div className=\"App noMouse\">\n                <div style={{\n                    display: 'flex',\n                    pointerEvents: 'none',\n                    flexDirection: 'row',\n                    position: 'fixed',\n                    top: '10px',\n                    left: '10px'\n                }}>\n                    <div style={{\n                        display: 'flex',\n                        pointerEvents: 'none',\n                        flexDirection: 'column',\n                    }}>\n                        <PreferencesButton controller={controller} />\n                        <CampaignSelector controller={controller}/>\n                        <YoutubePlayerInterface />\n                    </div>\n                    <BoardSelector controller={controller}/>\n                    <BoardSaveButton controller={controller} />\n                </div>\n\n                {content}\n            </div>\n        </SnackbarProvider>\n    )\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app waitForSpriteLoad faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'mobx-react-lite/batchingForReactDom'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport notifications from \"./ui-components/notifications\";\nimport {Button} from \"@material-ui/core\";\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\nlet needReload = false;\nserviceWorker.register({\n    onSuccess: (data) => {\n        console.log('cache worker register: success.', data);\n    },\n    onUpdate: (data) => {\n        console.warn('cache worker update.', data);\n        const tID = notifications.info('An update is available. Please reload Terra.', {\n            preventDuplicate: true,\n            persist: true,\n            action: <Button\n                variant={\"outlined\"}\n                onClick={()=>{notifications.close(tID); needReload = true; data.waiting?.postMessage({ type: \"SKIP_WAITING\" })}}\n            >\n                Reload\n            </Button>\n        })\n    }\n});\n\nnavigator.serviceWorker?.addEventListener('controllerchange', () => {\n    console.warn('cache worker replaced.')\n    if (!needReload) return;\n    needReload = false;\n    window.location.reload();  // Reload when we detect our service worker has changed.\n});\n","module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/src/game/data/board-packer.worker.ts\")());module.exports.__esModule = true;"],"sourceRoot":""}