{"version":3,"sources":["game/net/messageEncoder.worker.ts","resources/sheet-composite.enc.png","game/util/unscramble.js","webpack:///./src/game/net/messageEncoder.worker.ts?773d","webpack:///./src/game/data/board-packer.worker.ts?e9c0","game/util/sprite-loading.ts","game/net/packets/packet-list.ts","ui-components/notifications.ts","game/net/handlers/handler.ts","game/data/protobufs/proto-wrapper.ts","game/data/protobufs/proto-sprite.ts","game/data/protobufs/proto-entity.ts","game/data/protobufs/proto-tiles.ts","game/net/packets/terrainPackets.ts","game/net/packets/entityPackets.ts","game/net/packets/util-packets.ts","game/net/packets/media-packets.ts","game/net/packets/measure-packets.ts","game/net/messageEncoder.ts","game/util/promiseStream.ts","game/db/database.ts","game/db/metadata-db.ts","game/net/peerconnection.ts","game/data/interfaces/tile.ts","game/net/handlers/terrain-add-handler.ts","game/net/handlers/terrain-erase-handler.ts","game/renderer/ui-data/globals.ts","game/renderer/ui-data/ui-util.ts","game/renderer/ui-data/ui-event-stream.ts","game/renderer/ui-data/image-loader.ts","game/renderer/ui-components/ui-terrain.ts","game/controllers/terrain.ts","game/net/handlers/entity-update-handler.ts","game/renderer/ui-components/ui-name-plate.ts","game/renderer/ui-components/ui-entity.ts","game/controllers/entities.ts","game/net/prechecks/precheck.ts","game/db/user-db.ts","game/net/prechecks/signature-check.ts","game/net/prechecks/board-sync-check.ts","game/controllers/lobby.tsx","game/net/handlers/ping-handler.ts","game/db/board-db.ts","game/controllers/campaign.ts","game/util/deproxy.ts","game/db/campaign-db.ts","game/data/campaign-loader.ts","game/net/handlers/board-reload-handler.ts","ui-components/prompts.tsx","ui-components/youtubePlayer.tsx","game/net/handlers/media-sync-handler.ts","game/net/prechecks/media-sync.ts","game/renderer/ui-components/ui-grid.ts","game/renderer/ui-components/ui-tooltip.ts","game/renderer/index.ts","game/renderer/ui-components/ui-shape.ts","game/renderer/ui-components/ui-marker.ts","game/net/handlers/measure-handler.ts","game/controllers/game.ts","ui-tools/ui-tool.tsx","game/middleware/middleware.ts","game/middleware/pen-events.ts","ui-components/spritepicker.tsx","game/consts.ts","ui-tools/ui-pen-tool.tsx","game/middleware/entity-events.ts","ui-tools/ui-camera-tool.tsx","ui-tools/ui-eraser-tool.tsx","ui-tools/ui-entity-tool.tsx","ui-tools/ui-lobby-tool.tsx","game/middleware/measure-events.ts","ui-tools/ui-measure-tool.tsx","ui-components/controlMenu.tsx","ui-components/loginHelper.tsx","ui-components/connectionOverlay.tsx","game/util/google-api.ts","ui-components/campaignSelector.tsx","game/data/local-storage.ts","ui-components/boardSelector.tsx","ui-components/boardSaveButton.tsx","ui-components/preferencesMenu.tsx","App.tsx","serviceWorker.ts","index.tsx","game/data/board-packer.worker.ts"],"names":["module","exports","wrap","__esModule","shuffleSeed","require","img","sliceSize","seed","bmp","i","ctx","totalParts","Math","ceil","width","height","inds","push","canvas","document","createElement","getContext","verticalSlices","getGroup","slices","self","length","cols","t","y","getColsInGroup","rows","x","slice","row","parseInt","col","getSlices","g","group","shuffleInd","shuffle","s","drawImage","Worker","fpsTicker","rawData","unscramble","data","sheet","spriteWidth","metadata","spriteHeight","globalFrameIndex","waitForSpriteLoad","Promise","res","Image","onerror","err","console","error","alert","onload","process","src","sheetSRC","clearInterval","setInterval","findSpriteData","key","id","startsWith","animated","images","name","ret","sprites","Error","composite","snackbarRef","Sprite","idx","this","frame","drawImageTo","mkKey","blocker","imgs","uid","source","map","atlas","px","py","w","h","Handler","packets","isHost","client","packet","hostHandler","clientHandler","SnackbarUtilsConfigurator","useSnackbar","success","msg","options","toast","variant","warning","info","enqueueSnackbar","close","closeSnackbar","ProtoWrapper","values","Object","assign","Message","ProtoSprite","Type","d","Field","ProtoEntity","ProtoTile","ProtoTileStack","ProtoBoard","TerrainAddPacket","TerrainCoordPacket","TerrainErasePacket","EntityUpdatePacket","EntityDeletePacket","PingPacket","SignaturePacket","ReadyPacket","MediaStatusPacket","MediaRequestPacket","MeasurePacket","packetList","packetMap","$type","encode","a","constructor","worker","decode","clazz","PromiseStream","maxBackpressure","prom","resolve","backPressure","fn","onError","then","catch","db","boards","campaigns","users","version","stores","table","cb","debug","delete","importDB","log","window","location","href","split","exportDB","prettyJson","progressCallback","progress","Dexie","copyOldDB","newDB","dbName","tableName","newTable","exists","open","tables","tbl","toArray","ele","add","on","count","Meta","currentUsername","observable","box","JSON","where","first","val","parse","value","put","stringify","NetworkStatus","NetworkMode","get","store","handlers","preConn","clients","Set","sb","netStatus","IDLE","netMode","UNKNOWN","setHandlers","newHandlers","newPreConn","getSeed","CERT_SEED","Switchboard","makeSeed","getMyID","useLongform","fullID","peerID","getIdFromSeed","makeSB","kill","uri","isNativeServer","defaultTrackers","trackers","connectTo","hostID","setMode","CLIENT","RECONNECTING","set","CONNECTING","peer","notifications","Client","clientError","WAITING_FOR_HOST","pc","run","verified","CONNECTED","DISCONNECTED","findHost","warn","removeClient","openHost","HOST","cli","userData","username","preventDuplicate","host","forEach","p","undefined","mode","listener","lastSend","stream","keyCodes","lastSeen","pingTimer","lastPing","hook","isClosed","Date","now","send","queue","handleMessage","packetBinary","encoder","Uint8Array","some","handlePacket","e","clearTimeout","sendBuffer","expectedType","rej","broadcast","requireHost","skip","c","Tile","sprite","z","TerrainAddHandler","terrain","tileStacks","stack","tiles","removeAt","dt","sp","spriteIdx","placeAt","setTimeout","broadcastChanges","pollChanges","packedStacks","updateTiles","splice","packer","TerrainEraseHandler","coords","size","tep","Array","from","clear","OVERLAY_DEPTHS","CULLER","Cull","TERRAIN_LAYER","Container","ENTITY_LAYER","OVERLAY_LAYER","forceNextCull","setForceCull","dirty","debugCullStats","stats","collides","r1","r2","combinedHalfWidths","combinedHalfHeights","vx","vy","centerX","centerY","halfWidth","halfHeight","abs","EVENT_STREAM","events","history","permanentHandlers","event","callback","useHistory","hasOwnProperty","unsub","listeners","l","handler","keys","k","ev","lx","ly","updateHover","tx","max","min","GRID_DIMENSIONS","floor","getLocalPosition","ty","emit","hitArea","PIXI","interactive","position","debugEvents","evName","cache","gifCache","makeTexture","texture","loader","Loader","can","imageSmoothingEnabled","Texture","resource","toLowerCase","onComplete","resources","load","message","makeFailTexture","destroy","releaseGif","gifURI","loaded","releaseTexture","r","txt","removeFromCache","makeFailImage","fillStyle","fillRect","strokeStyle","lineWidth","moveTo","lineTo","stroke","resizeCanvas","input","can2","ctx2","globalAlpha","loadFramesFromGif","realURL","replace","frames","fetch","resp","arrayBuffer","buff","parseGIF","gif","decompressFrames","iDat","dims","createImageData","disposalType","clearRect","patch","putImageData","delay","crossOrigin","cached","debugImageCache","sortableChildren","sortTimers","getAt","all","sort","t1","t2","tz","zIndex","scheduleSort","sortAt","UiTile","texID","txtID","removeChild","children","addTerrain","texKey","tile","addChild","erase","debugTerrainList","Terrain","tileIDX","TERRAIN","sendTerrainRemove","isBoardDirty","selectedSprite","existing","isBlocker","filter","textureData","sendTerrainAdd","newTerrain","b","EntityUpdateHandler","entities","ent","updateEntity","addEntity","entityID","remove","entityIsOwned","sendUpdate","getEntity","entity","canMove","visible","proto","owners","defaultStyle","fontFamily","fontSize","fill","plates","shiftPlates","p1","p2","dy","plate","dx","util","moveBkg","UiNamePlate","text","TextStyle","added","bkg","Graphics","resolution","NAMEPLATE","roundPixels","color","style","calculateBounds","round","beginFill","drawRect","endFill","baseTexture","Text","UiEntity","WHITE","autoFlip","textureIDs","destroyed","currentGif","animationSpeed","setAnimationSpeed","tileX","tileY","play","scale","anchor","place","GRID_TILE_PX","stop","setColor","hidden","alpha","setName","show","setVisible","textures","newIDs","newGifUri","loadedGif","tid","find","_durations","gotoAndPlay","multiplier","AnimatedSprite","createEntity","setTextures","releaseEntity","debugEntityList","Entity","init","uuid","includes","EntityLayer","ENTITIES","isDirty","sendDelete","selected","opts","setHidden","setShowName","showNames","entEle","checkOwner","props","oldSprite","getEntityList","PreCheck","controller","runHandler","bind","addNewUser","user","getTime","updateUser","update","getUser","checkUserCredentials","userName","keyCode","match","HandShakeCheck","USERNAME","getNextPacket","lobby","addPendingLogin","BoardSync","buildProtoBoard","Lobby","blacklist","title","body","iconURL","Notification","requestPermission","result","icon","approve","reject","pendingLogins","pe","pending","removePending","has","tID","action","Button","onClick","approveUser","notify","findIndex","u","PingHandler","handlePing","save","campaignID","board","navigator","storage","persist","getAvailable","between","minKey","maxKey","deleteBoard","Campaign","shallow","timeCreated","stripProxy","obj","entries","v","saveCampaign","camp","createCampaign","getAllCampaigns","getCampaign","mapToClass","CampaignLoader","campaign","boardDB","loadedBoard","characters","BoardReloadHandler","loadFromProtoBoard","InputDialog","React","useState","setText","handleClose","onCancel","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","tooltip","type","fullWidth","onChange","target","DialogActions","onSubmit","acceptText","ConfirmPrompt","aria-describedby","className","prompt","cancelButton","onConfirm","confirmButton","PLAYER_OPTS","playerVars","autoplay","mute","config","object","volume","loop","saveConf","YT_PLAYER_CONFIG","player","getPlayerStatus","currentVideo","getVideoData","video_id","currentTime","getCurrentTime","playbackRate","getPlaybackRate","paused","getPlayerState","YouTube","PlayerState","PAUSED","YoutubePlayerInterface","observer","useMemo","tools","ShuffleButton","pointerEvents","Tooltip","Fab","YoutubePlayer","mediaPlayer","setPlayer","useEffect","timer","getVolume","PLAYING","onReady","onPlay","stat","onPause","nextVideo","onStateChange","CUED","setLoop","setShuffle","setVolume","getPlaylist","playVideoAt","playVideo","LoadPlaylistButton","needPrompt","URLSearchParams","cuePlaylist","list","listType","index","startSeconds","LoadVideoButton","parser","substring","lastIndexOf","indexOf","time","cueVideoById","IconButton","MediaSyncHandler","pauseVideo","setPlaybackRate","videoId","status","MediaSync","SCALE_MODE","NEAREST","grid","render","dim","pow","findPow","makeGridTexture","showGrid","debugGridToggle","cx","cy","setTilePos","setSize","draw","lineStyle","TOOLTIP","zoomEnabled","app","resizeTo","backgroundColor","view","classList","appendChild","addEventListener","preventDefault","SHAPE_TYPES","viewport","Viewport","screenWidth","offsetWidth","screenHeight","offsetHeight","worldWidth","worldHeight","fireMouseEvent","bounds","getBoundingClientRect","clientX","left","clientY","top","screenWidthInWorldPixels","screenHeightInWorldPixels","toggleViewportInput","enabled","pause","getCenterViewportTile","updateInPage","center","resize","moveCenter","WORLD_SIZE_PX","stage","drag","bounce","wheel","smooth","decelerate","friction","clamp","direction","clampZoom","minScale","maxScale","GRID","addContainer","cull","getVisibleBounds","shared","button","UiShape","gr","_type","_thickness","_color","_fill","_alpha","_width","_height","SHAPES","redraw","widthTiles","heightTiles","thickness","circle","drawCircle","pivot","rectangle","cone","drawPolygon","setPos","nx","ny","xd","yd","radians","rotation","border","fillAlpha","snap","snapRads","slideCone","rad","atan2","setRotation","tw","th","UiMarker","textOpts","background","bgAlpha","MARKER_BKG","MARKER_TXT","updatePosition","MeasureHandler","handleShape","pkt","exist","userShapes","marker","shape","angle","setPosPx","setFillColor","displayMeasures","sendMeasure","getGraphicDetails","getType","dimensions","m","GameController","preChecks","RENDER","hash","startHost","startClient","ready","pushState","connection","pu","rejectUser","setHost","connectID","pb","setDirectMap","includeHidden","getDirectMap","flat","UITool","Middleware","hooks","setActive","onCleanup","register","isShiftDown","ke","code","active","onShiftPress","onShiftRelease","PEN_STATE","middle","PenMiddleware","canUsePen","state","NONE","penSize","DRAW","ERASE","wheelCB","contains","shiftKey","out","sign","deltaY","setPenSize","removeEventListener","eraseAt","drawAt","op","xx","yy","SpritePicker","defaultTerm","searchTerm","setSearch","setAnimated","setSprites","timeout","getFavorites","forEntity","fe","results","term","nameOnly","favorites","seen","search","o","path","f","comparatorId","inc","limit","searchImages","maxWidth","noValidate","autoComplete","FormGroup","Autocomplete","selectOnFocus","freeSolo","inputValue","onInputChange","newInputValue","onSearch","renderInput","params","FormControlLabel","control","Switch","checked","disabled","canAnimate","inputProps","labelPlacement","SpriteGrid","onSelect","perRow","rowCount","columnCount","columnWidth","rowHeight","maxHeight","spr","columnIndex","rowIndex","SpriteImage","canv","useRef","sel","isGif","current","drawTo","cancel","FavoriteSpriteButton","minWidth","minHeight","alt","ref","isFavorite","setIsFavorite","isHovered","setIsHovered","getIsFavorite","fav","cursor","onMouseEnter","onMouseLeave","setFavorite","cachedFavorites","isForEntity","tag","FAVORITE_SPRITES","favorite","useStyles","makeStyles","theme","createStyles","paper","palette","boxShadow","shadows","padding","spacing","transform","SpritePickerModal","classes","gifUrl","setGifUrl","Modal","currentSprite","marginTop","trim","URL","hostname","pathname","UIPenTool","middleware","forMobile","PenControlInterface","pen","attach","eject","PenSizeSlider","Typography","gutterBottom","Slider","getAriaValueText","valueLabelDisplay","step","marks","newValue","EntityMiddleware","movePoints","moveTrackers","trg","addPoint","clearMovers","mp","last","pathLength","checkDiag","third","distance","reduce","prev","next","dst","sqrt","UICameraTool","UIEraserTool","EraserSizeSlider","UIEntityTool","EntityEditorInterface","root","flexGrow","speedDial","bottom","right","spriteColor","marginLeft","marginRight","promptSprite","setSpritePrompt","setSprite","entName","loadExisting","setLoadExisting","resetValues","EntityEditInterface","evt","Checkbox","justifyContent","CampaignCharacterSelector","promptClone","setClonePrompt","updateCampaign","updateInstant","clientNames","cl","userList","saveToCampaign","InputLabel","Select","multiple","Input","renderValue","join","marginBottom","MenuItem","ListItemText","primary","select","setEntitySprite","PromptForNumber","num","cloneEntity","setSelected","getSelected","cha","setNum","ext","campUpdateTimer","savedIdx","newData","UILobbyTool","LobbyInterface","rel","PendingList","UserList","eles","pl","MenuList","PendingUserEle","disableTouchRipple","stopPropagation","network","dat","MeasureMiddleware","measure","counter","dot","moving","setShape","shapeType","sentUpdate","pxd","td","pointTowards","sizePx","UIMeasuretool","MeasureUI","Radio","RadioGroup","aria-label","ControlMenu","ui","setOpen","modalOpen","setModalOpen","setTools","selectedTool","handleModalClose","handleSelect","unregister","hotkeys","tool","isOption","unbind","newTools","emb","getControlUI","Avatar","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","tooltipOpen","LoginHelper","promptLogin","setPrompt","needClient","setNeedClient","PromptNetwork","hosting","ConnectionOverlay","content","MATCHMAKING_FAIL","Backdrop","transitionDuration","component","api","injected","apiReady","apiFailed","waitForLoad","fail","script","gapi","clientId","discoveryDocs","scope","auth2","getAuthInstance","isSignedIn","listen","localStorage","signIn","signOut","mimeType","currentUser","oauthToken","getAuthResponse","access_token","getLatestBackup","latest","latestID","parents","method","headers","Authorization","loc","drive","files","pageSize","fields","spaces","response","listFiles","modifiedTime","blob","lastUpdate","driveUpdateTime","downloadLatestBackup","importData","toBlob","upload","inject","google","CampaignSelector","need","setNeed","wantOpen","setWantOpen","promptNew","setPromptNew","campaignList","setList","q","setStorage","selectCampaign","CAMPAIGN_CURRENT","loadBoard","loadCampaign","estimate","usage","quota","addCampaign","textAlign","CampaignMenu","startIcon","toFixed","bytes","decimals","dm","sizes","parseFloat","formatBytes","exportLocalDB","display","restoreLocalDB","accept","getElementById","click","promptSignIn","anchorEl","setAnchorEl","camps","c1","c2","toLocaleString","htmlFor","currentTarget","overflowX","Menu","keepMounted","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","download","file","STORAGE","BoardSelector","noWrap","Popover","BoardControlMenu","BoardSelectMenu","overflow","BoardLoadButton","BoardDeleteButton","confirm","needConfirm","BoardCreateButton","handleCreate","BoardSaveButton","shouldSave","saving","setSaving","dbUpdate","setUpdate","saveBoard","uploadLocalDB","autoHideDuration","onSignInChange","loggedIn","getLatestUpgrade","CircularProgress","downloadDB","def","getItem","setItem","PreferencesButton","LS","SHOW_GRID","showMeasures","SHOW_MEASURES","setDisplayNamePlates","SHOW_NAMES","toString","whiteSpace","textDecoration","GridSwitch","useGrid","setGrid","NameSwitch","useName","setNames","MeasureSwitch","useMeasure","ZoomSlider","setScale","updateScale","setZoom","NameChange","showPrompt","setShowPrompt","reload","noop","oldConsole","debugRestoreLog","App","desktop","useMediaQuery","needName","setNeedName","start","isNetworkReady","maxSnack","flexDirection","isLocalhost","registerValidSW","swUrl","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","ReactDOM","needReload","origin","contentType","checkValidServiceWorker","waiting","postMessage"],"mappings":"mFAAAA,EAAOC,QAAU,EAAQ,KAAWC,KAAK,EAAQ,IAAR,IAA2XF,EAAOC,QAAQE,YAAa,G,oBCAhcH,EAAOC,QAAU,IAA0B,iD,wyxVCG3C,IAAIG,EAAcC,EAAQ,KAyF1BL,EAAOC,QAvFI,SAASK,EAAIC,EAAUC,EAAKC,GACtC,IAAIC,EAGAC,EAFAC,EAAaC,KAAKC,KAAKR,EAAIS,MAAMR,GAAWM,KAAKC,KAAKR,EAAIU,OAAOT,GACjEU,EAAO,GAEX,IAAIP,EAAE,EAAEA,EAAEE,EAAWF,IAAKO,EAAKC,KAAKR,GACpC,IAAID,EAAI,CACP,IAAIU,EAAOC,SAASC,cAAc,UAClCV,EAAIQ,EAAOG,WAAW,MACtBH,EAAOJ,MAAMT,EAAIS,MACjBI,EAAOH,OAAOV,EAAIU,OAInB,IAAIO,EAAeV,KAAKC,KAAKR,EAAIS,MAAMR,GA+BnCiB,EAAW,SAASC,GACvB,IAAIC,EAAO,GAQX,OAPAA,EAAKD,OAASA,EAAOE,OACrBD,EAAKE,KAfe,SAASH,GAC7B,GAAmB,IAAhBA,EAAOE,OAAY,OAAO,EAE7B,IADA,IAAIE,EAAI,OACAnB,EAAE,EAAEA,EAAEe,EAAOE,OAAOjB,IAE3B,GADO,SAAJmB,IAAYA,EAAIJ,EAAOf,GAAGoB,GAC1BD,IAAIJ,EAAOf,GAAGoB,EAChB,OAAOpB,EAGT,OAAOA,EAMKqB,CAAeN,GAC3BC,EAAKM,KAAOP,EAAOE,OAAOD,EAAKE,KAC/BF,EAAKX,MAAQU,EAAO,GAAGV,MAAMW,EAAKE,KAClCF,EAAKV,OAASS,EAAO,GAAGT,OAAOU,EAAKM,KACpCN,EAAKO,EAAIR,EAAO,GAAGQ,EACnBP,EAAKI,EAAIL,EAAO,GAAGK,EACZJ,GAGJD,EAzCY,WACf,IACIf,EADAe,EAAS,GAEb,IAAIf,EAAE,EAAEA,EAAEE,EAAWF,IAAI,CACxB,IAAIwB,EAAQ,GACRC,EAAIC,SAAS1B,EAAEa,GACfc,EAAI3B,EAAEyB,EAAIZ,EACdW,EAAMD,EAAEI,EAAI9B,EACZ2B,EAAMJ,EAAEK,EAAI5B,EACZ2B,EAAMnB,MAAOR,GAAW2B,EAAMD,EAAE1B,GAAWD,EAAIS,MAAS,EAAKmB,EAAMD,EAAE1B,EAAWD,EAAIS,OACpFmB,EAAMlB,OAAQT,GAAW2B,EAAMJ,EAAEvB,GAAWD,EAAIU,OAAU,EAAKkB,EAAMJ,EAAEvB,EAAWD,EAAIU,QAClFS,EAAOS,EAAMnB,MAAM,IAAImB,EAAMlB,UAASS,EAAOS,EAAMnB,MAAM,IAAImB,EAAMlB,QAAQ,IAC/ES,EAAOS,EAAMnB,MAAM,IAAImB,EAAMlB,QAAQE,KAAKgB,GAE3C,OAAOT,EA2BKa,GACb,IAAI,IAAIC,KAAKd,EAAO,CACnB,IAAIe,EAAQhB,EAASC,EAAOc,IACxBE,EAAa,GACjB,IAAI/B,EAAE,EAAEA,EAAEe,EAAOc,GAAGZ,OAAOjB,IAAK+B,EAAWvB,KAAKR,GAEhD,IADA+B,EAAarC,EAAYsC,QAAQD,EAAWjC,GACxCE,EAAE,EAAEA,EAAEe,EAAOc,GAAGZ,OAAOjB,IAAI,CAC9B,IAAIiC,EAAEF,EAAW/B,GAEbyB,EAAIC,SAASO,EAAEH,EAAMZ,MAErBK,GADIU,EAAER,EAAIK,EAAMZ,MACVH,EAAOc,GAAG7B,GAAGK,MACnBe,EAAEK,EAAIV,EAAOc,GAAG7B,GAAGM,OAEvBL,EAAIiC,UACHtC,EACAkC,EAAMP,EAAEA,EACRO,EAAMV,EAAEA,EACRL,EAAOc,GAAG7B,GAAGK,MACbU,EAAOc,GAAG7B,GAAGM,OACbS,EAAOc,GAAG7B,GAAGuB,EACbR,EAAOc,GAAG7B,GAAGoB,EACbL,EAAOc,GAAG7B,GAAGK,MACbU,EAAOc,GAAG7B,GAAGM,SAIhB,OAAOG,I,wCCzFRnB,EAAOC,QAAU,WACf,OAAO,IAAI4C,OAAO,IAA0B,oC,oBCD9C7C,EAAOC,QAAU,WACf,OAAO,IAAI4C,OAAO,IAA0B,oC,+FCgC1CC,E,gJA9BEC,EAAU1C,EAAQ,KAClB2C,EAAa3C,EAAQ,KAwBrB4C,EAAkBF,EACpBG,EAA2B9B,SAASC,cAAc,UAClD8B,EAAsBF,EAAKG,SAASrC,MACpCsC,EAAuBJ,EAAKG,SAASpC,OACrCsC,EAA2B,EAGlBC,EAAgD,IAAIC,SAAQ,SAAAC,GACxE,IAAMnD,EAAM,IAAIoD,MAChBpD,EAAIqD,QAAU,SAACC,GACdC,QAAQC,MAAMF,GACdG,MAAM,0EAEPzD,EAAI0D,OAAS,WACZd,EAAQF,EAAW1C,EAAK,GAAI2D,qBAC5BR,EAAIP,IAEL5C,EAAI4D,IAAMC,IAEVC,cAActB,GACdA,EAAYuB,aAAY,WACvBf,GAAoBA,EAAiB,GAAK,MACxC,QAOJ,SAASgB,EAAeC,GACvB,GAAIA,EAAIC,GAAGC,WAAW,QACrB,MAAO,CACNC,UAAW,EACXC,OAAQ,GACRC,KAAM,cAGR,IAAMC,EAAM5B,EAAK6B,QAAQP,EAAIC,IAC7B,IAAKK,EAAK,MAAME,MAAM,oCAAD,OAAqCR,EAAIS,YAC9D,OAAOH,ECvCR,IDgHO,IEzIHI,E,uWFyISC,GAAb,WAIC,WAAYV,EAAYW,GAAc,yBAHtBX,QAGqB,OAFrBW,SAEqB,EACpCC,KAAKZ,GAAKA,EACVY,KAAKD,IAAMA,EANb,kDA2BeE,GACb,MAAM,GAAN,OAAUD,KAAKZ,GAAf,YAAqBa,KA5BvB,6BA+Be1E,EAA+BsB,EAAWH,IA9FzD,SAAqBnB,EAA+B4D,EAAatC,EAAWH,GAC3E,IAAMgD,EAAUR,EAAeC,GACzBjE,EAAMiE,EAAIY,IAAM,EAAIL,EAAQH,OAAOrB,EAAmBwB,EAAQH,OAAOhD,QAAUmD,EAAQH,OAAOJ,EAAIY,KAExGxE,EAAIiC,UAAUM,EAAO5C,EAAI2B,EAAG3B,EAAIwB,EAAGqB,EAAaE,EAAcpB,EAAGH,EAAGqB,EAAaE,GA2FhFiC,CAAY3E,EAAKyE,KAAMnD,EAAGH,KAhC5B,gCAUE,OAAOsD,KAAKG,MAAMH,KAAKD,OAVzB,+BAcE,OAAOC,KAAKD,IAAM,IAdpB,gCAkBE,QAAIC,KAAKD,IAAM,IACRb,EAAec,MAAMT,OAAOS,KAAKD,KAAKK,UAnB/C,2BAuBE,OAAOlB,EAAec,MAAMR,OAvB9B,kCAsCkC,IAAD,OACzBE,EAAUR,EAAec,MACzBK,EAAOL,KAAKD,IAAM,EAAIL,EAAQH,OAAS,CAACG,EAAQH,OAAOS,KAAKD,MAElE,OAAIC,KAAKZ,GAAGC,WAAW,QACf,CAAC,CACPiB,IAAKN,KAAKZ,GACVmB,OAAQpC,IAIHkC,EAAKG,KAAI,SAACtF,EAAK6E,GACrB,MAAO,CACNO,IAAK,EAAKH,MAAM,EAAKJ,IAAM,EAAIA,EAAM,EAAKA,KAC1CU,MAAOtC,EACPuC,GAAIxF,EAAI2B,EACR8D,GAAIzF,EAAIwB,EACRkE,EAAG7C,EACH8C,EAAG5C,UAxDP,K,oCGzI8B6C,G,iDAEDC,a,OACjBC,QAAkB,E,oDAElBA,GACJhB,KAAKgB,OAASA,I,4EAGCC,EAAgBC,G,0FACxBlB,KAAKgB,OAAShB,KAAKmB,YAAYF,EAAQC,GAAUlB,KAAKoB,cAAcH,EAAQC,I,mIDP9EG,GAAsC,WAE/C,OADAxB,EAAcyB,eACP,MAGI,IACXC,QADW,SACHC,GAA2C,IAA9BC,EAA6B,uDAAJ,GAC1C,OAAOzB,KAAK0B,MAAMF,EAAX,2BAAqBC,GAArB,IAA8BE,QAAS,cAElDC,QAJW,SAIHJ,GAA2C,IAA9BC,EAA6B,uDAAJ,GAC1C,OAAOzB,KAAK0B,MAAMF,EAAX,2BAAqBC,GAArB,IAA8BE,QAAS,cAElDE,KAPW,SAONL,GAA2C,IAA9BC,EAA6B,uDAAJ,GACvC,OAAOzB,KAAK0B,MAAMF,EAAX,2BAAqBC,GAArB,IAA8BE,QAAS,WAElDjD,MAVW,SAUL8C,GAA2C,IAA9BC,EAA6B,uDAAJ,GACxC,OAAOzB,KAAK0B,MAAMF,EAAX,2BAAqBC,GAArB,IAA8BE,QAAS,YAElDD,MAbW,SAaLF,GAA2C,IAA9BC,EAA6B,uDAAJ,GACxC,OAAO5B,EAAYiC,gBAAgBN,EAAKC,IAE5CM,MAhBW,SAgBL5C,GACF,OAAOU,EAAYmC,cAAc7C,K,4BEvBpB8C,G,uKAIVC,GACH,OAAOC,OAAOC,OAAOpC,KAAMkC,O,GALkCG,YCDxDC,IAAb,EADCC,QAAKC,EAAE,eACR,EACKC,SAAMD,EAAE,EAAG,SAAU,WAAY,IADtC,EAIKC,SAAMD,EAAE,EAAG,QAAS,WAAY,GAJrC,2SAAiCP,IAAjC,2GAEwB,MAFxB,6GAKyB,KALzB,UCCaS,IAAb,EADCH,QAAKC,EAAE,eACR,EACKC,SAAMD,EAAE,EAAGF,GAAa,YAD7B,EAIKG,SAAMD,EAAE,EAAG,QAAS,YAJzB,EAOKC,SAAMD,EAAE,EAAG,QAAS,YAPzB,EAUKC,SAAMD,EAAE,EAAG,OAAQ,YAVxB,EAaKC,SAAMD,EAAE,EAAG,SAAU,YAb1B,EAgBKC,SAAMD,EAAE,EAAG,SAAU,YAhB1B,EAmBKC,SAAMD,EAAE,EAAG,SAAU,YAnB1B,EAsBKC,SAAMD,EAAE,EAAG,OAAQ,YAtBxB,EAyBKC,SAAMD,EAAE,EAAG,SAAU,YAzB1B,mlBAAiCP,IAAjC,gHAEiC,IAAIK,MAFrC,2GAKuB,KALvB,2GAQuB,KARvB,iHAW8B,KAX9B,8GAc2B,MAd3B,2GAiBwB,MAjBxB,gHAoB8B,MApB9B,yHAuBqC,KAvBrC,8GA0B0B,MA1B1B,UCEaK,IAAb,GADCJ,QAAKC,EAAE,aACR,GACKC,SAAMD,EAAE,EAAG,QAAS,WAAY,GADrC,GAIKC,SAAMD,EAAE,EAAG,QAAS,WAAY,GAJrC,GAOKC,SAAMD,EAAE,EAAG,QAAS,WAAY,GAPrC,GAUKC,SAAMD,EAAE,EAAG,QAAS,WAAY,GAVrC,gYAA+BP,IAA/B,8GAEuB,KAFvB,8GAKuB,KALvB,8GAQuB,KARvB,sHAW+B,KAX/B,aAeaW,IAAb,GADCL,QAAKC,EAAE,kBACR,GACKC,SAAMD,EAAE,EAAGG,GAAW,YAD3B,GAIKF,SAAMD,EAAE,EAAGF,GAAa,YAJ7B,sTAAoCL,IAApC,iHAEgC,MAFhC,mHAKoC,MALpC,aAUaY,IAAb,GADCN,QAAKC,EAAE,cACR,GACKC,SAAMD,EAAE,EAAGI,GAAgB,YADhC,GAGKH,SAAMD,EAAE,EAAGE,GAAa,YAH7B,yTAAgCT,IAAhC,oHAE0C,QAF1C,oHAIqC,MAJrC,aC3Baa,IAAb,GADCP,QAAKC,EAAE,oBACR,GACKC,SAAMD,EAAE,EAAGI,GAAgB,YADhC,+QAAsCX,IAAtC,sHAE0C,MAF1C,aAMac,IAAb,GADCR,QAAKC,EAAE,sBACR,GACKC,SAAMD,EAAE,EAAG,QAAS,YADzB,GAGKC,SAAMD,EAAE,EAAG,QAAS,YAHzB,4SAAwCP,IAAxC,8GAEuB,KAFvB,8GAIuB,KAJvB,aAQae,IAAb,GADCT,QAAKC,EAAE,sBACR,GACKC,SAAMD,EAAE,EAAGO,GAAoB,YADpC,2QAAwCd,IAAxC,kHAE0C,MAF1C,aCbagB,IAAb,GADCV,QAAKC,EAAE,sBACR,GACKC,SAAMD,EAAE,EAAGE,GAAa,YAD7B,6QAAwCT,IAAxC,oHAEqC,MAFrC,aAOaiB,IAAb,GADCX,QAAKC,EAAE,sBACR,GACKC,SAAMD,EAAE,EAAG,SAAU,YAD1B,6QAAwCP,IAAxC,oHAE8B,MAF9B,aCTakB,GADZZ,QAAKC,EAAE,aACR,kIAAgCP,MAAhC,GAGamB,IAAb,GADCb,QAAKC,EAAE,mBACR,GACKC,SAAMD,EAAE,EAAG,SAAU,WAAY,OADtC,6QAAqCP,IAArC,oHAE8B,MAF9B,aAMaoB,GADZd,QAAKC,EAAE,cACR,kIAAiCP,MAAjC,GCTaqB,IAAb,GADCf,QAAKC,EAAE,qBACR,GACKC,SAAMD,EAAE,EAAG,SAAU,YAD1B,GAGKC,SAAMD,EAAE,EAAG,SAAU,YAH1B,GAKKC,SAAMD,EAAE,EAAG,OAAQ,YALxB,GAOKC,SAAMD,EAAE,EAAG,SAAU,YAP1B,6ZAAuCP,IAAvC,wHAEkC,MAFlC,yHAIkC,KAJlC,mHAM6B,KAN7B,wHAQiC,KARjC,aAaasB,GADZhB,QAAKC,EAAE,qBACR,kIAAwCP,MAAxC,GCZauB,IAAb,GADCjB,QAAKC,EAAE,iBACR,GACKC,SAAMD,EAAE,EAAG,QAAS,YADzB,GAGKC,SAAMD,EAAE,EAAG,QAAS,YAHzB,GAKKC,SAAMD,EAAE,EAAG,QAAS,YALzB,GAOKC,SAAMD,EAAE,EAAG,QAAS,YAPzB,GASKC,SAAMD,EAAE,EAAG,QAAS,YATzB,GAWKC,SAAMD,EAAE,EAAG,QAAS,YAXzB,GAaKC,SAAMD,EAAE,EAAG,OAAQ,YAbxB,GAeKC,SAAMD,EAAE,EAAG,SAAU,YAf1B,GAiBKC,SAAMD,EAAE,EAAG,QAAS,YAjBzB,GAmBKC,SAAMD,EAAE,GAAI,QAAS,YAnB1B,GAqBKC,SAAMD,EAAE,GAAI,QAAS,YArB1B,GAuBKC,SAAMD,EAAE,GAAI,QAAS,YAvB1B,GAyBKC,SAAMD,EAAE,GAAI,QAAS,YAzB1B,ovBAAmCP,IAAnC,+GAEwB,KAFxB,+GAIwB,KAJxB,+GAMwB,KANxB,+GAQwB,KARxB,kHAU2B,KAV3B,kHAY2B,KAZ3B,oHAc8B,KAd9B,gHAgB0B,MAhB1B,sHAkB+B,KAlB/B,iHAoB0B,KApB1B,kHAsB2B,KAtB3B,+GAwBwB,KAxBxB,+GA0BwB,KA1BxB,aXMawB,GAAoC,CAC7CL,GACAC,GACAL,GACAF,GACAD,GACAD,GACAK,GACAC,GACAC,GACAG,GACAC,GACAC,IAGSE,GAAoC,GAExCpI,GAAE,EAAGA,GAAEmI,GAAWlH,OAAQjB,KAC/BoI,GAAUD,GAAWnI,IAAGqI,MAAMnE,MAAQlE,GYtBnC,SAAesI,GAAtB,mC,8CAAO,WAAsB1C,GAAtB,eAAA2C,EAAA,yDACGzE,EAAKsE,GAAUxC,EAAOyC,MAAMnE,MACpBiE,GAAWrE,GAFtB,sBAIeO,MAAM,yCAAD,OAA0CuB,EAAO4C,YAAYtE,KAA7D,OAJpB,uBAMUuE,gBAAoB7C,EAAQ9B,GANtC,oF,sBAaA,SAAe4E,GAAtB,mC,8CAAO,WAAsBnG,GAAtB,iBAAAgG,EAAA,yDACGzE,EAAKvB,EAAKf,MAAM,EAAE,GAAG,GACrBmH,EAAQR,GAAWrE,GAFtB,sBAIeO,MAAM,uCAAD,OAAwCP,EAAxC,eAAiDvB,EAAKtB,OAAtD,OAJpB,mBAMI,IAAI0H,EANR,SAM6BF,gBAAoBlG,GANjD,iDAMgBuE,OANhB,6D,0BCjBc8B,G,WAKjB,aAA0C,IAA9BC,EAA6B,uDAAH,EAAG,yBAJjCC,KAAqBhG,QAAQiG,UAII,KAHxBF,qBAGwB,OAFjCG,aAAuB,EAG3BtE,KAAKmE,gBAAkBA,E,kDAOdI,GAA8C,IAAD,OAA/BC,EAA+B,uDAAN,KAChD,GAAIxE,KAAKmE,iBAAmBnE,KAAKsE,cAAgBtE,KAAKmE,gBAClD,MAAMxE,MAAM,6BAEhBK,KAAKsE,eAELtE,KAAKoE,KAAOpE,KAAKoE,KAAKK,KAAV,sBAAgB,sBAAAZ,EAAA,sEAClBU,IADkB,4CAEzBG,MAFS,uCAEF,WAAMlG,GAAN,SAAAqF,EAAA,0DACFW,EADE,gCAEIA,EAAQhG,GAFZ,6BAIFC,QAAQC,MAAMF,GAJZ,2CAFE,kCAAAwB,KAAA,gBAQTyE,MAAK,WACJ,EAAKH,oB,6BAlBT,OAAOtE,KAAKsE,iB,iCC2CPK,GAAK,I,oDA3Cd,aAAe,IAAD,8BACV,cAAM,aANVC,YAKc,IAJdC,eAIc,IAHd7G,cAGc,IAFd8G,WAEc,EAIV,EAAKC,QAAQ,GAAGC,OAAO,CACnBJ,OAAQ,qBACRC,UAAW,aACX7G,SAAU,KACV8G,MAAO,yCAEX,EAAKF,OAAS,EAAKK,MAAM,UACzB,EAAKJ,UAAY,EAAKI,MAAM,aAC5B,EAAKjH,SAAW,EAAKiH,MAAM,YAC3B,EAAKH,MAAQ,EAAKG,MAAM,SAbd,E,gGAsBGpH,EAAYqH,G,wEACzBzG,QAAQ0G,MAAM,mC,SACRnF,KAAKoF,S,uBACLC,aAASxH,G,UACfY,QAAQ6G,IAAI,oBACRJ,E,gCAAUA,I,OAEdK,OAAOC,SAAWD,OAAOC,SAASC,KAAKC,MAAM,KAAK,G,mQAKrCC,aAAS3F,KAAM,CACxB4F,YAAY,EACZC,iBAAkB,SAACC,GACfrH,QAAQ0G,MAAM,kBAAmBW,M,mJA3ChCC,O,SAgEFC,G,uFAAf,WAAyBC,EAAWC,EAAgBC,EAAmBC,GAAvE,2BAAAvC,EAAA,sEACckC,KAAMM,OAAOH,GAD3B,0CAEc1D,EAAI,IAAIuD,KAAMG,GAF5B,SAGc1D,EAAE8D,OAHhB,OAIQ7H,QAAQ6G,IAAI,MAAOY,EAAQC,GAJnC,eAK0B3D,EAAE+D,QAL5B,8DAKmBC,EALnB,SAMoBhH,OAAS2G,EAN7B,4CAOwCK,EAAIC,UAP5C,uGAO2BC,EAP3B,QAQoBjI,QAAQ6G,IAAI,aAAcoB,GAR9C,UAU0BT,EAAMG,GAAUO,IAAID,GAV9C,yRAcQlE,EAAET,QACFS,EAAE4C,SAfV,+E,sBAbAT,GAAGiC,GAAG,QAAN,sBAAe,sBAAA/C,EAAA,sEACDc,GAAG3G,SAAS6I,QADX,8BACsB,GADtB,wBAEPpI,QAAQ0G,MAAM,mCAFP,SAGDa,GAAUrB,GAAI,cAAe,OAAQ,YAHpC,uBAIDqB,GAAUrB,GAAI,cAAe,YAAa,aAJzC,wBAKDqB,GAAUrB,GAAI,UAAW,QAAS,SALjC,yBAMDqB,GAAUrB,GAAI,WAAY,SAAU,UANnC,6CAUfA,GAAG2B,OCjEI,IAEKQ,GAFCC,GAAkBC,cAAWC,IAAY,I,8CAUtD,WAAmB7H,GAAnB,eAAAyE,EAAA,kEACWqD,KADX,SAC6BvC,GAAG3G,SACvBmJ,MAAM,CAAC/H,OACPgI,QAHT,wJACsB,EAEHC,IAHnB,gDAG0B,OAH1B,gDACgBC,MADhB,8D,oEAMA,WAAqBlI,EAAUmI,GAA/B,SAAA1D,EAAA,+EACWc,GAAG3G,SAASwJ,IAAI,CACnBpI,KACAiI,IAAKH,KAAKO,UAAUF,MAH5B,4C,gCAdYT,K,6BAAAA,E,oBAAAA,E,oCAAAA,E,iCAAAA,E,oCAAAA,Q,KAqBL,ICdKY,GAUAC,GDIC3J,GAAW,CACpB4J,I,6CACAC,M,0DChBQH,O,eAAAA,I,yBAAAA,I,2BAAAA,I,+BAAAA,I,+BAAAA,I,uCAAAA,I,wCAAAA,Q,cAUAC,O,qBAAAA,I,eAAAA,I,oBAAAA,Q,KAMZ,IAAIG,GAAsB,GACtBC,GAAsB,GAEbC,GAAiChB,sBAAW,IAAIiB,KAEzDC,GAAyB,KAClBC,GAA6CnB,cAAWC,IAAIS,GAAcU,MAC1EC,GAAyCrB,cAAWC,IAAIU,GAAYW,SAExE,SAASC,GAAYC,EAAwBC,GAChDX,GAAWU,EACXT,GAAUU,E,SAOCC,K,8EAAf,4BAAA7E,EAAA,sEACqB7F,GAAS4J,IAAId,GAAK6B,WADvC,UACQvN,EADR,uCAIc4C,GAAS6J,MAAMf,GAAK6B,UAAWvN,EAAOwN,eAAYC,YAJhE,gCAOWzN,GAPX,4C,sBAcO,SAAe0N,KAAtB,gC,8CAAO,wCAAAjF,EAAA,yDAAuBkF,EAAvB,iCACCb,GADD,yCAEQa,EAAcb,GAAGc,OAASd,GAAGe,QAFrC,mBAIIL,eAJJ,SAIoCF,KAJpC,+BAI+CK,EAJ/C,uBAIgBG,cAJhB,kE,sBAUA,SAAeC,KAAtB,gC,8CAAO,sBAAAtF,EAAA,6DACCqE,IACAA,GAAGkB,KAAK,IAAIzJ,MAAM,0CAFnB,KAIQiJ,eAJR,SAKaF,KALb,gCAOK,CACIW,IAAK,6BACLC,gBAAgB,IATzB,mBAWcV,eAAYW,kBAX1B,qFAKCnO,KALD,KAMCoO,SAND,iCAIoB,cAJpB,oD,sBAgBA,SAAeC,GAAtB,mC,8CAAO,WAAyBC,GAAzB,SAAA7F,EAAA,sEACG8F,GAAQhC,GAAYiC,QADvB,cAECzB,GAAUP,QAAUF,GAAcmC,cAAc1B,GAAU2B,IAAIpC,GAAcqC,YAF7E,SAIQZ,KAJR,QAIHjB,GAJG,QAMAtB,GAAG,OAAN,uCAAc,WAAOoD,GAAP,qBAAAnG,EAAA,sDACVoG,GAAc1I,QAAQ,sBAEhBN,EAAS,IAAIiJ,GAAOF,EAAMlC,IAChCkC,EAAKpD,GAAG,SAAS,kBAAMuD,GAAY,oBAAqBlJ,MACxD+I,EAAKpD,GAAG,SAAS,SAACpI,GAAD,OAASC,QAAQC,MAAMF,MAL9B,SAQN2J,GAAU2B,IAAIpC,GAAc0C,kBARtB,eASWrC,IATX,gEASKsC,EATL,kBAUIA,EAAGC,KAAI,EAAOrJ,GAVlB,QAWFxC,QAAQ0G,MAAM,sBAAuBkF,EAAGvG,YAAYtE,MAXlD,+IAaNyB,EAAOsJ,UAAW,EAClBvC,GAAQrB,IAAI1F,GACZkH,GAAU2B,IAAIpC,GAAc8C,WAftB,kDAiBN/L,QAAQC,MAAM,oBAAd,MAjBM,uEAAd,uDAqBAwJ,GAAGtB,GAAG,QAAQ,SAACpI,GACXC,QAAQC,MAAMF,GACd2J,GAAU2B,IAAIpC,GAAc+C,iBAGhCvC,GAAGwC,SAAShB,GAhCT,4C,sBAmCA,SAAeS,GAAtB,qC,8CAAO,WAA2B3L,EAAUyC,GAArC,SAAA4C,EAAA,sDACHpF,QAAQkM,KAAK,gBAAiBnM,GAC9BoM,GAAa3J,GACbA,EAAOc,QAEPtD,QAAQ6G,IAAI,2BACZ6C,GAAU2B,IAAIpC,GAAcmC,cANzB,4C,sBASA,SAAegB,KAAtB,gC,8CAAO,sBAAAhH,EAAA,sEACG8F,GAAQhC,GAAYmD,MADvB,uBAGQ3B,KAHR,OAGHjB,GAHG,OAKHC,GAAU2B,IAAIpC,GAAc8C,WAE5BtC,GAAGtB,GAAG,OAAN,uCAAc,WAAMoD,GAAN,qBAAAnG,EAAA,sDACVpF,QAAQkM,KAAK,qBACPI,EAAM,IAAIb,GAAOF,EAAMlC,IAE7BkC,EAAKpD,GAAG,SAAS,WACbnI,QAAQ0G,MAAM,kBAAmB4F,GACjCH,GAAaG,MANP,wBAUWhD,IAVX,gEAUKsC,EAVL,kBAWIA,EAAGC,KAAI,EAAMS,GAXjB,QAYFtM,QAAQ0G,MAAM,sBAAuBkF,EAAGvG,YAAYtE,MAZlD,+IAcNuL,EAAIR,UAAW,EACfvC,GAAQrB,IAAIoE,GACZd,GAAcpI,KAAd,gBAA4BkJ,EAAIC,SAASC,SAAzC,iBAAkE,CAACC,kBAAkB,IAhB/E,kDAkBNzM,QAAQC,MAAR,MACAqM,EAAIhJ,QAnBE,uEAAd,uDAsBAmG,GAAGtB,GAAG,QAAQ,SAACpI,GACXC,QAAQC,MAAMF,GACd2J,GAAU2B,IAAIpC,GAAc+C,cAC5BR,GAAcvL,MAAd,0CAA+D,CAACwM,kBAAkB,OAEtFhD,GAAGiD,OAlCA,4C,sBAqCA,SAAS/B,KACRlB,KACAF,GAAQoD,SAAQ,SAAAC,GACZA,EAAEtJ,QACF6I,GAAaS,MAEjBhD,GAAQyB,IAAInC,GAAYW,SACxBH,GAAU2B,IAAIpC,GAAcU,MAC5BF,GAAGkB,UAAKkC,GAAW,GACnBpD,GAAK,KACLzJ,QAAQ0G,MAAM,6B,SAQPwE,G,iFAAf,WAAuB4B,GAAvB,SAAA1H,EAAA,sDACIuF,KACAf,GAAQyB,IAAIyB,GAFhB,4C,sBAKA,SAASX,GAAa3J,GAClB+G,GAAQ5C,OAAOnE,GAIZ,IAAMiJ,GAAb,WAWI,WAAYF,EAAqBlC,GAAsB,IAAD,gCAV9CkC,UAU8C,OAT9CwB,SAA0B,KASoB,KARrC1D,cAQqC,OAP/CyC,UAAoB,EAO2B,KAN9CkB,SAAWrN,QAAQiG,UAM2B,KAL9CqH,OAAS,IAAIxH,GAKiC,KAJ/C8G,SAAqB,CAAC5L,IAAK,EAAG6L,SAAU,OAAQU,SAAS,GAAIC,SAAU,GAIxB,KAHrCC,UAAiB,KAGoB,KAF/CC,SAAmB,EAGtB9L,KAAKgK,KAAOA,EACZhK,KAAK8H,SAAWA,EAChB9H,KAAK+L,OAEL/L,KAAK6L,UAAY5M,aAAY,WACzB,GAAK,EAAKsL,SAAV,CACA,GAAI,EAAKP,KAAKgC,SAAU,OAAO,EAAKjK,QACpC,GAAK,EAAK+J,SAGH,OAAIG,KAAKC,MAAQ,EAAKJ,SAAW,MACpCrN,QAAQkM,KAAK,iBACN,EAAK5I,cAEhB,EAAKoK,KAAK,IAAIhJ,IAAcsB,OANxB,EAAKqH,SAAWG,KAAKC,SAO1B,KA3BX,mDA8BY,IAAD,OACG5P,EAAO0D,KACbA,KAAKgK,KAAKpD,GAAG,QAAQ,SAAC/I,GAClBvB,EAAKoP,OAAOU,OAAM,kBAAM9P,EAAK+P,cAAcxO,MAAO,kBAAI,EAAKmM,KAAKjI,cAEpE/B,KAAKgK,KAAKpD,GAAG,SAAS,SAACpI,GACnBC,QAAQC,MAAM,gBAAiBF,GAC/B,EAAKwL,KAAKjI,aArCtB,6EA6CwBuK,GA7CxB,kOA+C+CC,GAAe,IAAIC,WAAWF,IA/C7E,UA+CkBpL,EA/ClB,QAgDgB,EAAKsK,SAhDrB,gBAiDgB,EAAKA,SAAStK,GAjD9B,0BAkDwB,EAAKqJ,SAlD7B,uBAoDsB5K,MAAM,sDAAD,OAAuDuB,IApDlF,QAsDgBzC,QAAQ0G,MAAM,mBAAoBjE,GAtDlD,eAuDgC,EAAK4G,UAvDrC,gEAuD2BjH,EAvD3B,SAyD0BE,QAAQ0L,MAAK,SAAApB,GAAC,OAAInK,EAAOyC,QAAU0H,EAAE1H,SAzD/D,kCA0DqC9C,EAAE6L,aAAa,EAAMxL,GA1D1D,4IAAAyL,EAAA,qQA+DYlO,QAAQC,MAAR,MACAsB,KAAK+B,QAhEjB,8IAqEY/B,KAAKwL,UAELxL,KAAKwL,SAAS,MAEdxL,KAAK6L,WAAWe,aAAa5M,KAAK6L,WAEtC7L,KAAKgK,KAAKjI,UA3ElB,oEAmFeb,GAnFf,4EAoFQzC,QAAQ0G,MAAM,kBAAmBjE,GACjClB,KAAKyL,SAAWzL,KAAKyL,SAAShH,KAAd,sBAAmB,sBAAAZ,EAAA,kEAC/B,EAD+B,SACT0I,GAAerL,GADN,wBAC1B2L,WAD0B,4DAEhCnI,OAAM,SAAAlG,GACNC,QAAQC,MAAR,mCAAkDF,MAxF7D,wIA4FeX,GACPmC,KAAKgK,KAAKmC,KAAKtO,KA7FvB,oCAqGkBiP,GAAkC,IAAD,OAC3C,GAAI9M,KAAKwL,SAAU,MAAM7L,MAAM,2CAE/B,OAAO,IAAIvB,SAAQ,SAACC,EAAK0O,GACrB,EAAKvB,SAAW,SAACtK,GAEb,OADA,EAAKsK,SAAW,KACVtK,aAAkB4L,EAGjBzO,EAAI6C,GAFA6L,EAAI,2BAAD,OAA4B7L,EAA5B,gBAA0C4L,UA5GxE,yBA0CQ,OAAO9M,KAAKgK,KAAK5K,OA1CzB,KA2HO,SAAe4N,GAAtB,uC,8CAAO,WAAyB9L,EAAsB+L,EAAsBC,GAArE,eAAArJ,EAAA,0DACCoJ,GAAe5E,GAAQT,QAAUD,GAAYmD,KAD9C,iEAIgByB,GAAerL,GAJ/B,OAIGrD,EAJH,OAMHmK,GAAQoD,SAAQ,SAAA+B,GACRA,IAAMD,GAAMC,EAAEN,WAAWhP,MAP9B,4C,sBAWA,SAASmD,KACZ,OAAOqH,GAAQT,QAAUD,GAAYmD,K,aCxU5BsC,GAMT,WAAYC,GAAiB,yBALtBxQ,EAAY,EAKS,KAJrBH,EAAY,EAIS,KAHrB4Q,EAAY,EAGS,KAFrBD,YAEqB,EACxBrN,KAAKqN,OAASA,GCEDE,G,oDAKjB,WAAYC,GAAmB,IAAD,8BAC1B,gBAJKzM,QAAiC,CAAC+B,IAGb,EAFb0K,aAEa,EAE1B,EAAKA,QAAUA,EAFW,E,mGAYVvM,EAAgBC,G,oGACbA,EAAOuM,Y,4DAAf5P,E,yDAIP,IAFM6P,EAAQ7P,EAAK8P,OAETpR,OAEN,IADAyD,KAAKwN,QAAQI,SAASF,EAAM,GAAG7Q,EAAG6Q,EAAM,GAAGhR,GAClCpB,EAAE,EAAGA,EAAIoS,EAAMnR,OAAQjB,IACtBuS,EAAKH,EAAMpS,GACXwS,EAAKjQ,EAAK6B,QAAQmO,EAAGE,WACrBtR,EAAI,IAAI2Q,GAAK,IAAItN,GAAOgO,EAAG1O,GAAI0O,EAAG/N,MACxCC,KAAKwN,QAAQQ,QAAQH,EAAGhR,EAAGgR,EAAGnR,EAAGD,GAAG,G,0UAMlCwE,EAAgBC,G,uEACxBvB,MAAM,mD,0IAxBZsO,WAAU,sBAAC,sBAAApK,EAAA,sEACD0J,EAAkBW,mBADjB,OAEPX,EAAkBY,cAFX,2CAGR,O,qKAyBCZ,EAAkBI,MAAMpR,O,iBAClB6R,EAAiC,GACjCC,EAAcd,EAAkBI,MAAMW,OAAO,EAAGf,EAAkBI,MAAMpR,Q,eAE9D8R,G,gEAAL5R,E,aACP2R,E,UAAwBG,aAAiB9R,G,yBAA5BX,K,gLAGXkR,IAAU,IAAIlK,IAAmBV,OAAO,CAC1CqL,WAAYW,KACZ,G,2JAIUT,GACd3M,MAAUuM,EAAkBI,MAAM7R,KAAK6R,O,GAtDJ7M,IAA1ByM,GACFI,MAAkB,GAyDrCJ,GAAkBY,c,IC/DGK,G,oDAKjB,WAAYhB,GAAmB,IAAD,8BAC1B,gBAJKzM,QAAiC,CAACiC,IAGb,EAFbwK,aAEa,EAE1B,EAAKA,QAAUA,EAFW,E,mGAYVvM,EAAgBC,G,0FAChBA,EAAOuN,Q,IAAvB,2BAAWhS,EAAoB,QAC3BuD,KAAKwN,QAAQI,SAASnR,EAAEI,EAAGJ,EAAEC,G,kNAInBuE,EAAgBC,G,uEACxBvB,MAAM,mD,0IAbZsO,WAAU,sBAAC,sBAAApK,EAAA,sEACD2K,EAAoBN,mBADnB,OAEPM,EAAoBL,cAFb,2CAGR,O,wCAkBkBtR,EAAWH,GAC5BsE,MAAUwN,EAAoBb,MAAMhH,KAAI,IAAI5D,IAAqBX,OAAO,CAAEvF,IAAGH,S,6JAO7E8R,EAAoBb,MAAMe,K,uBACpBC,GAAO,IAAI3L,IAAqBZ,OAAO,CACzCqM,OAAQG,MAAMC,KAAKL,EAAoBb,SAE3Ca,EAAoBb,MAAMmB,Q,SACpB9B,GAAU2B,GAAK,G,sGA7CgB7N,IAA5B0N,GACFb,MAAiC,IAAI1F,IAiDxDuG,GAAoBL,c,IC7BRY,G,mBAXCC,GAAS,IAAIC,eAEbC,GAAgB,IAAIC,aAEpBC,GAAe,IAAID,aAEnBE,GAAgB,IAAIF,c,SAKrBJ,O,SAAAA,I,yBAAAA,I,2BAAAA,I,2BAAAA,I,mBAAAA,I,sBAAAA,Q,KAUZ,IAAIO,IAAgB,EAMb,SAASC,KAA4B,IAAfC,IAAc,yDACvCF,GAAgBE,EAuBpBjK,OAAOkK,eAAiB,kBAAIT,GAAOU,S,cCjE5B,SAASC,GAASC,EAASC,GAE9B,IAASC,EAAoBC,EAAqBC,EAAIC,EAgCtD,OA7BAL,EAAGM,QAAUN,EAAG/S,EAAI+S,EAAGjU,MAAQ,EAC/BiU,EAAGO,QAAUP,EAAGlT,EAAIkT,EAAGhU,OAAS,EAChCiU,EAAGK,QAAUL,EAAGhT,EAAIgT,EAAGlU,MAAQ,EAC/BkU,EAAGM,QAAUN,EAAGnT,EAAImT,EAAGjU,OAAS,EAGhCgU,EAAGQ,UAAYR,EAAGjU,MAAQ,EAC1BiU,EAAGS,WAAaT,EAAGhU,OAAS,EAC5BiU,EAAGO,UAAYP,EAAGlU,MAAQ,EAC1BkU,EAAGQ,WAAaR,EAAGjU,OAAS,EAG5BoU,EAAKJ,EAAGM,QAAUL,EAAGK,QACrBD,EAAKL,EAAGO,QAAUN,EAAGM,QAGrBL,EAAqBF,EAAGQ,UAAYP,EAAGO,UACvCL,EAAsBH,EAAGS,WAAaR,EAAGQ,WAGrC5U,KAAK6U,IAAIN,GAAMF,GAETrU,KAAK6U,IAAIL,GAAMF,E,ICgBhBQ,GAAgC,I,iDDAjCC,OAAmC,G,KACnCC,QAA+B,G,KAC/BC,kBAA2C,G,+CASzCC,EAAeC,GAAoC,IAAD,OAApBC,EAAoB,wDAQxD,OAPA7Q,KAAKwQ,OAAOG,GAAS3Q,KAAKwQ,OAAOG,IAAU,IAAI1I,IAC/CjI,KAAKwQ,OAAOG,GAAOhK,IAAIiK,GAEnBC,GAAc7Q,KAAKyQ,QAAQK,eAAeH,IAC1CC,EAAS5Q,KAAKyQ,QAAQE,IAGnB,WACC,EAAKH,OAAOG,KACZ,EAAKH,OAAOG,GAAOvL,OAAOwL,GACrB,EAAKJ,OAAOG,GAAOjC,aACb,EAAK8B,OAAOG,O,2BAavBA,EAAeC,GAAyC,IAArBC,EAAoB,wDACzDE,EAAQ/Q,KAAK4G,GAAG+J,GAAO,SAACtJ,GAC1B0J,IACAH,EAASvJ,KACVwJ,GAEH,OAAOE,I,2BAUCJ,EAAetJ,GAA+B,IAApBwJ,IAAmB,yDAC/CG,EAAYhR,KAAKwQ,OAAOG,GAE1BE,IAAY7Q,KAAKyQ,QAAQE,GAAStJ,GAElC2J,GACAA,EAAU5F,SAAQ,SAAA6F,GACdA,EAAE5J,MAGNrH,KAAKwQ,OAAO,KACZxQ,KAAKwQ,OAAO,IAAIpF,SAAQ,SAAA6F,GACpBA,EAAEN,EAAOtJ,Q,gCAYJsJ,EAAeO,GAC5BlR,KAAK0Q,kBAAkBC,GAAS3Q,KAAK0Q,kBAAkBC,IAAU,GACjE3Q,KAAK0Q,kBAAkBC,GAAO7U,KAAKoV,GACnClR,KAAK4G,GAAG+J,EAAOO,K,yCAOOP,GAAuB,IAAD,OAC5C,GAAIA,SACO3Q,KAAKwQ,OAAOG,QAEnB,cAAgBxO,OAAOgP,KAAKnR,KAAKwQ,QAAjC,eAA0C,CAArC,IAAMY,EAAC,YACDpR,KAAKwQ,OAAOY,GAY3B,OAReT,EAAO,CAACA,GAASxO,OAAOgP,KAAKnR,KAAK0Q,oBAC1CtF,SAAQ,SAAAiG,GACX,IAAMvJ,EAAW,EAAK4I,kBAAkBW,GACpCvJ,GACAA,EAASsD,SAAQ,SAAAvK,GAAC,OAAI,EAAK+F,GAAGyK,EAAIxQ,GAAG,SAItCb,S,MCnFXsR,GAAK,EAAGC,GAAK,EAMjB,SAASC,GAAYH,GACjB,IAAMI,EAAKhW,KAAKiW,IAAI,EAAGjW,KAAKkW,IAAIC,GAAmBnW,KAAKoW,MAAMR,EAAGxT,KAAKiU,iBAAiBzC,IAAexS,EFjE9E,MEkElBkV,EAAKtW,KAAKiW,IAAI,EAAGjW,KAAKkW,IAAIC,GAAmBnW,KAAKoW,MAAMR,EAAGxT,KAAKiU,iBAAiBzC,IAAe3S,EFlE9E,ME4ExB,OARA6T,GAAayB,KAAK,iBAAkB,CAACtR,GAAI2Q,EAAGxT,KAAKiU,iBAAiBzC,IAAexS,EAAG8D,GAAI0Q,EAAGxT,KAAKiU,iBAAiBzC,IAAe3S,IAE5H4U,KAAOG,GAAMF,KAAOQ,IACpBT,GAAKG,EACLF,GAAKQ,EACLxB,GAAayB,KAAK,QAAS,CAACP,KAAIM,QAG7B,CAACN,KAAIM,MAIhB1C,GAAc4C,QAAU,IAAIC,aAAe,EAAG,EF7EjBN,WE8E7BvC,GAAc8C,aAAc,EAC5B9C,GAAc+C,SAAStI,IAAI,EAAE,GAI7BuF,GAAczI,GAAG,eAAe,SAAAyK,GAC5BG,GAAYH,MAIhBhC,GAAczI,GAAG,SAAS,SAAAyK,GACtB,IAAM5C,EAAS+C,GAAYH,GAC3Bd,GAAayB,KAAK,QAASvD,MAI/BY,GAAczI,GAAG,OAAO,SAAAyK,GACpB,IAAM5C,EAAS+C,GAAYH,GAC3Bd,GAAayB,KAAK,QAASvD,MAI/BY,GAAczI,GAAG,cAAc,SAAAyK,GAC3B,IAAM5C,EAAS+C,GAAYH,GAE3Bd,GAAayB,KAAK,aAAcvD,MAIpCY,GAAczI,GAAG,YAAY,SAAAyK,GACzB,IAAM5C,EAAS+C,GAAYH,GAE3Bd,GAAayB,KAAK,WAAYvD,MAIlCY,GAAczI,GAAG,mBAAmB,SAAAyK,GAChC,IAAM5C,EAAS+C,GAAYH,GAE3Bd,GAAayB,KAAK,WAAYvD,MAOlClJ,OAAO8M,YAAc,SAACC,GAClB,OAAO/B,GAAa3J,GAAG0L,GAAQ,WAAY,IAAD,EAExB,oBAAV,0CAAwC,WAAV,2CAClC,EAAA7T,SAAQ0G,MAAR,uBClIR,IAAMoN,GAAmC,GACnCC,GAA+C,GAkB9C,SAAeC,GAAtB,mC,8CAAO,WAA2BtT,GAA3B,mBAAA0E,EAAA,yDACIvD,EAAOnB,EAAPmB,KAEHiS,GAAMjS,GAHP,uBAICiS,GAAMjS,GAAKwE,QAJZ,kBAKQyN,GAAMjS,GAAKoS,SALnB,cAQGC,EAAS,IAAIC,UAEbxO,EAAO,IAAIhG,QAAJ,uCAAY,WAAOC,EAAK0O,GAAZ,mBAAAlJ,EAAA,2DACjB,UAAW1E,GADM,wBAEX0T,EAAM7W,SAASC,cAAc,UAC7BV,EAAMsX,EAAI3W,WAAW,MAC3B2W,EAAIlX,MAAQwD,EAAIyB,EAChBiS,EAAIjX,OAASuD,EAAI0B,EACjBtF,EAAIuX,uBAAwB,EANX,KAOjBvX,EAPiB,SAOG4D,EAAIsB,MAPP,+BAOctB,EAAIuB,GAPlB,KAOsBvB,EAAIwB,GAP1B,KAO8BxB,EAAIyB,EAPlC,KAOqCzB,EAAI0B,EAPzC,KAOkD1B,EAAIyB,EAPtD,KAOyDzB,EAAI0B,EAP7D,KAObrD,UAPa,mCAO4C,EAAG,EAP/C,6BAQVa,EAAI0U,WAAQlE,KAAKgE,KARP,yBAUE1T,EAAIoB,OAVN,WAWmB,mBADlCyS,EAVe,SAWCC,cAXD,0CAYV5U,EAAI0U,WAAQlE,KAAKmE,KAZP,QAcrBvU,QAAQ6G,IAAI,0BAA2B0N,GACvCL,EAAOhM,IAAIrG,EAAK0S,GAChBL,EAAOO,WAAWvM,KAAI,WAElBtI,EAAIsU,EAAOQ,UAAU7S,GAAKoS,YAE9BC,EAAOnO,QAAQmC,KAAI,SAACnI,GAChBuO,EAAIvO,MAERmU,EAAOS,OAvBc,4CAAZ,yDAwBV1O,OAAM,SAAAlG,GAGL,OAFAC,QAAQC,MAAMF,GACd+R,GAAayB,KAAK,eAAgB,CAAE1R,MAAKkB,IAAI,GAAD,OAAKhD,EAAI6U,WAC9CC,QACR7O,MAAK,SAACpG,GAEL,OADAsU,EAAOY,UACAlV,KAGXkU,GAAMjS,GAAO,CACToS,QAAStO,EACTU,MAAO,GA7CR,kBAgDIV,GAhDJ,4C,sBAmDA,SAAeoP,GAAtB,mC,8CAAO,WAA0BC,GAA1B,eAAA5P,EAAA,sEACkB2O,GAASiB,GAD3B,UACGC,EADH,wDAGHA,EAAO5O,QACF4O,EAAO5O,eACD0N,GAASiB,GAChBhV,QAAQ6G,IAAI,iBAAkBmO,IAN/B,4C,sBAeA,SAAeE,GAAtB,mC,8CAAO,WAA8BrT,GAA9B,iBAAAuD,EAAA,yDACG+P,EAAIrB,GAAMjS,GADb,oDAGHsT,EAAE9O,OAAS,EAEN8O,EAAE9O,MALJ,+BAMQyN,GAAMjS,GANd,SAOmBsT,EAAElB,QAPrB,OAOOmB,EAPP,OAQCd,WAAQe,gBAAgBxT,GACxByS,WAAQe,gBAAgBD,GACxBA,EAAIN,SAAQ,GAEZ9U,QAAQ6G,IAAI,qBAAsBhF,GAZnC,6C,sBAiBP,SAASyT,KACL,IAAMhY,EAASC,SAASC,cAAc,UAChCV,EAAMQ,EAAOG,WAAW,MAe9B,OAdAH,EAAOJ,MH1GiB,GG2GxBI,EAAOH,OH3GiB,GG4GxBL,EAAIuX,uBAAwB,EAC5BvX,EAAIyY,UAAY,UAChBzY,EAAI0Y,SAAS,EAAG,EH9GQ,OG+GxB1Y,EAAI2Y,YAAc,UAClB3Y,EAAI4Y,UAAY,EAEhB5Y,EAAI6Y,OAAO,EAAG,GACd7Y,EAAI8Y,OHnHoB,OGoHxB9Y,EAAI+Y,SACJ/Y,EAAI6Y,OHrHoB,GGqHC,GACzB7Y,EAAI8Y,OAAO,EHtHa,IGuHxB9Y,EAAI+Y,SACGvY,EAGX,SAASuX,KACL,OAAOP,WAAQlE,KAAKkF,MAMxB,SAASQ,GAAaC,GAClB,IAAMC,EAAOzY,SAASC,cAAc,UAC9ByY,EAAOD,EAAKvY,WAAW,MAM7B,OALAuY,EAAK9Y,MHrImB,GGsIxB8Y,EAAK7Y,OHtImB,GGuIxB8Y,EAAK5B,uBAAwB,EAC7B4B,EAAKC,YAAc,EACnBD,EAAKlX,UAAUgX,EAAO,EAAG,EAAGA,EAAM7Y,MAAO6Y,EAAM5Y,OAAQ,EAAG,EHzIlC,OG0IjB6Y,EAGJ,SAAeG,GAAtB,mC,8CAAO,WAAiCnB,GAAjC,iBAAA5P,EAAA,yDACE4P,EAAOpU,WAAW,QADpB,sBACmCM,MAAM,oBAAsB8T,GAD/D,cAGGoB,EAAUpB,EAAOqB,QAAQ,QAAS,IAEnCtC,GAASiB,KACVjB,GAASiB,GAAU,IAAIrV,QAAJ,uCAAY,WAAMiG,GAAN,uBAAAR,EAAA,6DACrBxF,EAAiB,CAAC0W,OAAQ,GAAIjQ,MAAO,GADhB,kBAGLkQ,MAAMH,GACnBpQ,MAAK,SAAAwQ,GAAI,OAAIA,EAAKC,iBAClBzQ,MAAK,SAAA0Q,GAAI,OAAIC,oBAASD,MACtB1Q,MAAK,SAAA4Q,GAAG,OAAIC,4BAAiBD,GAAK,MANhB,OAGjBA,EAHiB,OAQjBxC,EAAM7W,SAASC,cAAc,UAC7BV,EAAMsX,EAAI3W,WAAW,MACvBqZ,EAAuB,KAE3Bha,EAAIuX,uBAAwB,EAC5BvX,EAAIoZ,YAAc,EAElBU,EAAIjK,SAAQ,SAACnL,EAAOF,GACJ,MAARwV,GAAgBtV,EAAMuV,KAAK7Z,QAAU4Z,EAAK5Z,OAASsE,EAAMuV,KAAK5Z,SAAW2Z,EAAK3Z,SAC9EiX,EAAIlX,MAAQsE,EAAMuV,KAAK7Z,MACvBkX,EAAIjX,OAASqE,EAAMuV,KAAK5Z,OACxB2Z,EAAOha,EAAIka,gBAAgBxV,EAAMuV,KAAK7Z,MAAOsE,EAAMuV,KAAK5Z,SAEjC,IAAvBqE,EAAMyV,cACNna,EAAIoa,UAAU,EAAE,EAAG9C,EAAIlX,MAAOkX,EAAIjX,QAEtC2Z,EAAK1X,KAAKiM,IAAI7J,EAAM2V,OACpBra,EAAIsa,aAAaN,EAAM,EAAG,GAE1BlX,EAAI0W,OAAOjZ,KAAK,CACZwE,IAAKmT,EAAO,IAAI1T,EAChBQ,OAAQgU,GAAa1B,GACrBiD,MAAO7V,EAAM6V,WA9BE,kDAkCvBrX,QAAQC,MAAR,MAlCuB,WAqCtBL,EAAI0W,OAAOxY,OArCW,kCAsCjB,IAAI6B,SAAc,SAACiG,GAUrB5F,QAAQ6G,IAAI,sBACZ,IAAMpK,EAAM,IAAIoD,MAChBpD,EAAI0D,OAAS,WACTP,EAAI0W,OAAOjZ,KAAK,CACZwE,IAAKmT,EAAO,UACZlT,OAAQgU,GAAarZ,KAEzBmJ,KAEJnJ,EAAIqD,QAlBJ,WACIE,QAAQC,MAAM,0BACdL,EAAI0W,OAAOjZ,KAAK,CACZwE,IAAKmT,EAAS,UACdlT,OAAQwT,OAEZ1P,KAaJnJ,EAAI6a,YAAc,YAClB7a,EAAI4D,IAAM+V,KA3DS,QA8D3BxQ,EAAQhG,GA9DmB,0DAAZ,wDANpB,SAwEkBmU,GAASiB,GAxE3B,cAwEGuC,EAxEH,QAyEIlR,OAAS,EAzEb,kBA2EIkR,GA3EJ,4C,sBAgFPzQ,OAAO0Q,gBAAkB1D,GChOzBrD,GAAcgH,kBAAmB,EAEjC,IAAMvI,GAA8C,GAC9CwI,GAA+B,GAErC,SAAShX,GAAIsS,EAAYM,GACrB,MAAM,GAAN,OAAUN,EAAV,YAAgBM,GAGb,SAASqE,GAAM3E,EAAYM,GAC9B,OAAOpE,GAAMxO,GAAIsS,EAAIM,KAAQ,IAAI9J,I,8CAQrC,WAAsBwJ,EAAYM,GAAlC,SAAAlO,EAAA,sEACsBzF,QAAQiY,IAAIzH,MAAMC,KAAKuH,GAAM3E,EAAIM,KADvD,cAEQuE,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGE,GAAKD,EAAGC,MAAIrL,SAAQ,SAAC3O,EAAGsD,GAC5CtD,EAAEia,OAAS3W,KAHnB,4C,sBAOA,SAAS4W,GAAalF,EAAYM,GAC9B,IAAMX,EAAIjS,GAAIsS,EAAIM,GACdoE,GAAW/E,IAAIxE,aAAauJ,GAAW/E,IAC3C+E,GAAW/E,GAAKnD,YAAW,Y,+CACvB2I,CAAOnF,EAAIM,GAAIrN,MAAMjG,QAAQC,SAC9B,I,aAIDmY,G,oDAMF,WAAYpF,EAAYM,EAAYzE,EAAWoF,EAAkBoE,GAAgB,IAAD,8BAC5E,cAAMpE,IANMjB,QAKgE,IAJhEM,QAIgE,IAHhE0E,QAGgE,IAFhEM,WAEgE,EAE5E,EAAKtF,GAAKA,EACV,EAAKM,GAAKA,EACV,EAAKK,SAAStI,IJzCM,GIyCF2H,EJzCE,GIyCiBM,GACrC,EAAK0E,GAAKnJ,EACV,EAAKyJ,MAAQD,EAN+D,E,oDAa5E5H,GAAc8H,YAAYhX,MAC1BA,KAAKuT,QAAQ,CACT0D,UAAU,IAEdtD,GAAe3T,KAAK+W,OAAOrS,MAAMjG,QAAQC,W,GAvB5BoB,WAkCd,SAASoX,GAAWzF,EAAYM,EAAYnW,EAAgBub,GAC/D,IAAMrN,EAAM6D,GAAMxO,GAAIsS,EAAIM,IAAOqE,GAAM3E,EAAIM,GACrC3N,EAAOqO,GAAY0E,GAAQ1S,KAApB,uCAA0B,WAAMoP,GAAN,eAAAhQ,EAAA,6DAC7BuT,EAAO,IAAIP,GAAOpF,EAAIM,EAAInW,EAAQiY,EAAKsD,EAAO7W,KAEpD4O,GAAcmI,SAASD,GACvBT,GAAalF,EAAIM,GAEjBxC,IAAa,GANsB,kBAQ5B6H,GAR4B,2CAA1B,uDAWbtN,EAAInD,IAAIvC,G,8CASL,WAA+BqN,EAAYM,GAA3C,eAAAlO,EAAA,sDACGiG,EAAMsM,GAAM3E,EAAIM,UACfpE,GAAMxO,GAAIsS,EAAIM,IACrBjI,EAAIsB,SAAQ,SAAA3O,GAAC,OAAIA,EAAEgI,MAAK,SAAA2S,GACpBA,EAAKE,cAJN,4C,sBAUP/R,OAAOgS,iBAAmB5J,G,IC9FL6J,I,oDACAhK,QAAkC,G,KAC5CiK,QAAkB,E,yIAKT5a,EAAWH,GAAqB,IAAD,EACrC2J,EAAM,UAAGrG,KAAKwN,QAAQgK,EAAQrX,MAAMtD,EAAGH,WAAjC,aAAG,EAAmCH,OAKlD,OAJI8J,UACOrG,KAAKwN,QAAQgK,EAAQrX,MAAMtD,EAAGH,ID0E1C,SAAP,qCCxEQgb,CAAwB7a,EAAGH,GAAGgI,MAAMjG,QAAQC,SACnC2H,I,8BAQExJ,EAAWH,GAClBsD,KAAK4N,SAAS/Q,EAAGH,KACjB8R,GAAoBmJ,kBAAkB9a,EAAGH,GACzCsD,KAAK4X,cAAe,K,6BASd/a,EAAWH,GACrB,QAAIG,EAAI,GAAKA,EAAI+U,IAAqBlV,EAAI,GAAKA,EAAIkV,QAC/C5R,KAAK6X,gBACE7X,KAAKgO,QAAQnR,EAAGH,EAAG,IAAI0Q,GAAKpN,KAAK6X,iBAAiB,M,8BAalDhb,EAAWH,EAAW0a,GAAkD,IAAD,EAArCpK,EAAqC,wDAC5E8K,EAAW9X,KAAKoW,MAAMvZ,EAAGH,GAC/B,GAAIob,EAASvb,QAAUub,EAASA,EAASvb,OAAO,GAAG8Q,OAAOzN,YAAcwX,EAAK/J,OAAOzN,UAEhF,OAAO,EAEPwX,EAAK/J,OAAO0K,WACZ/X,KAAK4N,SAAS/Q,EAAGH,GAErB,IAAM0U,EAAIoG,EAAQrX,MAAMtD,EAAGH,GAS3B,OARAsD,KAAKwN,QAAQ4D,IAAK,UAAApR,KAAKwN,QAAQ4D,UAAb,eAAiB4G,QAAO,SAAAvb,GAAC,OAAIA,EAAE4Q,OAAOzN,YAAcwX,EAAK/J,OAAOzN,eAAc,GAChGI,KAAKwN,QAAQ4D,GAAGtV,KAAKsb,GACrBA,EAAKva,EAAIA,EACTua,EAAK1a,EAAIA,EACT0a,EAAK9J,EAAItN,KAAKyX,UACdC,GAAmBN,EAAKva,EAAGua,EAAK1a,EAAG0a,EAAK9J,EAAG8J,EAAK/J,OAAO4K,YAAY,IAC/DjL,GAAWO,GAAkB2K,eAAelY,KAAKwN,QAAQ4D,IACxDpR,KAAK4X,eAAc5X,KAAK4X,cAAe,IACrC,I,4BAGE/a,EAAWH,GACpB,OAAOsD,KAAKwN,QAAQgK,EAAQrX,MAAMtD,EAAGH,KAAO,K,qCAO5C,OAAOsD,KAAKwN,U,mCAOH2K,GACT,IAAKA,EAAW3K,QAAS,MAAM7N,MAAM,qBACrC,cAAgBwC,OAAOgP,KAAKnR,KAAKwN,SAAjC,eAA2C,CAAtC,IAAM4D,EAAC,KACF3U,EAAIuD,KAAKwN,QAAQ4D,GAAG,GAC1BpR,KAAK4N,SAASnR,EAAEI,EAAGJ,EAAEC,GAJQ,qBAOjByb,EAAW3K,QAAQG,MAAM2I,MAAK,SAACzS,EAAGuU,GAAJ,OAAUvU,EAAEyJ,EAAI8K,EAAE9K,MAP/B,IAOjC,2BAAoE,CAAC,IAA1D8D,EAAyD,QAC1DtD,EAAKqK,EAAW3K,QAAQ9N,QAAQ0R,EAAErD,WACxC/N,KAAKgO,QAAQoD,EAAEvU,EAAGuU,EAAE1U,EAAG,IAAI0Q,GAAK,IAAItN,GAAOgO,EAAG1O,GAAI0O,EAAG/N,OAAO,IAT/B,kC,6BAahBlD,EAAWH,GAC5B,MAAM,GAAN,OAAUG,EAAV,YAAeH,O,mDAhGlBsK,e,yEAAkD,Q,4CAClDA,e,yEAA0C,K,cCJ1BqR,G,oDAIjB,WAAYC,GAAwB,IAAD,8BAC/B,gBAJKvX,QAAiC,CAACkC,GAAoBC,IAG5B,EAFlBoV,cAEkB,EAE/B,EAAKA,SAAWA,EAFe,E,mGAKfrX,EAAgBC,G,6EAChC,GAAIA,aAAkB+B,GAAoB,CAAC,EAAD,aACpB/B,EAAOoX,UADa,IACtC,2BAAWC,EAAwB,QACzBlL,EAAS,IAAIvN,GAAOyY,EAAIlL,OAAOjO,GAAImZ,EAAIlL,OAAOtN,KAC/CC,KAAKsY,SAASE,aAAaD,EAAInZ,GAA/B,2BACEmZ,GADF,IAEDlL,YACD,KACC5O,QAAQ0G,MAAM,qBAAsBoT,GACpCvY,KAAKsY,SAASG,UAAUpL,EAAxB,2BAAqCkL,GAArC,IAA0ClL,YAAU,IARtB,oCAW/BnM,aAAkBgC,KACzBzE,QAAQ0G,MAAM,YAAajE,EAAOwX,UAClC1Y,KAAKsY,SAASK,OAAOzX,EAAOwX,UAAU,I,oLAI5BzX,EAAgBC,G,gFAC1BA,aAAkB+B,I,gCACA/B,EAAOoX,U,4DAAdC,E,QACFvY,KAAKsY,SAASM,cAAcL,EAAInZ,GAAI6B,EAAO+J,SAASC,U,sBAC/CtL,MAAM,mD,OAEDK,KAAKsY,SAASE,aAAaD,EAAInZ,GAAI,CAC9CvC,EAAG0b,EAAI1b,EACPH,EAAG6b,EAAI7b,IACR,IACS2b,EAAoBQ,WAAW7Y,KAAKsY,SAASQ,UAAUP,EAAInZ,IAAK6B,G,6KAG1EtB,MAAM,sCAAD,cAA8CuB,I,4JAI/C6X,EAAgB7L,GAC9B,GAAK6L,EAAOC,WAAcD,EAAOE,QAAjC,CACA,IAAMC,GAAQ,IAAIxW,IAAcN,OAAlB,2BACP2W,GADO,IAEV1L,QAAQ,IAAI/K,IAAcF,OAAlB,eAA6B2W,EAAO1L,SAC5C8L,OAAQvK,MAAMC,KAAKkK,EAAOI,WAG9BnM,IADe,IAAI/J,IAAqBb,OAAO,CAACkW,SAAU,CAACY,MACzC,EAAOhM,M,iCAGX6L,GACd,GAAKA,EAAOC,UAAZ,CACA,IAAM9X,GAAS,IAAIgC,IAAqBd,OAAO,CAACsW,SAAUK,EAAO3Z,KACjEX,QAAQ0G,MAAMjE,GACd8L,GAAU9L,GAAQ,Q,GA3DuBJ,ICN3CsY,GAAe,CACjBC,WAAY,cACZC,SAAU,GACVC,KAAM,WAGJC,GAAS,IAAIvR,IAKZ,SAASwR,KACZ7K,MAAMC,KAAK2K,IAAQlD,MAAK,SAACoD,EAAIC,GAAL,OAAYD,EAAGE,GAAKD,EAAGC,MAAIxO,SAAQ,SAAAyO,GACvDA,EAAMzH,SAAStI,IAAI+P,EAAMC,GAAID,EAAMD,IACnCJ,GAAOpO,SAAQ,SAAAC,GACX,GAAIA,IAAMwO,EACV,KAAOE,GAAcF,EAAOxO,IACxBwO,EAAMzH,SAAStI,IAAI+P,EAAMC,GAAID,EAAMnd,GAAMmd,EAAMje,OAAO,MAG9Die,EAAMG,aAIP,I,iCAAMC,GAAb,oDAMI,WAAYC,GAAe,IAAD,8BACtB,cAAMA,EAAM,IAAIC,aAAUf,MANvBU,GAAK,EAKc,EAJnBF,GAAK,EAIc,EAHlBQ,OAAQ,EAGU,EAFlBC,IAAM,IAAIC,YAId,EAAKC,WAAa,EAClB,EAAK7D,OAAS3H,GAAeyL,UAC7B,EAAKC,aAAc,EAJG,EAN9B,qDAaoBC,GACR1a,KAAK2a,QAAO3a,KAAK2a,MAAMpB,KAAOmB,KAd1C,8BAiBmBlb,GACXQ,KAAKka,KAAO1a,IAlBpB,iCAqBsByZ,GACTjZ,KAAKka,OAAMjB,GAAU,GAC1BjZ,KAAKiZ,QAAUA,EACfjZ,KAAKqa,IAAIpB,QAAUA,IAxB3B,4BAgCkBpc,EAAWH,GAChBsD,KAAKoa,QACNpa,KAAKoa,OAAQ,EACb/K,GAAcgI,SAASrX,MACvBqP,GAAcgI,SAASrX,KAAKqa,KAC5Bb,GAAO7S,IAAI3G,OAEfA,KAAK4a,kBACL5a,KAAK8Z,GAAKre,KAAKof,MAAMhe,EAAImD,KAAKrE,MAAM,GACpCqE,KAAK4Z,GAAKne,KAAKof,MAAMne,EAAIsD,KAAKpE,QAC9B6d,OA1CR,gCA8CQzZ,KAAKqa,IAAIvL,QACT9O,KAAKqa,IAAIS,UAAU,SAAU,IAC7B9a,KAAKqa,IAAIU,SAAS,EAAE,EAAE/a,KAAKrE,MAAM,EAAGqE,KAAKpE,OAAO,GAChDoE,KAAKqa,IAAIW,UACThb,KAAKqa,IAAIjI,SAAStI,IAAI9J,KAAKoS,SAASvV,EAAE,EAAGmD,KAAKoS,SAAS1V,EAAE,KAlDjE,+BAyDQ8c,GAAOpU,OAAOpF,MACdA,KAAKuT,QAAQ,CACT0D,UAAU,EACVvE,SAAS,EACTuI,aAAa,IAEjBjb,KAAKqa,IAAI9G,QAAQ,CACbb,SAAS,EACTuI,aAAa,EACbhE,UAAU,IAGdwC,SArER,GAAiCyB,SCtB3B5C,GAA8C,GAEvC6C,GAAb,oDAUI,WAAY/b,EAAYI,GAAe,IAAD,8BAClC,cAAM,CAACuT,WAAQqI,QAAQ,IAVXhc,QASsB,IAR/BI,UAQ+B,IAP/B6b,UAAW,EAOoB,EAN9BC,WAAuB,GAMO,EAL9BzB,WAK8B,IAJ9BO,OAAQ,EAIsB,EAH9BmB,WAAY,EAGkB,EAF9BC,WAA0B,KAI9B,EAAKC,eAAiB,EAAE,GACxB,EAAKrc,GAAKA,EACV,EAAKI,KAAOA,EACZ,EAAKqa,MAAQ,IAAII,GAAYza,GAC7B,EAAKkc,kBAAkB,IANW,EAV1C,kDAmBWC,EAAeC,GAClB,IAAI5b,KAAKub,UAkBT,OAjBKvb,KAAKoa,QACNpa,KAAKoa,OAAQ,EACbpa,KAAK6b,OACLzM,GAAaiI,SAASrX,OAEtBA,KAAKqb,UR3BW,GQ2BCM,IAAuB3b,KAAKoS,SAASvV,IR3BtC,GQ4BZ8e,EAAqB3b,KAAKoS,SAASvV,GACnCmD,KAAK8b,MAAMjf,GAAK,EAChBmD,KAAK+b,OAAOlf,EAAI,IAEhBmD,KAAK8b,MAAMjf,EAAI,EACfmD,KAAK+b,OAAOlf,EAAI,IAIxBmD,KAAKoS,SAAStI,IRrCM,GQqCF6R,ERrCE,GQqCoBC,GACxC5b,KAAK6Z,MAAMmC,MAAMhc,KAAKoS,SAASvV,EAAIof,GAAgBjc,KAAKoS,SAAS1V,GAC1DsD,OAtCf,+BA8CaA,KAAKub,YACNvb,KAAKub,WAAY,EACjBvb,KAAKkc,OACLlc,KAAKuT,UACLvT,KAAK6Z,MAAMlB,SACX3Y,KAAKsb,WAAWlQ,SAAQ,SAAA3O,GAAC,OAAIkX,GAAelX,MACxCuD,KAAKwb,YACLhI,GAAWxT,KAAKwb,YAAY/W,UArD5C,+BA0DaiW,GAEL,OADA1a,KAAK6Z,MAAMsC,SAASzB,GACb1a,OA5Df,gCA+Dcoc,GAEN,OADApc,KAAKqc,MAAQD,EAAS,GAAM,EACrBpc,OAjEf,8BAoEYR,GAGJ,OAFAQ,KAAKR,KAAOA,EACZQ,KAAK6Z,MAAMyC,QAAQ9c,GACZQ,OAvEf,kCA0EgBuc,GACRvc,KAAK6Z,MAAM2C,WAAWD,KA3E9B,2EA8EsBE,GA9EtB,uFA+EcC,EAASD,EAASjc,KAAI,SAAA/D,GAAC,OAAIA,EAAE6D,OACnCN,KAAKkc,OAECS,GAAY,UAAAF,EAAS,UAAT,eAAanc,IAAIjB,WAAW,SAAUod,EAAS,GAAGnc,IAAM,MACtEN,KAAKwb,YAAcmB,IAAc3c,KAAKwb,WAnFlD,gCAoFkBhI,GAAWxT,KAAKwb,YApFlC,UAsFQxb,KAAKwb,WAAamB,GACd3c,KAAKwb,WAvFjB,kCAwFoC5G,GAAkB5U,KAAKwb,YAxF3D,QAwFkBoB,EAxFlB,OAyFYH,EAAWG,EAAU7H,OAzFjC,yBA4Fc3W,QAAQiY,IAAIoG,EAASjc,KAAI,SAAA/D,GAAC,OAAIgW,GAAYhW,OAAKgI,MAAK,SAAAiP,GACtD,EAAK4H,WAAWlQ,SAAQ,SAAAyR,GACfH,EAAOI,MAAK,SAAA1d,GAAE,OAAIA,IAAOyd,MAAMlJ,GAAekJ,MAEvD,EAAKvB,WAAamB,EAASjc,KAAI,SAAA/D,GAAC,OAAIA,EAAE6D,OACtC,EAAKmc,SAAW/I,EAEhB,EAAKqJ,WAAaN,EAASjc,KAAI,SAAA/D,GAAC,OAAEA,EAAEqZ,OAAS,UAnGzD,eAsGQ9V,KAAKgd,YAAY,GAtGzB,kBAuGehd,MAvGf,gJA0GsBid,GACdjd,KAAKyb,eAAiBwB,EAAW,OA3GzC,GAA8BC,mBAqHvB,SAAeC,GAAtB,uC,8CAAO,WAA4B/d,EAAYI,EAAcid,GAAtD,SAAA5Y,EAAA,0DACCyU,GAASlZ,GADV,yCAEQkZ,GAASlZ,IAFjB,gCAIIkZ,GAASlZ,GAAM,IAAI+b,GAAS/b,EAAII,GAAM4d,YAAYX,IAJtD,4C,sBAWA,SAAe3D,GAAtB,mC,8CAAO,WAAyB1Z,GAAzB,SAAAyE,EAAA,0DACCyU,GAASlZ,GADV,gCAEckZ,GAASlZ,GAFvB,wEAII,MAJJ,4C,sBAWA,SAAeie,GAAtB,mC,8CAAO,WAA6Bje,GAA7B,eAAAyE,EAAA,0DACCyU,GAASlZ,GADV,uBAEOgF,EAAOkU,GAASlZ,UACfkZ,GAASlZ,GAHjB,SAIQgF,EAJR,cAIcuU,SAJd,sBAMCla,QAAQkM,KAAK,kCAAmCvL,GANjD,4C,sBAYPmG,OAAO+X,gBAAkBhF,GCrJlB,IAAMiF,IAAb,cAWI,WAAYlQ,EAAgBmQ,GAAyB,+HAPrDpe,QAOoD,OANpDvC,EAAY,EAMwC,KALpDH,EAAY,EAKwC,kHAChDsD,KAAKqN,OAASA,EACdrN,KAAKZ,GAAKqe,eACVzd,KAAKR,KAAOQ,KAAKZ,GACboe,GACArb,OAAOC,OAAOpC,KAAMwd,GAhBhC,sDAqBQ,OAAOxc,MAAYhB,KAAKmZ,OAAOuE,SAAS3W,GAAgBa,WArBhE,2CACKZ,eADL,kGAEKA,eAFL,mGAGKA,eAHL,wEAGgC,aAHhC,uCAOKA,eAPL,yEAOmC,KAPnC,sCAQKA,eARL,wEAQmC,MARnC,8CASKA,eATL,yEAS0C,KAT1C,IAyBqB2W,I,oDACArF,SAAmC,G,kKAKtClZ,GAAkD,IAAtCyZ,IAAqC,yDACrDf,EAAW9X,KAAKsY,SAASlZ,GAU/B,OATI0Y,IACA8F,GAAuBxe,GAAIsF,MAAMjG,QAAQC,cAClCsB,KAAKsY,SAASlZ,GACjByZ,IACA7Y,KAAK6d,SAAU,EACfxF,GAAoByF,WAAWhG,KAGnCA,IAAa9X,KAAK+d,WAAU/d,KAAK+d,SAAW,QACvCjG,I,gCAGIzK,EAAgB2Q,GAAqD,IAAD,OAA5BnF,IAA4B,yDAC3EN,EAAM,IAAIgF,GAAOlQ,EAAQ2Q,GAkB/B,OAhBAhe,KAAK2Y,OAAOJ,EAAInZ,GAAIyZ,GAEpB+E,GAAsBrF,EAAInZ,GAAImZ,EAAI/Y,KAAM6N,EAAO4K,aAAaxT,MAAK,SAAAkI,GAC7DA,EAAEwP,SAAS5D,EAAImC,OACf/N,EAAEsR,WAAW1F,EAAIU,SACjBtM,EAAEqP,MAAMzD,EAAI1b,EAAG0b,EAAI7b,GACnBiQ,EAAEuR,YAAY,EAAKC,cACpBzZ,MAAMjG,QAAQC,OAEjBsB,KAAKsY,SAASC,EAAInZ,IAAMmZ,EAEpBM,IACAR,GAAoBQ,WAAWN,GAC/BvY,KAAK6d,SAAU,GAGZtF,I,6BAGG6F,GACVpe,KAAK+d,SAAWK,EAChB3f,QAAQ0G,MAAM,mBAAoBnF,KAAK+d,Y,oCAGtB3e,EAAYif,GAC7B,IAAMvG,EAAW9X,KAAKsY,SAASlZ,GAC/B,QAAI0Y,GACOA,EAASqB,OAAOuE,SAASW,K,gCAKvBjf,GACb,OAAOY,KAAKsY,SAASlZ,K,mCAGLA,EAAYkf,GAAmD,IAA3BzF,IAA0B,yDACxEf,EAAW9X,KAAKsY,SAASlZ,GAC/B,GAAI0Y,EAAU,CACV,IAAMyG,EAAYzG,EAASzK,OAE3BlL,OAAOC,OAAO0V,EAAUwG,GACxBV,GAAmBxe,GAAIqF,MAAK,SAAA8T,GACpBA,IACAA,EAAI4D,SAASrE,EAAS4C,OACtBnC,EAAI0F,WAAWnG,EAASmB,SACxBV,EAAI+D,QAAQxE,EAAStY,MACrB+Y,EAAIyD,MAAMlE,EAASjb,EAAGib,EAASpb,GAC3Bob,EAASzK,OAAOzN,YAAc2e,EAAU3e,WACxC2Y,EAAI6E,YAAYtF,EAASzK,OAAO4K,aAAavT,MAAMjG,QAAQC,WAInEma,IACAR,GAAoBQ,WAAWf,GAC/B9X,KAAK6d,SAAU,GAGvB,QAAS/F,I,sCAGUiB,EAAgB1L,GACnCrN,KAAK6d,SAAU,EACf9E,EAAO1L,OAASA,EAChBuQ,GAAmB7E,EAAO3Z,IAAIqF,MAAK,SAAAkI,GAC9B,OAADA,QAAC,IAADA,KAAGyQ,YAAY/P,EAAO4K,gBAE1BI,GAAoBQ,WAAWE,K,2CAGdwD,GACjBvc,KAAKme,UAAY5B,EACjBvc,KAAKwe,gBAAgBpT,SAAQ,SAAAmN,GACzBqF,GAAmBrF,EAAInZ,IAAIqF,MAAK,SAAA8T,GACzB,OAAHA,QAAG,IAAHA,KAAK2F,YAAY3B,W,sCASzB,OAAOpa,OAAOD,OAAOlC,KAAKsY,c,8CAxG7BtR,e,yEAA8B,K,wCAC9BA,e,yEAA0C,Q,uCAC1CA,e,yEAAqC,K,ICnCpByX,GAAtB,WAII,WAAmBC,GAA6B,yBAH7BA,gBAG4B,OAF/CpU,SAE+C,EAC3CtK,KAAK0e,WAAaA,EAClB1e,KAAKsK,IAAMtK,KAAK2e,WAAWC,KAAK5e,MANxC,gGAS6BgB,EAAiBC,GAT9C,0FAUeD,EAAShB,KAAKmL,KAAKlK,GAAUjB,KAAKiB,OAAOA,IAVxD,gHCMO,SAAe4d,GAAtB,mC,8CAAO,WAA0BC,GAA1B,eAAAjb,EAAA,6DACGhG,EADH,yBAECuB,GAAI,EACJ6L,SAAU,GACVU,SAAU,IACPmT,GALJ,IAMClT,UAAU,IAAIK,MAAO8S,YANtB,SAQGpa,GAAGG,MAAM0C,IAAI3J,GARhB,gCASIA,GATJ,4C,sBAYA,SAAemhB,GAAtB,mC,8CAAO,WAA0BF,GAA1B,SAAAjb,EAAA,+EACIc,GAAGG,MAAMma,OAAOH,EAAK1f,GAAI0f,IAD7B,4C,sBAIA,SAAeI,GAAtB,mC,8CAAO,WAAuBjU,GAAvB,SAAApH,EAAA,+EACIc,GAAGG,MAAMqC,MAAM,CAAC8D,aAAW7D,SAD/B,4C,sBAUA,SAAe+X,GAAtB,qC,8CAAO,WAAoCC,EAAkBC,GAAtD,eAAAxb,EAAA,sEACiBc,GAAGG,MAAMqC,MAAM,CAAC8D,SAAUmU,EAAUzT,SAAU0T,IAAUjY,QADzE,YACGkY,EADH,+BAICA,EAAM1T,UAAW,IAAIK,MAAO8S,UAJ7B,SAKOC,GAAWM,GALlB,gCAQIA,GARJ,4C,kDC7BcC,G,gNAMJte,G,yFACcjD,GAAS4J,IAAId,GAAK0Y,U,cAAnCvU,E,OACA/J,GAAS,IAAIkC,IAAkBhB,OAAO,CACxC6I,a,SAEEhK,EAAOkL,KAAKjL,G,uBAEZD,EAAOwe,cAAcpc,I,sKAQpBpC,G,6FAE6BA,EAAOwe,cAAcrc,I,cAAnDvF,E,OACCoN,EAAYpN,EAAZoN,S,SAEUkU,GAAqBlU,EAAUhK,EAAO7B,I,UAAnD0f,E,yCAEqBI,GAAQjU,G,eAAzB6M,E,iBAEE9X,KAAK0e,WAAWgB,MAAMC,gBAAgB1U,EAAUhK,EAAO7B,I,WAExD0Y,E,wBACDrZ,QAAQ6G,IAAR,0BAA+B2F,EAA/B,aAA4ChK,EAAO7B,K,UAClCyf,GAAW,CAAC5T,WAAUU,SAAU,CAAC1K,EAAO7B,M,QAAzD0Y,E,sCAEArZ,QAAQ6G,IAAR,iCAAsC2F,EAAtC,aAAmDhK,EAAO7B,KAC1D0Y,EAASnM,SAAS7P,KAAKmF,EAAO7B,I,UACxB4f,GAAWlH,G,QAErBgH,EAAOhH,E,eAGX7W,EAAO+J,SAAW8T,E,UACZ7d,EAAOkL,KAAK,IAAI9I,I,6GA5Ccob,ICHvBmB,G,gNAKJ3e,G,gOAMFA,G,6EACDA,E,SAAkBjB,KAAK0e,WAAWmB,iBAAgB,G,wCAA3C1T,K,4HAZkBsS,I,UCSlBqB,I,iIAGAC,UAAyB,IAAI9X,I,mDAE/B+X,EAAeC,GAAmC,IAArBC,EAAoB,uDAAJ,GACxDC,aAAaC,oBAAoB3b,MAAK,SAAS4b,GAC5B,YAAXA,GACA,IAAIF,aAAaH,EAAO,CACpBC,OACAK,KAAMJ,S,+EAYOjV,EAAkBoU,G,qGACpC,IAAIjhB,SAAQ,SAACmiB,EAASC,GACzB,IAAM1I,EAAWlJ,MAAMC,KAAK,EAAK4R,eAAe3D,MAAK,SAAA4D,GAAE,OAAIA,EAAGrB,UAAYA,KACpEsB,EAAU,CAAE1V,WAAUoU,UAASkB,UAASC,UAO9C,GALI1I,GACA,EAAK8I,cAAc9I,GAEvB,EAAK2I,cAAc3kB,KAAK6kB,IAEnB,EAAKZ,UAAUc,IAAIxB,GAAU,CAC9B,IAAMyB,EAAM7W,GAAcrI,QAAd,0BAAyCyd,EAAzC,+BAAuEpU,EAAvE,MAAqF,CAC7FC,kBAAkB,EAClB6V,OAAQ,kBAACC,GAAA,EAAD,CACJrf,QAAS,WACTsf,QAAS,WAAKhX,GAAclI,MAAM+e,GAAM,EAAKI,YAAYP,KAFrD,aAOZ,EAAKQ,OAAO,mBAAZ,0BAAmD9B,EAAnD,+BAAiFpU,EAAjF,Y,sIAKO6T,GACfA,EAAKyB,SAAQ,GACbtW,GAAc1I,QAAd,yBAAwCud,EAAK7T,SAA7C,OACAjL,KAAK4gB,cAAc9B,K,iCAGLA,GACdA,EAAK0B,QAAO,GACZvW,GAAcvL,MAAd,2BAAwCogB,EAAKO,QAA7C,OACArf,KAAK4gB,cAAc9B,GACnB9e,KAAK+f,UAAUpZ,IAAImY,EAAKO,W,oCAGNP,GAClB,IAAM/e,EAAMC,KAAKygB,cAAcW,WAAU,SAAAC,GAAC,OAAIA,EAAEhC,UAAYP,EAAKO,WAC7Dtf,GAAO,GACPC,KAAKygB,cAAcnS,OAAOvO,EAAK,O,kDA9DtCiH,e,wEAA0D,M,sCAC1DA,e,wEAAmC,M,ICTnBsa,G,8MACRvgB,QAAiC,CAACoC,I,qGAEvBlC,EAAgBC,G,iEAChCogB,EAAYC,WAAWtgB,G,+KAGTA,EAAgBC,G,iEAC9BogB,EAAYC,WAAWtgB,G,uIAGDA,GACtBA,EAAO6K,SAAWG,KAAKC,U,GAZUpL,ICOlC,SAAe0gB,GAAtB,uC,8CAAO,WAAoBC,EAAoBjiB,EAAckiB,GAAtD,SAAA7d,EAAA,2EAECpF,QAFD,SAEkDkjB,UAAUC,QAAQC,UAFpE,wBAESvc,IAFT,UAEa,8BAFb,sDAIC7G,QAAQC,MAAR,MAJD,oBAMIiG,GAAGC,OANP,KAOCpF,EAPD,KAQCiiB,EARD,UASalV,GAAemV,GAT5B,iCAOCliB,KAPD,KAQCiiB,WARD,KASC5jB,KATD,6BAMc2J,IANd,gBAUA9C,OAAM,SAAAlG,GACLyL,GAAcvL,MAAM,uBACpBD,QAAQC,MAAMF,OAZf,0D,sBAgBA,SAAe4U,GAAtB,qC,8CAAO,WAAoBqO,EAAoBjiB,GAAxC,eAAAqE,EAAA,sEACkCc,GAAGC,OAAOuC,MAAM,CAACsa,aAAYjiB,SAAO4H,QAAQ1C,OAAM,SAAAlG,GACnFyL,GAAcvL,MAAM,wBACpBD,QAAQC,MAAMF,MAHf,YACGH,EADH,iDAOQkO,GAAelO,EAAIR,OAP3B,gCASQ,MATR,4C,sBAaA,SAAeikB,GAAtB,mC,8CAAO,WAA4BL,GAA5B,SAAA5d,EAAA,+EAEec,GAAGC,OAAOuC,MAAM,qBAAqB4a,QAAQ,CAACN,EAAY1b,KAAMic,QAAS,CAACP,EAAY1b,KAAMkc,SAASxb,UAFpH,uCAE+HjG,KAAI,SAAA4X,GAAC,OAAEA,EAAE5Y,SAFxI,uCAICyK,GAAcvL,MAAM,oCACpBD,QAAQC,MAAR,MALD,kBAMQ,IANR,0D,sBAWA,SAAewjB,GAAtB,qC,8CAAO,WAA2BT,EAAoBjiB,GAA/C,SAAAqE,EAAA,+EACIc,GAAGC,OAAOuC,MAAM,CAACsa,aAAYjiB,SAAO4F,UADxC,4C,0BClDc+c,I,GAIhBnb,cAAWob,Q,GAIZ,WAAY5iB,GAAe,yBAPXA,UAOU,yHAHVJ,IAAc,EAGJ,KAFVijB,YAAcpW,KAAKC,MAG/BlM,KAAKR,KAAOA,G,sCAPfwH,e,wEAAqC,M,2CACrCA,e,yEAA6C,Q,sHACsB,M,ICHzD,SAASsb,GAAWC,GAE/B,IADA,IAAM9iB,EAAM,GACZ,MAAgB0C,OAAOqgB,QAAQD,GAA/B,eAAqC,CAAhC,IAAM5V,EAAC,KACJ8V,EAAI9V,EAAE,GAEN8V,aAAa7T,QACb6T,EAAI7T,MAAMC,KAAK4T,IAGnBhjB,EAAIkN,EAAE,IAAM8V,EAEhB,OAAOhjB,ECTJ,SAAeijB,GAAtB,mC,8CAAO,WAA4BC,GAA5B,SAAA9e,EAAA,6DACHpF,QAAQoD,KAAK,kBAAmB8gB,GAD7B,kBAEIhe,GAAGE,UAAUoa,OAAO0D,EAAKvjB,GAAIkjB,GAAWK,KAF5C,4C,sBAKA,SAAeC,GAAtB,mC,8CAAO,WAA8BpjB,GAA9B,iBAAAqE,EAAA,oEACG0e,EADH,2BACkB,IAAIJ,GAAS3iB,IAD/B,IACsCJ,GAAI,QAClCA,GAFR,SAIeuF,GAAGE,UAAU2C,IAAI8a,GAAWC,IAJ3C,cAIGlkB,EAJH,OAKHI,QAAQoD,KAAK,sBAAuBxD,GALjC,kBAMIsG,GAAGE,UAAU+C,IAAI,CAACxI,GAAIf,KAN1B,4C,sBASA,SAAewkB,KAAtB,gC,8CAAO,sBAAAhf,EAAA,+EACIc,GAAGE,UAAU4B,WADjB,4C,sBAIA,SAAeqc,GAAtB,mC,8CAAO,WAA2B1jB,GAA3B,SAAAyE,EAAA,+EACIc,GAAGE,UAAUsC,MAAM,CAAC/H,OAAKgI,SAD7B,4C,sBApBPzC,GAAGE,UAAUke,WAAWZ,I,ICCHa,G,+OAKNH,M,6KAOsBzjB,G,uFACN0jB,GAAY1jB,G,YAA7B6jB,E,wCAEgCC,GAAqB9jB,G,OAA7C6jB,EAASre,O,qBAEnBqe,GAAYA,EAASE,cAAgBF,EAASre,OAAO8Y,SAASuF,EAASE,eACvEF,EAASE,YAAc,M,kBAGpBF,G,8KAOsBN,G,0FACtBD,GAAa,2BACbC,GADY,IAEf/d,OAAQgK,MAAMC,KAAK8T,EAAK/d,QACxBwe,WAAYxU,MAAMC,KAAK8T,EAAKS,eAC7B1e,OAAM,SAAAlG,GAEL,OADAC,QAAQC,MAAMF,IACN,M,gLAQmBgB,G,0FACxBojB,GAAepjB,I,yGC1CT6jB,G,oDAIjB,WAAY3E,GAA6B,IAAD,8BACpC,gBAJK3d,QAAiC,CAAC8B,IAGH,EAFvB6b,gBAEuB,EAEpC,EAAKA,WAAaA,EAFkB,E,mGAKpBzd,EAAgBC,G,0FACzBlB,KAAK0e,WAAW4E,mBAAmBpiB,I,oLAG5BD,EAAgBC,G,uEACxBvB,MAAM,sC,yGAd4BmB,I,+JCIzC,SAASyiB,GAAYjF,GAQxB,IAAD,EACyBkF,IAAMC,SAAS,IADxC,mBACQvJ,EADR,KACcwJ,EADd,KAGOC,EAAc,WAChBrF,EAAMsF,YAMV,OACI,6BACI,kBAACC,GAAA,EAAD,CAAQvd,KAAMgY,EAAMhY,KAAMwd,QAASH,EAAaI,kBAAgB,qBAC5D,kBAACC,GAAA,EAAD,CAAa5kB,GAAG,qBAAqBkf,EAAM0B,OAC3C,kBAACiE,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACK5F,EAAM2B,MAEX,kBAACkE,GAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPjlB,GAAG,OACHklB,MAAOhG,EAAMiG,QACbC,KAAK,OACLC,WAAS,EACTld,MAAO2S,EACPwK,SApBD,SAAC/T,GAChB+S,EAAQ/S,EAAMgU,OAAOpd,WAsBb,kBAACqd,GAAA,EAAD,KACI,kBAAC5D,GAAA,EAAD,CAAQC,QAAS,WACb0C,IACArF,EAAMsF,YACPlJ,MAAM,WAHT,UAMA,kBAACsG,GAAA,EAAD,CAAQC,QAAS,WACb3C,EAAMuG,SAAS3K,GACfwJ,EAAQ,KACThJ,MAAM,WACJ4D,EAAMwG,YAAc,cAU9B,SAASC,GAAczG,GASlC,OACI,6BACI,kBAACuF,GAAA,EAAD,CACIvd,KAAMgY,EAAMhY,KACZwd,QAASxF,EAAMsF,SACfG,kBAAgB,uBAChBiB,mBAAiB,8BAEjB,kBAAChB,GAAA,EAAD,CAAaiB,UAAU,wBAAwB3G,EAAM0B,OACrD,kBAACiE,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAmBe,UAAU,6BACxB3G,EAAM4G,SAGf,kBAACN,GAAA,EAAD,KACI,kBAAC5D,GAAA,EAAD,CAAQC,QAAS3C,EAAMsF,SAAUlJ,MAAM,WAClC4D,EAAM6G,cAAc,UAEzB,kBAACnE,GAAA,EAAD,CAAQC,QAAS3C,EAAM8G,UAAW1K,MAAM,UAAU0J,WAAS,GACtD9F,EAAM+G,eAAe,cCpF9C,IAAMC,GAAc,CAChBC,WAAY,CAERC,SAAU,EACVC,KAAM,IAURC,GAAuB1e,cAAW2e,OAAO,CAC3CC,OAAQ,IACRC,MAAM,EACNvoB,SAAS,IAGb,SAASwoB,KACL9nB,GAAS6J,MAAMf,GAAKif,iBAAkBL,IAAQhhB,MAAMjG,QAAQC,OAMzD,IAAIsnB,GAAc,KAKZC,GAAkB,WAC3B,IAAKD,GAAQ,OAAO,KAEpB,IAAME,EAAuBF,GAAOG,eAAeC,SAC7CC,EAAsB5qB,KAAKoW,MAAMmU,GAAOM,kBACxCC,EAAuBP,GAAOQ,kBAC9BC,EAAkBT,GAAOU,mBAAqBC,KAAQC,YAAYC,OAExE,OAAKX,EAEE,CACHA,eACAG,cACAE,eACAE,UANsB,MAWjBK,GAAyBC,cAAS,WAAO,IAAD,EACnBvD,IAAMC,UAAS,GADI,mBAC1CxK,EAD0C,KACjCuD,EADiC,KAGjDgH,IAAMwD,SAAQ,WACVhpB,GAAS4J,IAAId,GAAKif,kBAAkBthB,KAApC,uCAAyC,WAAOpG,GAAP,SAAAwF,EAAA,sDACjCxF,GACA8D,OAAOC,OAAOsjB,GAAQrnB,GAFW,2CAAzC,yDAKD,IAEH,IAAM4oB,EAAS5e,GAAQT,QAAUD,GAAYmD,MAAQkb,GACjD,yBAAKf,UAAW,uBACZ,kBAAC,GAAD,CAAiBe,OAAQA,KACzB,kBAAC,GAAD,CAAoBA,OAAQA,KAC5B,kBAACkB,GAAD,CAAelB,OAAQA,MAClB,KAEb,OAAO,yBAAKrL,MAAO,CAACwM,cAAe,QAASlC,UAAS,uBAAkBhM,EAAS,UAAU,WACtF,kBAACmO,GAAA,EAAD,CACIpH,MAAO,kBAEP,kBAACqH,GAAA,EAAD,CACI3M,MAAM,UACNuG,QAAS,WAAKzE,GAAYvD,KAE1B,kBAAC,KAAD,CAAagM,UAAS,4BAAuBhM,EAAS,UAAU,cAIxE,yBAAKgM,UAAS,0BAAqBhM,EAAS,UAAU,WACjDgO,EACD,kBAAC,GAAD,CACIpB,KAAMH,GAAOG,KACbvoB,QAASooB,GAAOpoB,QAChBsoB,OAAQF,GAAOE,cAOlB0B,GAAgB,SAAChJ,GAA8D,IAAD,EACtDkF,IAAMC,SAAc,MADkC,mBAChF8D,EADgF,KACnEC,EADmE,KAGvFhE,IAAMiE,WAAU,WACZ,GAAKF,EAAL,CAEAvB,GAASuB,EAEJvmB,MAAUgM,GAAU,IAAIzJ,IAAsB,GAAOmB,MAAMjG,QAAQC,OAExE,IAAMgpB,EAAQzoB,aAAY,WAEtB,IAAMwjB,EAAI8E,EAAYI,YAClBJ,EAAYb,mBAAqBC,KAAQC,YAAYgB,SAAWnF,IAAMiD,GAAOE,SAC7EF,GAAOE,OAASnD,EAChBqD,QAEL,MAEH,OAAO,WACHE,GAAS,KACThnB,cAAc0oB,OAEnB,CAACH,IA2CJ,OAAO,yBAAK5M,MAAO,CAACwM,cAAe,SAC/B,kBAAC,KAAD,CAEInJ,KAAMsH,GACNlmB,GAAI,YACJyoB,QA9CQ,SAAClX,GACb6W,EAAU7W,EAAMgU,SA8CZmD,OA3CO,WACX,IAAMC,EAAO9B,KACT8B,IACAtpB,QAAQ0G,MAAM,cAAe8gB,MAC7BjZ,IAAU,IAAI1J,IAAoBlB,OAAO2lB,IAAO,GAAMrjB,MAAMjG,QAAQC,SAwCpEspB,QApCQ,WACZ,IAAMD,EAAO9B,KACT8B,IACAtpB,QAAQ0G,MAAM,eAAgB8gB,MAC9BjZ,IAAU,IAAI1J,IAAoBlB,OAAO2lB,IAAO,GAAMrjB,MAAMjG,QAAQC,SAiCpE8F,QA7BQ,SAACmM,GACbA,EAAMgU,OAAOsD,aA6BTC,cA1Bc,SAACvX,GAEfA,EAAM9S,OAAS8oB,KAAQC,YAAYuB,OACnC1pB,QAAQoD,KAAK,uBAAwB0lB,EAAaA,EAAYpB,gBAE9DoB,EAAYa,QAAQ9J,EAAMuH,MAC1B0B,EAAYc,WAAW/J,EAAMhhB,SAC7BiqB,EAAYe,UAAUhK,EAAMsH,QAExB2B,EAAYgB,cACZhB,EAAYiB,YAAY,GAExBjB,EAAYkB,cAehBxD,UAAW,sBAMVyD,GAAqB,SAACpK,GAA0B,IAAD,EAC3BkF,IAAMC,UAAS,GADY,mBACjDyB,EADiD,KACzCyD,EADyC,KAoBxD,OAAO,yBAAK1D,UAAW,0BACnB,kBAACjE,GAAA,EAAD,CACIrG,MAAO,CAACD,MAAO,sBAAuB9e,OAAQ,QAC9CqlB,QAAS,kBAAM0H,GAAW,KAF9B,iBAMA,kBAACpF,GAAD,CACIjd,KAAM4e,EACNlF,MAAO,mBACPC,KAAM,4BACNsE,QAAS,eACTM,SA7Ba,SAACrQ,GAElB,GADAmU,GAAW,GACNnU,EAAL,CAEA,IACIpV,EADW,IAAIwpB,gBAAgBpU,GACnB5M,IAAI,SAAW4M,EAE3BpV,EAAGse,SAAS,OAAMte,EAAKoV,EAAM9O,MAAM,KAAK,IAE5C4Y,EAAM0H,OAAO6C,YAAY,CACrBC,KAAM1pB,EACN2pB,SAAU,WACVC,MAAO,EACPC,aAAc,MAiBdrF,SAAU,kBAAM+E,GAAW,IAC3B7D,WAAY,WAKXoE,GAAkB,SAAC5K,GAA0B,IAAD,EACxBkF,IAAMC,UAAS,GADS,mBAC9CyB,EAD8C,KACtCyD,EADsC,KAgBrD,OAAO,yBAAK1D,UAAW,uBACnB,kBAACjE,GAAA,EAAD,CACIrG,MAAO,CAACD,MAAO,kBAAmB9e,OAAQ,QAC1CqlB,QAAS,kBAAM0H,GAAW,KAF9B,cAMA,kBAACpF,GAAD,CACIjd,KAAM4e,EACNlF,MAAO,gBACPC,KAAM,yBACNsE,QAAS,YACTM,SAzBU,SAACrQ,GAEf,GADAmU,GAAW,GACNnU,EAAL,CAEA,IAAM2U,EAAS,IAAIP,gBAAgBpU,EAAM9O,MAAM,KAAK,IAAM,IACtDtG,EAAK+pB,EAAOvhB,IAAI,MAAQ4M,EAAM4U,UAAU5U,EAAM6U,YAAY,KAAK,EAAG7U,EAAM8U,QAAQ,MAChFC,EAAOvsB,SAASmsB,EAAOvhB,IAAI,MAAQ,KAEnCxI,EAAGse,SAAS,OAAMte,EAAKoV,EAAM9O,MAAM,KAAK8O,EAAM9O,MAAM,KAAKnJ,OAAO,IAEpE+hB,EAAM0H,OAAOwD,aAAapqB,EAAImqB,KAgB1B3F,SAAU,kBAAM+E,GAAW,IAC3B7D,WAAY,WAMXoC,GAAgBH,cAAS,SAACzI,GAQnC,OAAO,kBAAC8I,GAAA,EAAD,CAASpH,MAAO,WACnB,kBAACyJ,GAAA,EAAD,CACIxS,SAAU,kBAAC,KAAD,CAAagO,UAAS,8BAAyBS,GAAOpoB,QAAU,SAAU,cACpF2jB,QAVO,WACXyE,GAAOpoB,SAAWooB,GAAOpoB,QACzBghB,EAAM0H,OAAOqC,WAAW3C,GAAOpoB,SAE/BwoB,YCnQa4D,G,oDAIjB,WAAYhL,GAA6B,IAAD,8BACpC,gBAJK3d,QAAiC,CAACuC,GAAmBC,IAGtB,EAFvBmb,gBAEuB,EAEpC,EAAKA,WAAaA,EAFkB,E,mGAMpBzd,EAAgBC,G,oEAC3B8kB,G,uBACD/b,GAAcrI,QAAQ,4B,8BAGtBV,EAAOulB,O,uBACPT,GAAO2D,a,0BAGX3D,GAAO4D,gBAAgB1oB,EAAOqlB,cAC9BP,GAAOwD,aAAa,CAChBK,QAAS3oB,EAAOglB,aAChB+C,aAAc/nB,EAAOmlB,c,+KAIXplB,EAAgBC,G,4EAC1BA,aAAkBqC,I,qBACZumB,EAAS7D,M,gCAGLhlB,EAAOkL,MAAK,IAAI7I,IAAoBlB,OAAO0nB,I,mCAG/C,IAAInqB,MAAM,4C,yGAlCkBmB,ICHzBipB,G,gNAKJ9oB,G,gOAMFA,G,4EACD6oB,EAAS7D,M,gCAGLhlB,EAAOkL,MAAK,IAAI7I,IAAoBlB,OAAO0nB,I,uGAftBrL,I,UCAvCvM,YAAc8X,WAAa9X,eAAiB+X,QAErC,IAAMC,GAAO,IAAIhY,gBAiBxB,WACI,IAAMiY,EAASnuB,SAASC,cAAc,UAChCV,EAAM4uB,EAAOjuB,WAAW,MACxBkuB,EAXV,WACI,IAAK,IAAI9uB,EAAE,EAAGA,EAAI,GAAIA,IAClB,GAAIG,KAAK4uB,IAAI/uB,EAAG,G1BZI,K0BYkB,EAAG,OAAOG,KAAK4uB,IAAI/uB,EAAG,GAGhE,OADAmD,QAAQkM,KAAK,sDACNsR,IAMKqO,GACZH,EAAOxuB,MAAQyuB,EACfD,EAAOvuB,OAASwuB,EAChB7uB,EAAIuX,uBAAwB,EAC5BvX,EAAIoa,UAAU,EAAE,EAAEyU,EAAIA,GACtB7uB,EAAIyY,UAAY,wBAEhB,IAAK,IAAItX,EAAE,EAAGA,EAAIjB,KAAKC,KAAK0uB,E1B5BJ,I0B4ByB1tB,IAC7C,IAAK,IAAIG,EAAE,EAAGA,EAAIpB,KAAKC,KAAK0uB,E1B7BR,I0B6B6BvtB,IAC7CtB,EAAI0Y,SAAS,E1B9BG,G0B8BDvX,EAAgB0tB,EAAK,GAEpC7uB,EAAI0Y,S1BhCY,G0BgCHpX,EAAe,EAAG,EAAGutB,GAG1C,OAAOrX,WAAQlE,KAAKsb,GAlCkBI,GAAmB,IAAK,KAyC3D,SAAS/N,GAAWgO,GACvBN,GAAKjR,QAAUuR,EAzCnBN,GAAKzP,aAAc,EACnByP,GAAK9X,SAAStI,IAAI,EAAE,GACpBogB,GAAKjR,SAAU,EACfiR,GAAK7N,MAAQ,GA0Cb9W,OAAOklB,gBAAkBjO,GCnDlB,IACHkO,GAAK,EAAGC,GAAK,EAAG/pB,GAAI,EAAGuM,GADM,SAE7BsE,GAAK,EAAGM,GAAK,EAEjB1C,GAAc6G,kBAAmB,EAE1B,IAAMqO,GAAU,IAAIrS,YAKpB,SAAS0Y,GAAW/tB,EAAWH,GAClC+U,GAAK5U,EACLkV,GAAKrV,EACLguB,G3BVwB,G2BUnB7tB,GAAoB+D,G3BVD,I2BUiB,EACzC+pB,G3BXwB,G2BWnBjuB,GAAoBkE,G3BXD,I2BWiB,EACzC2jB,GAAQnS,SAAStI,IAAI4gB,GAAIC,IAStB,SAASE,GAAQld,GACpB/M,GAA2B,GAAtBnF,KAAKiW,IAAI,EAAG/D,GAAO,G3BtBA,M2BuBxBmd,KANAF,GAAWnZ,GAAIM,IAUZ,SAASoK,GAASzB,GACrBvN,GAAIuN,EACJoQ,KAOJ,SAASA,KACLvG,GAAQzV,QACRyV,GAAQwG,UAAU,EAAG5d,IACrBoX,GAAQxJ,SAAS,EAAG,EAAGna,GAAGA,IApC9B2jB,GAAQ7N,OAAS3H,GAAeic,QAChCH,GAAQ,GACRxb,GAAcgI,SAASkN,ICavB,IAAI0G,IAAc,EACZC,GAAM,IAAIhZ,eAAiB,CAAEiZ,SAAUnvB,SAASikB,KAAMmL,gBAAiB,UAC7EF,GAAIG,KAAKC,UAAU3kB,IAAI,oBACvB3K,SAASikB,KAAKsL,YAAYL,GAAIG,MAE9BH,GAAIG,KAAKG,iBAAiB,eAAe,SAACna,GAEtC,OADAA,EAAGoa,kBACI,KAGXvZ,YAAc8X,WAAa9X,eAAiB+X,QAG5C,ICnCYyB,GDmCNC,GAAW,IAAIC,KAAS,CAC1BC,YAAaX,GAAIG,KAAKS,YACtBC,aAAcb,GAAIG,KAAKW,aACvBC,W5B/ByBra,K4BgCzBsa,Y5BhCyBta,O4BuG7B,SAASua,GAAe3H,EAAW7X,GAC/B,IAAMyf,EAASzf,EAAEgY,OAAO0H,wBAClBxvB,EAAI8P,EAAE2f,QAAUF,EAAOG,KACvB7vB,EAAIiQ,EAAE6f,QAAUJ,EAAOK,IACvB/rB,EAAKirB,GAASY,KAAQ1vB,EAAEuvB,EAAOzwB,MAASgwB,GAASe,yBACjD/rB,EAAKgrB,GAASc,IAAO/vB,EAAE0vB,EAAOxwB,OAAU+vB,GAASgB,0BAEvDpc,GAAayB,KAAKwS,EAAM,CACpB/S,GAAIhW,KAAKkW,IAAIC,GAAmBnW,KAAKiW,IAAI,EAAGjW,KAAKoW,MAAMnR,E5BlHnC,M4BmHpBqR,GAAItW,KAAKkW,IAAIC,GAAmBnW,KAAKiW,IAAI,EAAGjW,KAAKoW,MAAMlR,E5BnHnC,Q4B4HrB,SAASisB,GAAoBC,GAChC5B,GAAc4B,EACdlB,GAASmB,OAASD,EAMf,SAASE,KACZ,MAAO,CACHtb,GAAIhW,KAAKoW,OAAO8Z,GAASY,KAAOZ,GAASe,yBAAyB,G5BtI9C,I4BuIpB3a,GAAItW,KAAKoW,OAAO8Z,GAASc,IAAMd,GAASgB,0BAA0B,G5BvI9C,K4BwJrB,SAASK,KAA8B,IAAjBC,EAAgB,wDACzC/B,GAAIgC,SACJvB,GAASuB,OAAOhC,GAAIG,KAAKS,YAAaZ,GAAIG,KAAKW,cAC/CL,GAASnc,OAAQ,EAEbyd,GACAtB,GAASwB,WAAWC,KAAiBA,MAxH7ClC,GAAImC,MAAMhW,SAASsU,IACnBA,GACK2B,OAEAC,SACAC,MAAM,CAACC,OAAQ,KACfC,WAAW,CAAEC,SAAU,MACvBC,MAAM,CAACC,UAAW,QAClBC,UAAU,CAACC,SAAU,GAAKC,SAAU,IACpCb,WAAWC,KAAiBA,MAIjCzB,GAAStU,SAASnI,IAClByc,GAAStU,SAAS4W,IAClBtC,GAAStU,SAASjI,IAClBuc,GAAStU,SAAShI,IAElBL,GAAOkf,aAAahf,IAAe,GACnCF,GAAOmf,KAAKxC,GAASyC,oBAGrBlc,UAAYmc,OAAO1nB,KAAI,YACfglB,GAASnc,O5BrBNF,M4BsBHN,GAAOmf,KAAKxC,GAASyC,oBACrBzC,GAASnc,OAAQ,EACjBD,IAAa,GAGb0e,GAAU7b,SAAStI,IAAIrO,KAAKiW,IAAI,EAAGia,GAASY,KAAOZ,GAASY,K5BnExC,I4BmE8D9wB,KAAKiW,IAAI,EAAGia,GAASc,IAAMd,GAASc,I5BnElG,K4BoEpBwB,GAAUtyB,MAAQF,KAAKkW,I5BjEFC,K4BiEqB+Z,GAASe,yB5BpE/B,I4BqEpBuB,GAAUryB,OAASH,KAAKkW,I5BlEHC,K4BkEsB+Z,GAASgB,0B5BrEhC,Q4B0E5BpnB,OAAOimB,iBAAiB,UAAU,WAC9B,IAAM/uB,EAAIswB,KACVC,IAAa,GACbrB,GAASwB,W5B7Ee,G4B6EJ1wB,EAAEgV,GAAgBwK,G5B7Ed,G4B6E8Bxf,EAAEsV,GAAgBkK,OAE5E1W,OAAOimB,iBAAiB,QAAQ,WAC5BwB,IAAa,MAGjBzc,GAAa3J,GAAG,SAAS,SAAAyK,GACrB2Z,GAAmB3Z,EAAGI,GAAKJ,EAAGU,OAIlCmZ,GAAIG,KAAKG,iBAAiB,aAAa,SAAA7e,GAEnCwf,GAD0B,IAAbxf,EAAE2hB,OAAe,oBAAmC,IAAb3hB,EAAE2hB,OAAe,aAAe,mBAC/D3hB,MAGzBue,GAAIG,KAAKG,iBAAiB,cAAc,WACpCG,GAASmB,OAAS7B,MAEtBC,GAAIG,KAAKG,iBAAiB,cAAc,WACpCG,GAASmB,OAAQ,KAGrBvnB,OAAOimB,iBAAiB,WAAW,SAAA7e,GAE/Bwf,GAD0B,IAAbxf,EAAE2hB,OAAe,kBAAiC,IAAb3hB,EAAE2hB,OAAe,WAAa,iBAC3D3hB,M,SC1Gb+e,K,gBAAAA,E,sBAAAA,E,aAAAA,Q,KAOL,I,qBAAM6C,GAAb,WAaI,WAAY/J,GAAoB,yBAZfgK,QAYc,OAXvBC,WAWuB,OAVvBC,WAAqB,EAUE,KATvBC,OAAiB,EASM,KARvBC,OAAiB,EAQM,KAPvBC,OAAiB,EAOM,KANvBC,OAAiB,EAMM,KALvBC,QAAkB,EAKK,KAJvBtd,GAAa,EAIU,KAHvBM,GAAa,EAGU,KAFvBqI,OAAQ,EAGZpa,KAAKyuB,MAAQjK,EACbxkB,KAAKwuB,GAAK,IAAIlU,YACdta,KAAKwuB,GAAG9X,OAAS3H,GAAeigB,OAhBxC,iDAmBSxK,GAGD,OAFAxkB,KAAKyuB,MAAQjK,EACbxkB,KAAKivB,SACEjvB,OAtBf,iCAyBeiZ,GAEP,OADAjZ,KAAKwuB,GAAGvV,QAAUA,EACXjZ,OA3Bf,2BAoCSkvB,GAAuC,IAAnBC,EAAkB,wDAAH,EAIpC,OAHAnvB,KAAK8uB,O7BxCe,G6BwCNI,EACdlvB,KAAK+uB,Q7BzCe,I6ByCJI,GAAe,EAAIA,EAAcD,GACjDlvB,KAAKivB,SACEjvB,OAxCf,6BA2CWU,GAGH,OAFAV,KAAK8uB,OAAS9uB,KAAK+uB,QAAUruB,EAC7BV,KAAKivB,SACEjvB,OA9Cf,4BAiDU/C,GAMF,OALI+C,KAAK2uB,SAAW1xB,IAChB+C,KAAK2uB,OAAS1xB,EACd+C,KAAKivB,UAETjvB,KAAKivB,SACEjvB,OAvDf,mCA0DiB/C,GAAmC,IAAtBof,EAAqB,uDAAL,GAItC,OAHArc,KAAK4uB,MAAQ3xB,EACb+C,KAAK6uB,OAASxS,EACdrc,KAAKivB,SACEjvB,OA9Df,gCAiEcovB,GAKN,OAJIpvB,KAAK0uB,aAAeU,IACpBpvB,KAAK0uB,WAAaU,EAClBpvB,KAAKivB,UAEFjvB,OAtEf,+BAmFQ,OATAA,KAAKwuB,GAAG1f,QACR9O,KAAKwuB,GAAGzD,UAAU/qB,KAAK0uB,WAAY1uB,KAAK2uB,QACpC3uB,KAAK4uB,OAAS,IACd5uB,KAAKwuB,GAAG1T,UAAU9a,KAAK4uB,MAAO5uB,KAAK6uB,QACnC7uB,KAAK8qB,OACL9qB,KAAKwuB,GAAGxT,WAEZhb,KAAKwuB,GAAGzD,UAAU/qB,KAAK0uB,WAAY1uB,KAAK2uB,QACxC3uB,KAAK8qB,OACE9qB,OAnFf,6BAuFQ,GAAKA,KAAK8uB,OACV,OAAQ9uB,KAAKyuB,OACT,KAAK/C,GAAY2D,OACbrvB,KAAKwuB,GAAGc,WAAWtvB,KAAK8uB,OAAQ9uB,KAAK8uB,OAAQ9uB,KAAK8uB,QAClD9uB,KAAKwuB,GAAGe,MAAM1yB,EAAImD,KAAKwuB,GAAG7yB,MAAM,EAChCqE,KAAKwuB,GAAGe,MAAM7yB,EAAIsD,KAAKwuB,GAAG5yB,OAAO,EACjC,MACJ,KAAK8vB,GAAY8D,UACbxvB,KAAKwuB,GAAGzT,SAAS,EAAG,EAAG/a,KAAK8uB,OAAQ9uB,KAAK+uB,SACzC/uB,KAAKwuB,GAAGe,MAAM1yB,EAAImD,KAAKwuB,GAAG7yB,MAAM,EAChCqE,KAAKwuB,GAAGe,MAAM7yB,EAAIsD,KAAKwuB,GAAG5yB,OAAO,EACjC,MACJ,KAAK8vB,GAAY+D,KACbzvB,KAAKwuB,GAAGkB,YAAY,CAChB,EAAG1vB,KAAK8uB,OAAO,EACf9uB,KAAK8uB,OAAQ,EACb9uB,KAAK8uB,OAAQ9uB,KAAK8uB,OAClB,EAAG9uB,KAAK8uB,OAAO,IAEnB9uB,KAAKwuB,GAAGe,MAAM1yB,EAAI,EAClBmD,KAAKwuB,GAAGe,MAAM7yB,EAAIsD,KAAK8uB,OAAO,KA3G9C,6BAiHWrd,EAAYM,GAQf,OAPA/R,KAAKyR,GAAKA,EACVzR,KAAK+R,GAAKA,EACL/R,KAAKoa,QACNpa,KAAKoa,OAAQ,EACb/K,GAAcgI,SAASrX,KAAKwuB,KAEhCxuB,KAAKwuB,GAAGpc,SAAStI,I7B3HG,G6B2HC9J,KAAKyR,G7B3HN,G6B2HyBzR,KAAK+R,IAC3C/R,OAzHf,+BA4HaU,EAAYC,GAGjB,OAFAX,KAAK2vB,OAAOjvB,E7BhIQ,G6BgISC,E7BhIT,I6BiIpBX,KAAKwuB,GAAGpc,SAAStI,IAAIpJ,EAAIC,GAClBX,OA/Hf,gCAkIsBU,EAAYC,GAC1B,IAAIivB,E7BtIgB,G6BsIX5vB,KAAKyR,GACVoe,E7BvIgB,G6BuIX7vB,KAAK+R,GACV+d,EAAKr0B,KAAKkW,I7BxIM,G6BwIYlW,KAAKiW,IAAI,EAAGhR,EAAKkvB,IAC7CG,EAAKt0B,KAAKkW,I7BzIM,G6ByIYlW,KAAKiW,IAAI,EAAG/Q,EAAKkvB,IAEjD7vB,KAAKwuB,GAAGpc,SAAStI,IAAI8lB,EAAGE,EAAID,EAAGE,KAxIvC,kCA2IgBC,GAER,OADAhwB,KAAKwuB,GAAGyB,SAAWD,EACZhwB,OA7If,0CAuKQ,MAAO,CACHkwB,OAAQlwB,KAAK2uB,OACbpV,KAAMvZ,KAAK4uB,MACXuB,UAAWnwB,KAAK6uB,OAChBO,UAAWpvB,KAAK0uB,cA3K5B,gCAgLQ,OAAO1uB,KAAKyuB,QAhLpB,8BAmLYvpB,GACJlF,KAAKwuB,GAAGrc,aAAc,EACtBnS,KAAKwuB,GAAG5nB,GAAG,QAAS1B,KArL5B,mCAgMiBxE,EAAYC,GAAgD,IAApCyvB,EAAmC,wDAArBC,EAAqB,uDAAV,QACtDrwB,KAAKyuB,QAAU/C,GAAY+D,MAAMzvB,KAAKswB,UAAU5vB,EAAIC,GAExD,IAAI4vB,EAAM90B,KAAK+0B,MAAM7vB,EAAKX,KAAKwuB,GAAGpc,SAAS1V,EAAGgE,EAAKV,KAAKwuB,GAAGpc,SAASvV,GAKpE,OAJIuzB,IACAG,EAAM90B,KAAKoW,MAAM0e,EAAIF,GAAYA,GAErCrwB,KAAKywB,YAAYF,GACVvwB,OAxMf,+BA+MQqP,GAAc2H,YAAYhX,KAAKwuB,IAC/BxuB,KAAKwuB,GAAGjb,QAAQ,CACZ0D,UAAU,EACVvE,SAAS,MAlNrB,+BAkJQ,OAAO1S,KAAKwuB,GAAGyB,WAlJvB,+BAuJQ,MAAO,CACHvvB,GAAIV,KAAKwuB,GAAGpc,SAASvV,EACrB8D,GAAIX,KAAKwuB,GAAGpc,SAAS1V,EACrB+U,GAAIzR,KAAKyR,GACTM,GAAI/R,KAAK+R,MA3JrB,iCAgKQ,MAAO,CACH2e,GAAI1wB,KAAK8uB,O7BpKO,G6BqKhB6B,GAAI3wB,KAAK+uB,Q7BrKO,Q6BG5B,KCPM3V,GAAoC,CACtCC,WAAY,YACZC,SAAU,GACVC,KAAM,SAIGqX,GAAb,WAUI,WAAY1W,GAAmG,IAArF2W,EAAoF,uDAApD,GAAIC,EAAgD,uDAAnC,EAAUC,EAAyB,uDAAf,GAAKb,EAAU,uDAAH,EAAG,yBAT7FY,gBAS6F,OAR7FzU,WAQ6F,OAP7FmS,GAAK,IAAIlU,YAOoF,KAN7FzG,SAM6F,OAL7Fqc,YAK6F,OAJtG9V,OAAQ,EAI8F,KAHtG3I,GAAK,EAGiG,KAFtGM,GAAK,EAGT/R,KAAK8wB,WAAaA,EAClB9wB,KAAKqc,MAAQ0U,EACb/wB,KAAK6T,IAAM,IAAIqH,QAAKhB,EAAT,2BAAmBd,IAAiByX,IAC/C7wB,KAAKkwB,OAASA,EACdlwB,KAAKwuB,GAAG9X,OAAS3H,GAAeiiB,WAChChxB,KAAK6T,IAAI6C,OAAS3H,GAAekiB,WACjCjxB,KAAK6T,IAAI0G,WAAa,EAjB9B,mDAqBQva,KAAKwuB,GAAG1T,UAAU9a,KAAK8wB,WAAY9wB,KAAKqc,OACxCrc,KAAKwuB,GAAGzT,SAAS,EAAG,E9BzBA,O8B0BpB/a,KAAKwuB,GAAGxT,UACRhb,KAAKwuB,GAAGzD,UAAU,EAAG/qB,KAAK8wB,YACtB9wB,KAAKkwB,QAAU,GACflwB,KAAKwuB,GAAGzT,SAAS,EAAG,E9B7BJ,S8BG5B,4BA8BWtJ,EAAYM,GASf,OARK/R,KAAKoa,QACNpa,KAAKoa,OAAQ,EACbpa,KAAK8qB,OACLzb,GAAcgI,SAASrX,KAAKwuB,GAAIxuB,KAAK6T,MAEzC7T,KAAKyR,GAAKA,EACVzR,KAAK+R,GAAKA,EACV/R,KAAKkxB,iBACElxB,OAvCf,uCA2CQ,IAAMU,E9B9Cc,G8B8CTV,KAAKyR,GAAiB9Q,E9B9Cb,G8B8CkBX,KAAK+R,GAC3C/R,KAAKwuB,GAAGpc,SAAStI,IAAIpJ,EAAIC,GACzBX,KAAK6T,IAAIzB,SAAStI,IAAIpJ,EAAKub,GAAiBjc,KAAK6T,IAAIlY,MAAM,EAAGgF,EAAKsb,GAAiBjc,KAAK6T,IAAIjY,OAAO,KA7C5G,8BAgDYse,GAGJ,OAFAla,KAAK6T,IAAIqG,KAAOA,EAChBla,KAAKkxB,iBACElxB,OAnDf,iCAsDeiZ,GAGP,OAFAjZ,KAAK6T,IAAIoF,QAAUA,EACnBjZ,KAAKwuB,GAAGvV,QAAUA,EACXjZ,OAzDf,+BA6DQqP,GAAc2H,YAAYhX,KAAKwuB,GAAIxuB,KAAK6T,KACxC7T,KAAKwuB,GAAGjb,QAAQ,CACZ0D,UAAU,EACVvE,SAAS,EACTuI,aAAa,IAEjBjb,KAAK6T,IAAIN,QAAQ,CACb0D,UAAU,EACVvE,SAAS,EACTuI,aAAa,QAtEzB,KCIqBkW,I,0DAMjB,WAAYzS,GAA6B,IAAD,8BACpC,gBANK3d,QAAiC,CAACyC,IAKH,EAJvBkb,gBAIuB,EAEpC,EAAKA,WAAaA,EAFkB,E,mGAMpBzd,EAAgBC,G,iEAChClB,KAAKoxB,YAAYnwB,EAAO7B,GAAI8B,G,oLAGdD,EAAgBC,G,iEAC9BlB,KAAKoxB,YAAYnwB,EAAO7B,GAAI8B,GAC5B8L,GAAU9L,GAAQ,EAAMD,G,2IAGR7B,EAAYiyB,GAA0B,IAAD,OAC/CC,EAAQH,EAAeI,WAAWnyB,GACpCkyB,IACAA,EAAME,OAAO7Y,SACb2Y,EAAMG,MAAM9Y,gBACLwY,EAAeI,WAAWnyB,IAEjCiyB,GAAOA,EAAIpY,UACXkY,EAAeI,WAAWnyB,GAAM,CAC5BqyB,MAAO,IAAIlD,GAAQ8C,EAAI7M,MAClB9J,MAAM2W,EAAI3W,OACV+V,YAAYY,EAAIK,OAChBhjB,KAAK2iB,EAAIX,GAAIW,EAAIV,IACjBgB,SAASN,EAAI3wB,GAAI2wB,EAAI1wB,IACrByuB,UAAUiC,EAAIjC,WACdwC,aAAaP,EAAI9X,KAAM8X,EAAIhV,OAC3BG,WAAW2U,EAAeU,iBAC/BL,OAAQ,IAAIZ,GAAiB,EAAPS,EAAIX,GAAM,MAAM1U,MAAMqV,EAAI5f,GAAI4f,EAAItf,IAAIyK,WAAW2U,EAAeU,kBAEtF7wB,MACAmwB,EAAeI,WAAWnyB,GAAIqyB,MAAMxQ,SAAQ,WACxCkQ,EAAeW,YAAYX,EAAeI,WAAWnyB,GAAIqyB,OAAO,GAChE,EAAKL,YAAYhyB,EAAI,a,mCAMXqyB,EAAgBxY,GACtC,IAAMpL,EAAK4jB,EAAMM,oBACXV,GAAM,IAAI7tB,IAAgBpB,OAAO,CACnCoiB,KAAMiN,EAAMO,UACZtxB,GAAI+wB,EAAMrf,SAAS1R,GACnBC,GAAI8wB,EAAMrf,SAASzR,GACnB+vB,GAAIe,EAAMQ,WAAWvB,GACrBC,GAAIc,EAAMQ,WAAWtB,GACrBe,MAAOD,EAAMxB,SACbvV,MAAO7M,EAAGqiB,OACVd,UAAWvhB,EAAGuhB,UACd7V,KAAM1L,EAAG0L,KACT8C,MAAOxO,EAAGsiB,UACV1e,GAAIggB,EAAMrf,SAASX,GACnBM,GAAI0f,EAAMrf,SAASL,GACnBkH,YAIJ,OADAxa,QAAQ6G,IAAI2T,EAASoY,GACdrkB,GAAUqkB,GAAK,K,mCAOC9U,GACvBvc,KAAK6xB,gBAAkBtV,EACvB,cAAgBpa,OAAOD,OAAOivB,EAAeI,YAA7C,eAA0D,CAArD,IAAMW,EAAC,KACRA,EAAET,MAAMjV,WAAWD,GACnB2V,EAAEV,OAAOhV,WAAWD,Q,GA/EYzb,I,GAGjBywB,WAA8C,G,GAC3CM,iBAAkB,E,wCAA3C7qB,gB,qKCUgBmrB,I,cASjB,aAAe,yBARR3kB,aAQO,OAPP8K,cAOO,yCALG8Z,eAKH,OAJGtqB,cAIH,OAHE4X,WAGF,uCACV1f,KAAKwN,QAAU,IAAIgK,GACnBxX,KAAKsY,SAAW,IAAIqF,GACpB3d,KAAK0f,MAAQ,IAAII,GAGjB9f,KAAKoyB,UAAY,CACb,IAAI7S,GAAevf,MACnB,IAAI4f,GAAU5f,MACd,IAAI+pB,GAAU/pB,OAElBA,KAAK8H,SAAW,CACZ,IAAIyF,GAAkBvN,KAAKwN,SAC3B,IAAIgB,GAAoBxO,KAAKwN,SAC7B,IAAI6K,GAAoBrY,KAAKsY,UAC7B,IAAIgJ,GACJ,IAAI+B,GAAmBrjB,MACvB,IAAI0pB,GAAiB1pB,MACrB,IAAImxB,GAAenxB,O,kLAUvBvB,QAAQ0G,MAAM,iC,SAERhH,E,cAENk0B,IAA2B,G,KAE3B5zB,Q,SAAwCqK,K,2BAAhCxD,I,UAAI,qB,QAENgtB,EAAO/sB,OAAOC,SAAS8sB,KAAKxd,QAAQ,IAAK,K,kCAEhChM,K,4BAAewpB,E,8CAEhBtyB,KAAKuyB,Y,iDAGLvyB,KAAKwyB,YAAYF,G,QAG/BtyB,KAAKyyB,OAAQ,EAGbltB,OAAOkL,QAAQiiB,UAAU,KAAM12B,SAASgkB,MAAOza,OAAOC,SAASC,MAC/DF,OAAOimB,iBAAiB,YAAY,WAChCjmB,OAAOkL,QAAQiiB,UAAU,KAAM12B,SAASgkB,MAAOza,OAAOC,SAASC,SAEnEF,OAAOimB,iBAAiB,gBAAgB,WACpCmH,KACA,EAAKF,OAAQ,K,qQAKjBE,KACA3yB,KAAK0f,MAAMe,cAAcrV,SAAQ,SAAAwnB,GAAE,OAAI,EAAKlT,MAAMmT,WAAWD,M,KAE7Dn0B,Q,SAAuCqK,K,+BAA/BxD,I,UAAI,oB,eACiBwD,K,cAA7BvD,OAAOC,SAAS8sB,K,OAEhBtyB,KAAK8H,SAASsD,SAAQ,SAAAvK,GAAC,OAAIA,EAAEiyB,SAAQ,MACrCH,GAAuB3yB,KAAK8H,SAAU9H,KAAKoyB,W,UAErCO,K,kLAGeI,G,mFACrBJ,KACA3yB,KAAK0f,MAAMe,cAAcrV,SAAQ,SAAAwnB,GAAE,OAAI,EAAKlT,MAAMmT,WAAWD,MAE7Dn0B,QAAQ6G,IAAI,sBAAuBytB,GACnCxtB,OAAOC,SAAS8sB,KAAOS,EAEvB/yB,KAAK8H,SAASsD,SAAQ,SAAAvK,GAAC,OAAIA,EAAEiyB,SAAQ,MACrCH,GAAuB3yB,KAAK8H,SAAU9H,KAAKoyB,W,SAErCO,GAAqBI,G,gLAWRvzB,G,0EACdQ,KAAKijB,S,0CAAiB,G,uBACrB9kB,E,cAEN6B,KAAKijB,SAASE,YAAc3jB,EAC5BQ,KAAKwN,QAAQoK,cAAe,EAC5B5X,KAAKsY,SAASuF,SAAU,E,SAEaqF,GAAaljB,KAAKijB,SAAS7jB,GAAII,G,UAA9DkiB,E,kDAEa,G,yBAEb1hB,KAAKsjB,mBAAmB5B,G,oBAE9B1U,G,UAAgBhN,KAAK6f,iBAAgB,G,0CAAQ,GAAMnb,MAAMjG,QAAQC,OAEjEsB,KAAKwN,QAAQoK,cAAe,EAC5B5X,KAAKsY,SAASuF,SAAU,E,mBAEjB,G,0LAGqBmV,G,4EAC5BhzB,KAAKwN,QAAQylB,aAAaD,GAE1BhzB,KAAKsY,SAASkG,gBAAgBpT,SAAQ,SAAAuB,GAAC,OAAI,EAAK2L,SAASK,OAAOhM,EAAEvN,IAAI,MACtE4zB,EAAG1a,SAASlN,SAAQ,SAAAmN,GAChB,IAAMlL,EAAS,IAAIvN,GAAOyY,EAAIlL,OAAOjO,GAAImZ,EAAIlL,OAAOtN,KACpD,EAAKuY,SAASG,UAAUpL,EAAxB,2BACOkL,GADP,IAEIlL,YACD,M,sRAIkB6lB,I,iCACnBvlB,EAAQxL,OAAOD,OAAOlC,KAAKwN,QAAQ2lB,gBAAgBC,O,KAC9C,IAAIvwB,G,SAA0B0L,aAAiBZ,G,2BAApDqlB,E,KAAsB5wB,O,iBAEzBkW,SAAWtY,KAAKsY,SAASkG,gBAAgBxG,QAAO,SAAArL,GAAC,OAAEumB,GAAevmB,EAAEsM,WAASzY,KAAI,SAAAmM,GAChF,IAAMU,GAAS,IAAI/K,IAAcF,OAAO,CAAChD,GAAIuN,EAAEU,OAAOjO,GAAIW,IAAK4M,EAAEU,OAAOtN,MACxE,OAAO,IAAI2C,IAAcN,OAAlB,2BACAuK,GADA,IAEHU,SACA8L,OAAQvK,MAAMC,KAAKlC,EAAEwM,c,kBAItB6Z,G,2PAIFhzB,KAAKijB,UAAajjB,KAAKijB,SAASE,Y,0CAAoB,G,uBAExCnjB,KAAK6f,iBAAgB,G,cAAhCmT,E,gBACA9P,GAAaljB,KAAKijB,SAAS7jB,GAAIY,KAAKijB,SAASE,YAAa6P,G,cAEhEhzB,KAAKwN,QAAQoK,cAAe,EAC5B5X,KAAKsY,SAASuF,SAAU,E,UAElBmF,GAAeN,aAAa1iB,KAAKijB,U,kCAEhC,G,kLAGcA,EAAoBzjB,G,6EACnCO,EAAMkjB,EAASre,OAAO0kB,QAAQ9pB,IAE1B,G,0CACC,G,cAGXyjB,EAASre,OAAO0J,OAAOvO,EAAK,GAExBkjB,EAASE,cAAgB3jB,IACzByjB,EAASE,YAAc,M,SAGrBD,GAAoBD,EAAS7jB,GAAII,G,uBACjCwjB,GAAeN,aAAaO,G,iCAE3B,G,0IAxFP,OAAO0P,GAAqB/qB,QAAUF,GAAc8C,c,0CA5FvDxD,e,yEAAmC,K,wCAInCA,e,yEAA4C,Q,6FC7BnBqsB,GAK1B,WAAmB3U,GAA6B,yBAJvBlf,UAIsB,OAHtB8gB,UAGsB,OAF5B5B,gBAE4B,EAC3C1e,KAAK0e,WAAaA,GCXI4U,G,iDAClBC,MAAe,G,oDAInBvzB,KAAKuzB,MAAMnoB,SAAQ,SAAAvK,GAAC,OAAIA,OACxB2yB,GAAU,MACVxzB,KAAKyzB,c,+BAILD,GAAUxzB,MACVA,KAAK0zB,a,+BAIUxuB,GAEf,OADAlF,KAAKuzB,MAAMz3B,KAAKoJ,GACTA,I,yFAlBeouB,GAEZK,aAAc,EA4BhCpuB,OAAOimB,iBAAiB,WAAW,SAAAoI,GAAO,IAAD,GACrC,UAAIA,EAAGC,YAAP,aAAI,EAASx0B,WAAW,YACpBi0B,GAAWK,aAAc,EACrBG,IACAA,GAAOC,mBAKnBxuB,OAAOimB,iBAAiB,SAAS,SAAAoI,GAAO,IAAD,GACnC,UAAIA,EAAGC,YAAP,aAAI,EAASx0B,WAAW,YACpBi0B,GAAWK,aAAc,EACrBG,IACAA,GAAOE,qBAMnB,I,MC3CKC,GD2CDH,GAA0B,KAEvB,SAASN,GAAUU,GACtBJ,GAASI,G,SC9CRD,O,eAAAA,I,eAAAA,I,kBAAAA,Q,SAMgBE,I,uDAMjB,WAAY3mB,GAA4C,IAAD,EAAzB4mB,IAAyB,qFACnD,gBANa5mB,aAKsC,IAJ/C6mB,MAAmBJ,GAAUK,KAIkB,EAHtCF,eAGsC,8CAEnD,EAAK5mB,QAAUA,EACf,EAAK4mB,UAAYA,EAHkC,E,uDAMrC,IAAD,OACbvJ,GAAQ7qB,KAAKu0B,SACb3H,IAAoB,GAEpB5sB,KAAKwL,SAAS+E,GAAa3J,GAAG,cAAc,SAAAyK,GACpCiiB,GAAWK,cACf,EAAKU,MAAQ,EAAKD,UAAYH,GAAUO,KAAOP,GAAUQ,MACzD,EAAK3J,KAAKzZ,QAGdrR,KAAKwL,SAAS+E,GAAa3J,GAAG,oBAAoB,SAAAyK,GAC1CiiB,GAAWK,cACf,EAAKU,MAAQJ,GAAUQ,MACvB,EAAK3J,KAAKzZ,QAGdrR,KAAKwL,SAAS+E,GAAa3J,GAAG,qBAAqB,SAAAyK,GAC/C,IAAIiiB,GAAWK,YAAf,CACA,IAAM7lB,EAAK,EAAKN,QAAQ4I,MAAM/E,EAAGI,GAAIJ,EAAGU,IACpCjE,EAAGvR,SACH,EAAKiR,QAAQqK,eAAiB/J,EAAGA,EAAGvR,OAAO,GAAG8Q,aAItDrN,KAAKwL,SAAS+E,GAAa3J,GAAG,YAAY,WACtC,EAAKytB,MAAQJ,GAAUK,SAG3Bt0B,KAAKwL,SAAS+E,GAAa3J,GAAG,kBAAkB,WAC5C,EAAKytB,MAAQJ,GAAUK,SAG3Bt0B,KAAKwL,SAAS+E,GAAa3J,GAAG,SAAS,SAAAyK,GAC/BiiB,GAAWK,aACf,EAAK7I,KAAKzZ,OAGd,IAAMqjB,EAAU,SAACrjB,GACb,IAAKA,EAAGsT,SAAYtT,EAAGsT,OAAuB2G,UAAUqJ,SAAS,oBAAqB,OAAO,EAC7F,IAAKtjB,EAAGujB,SAAU,CACd,IAAMC,GAA8B,EAAxBp5B,KAAKq5B,KAAKzjB,EAAG0jB,QAEzB,OADA,EAAKC,WAAWv5B,KAAKiW,IAAI,EAAGjW,KAAKkW,IAAI,EAAG,EAAK4iB,SAAWM,MACjD,IAGftvB,OAAOimB,iBAAiB,QAASkJ,GACjC10B,KAAKwL,UAAS,kBAAMjG,OAAO0vB,oBAAoB,QAASP,Q,iCAGjDhmB,GACP1O,KAAKu0B,QAAU94B,KAAKiW,IAAI,EAAGjW,KAAKkW,IAAI,EAAGjD,IACvCmc,GAAQ7qB,KAAKu0B,W,2BAGZljB,GACD,GAAIrR,KAAKq0B,QAAUJ,GAAUK,KAAM,CAC/B,OAAQt0B,KAAKq0B,OACT,KAAKJ,GAAUQ,MACXz0B,KAAKiH,IAAIoK,EAAGI,GAAIJ,EAAGU,GAAI/R,KAAKwN,QAAQ0nB,QAAQtW,KAAK5e,KAAKwN,UACtD,MACJ,KAAKymB,GAAUO,KACXx0B,KAAKiH,IAAIoK,EAAGI,GAAIJ,EAAGU,GAAI/R,KAAKwN,QAAQ2nB,OAAOvW,KAAK5e,KAAKwN,UAE7D,OAAO,EAEX,OAAO,I,0BAGC3Q,EAAWH,EAAW04B,GAC9B,IAAK,IAAIC,EAAKx4B,GAAKmD,KAAKu0B,QAAQ,GAAIc,EAAKx4B,EAAImD,KAAKu0B,QAASc,IACvD,IAAK,IAAIC,EAAK54B,GAAKsD,KAAKu0B,QAAQ,GAAIe,EAAK54B,EAAIsD,KAAKu0B,QAASe,IACvDF,EAAGC,EAAIC,K,kCAMf1I,IAAoB,K,qCAIpBA,IAAoB,GACpBzQ,GAAS,K,uCAGTyQ,IAAoB,GACpBzQ,GR5GyB,c,GQUUmX,I,uCAItCtsB,e,yEAAoC,K,6HCD1B,SAASuuB,GACpBjX,GAQI,IAAD,EAC6BkF,IAAMC,SAASnF,EAAMkX,aAAe,IADjE,mBACIC,EADJ,KACgBC,EADhB,OAE6BlS,IAAMC,WAAWnF,EAAMhf,UAFpD,mBAEIA,EAFJ,KAEcq2B,EAFd,OAG2BnS,IAAMC,SAAmB,IAHpD,mBAGI/jB,EAHJ,KAGak2B,EAHb,KA4BH,OAbApS,IAAMiE,WAAU,WACZ,IAAMoO,EAAU5nB,YAAW,WACvB6nB,GAAaxX,EAAMyX,WAAWtxB,MAAK,SAAAuxB,GAC/B,IAAMC,EzD2Cf,SAAsBC,GAAoG,IAAtF52B,EAAqF,wDAA1D62B,EAA0D,wDAA/BC,EAA+B,uCACzH/3B,EAAgB,GAChBg4B,EAAgC,GAEhCC,EAASn0B,OAAOqgB,QAAQ3kB,EAAK6B,SAASsY,QAAQ,SAACuK,GACpD,QAAIjjB,IAAaijB,EAAI,GAAGjjB,YAGpB62B,EACI5T,EAAI,GAAG/iB,KAAKke,SAASwY,GAGtB3T,EAAI,GAAG7E,SAASwY,EAAKjjB,mBAC1BzS,KAAI,SAAA+1B,GAAC,MAAK,CAAEC,KAAMD,EAAE,GAAIlpB,OAAQkpB,EAAE,OAkCrC,OAhCS,OAATH,QAAS,IAATA,KAAWhrB,SAAQ,SAAAqrB,GAClB,IAAIC,EAAeD,EAAEr3B,GACjBs3B,EAAar3B,WAAW,UAC3Bq3B,EAAe,cAEZA,EAAahZ,SAASwY,EAAKjjB,iBAC9B5U,EAAIvC,KAAK,IAAIgE,GAAO22B,EAAEr3B,GAAIq3B,EAAE12B,MAC5Bs2B,EAAKI,EAAEr3B,GAAG,IAAIq3B,EAAE12B,MAAO,MAIpBT,EAcJg3B,EAAOlrB,SAAQ,SAAAmrB,GACTF,EAAKE,EAAEC,KAAK,QAChBn4B,EAAIvC,KAAK,IAAIgE,GAAOy2B,EAAEC,MAAO,QAf/BF,EAAOhgB,MAAK,SAACzS,EAAGuU,GACf,IAAMue,EAAM,SAAC9yB,GAAD,OAAeA,EAAE6Z,SAAS,YAAc7Z,EAAE6Z,SAAS,aAAe7Z,EAAE6Z,SAAS,aAAe,EAAI,GAC5G,OAAOiZ,EAAI9yB,EAAE2yB,MAAQG,EAAIve,EAAEoe,SAE5BF,EAAOlrB,SAAQ,SAAAmrB,GAEd,IADA,IAAMK,EAAQL,EAAElpB,OAAO/N,SAAW,EAAIi3B,EAAElpB,OAAO9N,OAAOhD,OAC7CjB,EAAE,EAAGA,EAAIs7B,EAAOt7B,IACnB+6B,EAAKE,EAAEC,KAAM,IAAMl7B,IACvB+C,EAAIvC,KAAK,IAAIgE,GAAOy2B,EAAEC,KAAMl7B,QAYzB+C,EyD1FwBw4B,CAAapB,EAAYn2B,GAAU,EAAO02B,GAC1DJ,EAAWK,QAEhB,KACH,OAAO,WACHrpB,aAAaipB,MAElB,CAACJ,EAAYn2B,EAAUgf,EAAMyX,YAGzB,yBAAKpb,MAAO,CACfmc,SAAU,UAEV,0BAAMC,YAAU,EAACC,aAAa,MAAMnS,SAAU,SAAAlY,GAAC,OAAIA,EAAE8e,mBACjD,kBAACwL,GAAA,EAAD,CAAWl6B,KAAG,GACV,kBAACm6B,GAAA,EAAD,CACIC,eAAe,EACf11B,QAAS,GACTkZ,MAAO,CAAEhf,MAAO,KAChBy7B,UAAU,EACV7vB,MAAOkuB,EACP4B,WAAY5B,EACZ6B,cAAe,SAAC3mB,EAAO4mB,GAnClB,IAAChwB,EAClBmuB,EADkBnuB,EAoCWgwB,GAlCzBjZ,EAAMkZ,UACNlZ,EAAMkZ,SAASjwB,IAmCPkwB,YAAa,SAACC,GAAD,OAAY,kBAACvT,GAAA,EAAD,iBAAeuT,EAAf,CAAuBpT,MAAM,kBAAkB3iB,QAAQ,iBAEpF,kBAACg2B,GAAA,EAAD,CACIC,QACI,kBAACC,GAAA,EAAD,CACIC,QAASx4B,EACTolB,SAtCL,SAAC/T,GAChBglB,EAAYhlB,EAAMgU,OAAOmT,UAsCLC,UAAWzZ,EAAM0Z,WACjBx4B,KAAK,WACLy4B,WAAY,CAAE,aAAc,wBAGpC3T,MAAM,WACN4T,eAAe,UAI3B,yBACIvd,MAAO,CAAC/e,OAAQ,UAEhB,kBAACu8B,GAAD,CAAYz4B,QAASA,EAAS04B,SAAU9Z,EAAM8Z,SAAUra,SAAUO,EAAMP,SAAUgY,UAAWzX,EAAMyX,cAMxG,SAASoC,GAAW7Z,GACvB,OAAO,kBAAC,KAAD,CAAW2G,UAAW,cACxB,SAAcvW,GACX,IACM2pB,EAAS58B,KAAKoW,MAAMnD,EAAK/S,MADX,IAEd28B,EAAW78B,KAAKC,KAAK4iB,EAAM5e,QAAQnD,OAAQ87B,GAEjD,OAAO,kBAAC,KAAD,CACHE,YAAaF,EACbG,YANgB,GAOhB58B,OAAQ8S,EAAK9S,OACbD,MAAO+S,EAAK/S,MACZ28B,SAAUA,EACVG,UAVgB,GAWhBxT,UAAW,aACXtK,MAAO,CAAC+d,UAAU,GAAD,OAAKhqB,EAAK9S,OAAV,SAEhB,SAACiC,GACE,IACS,EADH86B,EAAMra,EAAM5e,QAAQ7B,EAAK+6B,YAAc/6B,EAAKg7B,SAAWR,GAC7D,OAAIM,EACO,yBAAKhe,MAAO9c,EAAK8c,OACpB,kBAACme,GAAD,CAAazrB,OAAQsrB,EAAKP,SAAU9Z,EAAM8Z,SAAUra,UAAU,UAAAO,EAAMP,gBAAN,eAAgBne,aAAc+4B,EAAI/4B,UAAWm2B,UAAWzX,EAAMyX,aAGzH,oCASxB,SAAS+C,GAAYxa,GAA4F,IAAD,IA0BxG,MAzBLya,EAAYvV,IAAMwV,OAAO,MAEzBC,EAAM3a,EAAM8Z,SAAW,kBAAM9Z,EAAM8Z,SAAS9Z,EAAMjR,SAAU,aAC5D6rB,EAAK,UAAG5a,EAAMjR,cAAT,aAAG,EAAcjO,GAAGC,WAAW,QAsB1C,OApBAmkB,IAAMiE,WAAU,WAAO,IAAD,EACZwH,EAAS,WACX,IAAIiK,GACAH,EAAKI,QAAQ,CAAC,IAAD,EAEP59B,EAAgCw9B,EAAKI,QAAQj9B,WAAW,MAC9DX,EAAIoa,UAAU,EAAE,EAAEojB,EAAKI,QAAQx9B,MAAOo9B,EAAKI,QAAQv9B,QACnD,UAAA0iB,EAAMjR,cAAN,SAAc+rB,OAAO79B,EAAK,EAAG,KAG/B89B,GAAeH,IAAD,UAAU5a,EAAMjR,cAAhB,aAAU,EAAc/N,UAAWL,YAAYgwB,EAAQ,KAAO,KAGlF,OAFAA,IAEO,WACY,OAAXoK,GACAr6B,cAAcq6B,MAGvB,CAAC/a,EAAMjR,OAAQ6rB,IAEdA,EACO,yBAAKve,MAAO,CAACvI,SAAU,aAC1B,kBAACknB,GAAD,CAAsBjsB,OAAQiR,EAAMjR,OAAQ0oB,UAAWzX,EAAMyX,YAC7D,yBACIj3B,IAAG,UAAEwf,EAAMjR,cAAR,aAAE,EAAcjO,GAAG0V,QAAQ,OAAQ,IACtCnZ,MC7JY,GD8JZC,OC5Ja,GD6Jb+e,MAAO,CAAC4e,SAAU,OAAQC,UAAW,OAAQ1C,SAAU,OAAQ4B,UAAW,OAAQ5H,WAAY,QAC9F7L,UAAS,sBAAiB3G,EAAMP,SAAW,WAAY,IACvDiC,OAAO,UAAA1B,EAAMjR,cAAN,eAAc7N,OAAQ,YAC7Bi6B,KAAK,UAAAnb,EAAMjR,cAAN,eAAc7N,OAAQ,YAC3ByhB,QAASgY,KAKd,yBAAKte,MAAO,CAACvI,SAAU,aAC1B,kBAACknB,GAAD,CAAsBjsB,OAAQiR,EAAMjR,OAAQ0oB,UAAWzX,EAAMyX,YAC7D,4BACI2D,IAAKX,EACLp9B,MC5KgB,GD6KhBC,OC3KiB,GD4KjB+e,MAAO,CAAChf,MAAO,OAAQC,OAAQ,OAAQk1B,WAAY,QACnD7L,UAAS,sBAAiB3G,EAAMP,SAAW,WAAY,IACvDiC,OAAO,UAAA1B,EAAMjR,cAAN,eAAc7N,OAAQ,YAC7ByhB,QAASgY,KAKd,SAASK,GAAqBhb,GAAmD,IAAD,EAC/CmF,oBAAS,GADsC,mBAC5EkW,EAD4E,KAChEC,EADgE,OAElDnW,oBAAS,GAFyC,mBAE5EoW,EAF4E,KAElEC,EAFkE,KAqBnF,OARArS,qBAAU,WACFnJ,EAAMjR,Q,8CACN0sB,CAAczb,EAAMjR,OAAQiR,EAAMyX,WAAWtxB,MAAK,SAAAu1B,GAC9CJ,EAAcI,QAGvB,CAAC1b,EAAMjR,OAAQiR,EAAMyX,YAEnBzX,EAAMjR,OAEJ,oCACH,kBAAC,KAAD,CACIsN,MAAO,CACHvI,SAAU,WACVqa,IAxBG,EAyBHF,KAzBG,EA0BH7R,MAAOif,EAAa,MAAQ,QAEhCrgB,SAAU,UAEd,kBAAC8N,GAAA,EAAD,CAASpH,MAAO,mBACZ,kBAAC,KAAD,CACIrF,MAAO,CACHvI,SAAU,WACVqa,IAlCD,EAmCCF,KAnCD,EAoCC7R,MAAOmf,EAAY,OAAS,QAC5BI,OAAQ,WAEZ3gB,SAAU,QACV4gB,aAAc,kBAAIJ,GAAa,IAC/BK,aAAc,kBAAIL,GAAa,IAC/B7Y,QAxCZ,WACQ3C,EAAMjR,Q,gDACN+sB,CAAY9b,EAAMjR,QAASssB,EAAYrb,EAAMyX,WAAWtxB,MAAK,WACzDm1B,GAAeD,WAaD,KAgC9B,IAAIU,GAA2D,G,SAEhDvE,G,iFAAf,WAA4BwE,GAA5B,iBAAAz2B,EAAA,yDAESw2B,GADCE,EAAMD,EAAc,WAAa,YACTD,GAAgBE,GAAKh+B,OAFvD,gCAGkDyB,GAAS4J,IAAId,GAAK0zB,kBAHpE,OAGcn8B,EAHd,QAIQg8B,GAAkBh8B,GAAO,IACTk8B,GAAOF,GAAgBE,IAAQ,GALvD,gCAOWF,GAAgBE,IAP3B,4C,oEAUA,WAA6BltB,EAAgBitB,GAA7C,eAAAz2B,EAAA,sEACuBiyB,GAAawE,GADpC,cACUxR,EADV,2BAEcA,EAAKhM,MAAK,SAAAyZ,GAAC,OAAEA,EAAEn3B,KAAOiO,EAAOjO,IAAMm3B,EAAEx2B,MAAQsN,EAAOtN,QAFlE,4C,oEAKA,WAA2BsN,EAAgBotB,EAAmBH,GAA9D,iBAAAz2B,EAAA,sEACuBiyB,GAAawE,GADpC,cACUxR,EADV,OAGQ2R,EACM3R,EAAKhM,MAAK,SAAAvf,GAAC,OAAEA,EAAE6B,KAAOiO,EAAOjO,IAAM7B,EAAEwC,MAAQsN,EAAOtN,QACrD+oB,EAAKhtB,KAAKuR,IAGTtN,EAAM+oB,EAAK1H,WAAU,SAAAqB,GAAC,OAAEA,EAAErjB,KAAOiO,EAAOjO,IAAMqjB,EAAE1iB,MAAQsN,EAAOtN,SAC5D,GACL+oB,EAAKxa,OAAOvO,EAAK,GAV7B,SAcU/B,GAAS6J,MAAMf,GAAK0zB,iBAAkBH,IAdhD,iCAgBW,GAhBX,4C,sBAmBA,IAAMK,GAAYC,cAAW,SAACC,GAAD,OACzBC,aAAa,CACTC,MAAO,CACH1P,gBAAiBwP,EAAMG,QAAQjK,WAAWgK,MAC1C5K,OAAQ,iBACR8K,UAAWJ,EAAMK,QAAQ,GACzBC,QAASN,EAAMO,QAAQ,EAAG,EAAG,GAC7BhU,cAAe,OACf2P,SAAU,QACVyC,SAAU,QACVnnB,SAAU,QACVma,KAAM,MACNE,IAAK,MACL2O,UAAU,8BAKf,SAASC,GAAkB/c,GAA4F,IAAD,IACnHgd,EAAUZ,KADyG,EAE7FjX,mBAAS,IAFoF,mBAElH8X,EAFkH,KAE1GC,EAF0G,KAIzH,OAAO,kBAACC,GAAA,EAAD,CACHn1B,KAAMgY,EAAMhY,KACZyd,kBAAgB,sBAChBiB,mBAAiB,uBACjBlB,QAAS,kBAAIxF,EAAMwF,YAEnB,yBAAKmB,UAAWqW,EAAQR,OACpB,kBAACvF,GAAD,CACIC,aAAa,UAAAlX,EAAMod,qBAAN,eAAqBl8B,OAAQ,GAC1Cue,UAAe,OAALO,QAAK,IAALA,OAAA,EAAAA,EAAOod,gBAAiB,KAClCp8B,UAAe,OAALgf,QAAK,IAALA,GAAA,UAAAA,EAAOod,qBAAP,eAAsBp8B,YAAY,EAC5C84B,SAAU,SAACtqB,GACPwQ,EAAMwF,UACNxF,EAAM8Z,SAAStqB,IAEnBkqB,YAAY,EACZjC,WAAW,IAGf,kBAACkB,GAAA,EAAD,CAAWtc,MAAO,CAACghB,UAAW,IAAK5+B,KAAG,GAClC,kBAACqqB,GAAA,EAAD,CACIpH,MAAM,yHAEN,kBAACkX,GAAA,EAAD,CACIC,eAAe,EACf11B,QAAS,GACTkZ,MAAO,CAAEhf,MAAO,KAChBy7B,UAAU,EACV7vB,MAAOg0B,EACPlE,WAAYkE,EACZjE,cAAe,SAAC3mB,EAAO4mB,GACnBiE,EAAUjE,EAAcqE,SAE5BnE,YAAa,SAACC,GAAD,OAAY,kBAACvT,GAAA,EAAD,iBAAeuT,EAAf,CAAuBpT,MAAM,gBAAgB3iB,QAAQ,kBAItF,kBAACqf,GAAA,EAAD,CACIrf,QAAS,WACTsf,QAAS,WACL3C,EAAMwF,UACN,IAAIzC,EAAI,IAAIwa,IAAIN,GACZla,EAAEya,SAASpe,SAAS,eACpB2D,EAAIA,EAAEya,SAASz8B,WAAW,MAAQgiB,EAAI,IAAIwa,IAAJ,6BAA8Bxa,EAAE0a,SAAhC,UAG1Czd,EAAM8Z,SAAS,IAAIt4B,GAAO,OAAOuhB,GAAI,IACrC5iB,QAAQ6G,IAAI,qBAAuB+b,IAEvC0W,UAAWwD,EAAOK,OAAOv8B,WAAW,WAZxC,c,mCEhUK28B,G,oDAMjB,WAAYtd,GAA6B,IAAD,8BACpC,cAAMA,IAND4B,KAAoB,kBAAC,KAAD,MAKW,EAJ/B9gB,KAAe,UAIgB,EAH/By8B,gBAG+B,IAFhCxG,WAAqB,SAIzB,EAAKwG,WAAa,IAAI9H,GAAczV,EAAWlR,SAAS,GAFpB,E,yDAK3B0uB,GAAkC,IAAD,OAC1C,OAAO,kBAACC,GAAD,CACH3uB,QAASxN,KAAK0e,WAAWlR,QACzB0oB,KAAMl2B,KAAKy1B,WACXC,UAAW,SAACQ,GAAD,OAAkB,EAAKT,WAAaS,GAC/CkG,IAAKp8B,KAAKi8B,e,iCAKdx9B,QAAQ6G,IAAI,qBACZtF,KAAKi8B,WAAWI,W,mCAIjBr8B,KAAKi8B,WAAWK,QAChB79B,QAAQ6G,IAAI,yB,+BAGN42B,EAAoBl7B,GACzB,OAAOA,M,GA/BwBqyB,IAoCjC8I,GAAsBpV,cAAS,SAACzI,GAClC,OAAO,yBAAK2G,UAAW,QACnB,kBAACsX,GAAD,CAAeH,IAAK9d,EAAM8d,MAC1B,kBAAC7G,GAAD,CACI6C,SAAU,SAACtqB,GAAD,OAAgBwQ,EAAM9Q,QAAQqK,eAAiB/J,GACzD0pB,SAAUlZ,EAAMoX,UAChBF,YAAalX,EAAM4X,KACnBnY,SAAUO,EAAM9Q,QAAQqK,eACxBmgB,YAAY,EACZjC,WAAW,QAKjBwG,GAAgBxV,cAAS,SAACzI,GAC5B,OAAO,6BACH,kBAACke,GAAA,EAAD,CAAYp9B,GAAG,kBAAkBq9B,cAAY,GAA7C,aACene,EAAM8d,IAAI7H,SAEzB,kBAACmI,GAAA,EAAD,CACIn1B,MAAO+W,EAAM8d,IAAI7H,QACjBoI,iBAAkB,2BAASre,EAAM8d,IAAI7H,UACrCxQ,kBAAgB,kBAChB6Y,kBAAkB,OAClBC,KAAM,EACNC,OAAK,EACLnrB,IAAK,EACLD,IAAK,EACLgT,SAAW,SAAC/T,EAAYosB,GAAb,OAA8Bze,EAAM8d,IAAIpH,WAAW+H,U,+BCnErDC,G,oDAMjB,WAAY1kB,GAAwB,IAAD,8BAC/B,gBANIC,IAAmB,KAKQ,EAJ3B0kB,WAA0B,GAIC,EAH3BC,aAA2B,GAGA,EAF3B5kB,cAE2B,EAE/B,EAAKA,SAAWA,EAFe,E,uDAKjB,IAAD,OACbuS,GAAQ,GACR+B,IAAoB,GAEpB5sB,KAAKwL,SAAS+E,GAAa3J,GAAG,cAAc,SAAAyK,GACxC,IAAM8rB,EAAM,EAAK7kB,SAASkG,gBAAgB1B,MAAK,SAAAvE,GAAG,OAAIA,EAAIS,WAAaT,EAAI1b,IAAMwU,EAAGI,IAAM8G,EAAI7b,IAAM2U,EAAGU,MACnGorB,IACA,EAAK5kB,IAAM4kB,EACX,EAAK7kB,SAASyF,SAAWof,EACzBvQ,IAAoB,GACpB,EAAKwQ,SAAS/rB,EAAGI,GAAIJ,EAAGU,SAIhC/R,KAAKwL,SAAS+E,GAAa3J,GAAG,YAAY,WACtC,EAAKy2B,cACD,EAAK9kB,MACL,EAAKA,IAAM,KACXqU,IAAoB,QAI5B5sB,KAAKwL,SAAS+E,GAAa3J,GAAG,SAAS,SAAAyK,GAC/B,EAAKkH,MACL,EAAKD,SAASE,aAAa,EAAKD,IAAInZ,GAAI,CACpCvC,EAAGwU,EAAGI,GACN/U,EAAG2U,EAAGU,KAEV,EAAKqrB,SAAS/rB,EAAGI,GAAIJ,EAAGU,KAExB,EAAKuG,SAASkG,gBAAgB1B,MAAK,SAAAvE,GAAG,OAAIA,EAAIS,WAAaT,EAAI1b,IAAMwU,EAAGI,IAAM8G,EAAI7b,IAAM2U,EAAGU,MAC3FoK,GAAS,UAETA,GZjDiB,gB,oCYuDzBnc,KAAKk9B,aAAa9xB,SAAQ,SAAAkyB,GAAE,OAAIA,EAAG3kB,YACnC3Y,KAAKk9B,aAAe,GACpBl9B,KAAKi9B,WAAa,K,+BAGLpgC,EAAWH,GACxB,IAAM6gC,EAAOv9B,KAAKi9B,WAAWj9B,KAAKi9B,WAAW1gC,OAAO,GACpD,IAAIghC,GAAQA,EAAK9rB,KAAO5U,GAAK0gC,EAAKxrB,KAAOrV,EAAzC,CAEA,IAAMqD,EAAMC,KAAKi9B,WAAW7b,WAAU,SAAA/V,GAAC,OAAIA,EAAEoG,KAAO5U,GAAKwO,EAAE0G,KAAOrV,KAC9DqD,GAAM,IACNC,KAAKi9B,WAAW3uB,OAAOvO,EAAKC,KAAKi9B,WAAW1gC,QAC5CyD,KAAKk9B,aAAa5uB,OAAOvO,EAAKC,KAAKk9B,aAAa3gC,QAAQ6O,SAAQ,SAAA3O,GAAC,OAAIA,EAAEkc,aAE3E3Y,KAAKi9B,WAAWnhC,KAAK,CAAC2V,GAAI5U,EAAGkV,GAAIrV,IACjCsD,KAAKk9B,aAAaphC,KAAK,IAAI80B,GAA4B,EAAlB5wB,KAAKw9B,aAAgB,MAAMxhB,MAAMnf,EAAGH,IACzEsD,KAAKy9B,e,kCAIL,KAAIz9B,KAAKi9B,WAAW1gC,OAAS,GAA7B,CACA,IAAMghC,EAAOv9B,KAAKi9B,WAAWj9B,KAAKi9B,WAAW1gC,OAAS,GAChDmhC,EAAQ19B,KAAKi9B,WAAWj9B,KAAKi9B,WAAW1gC,OAAS,GAC1CygC,EAAiBW,SAASD,EAAOH,GAEnC,IAEPv9B,KAAKi9B,WAAW3uB,OAAOtO,KAAKi9B,WAAW1gC,OAAO,EAAG,GACjDyD,KAAKk9B,aAAa5uB,OAAOtO,KAAKk9B,aAAa3gC,OAAO,EAAG,GAAG6O,SAAQ,SAAA3O,GAAC,OAAIA,EAAEkc,YACvE3Y,KAAKk9B,aAAal9B,KAAKk9B,aAAa3gC,OAAO,GAAGmnB,QAA2B,EAAlB1jB,KAAKw9B,aAAkB,U,mCASlF,IAAIn2B,EAAM,EAQV,OAPArH,KAAKi9B,WAAWW,QAAO,SAACC,EAAMC,GAC1B,IAAIC,EAAMf,EAAiBW,SAASE,EAAMC,GAG1C,OAFIC,EAAM,IAAGA,EAAM,KACnB12B,GAAO02B,EACAD,KAGJriC,KAAKoW,MAAMxK,K,kCAIlBrH,KAAKq9B,iB,gCAjBe3jB,EAAeC,GACnC,OAAOle,KAAKuiC,KAAKviC,KAAK4uB,IAAI3Q,EAAGjI,GAAGkI,EAAGlI,GAAI,GAAKhW,KAAK4uB,IAAI3Q,EAAG3H,GAAK4H,EAAG5H,GAAI,Q,GApF9BuhB,ICFzB2K,G,oDAKjB,WAAYvf,GAA6B,IAAD,8BACpC,cAAMA,IALD4B,KAAoB,kBAAC,KAAD,MAIW,EAH/B9gB,KAAe,SAGgB,EAFvBy8B,gBAEuB,EAEpC,EAAKA,WAAa,IAAIe,GAAiBte,EAAWpG,UAFd,E,yDAK3B4jB,GACT,OAAO,O,iCAIPz9B,QAAQ6G,IAAI,+BACZtF,KAAKi8B,WAAWI,W,mCAIhB59B,QAAQ6G,IAAI,iCACZtF,KAAKi8B,WAAWK,U,+BAGXJ,EAAoBl7B,GACzB,OAAO,M,GAzB2BqyB,I,0CCErB6K,G,oDAKjB,WAAYxf,GAA6B,IAAD,8BACpC,cAAMA,IALD4B,KAAoB,kBAAC,KAAD,MAIW,EAH/B9gB,KAAe,SAGgB,EAF/By8B,gBAE+B,EAEpC,EAAKA,WAAa,IAAI9H,GAAczV,EAAWlR,SAAS,GAFpB,E,yDAK3B0uB,GACT,OAAO,kBAACiC,GAAD,CAAkB/B,IAAKp8B,KAAKi8B,e,iCAInCj8B,KAAKi8B,WAAWI,SAChB59B,QAAQ6G,IAAI,0B,mCAIZtF,KAAKi8B,WAAWK,QAChB79B,QAAQ6G,IAAI,4B,+BAGP42B,EAAoBl7B,GACzB,OAAOk7B,GAAal7B,M,GAzBcqyB,IA6BpC8K,GAAmBpX,cAAS,SAACzI,GAC/B,OAAO,6BACH,kBAACke,GAAA,EAAD,CAAYp9B,GAAG,kBAAkBq9B,cAAY,GAA7C,gBACkBne,EAAM8d,IAAI7H,SAE5B,kBAACmI,GAAA,EAAD,CACIn1B,MAAO+W,EAAM8d,IAAI7H,QACjBoI,iBAAkB,2BAASre,EAAM8d,IAAI7H,UACrCxQ,kBAAgB,kBAChB6Y,kBAAkB,OAClBC,KAAM,EACNC,OAAK,EACLnrB,IAAK,EACLD,IAAK,EACLgT,SAAW,SAAC/T,EAAYosB,GAAb,OAA8Bze,EAAM8d,IAAIpH,WAAW+H,U,iFCrBrDqB,G,oDAKjB,WAAY1f,GAA6B,IAAD,8BACpC,cAAMA,IALD4B,KAAoB,kBAAC,KAAD,MAIW,EAH/B9gB,KAAe,SAGgB,EAFvBy8B,gBAEuB,EAEpC,EAAKA,WAAa,IAAIe,GAAiBte,EAAWpG,UAFd,E,yDAK3B4jB,GACT,OAAO,kBAACmC,GAAD,CACH/lB,SAAUtY,KAAK0e,WAAWpG,SAC1BoG,WAAY1e,KAAK0e,e,iCAKrBjgB,QAAQ6G,IAAI,wBACZtF,KAAKi8B,WAAWI,W,mCAIhB59B,QAAQ6G,IAAI,0BACZtF,KAAKi8B,WAAWK,U,+BAGXJ,EAAoBl7B,GACzB,OAAOA,M,GA5B2BqyB,IAiCpCqH,GAAYC,cAAW,kBACzBE,aAAa,CACTyD,KAAM,CACFC,SAAU,GAEdC,UAAW,CACPpsB,SAAU,QACVqsB,OAAQ,GACRC,MAAO,IAEXC,YAAa,CACTC,WAAY,OACZjD,UAAW,OACXkD,YAAa,YAKnBR,GAAwBtX,cAAS,SAACzI,GAAgE,IAAD,IAC3DkF,IAAMC,UAAS,GAD4C,mBAC5Fqb,EAD4F,KAC9EC,EAD8E,OAE/Dvb,IAAMC,SAAsB,MAFmC,mBAE5F5L,EAF4F,KAE5EmnB,EAF4E,OAGxExb,IAAMC,SAAS,IAHyD,mBAG5Fwb,EAH4F,KAGnF3iB,EAHmF,OAIrEkH,IAAMC,UAAS,GAJsD,mBAI5FxK,EAJ4F,KAInFuD,EAJmF,OAK3DgH,IAAMC,UAAS,GAL4C,mBAK5Fyb,EAL4F,KAK9EC,EAL8E,KAO7FC,EAAc,WAChBL,GAAgB,GAChBC,EAAU,MACV1iB,EAAQ,IACRE,GAAW,IAGf,OAAI8B,EAAMhG,SAASyF,SAAiB,kBAACshB,GAAD,CAAqB/mB,SAAUgG,EAAMhG,SAAU2K,SAAU3E,EAAMI,WAAWuE,WAEvG,yBAAKgC,UAAW,QACnB,6CACA,kBAACgS,GAAA,EAAD,CAAWl6B,KAAG,GACV,kBAAConB,GAAA,EAAD,CACI/kB,GAAG,WACHklB,MAAM,OACN3iB,QAAQ,SACR4F,MAAO03B,EACPva,SAAU,SAAC4a,GAAD,OAAShjB,EAAQgjB,EAAI3a,OAAOpd,UAE1C,yBAAKoT,MAAO,CAACikB,WAAY,SACrB,kBAAC9F,GAAD,CACIzrB,OAAQwK,EACRugB,SAAU,WAAO2G,GAAgB,IACjChJ,WAAW,MAKvB,kBAACkB,GAAA,EAAD,CAAWl6B,KAAG,GACV,kBAAC46B,GAAA,EAAD,CACIC,QACI,kBAAC2H,GAAA,EAAD,CACIzH,QAAS7e,EACTyL,SAAU,SAAC4a,GAAD,OAAQ9iB,EAAW8iB,EAAI3a,OAAOmT,UACxCt4B,KAAK,YAGb8kB,MAAM,aAId,kBAAC2S,GAAA,EAAD,CAAWl6B,KAAG,EAAC4d,MAAO,CAAC6kB,eAAgB,kBACnC,kBAACxe,GAAA,EAAD,CACIrf,QAAQ,YACR+Y,MAAM,UACNuG,QAAS,WAAK9D,GAAamB,EAAMhG,SAAUT,EAAgBonB,EAAShmB,GAAUmmB,KAC9ErH,UAAWlgB,GAJf,UAQA,kBAACmJ,GAAA,EAAD,CAAQrf,QAAQ,YAAY+Y,MAAM,UAAUuG,QAAS,kBAAIke,GAAgB,IAAOpH,WAAU,UAACzZ,EAAMI,WAAWuE,gBAAlB,aAAC,EAA2BG,WAAW7mB,SAAjI,kBAGA,kBAACykB,GAAA,EAAD,CAAQrf,QAAQ,YAAY+Y,MAAM,YAAYuG,QAASme,GAAvD,UAKJ,kBAAC/D,GAAD,CACI/0B,KAAMw4B,EACNhb,QAAS,kBAAIib,GAAgB,IAC7B3G,SAAU4G,EACVtD,cAAe7jB,GAAgB,OAGnC,kBAAC4nB,GAAD,CACInnB,SAAUgG,EAAMhG,SAChBoG,WAAYJ,EAAMI,WAClBuE,SAAU3E,EAAMI,WAAWuE,SAC3B3c,KAAM44B,EACNpb,QAAS,kBAAIqb,GAAgB,UAMnCE,GAAsBtY,cAAS,SAACzI,GAClC,IAAM/F,EAAM+F,EAAMhG,SAASyF,SAC3B,IAAKxF,EAAK,OAAO,KAF6E,MAI5DiL,IAAMC,UAAS,GAJ6C,mBAIvFyB,EAJuF,KAI/E6Z,EAJ+E,OAKxDvb,IAAMC,UAAS,GALyC,mBAKvFic,EALuF,KAK1EC,EAL0E,KAMxF1gB,EAASuE,IAAMwD,SAAQ,WACzB,IAAI6O,EAAe,KACnB,OAAO,SAACh0B,GACY,OAAZg0B,GACAjpB,aAAaipB,GAEjB,IAAMtd,EAAM+F,EAAMhG,SAASyF,SACvBxF,IACAsd,EAAU5nB,YAAW,WACjBqQ,EAAMhG,SAASE,aAAaD,EAAInZ,GAAIyC,GAChCyc,EAAM2E,UACN2c,GAAethB,EAAM2E,SAAU1K,KAEpC,SAGZ,CAAC+F,EAAMhG,SAAUgG,EAAM2E,WACpBqY,EAAUZ,KACVmF,EAAgB,SAACh+B,GACnByc,EAAMhG,SAASE,aAAaD,EAAInZ,GAAIyC,GAChCyc,EAAM2E,UACN2c,GAAethB,EAAM2E,SAAU1K,IAGjCunB,EAAwBlxB,MAAMC,KAAK7G,IAASgQ,QAAO,SAAA7K,GAAC,OAAEA,EAAEnC,YAAUxK,KAAI,SAAAu/B,GAExE,OAAOA,EAAG/0B,SAASC,YAEjB+0B,EAAqBpxB,MAAMC,KAAK,IAAI5G,IAAJ,uBAC/B63B,GAD+B,aAE/BvnB,EAAIY,WACP7C,OAGJ,OAAO,yBAAK2O,UAAW,QACnB,0BAAMA,UAAWqW,EAAQgD,KAAMvH,YAAU,EAACC,aAAa,MAAMnS,SAAU,SAAAlY,GAAC,OAAIA,EAAE8e,mBAC1E,oCAAUlT,EAAI/Y,MACd,kBAACy3B,GAAA,EAAD,CAAWl6B,KAAG,GACV,kBAAConB,GAAA,EAAD,CACI/kB,GAAG,WACHklB,MAAM,OACN3iB,QAAQ,SACR4F,MAAOgR,EAAI/Y,KACXklB,SAAU,SAAC4a,GAAD,OAASO,EAAc,CAACrgC,KAAM8/B,EAAI3a,OAAOpd,WAEvD,yBAAKoT,MAAO,CAACikB,WAAY,SACrB,kBAAC9F,GAAD,CACIzrB,OAAQkL,EAAIlL,OACZ+qB,SAAU,WAAO2G,GAAgB,IACjChJ,WAAW,MAKvB,kBAACkB,GAAA,EAAD,KACI,kBAACU,GAAA,EAAD,CACIC,QACI,2BACIpT,KAAK,QACLjd,MAAOgR,EAAImC,MACXuK,UAAWqW,EAAQqD,YACnBja,SAAU,SAAA4a,GAAG,OAAIrgB,EAAO,CAACvE,MAAO4kB,EAAI3a,OAAOpd,WAGnD+c,MAAO,kBAACkY,GAAA,EAAD,CAAY7hB,MAAO,CAACghB,UAAW,SAA/B,YAGf,kBAAC1E,GAAA,EAAD,CAAWl6B,KAAG,GACV,kBAAC46B,GAAA,EAAD,CACIC,QACI,kBAAC2H,GAAA,EAAD,CACIzH,QAASvf,EAAIU,QACbyL,SAAU,SAAC4a,GACPO,EAAc,CAAC5mB,QAASqmB,EAAI3a,OAAOmT,UAC9BwH,EAAI3a,OAAOmT,SACZzf,GAAoByF,WAAWvF,IAGvC/Y,KAAK,YAGb8kB,MAAM,YAEV,kBAACqT,GAAA,EAAD,CACIC,QACI,kBAAC2H,GAAA,EAAD,CACIzH,QAASvf,EAAI0nB,eACbvb,SAAU,SAAC4a,GAAD,OAAQO,EAAc,CAACI,eAAgBX,EAAI3a,OAAOmT,WAC5Dt4B,KAAK,iBACLkb,MAAM,YAGd4J,MAAM,mBAId,kBAAC2S,GAAA,EAAD,KACI,kBAACiJ,GAAA,EAAD,eACA,kBAACC,GAAA,EAAD,CACIC,UAAQ,EACR74B,MAAOgR,EAAIY,OACXuL,SAAU,SAAC4a,GAAD,OAAOO,EAAc,CAAC1mB,OAAQmmB,EAAI3a,OAAOpd,SACnDiN,MAAO,kBAAC6rB,GAAA,EAAD,MACPC,YAAa,SAACviB,GAAD,OAAmBA,EAASwiB,KAAK,OAC9C5lB,MAAO,CAAC6lB,aAAc,SAErBR,EAASx/B,KAAI,SAACpB,GAAD,OACV,kBAACqhC,GAAA,EAAD,CAAUthC,IAAKC,EAAImI,MAAOnI,GACtB,kBAACmgC,GAAA,EAAD,CAAUzH,QAASvf,EAAIY,OAAOmQ,QAAQlqB,IAAO,IAC7C,kBAACshC,GAAA,EAAD,CAAcC,QAASvhC,UAMvC,kBAAC63B,GAAA,EAAD,CAAWl6B,KAAG,EAAC4d,MAAO,CAAC6kB,eAAgB,kBACnC,kBAACxe,GAAA,EAAD,CAAQrf,QAAQ,YAAY+Y,MAAM,UAAUuG,QAAS,kBAAI0e,GAAe,KAAxE,aAGA,kBAAC3e,GAAA,EAAD,CAAQrf,QAAQ,YAAY+Y,MAAM,YAAYuG,QAAS,kBAAI3C,EAAMhG,SAASK,OAAOJ,EAAInZ,MAArF,UAGA,kBAAC4hB,GAAA,EAAD,CAAQrf,QAAQ,YAAY+Y,MAAM,UAAUuG,QAAS,kBAAI3C,EAAMhG,SAASsoB,OAAO,QAA/E,WAMR,kBAACvF,GAAD,CACI/0B,KAAM4e,EACNpB,QAAS,kBAAIib,GAAgB,IAC7B3G,SAAU,SAACtqB,GAAgBwQ,EAAMhG,SAASuoB,gBAAgBtoB,EAAKzK,IAC/D4tB,cAAenjB,EAAIlL,SAGvB,kBAACyzB,GAAD,CACIld,SAAU,WAAM+b,GAAe,IAC/B9a,SAAU,SAACkc,GACPpB,GAAe,GACXoB,GAoHpB,SAAqBzoB,EAAuBC,EAAawoB,GACrD,GAAIA,EAAK,CACL,IAAK,IAAIzlC,EAAE,EAAGA,EAAEylC,EAAKzlC,IACjBgd,EAASG,UAAUF,EAAIlL,OAAQ,CAC3BxQ,EAAG0b,EAAI1b,EACPH,EAAG6b,EAAI7b,EACPge,MAAOnC,EAAImC,MACXvB,OAAO,aAAKZ,EAAIY,QAChBF,QAASV,EAAIU,QACbzZ,KAAK,GAAD,OAAK+Y,EAAI/Y,KAAT,YAAiBlE,EAAE,KAG/Bgd,EAASE,aAAaD,EAAInZ,GAAI,CAC1BI,KAAK,GAAD,OAAK+Y,EAAI/Y,KAAT,SAhIIwhC,CAAY1iB,EAAMhG,SAAUC,EAAKwoB,IAGzCz6B,KAAQo5B,EACRxa,OAAO,wCACPlF,MAAM,eACNsE,MAAM,eAMZmb,GAA4B1Y,cAAS,SAACzI,GAMrC,IAAD,EACF,IAAKA,EAAM2E,SAAU,OAAO,KAC5B,IAAMG,EAAa9E,EAAM2E,SAASG,WAFhC,EAG8BI,IAAMC,SAASL,EAAW7mB,OAAS,EAApB,UAAwB6mB,EAAW,UAAnC,aAAwB,EAAehkB,GAAK,IAHzF,mBAGK2e,EAHL,KAGekjB,EAHf,KAUIC,EAAc,SAAC9hC,GAAa,IAAD,EAC7B,iBAAOkf,EAAM2E,gBAAb,aAAO,EAAgBG,WAAWtG,MAAK,SAAA3P,GAAC,OAAIA,EAAE/N,KAAOA,MAGzD,OAAO,kBAACykB,GAAA,EAAD,CAAQvd,KAAMgY,EAAMhY,KAAMwd,QAAS,kBAAIxF,EAAMwF,YAC5C,kBAACE,GAAA,EAAD,oCACA,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,mDAGA,kBAACic,GAAA,EAAD,CACIzb,SAAU,SAAC4a,GAAD,OAhBRlgC,EAgBwBkgC,EAAI3a,OAAOpd,MAfjD9I,QAAQ6G,IAAI,yBAA0BlG,QACtC6hC,EAAY7hC,GAFC,IAACA,GAiBFoV,MAAO,kBAAC6rB,GAAA,EAAD,MACPC,YAAa,SAACviB,GACV,IAAMkb,EAAMiI,EAAYnjB,GACxB,OAAKkb,EAEE,kBAACwH,GAAA,EAAD,CAAU9lB,MAAO,CAACwM,cAAe,SACpC,kBAAC2R,GAAD,CAAazrB,OAAQ,IAAIvN,GAAOm5B,EAAI5rB,OAAOjO,GAAI65B,EAAI5rB,OAAOtN,KAAMg2B,WAAW,IAC1EkD,EAAIz5B,MAJQ,IAOrBmb,MAAO,CAAC6lB,aAAc,OAAS7kC,MAAO,QACtC4L,MAAOwW,GAENO,EAAM2E,SAASG,WAAW5iB,KAAI,SAAC2gC,GAAD,OAC3B,kBAACV,GAAA,EAAD,CAAUthC,IAAKgiC,EAAI/hC,GAAImI,MAAO45B,EAAI/hC,IAC9B,kBAAC05B,GAAD,CAAazrB,OAAQ,IAAIvN,GAAOqhC,EAAI9zB,OAAOjO,GAAI+hC,EAAI9zB,OAAOtN,KAAMg2B,WAAW,IAC3E,kBAAC2K,GAAA,EAAD,CAAcC,QAASQ,EAAI3hC,aAK3C,kBAAColB,GAAA,EAAD,KACI,kBAAC5D,GAAA,EAAD,CAAQC,QAAS,WACb3C,EAAMwF,WACPpJ,MAAM,WAFT,UAKA,kBAACsG,GAAA,EAAD,CAAQC,QAAS,WACb,IAAMgY,EAAMiI,EAAYnjB,GACxB,GAAIkb,EAAK,CACL,IAAMnrB,EAAK,IAAIhO,GAAOm5B,EAAI5rB,OAAOjO,GAAI65B,EAAI5rB,OAAOtN,KAChDod,GAAamB,EAAMhG,SAAUxK,EAAImrB,EAAIz5B,MAAM,EAAMy5B,GACjD3a,EAAMwF,YAEXpJ,MAAM,WAPT,aAehB,SAASomB,GAAgBxiB,GAAgH,IAAD,EAC9GkF,IAAMC,SAAS,GAD+F,mBAC7Hsd,EAD6H,KACxHK,EADwH,KAMpI,OAAO,kBAACvd,GAAA,EAAD,CAAQvd,KAAMgY,EAAMhY,KAAMwd,QAAS,WAAKxF,EAAMsF,YAAaG,kBAAgB,qBAC9E,kBAACC,GAAA,EAAD,CAAa5kB,GAAG,qBAAqBkf,EAAM0B,OAC3C,kBAACiE,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACK5F,EAAM4G,QAEX,kBAACf,GAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPC,MAAOhG,EAAMgG,OAAS,GACtBE,KAAK,SACLC,WAAS,EACTC,SAAU,SAAC/T,GAAD,OAAWywB,EAAOpkC,SAAS2T,EAAMgU,OAAOpd,YAG1D,kBAACqd,GAAA,EAAD,KACI,kBAAC5D,GAAA,EAAD,CAAQC,QAAS,WAAK3C,EAAMsF,YAAalJ,MAAM,WAA/C,UAGA,kBAACsG,GAAA,EAAD,CAAQC,QAvBI,WAChB3C,EAAMuG,SAASkc,IAsBmBrmB,MAAM,WAApC,YA2BZ,SAASyC,GAAa7E,EAAuBjL,EAAqB7N,EAAcyZ,EAAkBooB,GAC9F,GAAKh0B,EAAL,CAEA,IAAMoB,EAASse,KACfzU,EAASG,UAAUpL,EAAnB,2BACQg0B,GAAK,IADb,IAEIh0B,SACA7N,OACAyZ,UACApc,EAAG4R,EAAOgD,GACV/U,EAAG+R,EAAOsD,OAIlB,IAAIuvB,GAAuB,KAQ3B,SAAS1B,GAAe3c,EAAoB1K,GACxC3L,aAAa00B,IACbA,GAAkBrzB,YAAW,WACzB,IAAMszB,EAAWte,EAASG,WAAWhC,WAAU,SAAAjU,GAAC,OAAIA,EAAE/N,KAAOmZ,EAAInZ,MAEjE,GAAImZ,EAAI0nB,eAAgB,CACpB,IAAMuB,EAA2B,CAC7B9mB,MAAOnC,EAAImC,MACXtb,GAAImZ,EAAInZ,GACRI,KAAM+Y,EAAI/Y,KACV2Z,OAAQvK,MAAMC,KAAK0J,EAAIY,QACvB8mB,gBAAgB,EAChB5yB,OAAQ,CACJjO,GAAImZ,EAAIlL,OAAOjO,GACfW,IAAKwY,EAAIlL,OAAOtN,MAGxBkjB,EAASG,WAAW9U,OAAOizB,GAAY,EAAIA,EAAWte,EAASG,WAAW7mB,OAAQ,EAAG+lB,GAAWkf,IAChGxe,GAAeN,aAAaO,GAAUxe,MAAK,kBAAMhG,QAAQ0G,MAAM,6BACxDo8B,GAAY,IACnBte,EAASG,WAAW9U,OAAOizB,EAAU,GACrCve,GAAeN,aAAaO,GAAUxe,MAAK,kBAAMhG,QAAQ0G,MAAM,uCAEpE,K,yFC5dcs8B,G,8MACRnhB,KAAoB,kBAAC,KAAD,M,EACpB9gB,KAAe,Q,2DAEX08B,GACT,OAAO,kBAACwF,GAAD,CAAgBhiB,MAAO1f,KAAK0e,WAAWgB,U,+BAGzCwc,EAAoBl7B,GACzB,OAAOA,I,+EAT0BqyB,IAiBnCqH,GAAYC,cAAW,kBAAME,aAAa,CACxCyD,KAAM,CACFC,SAAU,GAEdC,UAAW,CACPpsB,SAAU,QACVqsB,OAAQ,GACRC,MAAO,IAEXC,YAAa,CACTC,WAAY,OACZjD,UAAW,OACXkD,YAAa,YAKnB6C,GAAiB3a,cAAS,SAACzI,GAC7B,IAAMgd,EAAUZ,KAEhB,OAAO,yBAAKzV,UAAW,QACnB,0BAAMA,UAAWqW,EAAQgD,KAAMvH,YAAU,EAACC,aAAa,MAAMnS,SAAU,SAAAlY,GAAC,OAAIA,EAAE8e,mBAC1E,qCACA,uBAAGhmB,KAAMF,OAAOC,SAASC,KAAMkf,OAAO,SAASgd,IAAI,uBAAnD,eACA,kBAACC,GAAD,CAAaliB,MAAOpB,EAAMoB,QAC1B,kBAACmiB,GAAD,WAKND,GAAc7a,cAAS,SAACzI,GAC1B,IAAMwjB,EAAOxjB,EAAMoB,MAAMe,cAAcjgB,KAAI,SAAAuhC,GACvC,OAAO,kBAAC,GAAD,CAAgB5iC,IAAK4iC,EAAG1iB,QAASP,KAAMijB,EAAIriB,MAAOpB,EAAMoB,WAGnE,OAAIoiB,EAAKvlC,OAEF,6BACH,yBAAKoe,MAAO,CAACuV,OAAQ,oBACjB,wBAAIvV,MAAO,CAAC6lB,aAAc,QAA1B,YACA,kBAACwB,GAAA,EAAD,KACKF,KANW,QAYtBG,GAAiB,SAAC3jB,GAYpB,OAAO,kBAACmiB,GAAA,EAAD,CAAU9lB,MAAO,CAAC6kB,eAAgB,iBAAkB0C,oBAAoB,GAC3E,kBAAC9a,GAAA,EAAD,CAASpH,MAAO,WAAa1B,EAAMQ,KAAKO,SAAS,6BAAMf,EAAMQ,KAAK7T,WAClE,kBAACmc,GAAA,EAAD,CAASpH,MAAM,WAAU,kBAACyJ,GAAA,EAAD,CAAYxS,SAAU,kBAAC,KAAD,MAAgByD,MAAM,UAAUuG,QAbnE,SAAC5P,GACbiN,EAAMoB,MAAMwB,YAAY5C,EAAMQ,MAC9BzN,EAAGoa,iBACHpa,EAAG8wB,sBAWH,kBAAC/a,GAAA,EAAD,CAASpH,MAAM,QAAO,kBAACyJ,GAAA,EAAD,CAAYxS,SAAU,kBAAC,KAAD,MAAgByD,MAAM,YAAYuG,QATnE,SAAC5P,GACZiN,EAAMoB,MAAMmT,WAAWvU,EAAMQ,MAC7BzN,EAAGoa,iBACHpa,EAAG8wB,wBAWLN,GAAY9a,cAAS,SAACzI,GACxB,IAAMwjB,EAAOlzB,MAAMC,KAAKuzB,IAAiBpqB,QAAO,SAAA7K,GAAC,OAAEA,EAAEnC,YAAUxK,KAAI,SAAA2M,GAE/D,IAAMk1B,EAAgBl1B,EAAEnC,SAYxB,OAAO,kBAACy1B,GAAA,EAAD,CAAUthC,IAAKkjC,EAAIjjC,GAAIub,MAAO,CAAC6kB,eAAgB,iBAAkB0C,oBAAoB,GACvFG,EAAIp3B,SACL,kBAACmc,GAAA,EAAD,CAASpH,MAAM,QAAO,kBAACyJ,GAAA,EAAD,CAAYxS,SAAU,kBAAC,KAAD,MAAgByD,MAAM,YAAYuG,QAbnE,SAAC5P,GACZA,EAAGoa,iBACHpa,EAAG8wB,kBACHnjB,GAAW,2BACJqjB,GADG,IAEN12B,SAAU,MACXlH,MAAK,WACJ0I,EAAEpL,mBAUd,OAAK+/B,EAAKvlC,OAIH,6BACH,wBAAIoe,MAAO,CAAC6lB,aAAc,QAA1B,WACA,kBAACwB,GAAA,EAAD,KACKF,IAPgB,6BACrB,mD,8BC3GaQ,I,uDAYjB,WAAYhqB,GAAwB,IAAD,8BAC/B,gBAZGiqB,QAAwB,KAWI,EAV3BC,QAAyB,KAUE,EAT3BC,IAAoB,KASO,EAR3BC,QAAS,EAQkB,EAP3BhiC,GAAK,EAOsB,EAN3BC,GAAK,EAMsB,yFAH3B2X,cAG2B,iDAE/B,EAAKA,SAAWA,EAFe,E,uDAKjB,IAAD,OACbuS,GAAQ,GACR+B,IAAoB,GACpB5sB,KAAK2iC,SAAS3iC,KAAK4iC,WACnB5iC,KAAKwL,SAAS+E,GAAa3J,GAAG,YAAY,WAErB,IAAD,KADhB,EAAK87B,QAAS,EACT,EAAKh0B,QACF,EAAK6zB,SAAW,EAAKM,aACrB1R,GAAeW,YAAY,EAAKyQ,SAAS,GACzC,EAAKM,YAAa,GAEtB,YAAKL,eAAL,SAAc7pB,SACd,YAAK4pB,eAAL,SAAc5pB,SACd,EAAK6pB,QAAU,KACf,EAAKD,QAAU,UAIvBviC,KAAKwL,SAAS+E,GAAa3J,GAAG,cAAc,SAAAyK,GAAO,IAAD,IAC9C,IAAIiiB,GAAWK,YAAf,CACI,EAAK4O,SAAW,EAAKM,aACrB1R,GAAeW,YAAY,EAAKyQ,SAAS,GACzC,EAAKM,YAAa,GAEtB,EAAKn0B,KAAO,EACZ,YAAK6zB,eAAL,SAAc5pB,SACd,YAAK6pB,eAAL,SAAc7pB,SACd,EAAK4pB,QAAU,IAAIhU,GAAQ,EAAKqU,WAAWjT,OAAOte,EAAGI,GAAIJ,EAAGU,IAAIrD,KAAK,EAAKA,MAAM0gB,UAAU,GAAGwC,aAAa,EAAU,IACpH,EAAK4Q,QAAU,IAAI5R,GAAS,OAAO5U,MAAM3K,EAAGI,GAAIJ,EAAGU,IACnD,EAAKrR,G5CnDW,G4CmDN2Q,EAAGI,GAAgBwK,GAC7B,EAAKtb,G5CpDW,G4CoDN0Q,EAAGU,GAAgBkK,GAC7B,EAAKymB,QAAS,EAEd,IAAMnqB,EAAM,EAAKD,SAASkG,gBAAgB1B,MAAK,SAAAnQ,GAAC,OAAIA,EAAEqM,WAAarM,EAAE9P,IAAMwU,EAAGI,IAAMJ,EAAGU,KAAOpF,EAAEjQ,KAC5F6b,GACA,EAAKgqB,QAAQ7nB,MAAM1d,SAASub,EAAImC,MAAM5F,QAAQ,IAAK,aAI3D9U,KAAKwL,SAAS+E,GAAa3J,GAAG,kBAAkB,SAAAyK,GAAO,IAAD,MAClD,GAAK,EAAKqxB,SAAUpP,GAAWK,YAA/B,CACA,IAAMmP,EAAMrnC,KAAKuiC,KAAKviC,KAAK4uB,IAAIhZ,EAAG3Q,GAAG,EAAKA,GAAI,GAAKjF,KAAK4uB,IAAIhZ,EAAG1Q,GAAK,EAAKA,GAAI,IACzEoiC,EAAKtnC,KAAKoW,MAAMixB,E5ChEJ,I4CiEZ,EAAKF,YAAclX,GAAY8D,YAAWuT,GAAM,GACpD,EAAKr0B,KAAOq0B,EACZ,YAAKR,eAAL,SAAc7zB,KAAKq0B,GACnB,YAAKP,eAAL,SAAc9e,QAAW,EAAHqf,EAAK,MACvB,EAAKH,YAAclX,GAAY+D,OAAM,YAAK8S,eAAL,SAAcS,aAAa3xB,EAAG3Q,GAAI2Q,EAAG1Q,UAGlFX,KAAKwL,SAAS+E,GAAa3J,GAAG,SAAS,SAAC+F,GAAO,IAAD,GACrC,EAAK+1B,QAAU,EAAKD,MAAK,YAAKA,WAAL,SAAU9S,OAAOhjB,EAAE8E,GAAI9E,EAAEoF,W,+BAItDyS,GjB7CN,IAAoBvL,EiBkDZ,GAJPjZ,KAAK4iC,UAAYpe,EjB9CEvL,EiB+CRjZ,KAAK4iC,YAAclX,GAAY+D,KjB9C9ClL,GAAQtL,QAAUA,EiB+CVjZ,KAAK4iC,YAAclX,GAAY+D,MAC/BzvB,KAAKyiC,IAAM,IAAIlU,GAAQ7C,GAAY2D,QAAQ4T,OAAO,GAAGvoB,MjBrFhC,UiBqFyDkX,ajBrFzD,SiBqFyF,IAE9G,UAAA5xB,KAAKyiC,WAAL,SAAU9pB,SACV3Y,KAAKyiC,IAAM,Q,kCAIU,IAAD,MACpBziC,KAAKuiC,SAAWviC,KAAK6iC,YACrB1R,GAAeW,YAAY9xB,KAAKuiC,SAAS,GAE7C,UAAAviC,KAAKwiC,eAAL,SAAc7pB,SACd,UAAA3Y,KAAKuiC,eAAL,SAAc5pB,SACd,UAAA3Y,KAAKyiC,WAAL,SAAU9pB,SACV3Y,KAAKwiC,QAAU,KACfxiC,KAAKuiC,QAAU,KACfviC,KAAKyiC,IAAM,O,qCAGC,IAAD,IACX7V,IAAoB,GACpBzQ,GAAS,GACT,UAAAnc,KAAKyiC,WAAL,SAAU/nB,MAAM,GAChB,UAAA1a,KAAKyiC,WAAL,SAAU7Q,aAAa,EAAU,K,uCAEnB,IAAD,IACbhF,IAAoB,GACpBzQ,GjBhHyB,UiBiHzB,UAAAnc,KAAKyiC,WAAL,SAAU/nB,MjBjHe,UiBkHzB,UAAA1a,KAAKyiC,WAAL,SAAU7Q,ajBlHe,SiBkHiB,O,GAzGH0B,I,yCAO1CtsB,e,yEAA2C0kB,GAAY+D,Q,oCACvDzoB,e,yEAAiC,K,0CAEjCA,e,yEAA+B,K,wBCXfk8B,G,oDAKjB,WAAYxkB,GAA6B,IAAD,8BACpC,cAAMA,IALD4B,KAAoB,kBAAC,KAAD,MAIW,EAH/B9gB,KAAe,UAGgB,EAFvBy8B,gBAEuB,EAEpC,EAAKA,WAAa,IAAIqG,GAAkB5jB,EAAWpG,UAFf,E,yDAK3B4jB,GACT,OAAO,kBAACiH,GAAD,CAAWZ,QAASviC,KAAKi8B,e,iCAIhCx9B,QAAQ6G,IAAI,yBACZtF,KAAKi8B,WAAWI,W,mCAIhB59B,QAAQ6G,IAAI,2BACZtF,KAAKi8B,WAAWK,U,+BAGXJ,EAAoBl7B,GACzB,OAAO,M,GAzB4BqyB,IA6BrC8P,GAAYpc,cAAS,SAACzI,GACxB,IAKMN,EADS7b,OAAOD,OAAOwpB,IACTlrB,KAAI,SAAAgkB,GACpB,OAAO,kBAACmT,GAAA,EAAD,CAAkBpwB,MAAOid,EAAMoT,QAAS,kBAACwL,GAAA,EAAD,MAAW9e,MAAOE,EAAMrlB,IAAG,cAASqlB,QAGvF,OAAO,6BACH,uCAAalG,EAAMikB,QAAQ7zB,KAAd,WAA4C,EAAnB4P,EAAMikB,QAAQ7zB,KAAvC,OAAqD,IAClE,kBAAC20B,GAAA,EAAD,CAAYC,aAAW,SAAS9jC,KAAK,eAAe+H,MAAO+W,EAAMikB,QAAQK,UAAWle,SAXnE,SAAC/T,GAClB2N,EAAMikB,QAAQI,SAAShyB,EAAMgU,OAAOpd,SAW/ByW,GAEL,kBAACgD,GAAA,EAAD,CACIrf,QAAQ,YACR+Y,MAAM,UACNuG,QAAS,WACD3C,EAAMikB,QAAQA,UACdpR,GAAeW,YAAYxT,EAAMikB,QAAQA,SAAS,GAClDjkB,EAAMikB,QAAQM,YAAa,IAGnC9K,UAAWzZ,EAAMikB,QAAQ7zB,MAAQ4P,EAAMikB,QAAQM,YATnD,wBCnCFnI,GAAYC,cAAW,SAACC,GAAD,OACzBC,aAAa,CACTyD,KAAM,CACF1iC,OAAQ,IACRw/B,UAAW,kBACXmD,SAAU,GAEdC,UAAW,CACPpsB,SAAU,QACVqsB,OAAQ,GACRC,MAAO,IAEX5D,MAAO,CACH1P,gBAAiBwP,EAAMG,QAAQjK,WAAWgK,MAC1C5K,OAAQ,iBACR8K,UAAWJ,EAAMK,QAAQ,GACzBC,QAASN,EAAMO,QAAQ,EAAG,EAAG,GAC7BhU,cAAe,aAyIZoc,GAnIKxc,cAAS,SAACzI,GAC1B,IAsEIklB,EAtEExiC,EAAS2xB,GAAmB/qB,QAAUD,GAAYmD,KAClDwwB,EAAUZ,KAFsE,EAG9DlX,IAAMC,UAAS,GAH+C,mBAG/End,EAH+E,KAGzEm9B,EAHyE,OAIpDjgB,IAAMC,UAAS,GAJqC,mBAI/EigB,EAJ+E,KAIpEC,EAJoE,OAK5DngB,IAAMC,SAAmB,IALmC,mBAK/EwD,EAL+E,KAKxE2c,EALwE,OAMlDpgB,IAAMC,SAAsB,MANsB,mBAM/EogB,EAN+E,KAMjE5C,EANiE,KAYhFtd,EAAc,WAChB8f,GAAQ,IAGNK,EAAmB,WACrBH,GAAa,IAOXI,EAAe,SAAChjB,GAClB4C,IACI5C,IAAW8iB,IAGXA,GACAA,EAAaG,aAEjB/C,EAAYlgB,GACZA,EAAO2S,WACPiQ,GAAa,KAGjBngB,IAAMiE,WAAU,WAaZ,OAXAliB,OAAOimB,iBAAiB,WAAYsY,GAEpCG,aAAQ,qBAAqB,SAACtzB,EAAOO,GACjC,IAAM/R,EAAMnC,SAASkU,EAAQ/R,KACvB+kC,EAAOjd,EAAMjP,QAAO,SAAAvb,GAAC,OAAEA,EAAE0nC,SAAS7lB,EAAM4d,UAAWl7B,MAAS7B,EAAI,GACtEV,QAAQ6G,IAAI,UAAWnG,EAAK+kC,GACxBA,GAAQA,IAASL,GACjBE,EAAaG,MAId,WACH3+B,OAAO0vB,oBAAoB,WAAY6O,GACvCG,KAAQG,OAAO,yBAIvB5gB,IAAMiE,WAAU,WACZ,IAAM4c,EAAW,CACb,IAAIpG,GAAa3f,EAAMI,YACvB,IAAIsd,GAAU1d,EAAMI,YACpB,IAAIwf,GAAa5f,EAAMI,YACvB,IAAI0f,GAAa9f,EAAMI,YACvB,IAAI+iB,GAAYnjB,EAAMI,YACtB,IAAIwkB,GAAc5kB,EAAMI,aAG5BklB,EAASS,GACTpD,EAAYoD,EAAS,IACrBA,EAAS,GAAG3Q,aACb,CAACpV,EAAMI,aAGV,IAAM4lB,EAAG,OAAGT,QAAH,IAAGA,OAAH,EAAGA,EAAcU,cAAa,GAkCvC,OAjCID,IAEId,EADAllB,EAAM4d,UACD,6BACD,kBAACsI,GAAA,EAAD,CACIvf,UAAW,WACXhE,QA1DQ,WACpB0iB,GAAa,IA0DDhpB,MAAO,CACHvI,SAAU,QACVqsB,OAAQ,OACRlS,KAAM,OACN6O,UAAU,mBACVtK,WAAY,UACZmJ,OAAQ,YAGZ,kBAAC,KAAD,OAEJ,kBAACwB,GAAA,EAAD,CAAOn1B,KAAMo9B,EAAW5f,QAASggB,GAC7B,yBAAK7e,UAAWqW,EAAQR,OACnBwJ,KAKR,yBACD3pB,MAAO,CAACvI,SAAU,QAASma,KAAM,OAAQE,IAAK,MAAO8M,SAAU,QAAS6B,UAAU,oBAClFnW,UAAWqW,EAAQR,OAFlB,OAIA+I,QAJA,IAIAA,OAJA,EAIAA,EAAcU,cAAa,KAKjC,6BACFf,EACD,kBAACiB,GAAA,EAAD,CACIC,UAAU,oBACVzf,UAAWqW,EAAQkD,UACnBpiB,QAAQ,EACRkE,MAAkB,OAAZujB,QAAY,IAAZA,OAAA,EAAAA,EAAcvjB,OAAQ,kBAACqkB,GAAA,EAAD,MAC5B7gB,QAASH,EACTihB,OA1GW,WACfnB,GAAQ,IA0GJn9B,MAAOgY,EAAM4d,WAAa51B,GAEzB2gB,EAAMjP,QAAO,SAAAvb,GAAC,OAAEA,EAAE0nC,SAAS7lB,EAAM4d,UAAWl7B,MAASR,KAAI,SAACugB,EAAQhhB,GAAT,OACtD,kBAAC8kC,GAAA,EAAD,CACI1lC,IAAK4hB,EAAOvhB,KACZ8gB,KAAMS,EAAOT,KACbwkB,aAAc/jB,EAAOvhB,KACrBulC,aAAW,EACX9jB,QAAS,SAAC5P,GAAQA,EAAG8wB,kBAAmB4B,EAAahjB,IACrDf,MAAOe,EAAOvhB,KAAP,oBAA2BO,EAAI,EAA/B,eC7JZ,SAASilC,GAAa1mB,GAAsC,IAAD,EACrCkF,IAAMC,UAAS,GADsB,mBAC/DwhB,EAD+D,KAClDC,EADkD,OAElC1hB,IAAMC,UAAS,GAFmB,mBAE/D0hB,EAF+D,KAEnDC,EAFmD,KAatE,OAAO,6BACDH,EAAc,kBAACI,GAAD,CAAezE,OAVhB,SAAC0E,GAEhB,GADAJ,GAAU,GACNI,EACA,OAAOhnB,EAAMI,WAAW6T,YAEzB6S,GAAc,MAKsC,KACvD,kBAAC7hB,GAAD,CACIjd,KAAM6+B,EACNnlB,MAAO,gBACPC,KAAM,oDACNsE,QAAS,UACTX,SAAU,WAAOwhB,GAAc,GAAQF,GAAU,IACjDrgB,SAAU,SAAChR,GAAD,OAAiByK,EAAMI,WAAW8T,YAAY3e,OAMpE,SAASwxB,GAAe/mB,GAEpB,OAAO,kBAACuF,GAAA,EAAD,CAAQvd,MAAM,EAAMyd,kBAAgB,qBACvC,kBAACC,GAAA,EAAD,CAAa5kB,GAAG,qBAAhB,gBACA,kBAAC6kB,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,uEAIJ,kBAACU,GAAA,EAAD,KACI,kBAAC5D,GAAA,EAAD,CAAQC,QAAS,WAAO3C,EAAMsiB,QAAO,KAArC,QAGA,kBAAC5f,GAAA,EAAD,CAAQC,QAAS,WAAQ3C,EAAMsiB,QAAO,KAAtC,UCrCG,SAAS2E,GAAkBjnB,GACtC,IAAIknB,EAAU,KACVnyB,EAAU,KAEd,GAAIsf,GAAmB/qB,QAAUD,GAAYW,QACzCk9B,EAAU,kBAACR,GAAD,CAAatmB,WAAYJ,EAAMI,kBAGzC,OAAQiU,GAAqB/qB,OACzB,KAAKF,GAAc+C,aACVzJ,OAAUqS,EAAO,kDACtB,MACJ,KAAK3L,GAAcmC,aACfwJ,EAAU,4DACV,MACJ,KAAK3L,GAAcqC,WACfsJ,EAAU,wBACV,MACJ,KAAK3L,GAAc+9B,iBACfpyB,EAAU,0DACV,MACJ,KAAK3L,GAAc0C,iBACfiJ,EAAU,+CACV,MACJ,QACIA,EAAU,KAWtB,OAPIA,IACAmyB,EAAW,kBAACE,GAAA,EAAD,CAAUp/B,MAAM,EAAMq/B,mBAAoB,GACjD,kBAACnJ,GAAA,EAAD,CAAY76B,QAAQ,KAAKikC,UAAU,KAAKnJ,cAAY,GAC/CppB,KAINmyB,E,4JC2JLK,GAAM,I,+DAxMAC,UAAW,E,KACXC,SAAgB,K,KAChBC,UAAiB,K,KACTC,YAAc,IAAI7nC,SAAQ,SAACC,EAAK6nC,GAC5C,EAAKH,SAAW1nC,EAChB,EAAK2nC,UAAYE,K,4FAQJ,IAAD,OACZ,IAAIlmC,KAAK8lC,SAAT,CACA9lC,KAAK8lC,UAAW,EAChB,IAAMK,EAASnqC,SAASC,cAAc,UACtCkqC,EAAOrnC,IAAM,uCAEbqnC,EAAOvnC,OAAS,WACZwnC,KAAKhzB,KAAK,gBAAgB,WACtBgzB,KAAKnlC,OAAOuc,KAAK,CACb6oB,SAAUxnC,2EACVynC,cAAe,CAAC,8DAChBC,MAAO,kDACR9hC,MAAK,WAEJ2hC,KAAKI,MAAMC,kBAAkBC,WAAWC,QAAO,SAAAtoC,GAAG,OAAI,EAAKqoC,WAAaroC,KACxE,EAAKqoC,WAAaN,KAAKI,MAAMC,kBAAkBC,WAAW9+B,MAC1D,EAAKm+B,cACN,SAACrnC,GACAD,QAAQC,MAAMA,GACd,EAAKsnC,UAAUtnC,UAI3B1C,SAASikB,KAAKsL,YAAY4a,M,qCAQRv1B,GAClB5Q,KAAKimC,YAAYxhC,MAAK,WAClBmM,EAASw1B,KAAKI,MAAMC,kBAAkBC,WAAW9+B,OACjDw+B,KAAKI,MAAMC,kBAAkBC,WAAWC,QAAO,SAAAtoC,GAAG,OAAIuS,EAASvS,W,0KAQ7D2B,KAAKimC,Y,UACXW,aAAY,gBAAsB,EAC7B5mC,KAAK0mC,W,yCACCN,KAAKI,MAAMC,kBAAkBI,SAASpiC,MAAK,SAAApG,GAC9CI,QAAQ6G,IAAI,aAAcjH,GAC1BI,QAAQ6G,IAAI,EAAKohC,WAAYN,KAAKI,MAAMC,kBAAkBC,WAAW9+B,W,yQAStEw+B,KAAKI,MAAMC,kBAAkBK,W,uKAUnBjpC,G,gGAAYkpC,E,+BAAmB,mBAC3C/mC,KAAK0mC,W,sBAAkB/mC,MAAM,2C,cAC5Bmf,EAAOsnB,KAAKI,MAAMC,kBAAkBO,YAAYp/B,MAChDq/B,EAAanoB,EAAKooB,kBAAkBC,a,SACrBnnC,KAAKonC,kB,cAApBC,E,OACAC,GAAiB,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQjoC,KAAM,GACzB6gB,EAAY,CAAEsnB,QAAS,CAAC,iBAAkB/nC,KAAM,uBAAwBunC,YAE3EM,UAAepnB,EAAKsnB,Q,kBAEhBvyB,MAAM,oDAAD,OAAqDsyB,EAArD,yBAAsF,CAC9FE,OAAQH,EAAS,QAAU,OAC3BI,QAAS,CACLC,cAAc,UAAD,OAAYT,GACzB,eAAgB,oBAEpBhnB,KAAM/Y,KAAKO,UAAUwY,KACtBxb,MAAK,SAAAwQ,GACJ,IAAM0yB,EAAM1yB,EAAKwyB,QAAQ7/B,IAAI,YAC7B,IAAK+/B,EAAK,MAAMhoC,MAAM,0CACtB,OAAOqV,MAAM2yB,EAAK,CACdH,OAAQH,EAAS,QAAQ,MACzBpnB,KAAMpiB,Q,oQASRmC,KAAKimC,Y,UACNjmC,KAAK0mC,W,sBAAkB/mC,MAAM,wC,gCAE3BymC,KAAKnlC,OAAO2mC,MAAMC,MAAM/e,KAAK,CAChCgf,SAAU,GACVC,OAAQ,+CACRC,OAAQ,kBACTvjC,MAAK,SAASwjC,GACb,OAAOA,EAAS5nB,OAAOwnB,U,8QAQN7nC,KAAKkoC,Y,gDAAgB,G,cAApCL,E,uBAECA,EAAMvxB,MAAK,SAACzS,EAAGuU,GAClB,OAAO,IAAInM,KAAKmM,EAAE+vB,cAAgB,GAAGppB,UAAY,IAAI9S,KAAKpI,EAAEskC,cAAgB,GAAGppB,aAChF,IAAM,M,wRAQsBsoB,E,+BAAsC,K,KAC5DA,E,qCAAgBrnC,KAAKonC,kB,6BAA9BC,E,KACMvoB,EAAOsnB,KAAKI,MAAMC,kBAAkBO,YAAYp/B,MAChDq/B,EAAanoB,EAAKooB,kBAAkBC,a,UAErCE,S,aAAA,EAAQjoC,G,uBACHO,MAAM,8C,iCAELqV,MAAM,6CAAD,OAA8CqyB,EAAOjoC,GAArD,cAAqE,CAC7EqoC,QAAS,CACLC,cAAc,UAAD,OAAYT,MAE9BxiC,MAAK,SAAApG,GACJ,OAAOA,EAAI+pC,W,oRASEpoC,KAAKonC,kB,cAApBC,E,OACAgB,EAAazB,aAAY,kBAAwB,EACjD0B,EAAkB,IAAIr8B,MAAW,OAANo7B,QAAM,IAANA,OAAA,EAAAA,EAAQc,eAAgB,GAAGppB,U,kBAEpDsoB,GAAWiB,EAAkBD,EAAehB,EAAS,M,gLAMzCA,G,8EACdiB,EAAkB,IAAIr8B,MAAW,OAANo7B,QAAM,IAANA,OAAA,EAAAA,EAAQc,eAAgB,GAAGppB,U,kBAErD/e,KAAKuoC,qBAAqBlB,GAAQ5iC,KAAlC,uCAAuC,WAAMpG,GAAN,SAAAwF,EAAA,sEACpCc,GAAG6jC,WAAWnqC,GAAK,WACrBuoC,aAAY,gBAAsB0B,KAFI,2CAAvC,kCAAAtoC,KAAA,iB,6QAYY2E,GAAG8jC,S,cAAhBL,E,yBAECpoC,KAAK0oC,OAAON,EAAM,oBAAoB3jC,KAAtC,uCAA2C,WAAMpG,GAAN,eAAAwF,EAAA,sEAC5BxF,EAAI6b,OADwB,cACxCrG,EADwC,OAE9CpV,QAAQ0G,MAAM,iBAAkB0O,GAChC+yB,aAAY,gBAAsB36B,KAAKC,MAHO,kBAIvChF,KAAKI,MAAMuM,IAJ4B,2CAA3C,kCAAA7T,KAAA,gBAKJ0E,OAAM,SAAAlG,GAGL,OAFAC,QAAQC,MAAM,iBACdD,QAAQC,MAAMF,GACP,S,uJA5LdwI,e,yEAAwC,K,IAkM7C6+B,GAAI8C,SAIJpjC,OAAOqjC,OAAS/C,GAEDA,UC/LFgD,GAAmB9hB,cAAS,SAACzI,GAAyC,IAAD,EACtDkF,IAAMC,UAAS,GADuC,mBACvEqlB,EADuE,KACjEC,EADiE,OAE9CvlB,IAAMC,UAAS,GAF+B,mBAEvEulB,EAFuE,KAE7DC,EAF6D,OAG5CzlB,IAAMC,UAAS,GAH6B,mBAGvEylB,EAHuE,KAG5DC,EAH4D,OAI9C3lB,IAAMC,SAAqB,IAJmB,mBAIvE2lB,EAJuE,KAIzDC,EAJyD,OAKhD7lB,IAAMC,SAAS,CAAC6lB,EAAG,EAAGjoB,EAAG,IALuB,mBAKvEO,EALuE,KAK9D2nB,EAL8D,KAOxEC,EAAiBhmB,IAAMwD,SAAQ,WACjC,OAAO,SAACrE,GACJomB,GAAQ,GACRzqB,EAAMI,WAAWuE,SAAWN,EAC5B3kB,GAAS6J,MAAMf,GAAK2iC,iBAAkB9mB,EAAKvjB,IAAIqF,OAC3C6Z,EAAMI,WAAWuE,SAASE,aAC1B7E,EAAMI,WAAWgrB,UAAUprB,EAAMI,WAAWuE,SAASE,aAAa1e,UAG3E,CAAC6Z,EAAMI,aAEV8E,IAAMwD,SAAQ,WAAO,IAAD,EAEhBhpB,GAAS4J,IAAId,GAAK2iC,kBAAkBhlC,KAApC,uCAAyC,WAAOrF,GAAP,eAAAyE,EAAA,yDAC1B,OAAPzE,EADiC,wDAErCX,QAAQ0G,MAAM,oBAAqB/F,GAFE,SAGlB4jB,GAAe2mB,aAAavqC,GAHV,UAG/BujB,EAH+B,wDAKrC6mB,EAAe7mB,GALsB,2CAAzC,uDASAK,GAAelB,eAAerd,MAAK,SAAAI,GAAS,OAAIwkC,EAAQxkC,MAGxD,UAAA8c,UAAUC,eAAV,SAAmBgoB,WAAWnlC,MAAK,SAASmlC,GACxC,IAAMvoB,EAAIuoB,EAASC,MACbP,EAAIM,EAASE,WACTx+B,IAAN+V,QAAyB/V,IAANg+B,GAAiBC,EAAW,CAAED,IAAGjoB,WAE7D,CAACmoB,IAEJ,IAAMO,EAAW,uCAAG,WAAOvqC,GAAP,eAAAqE,EAAA,yDAChBslC,GAAa,IACT3pC,EAAKo8B,OAAOr/B,OAFA,gCAGIymB,GAAeJ,eAAepjB,GAHlC,OAGN2N,EAHM,OAIZk8B,EAAQ,GAAD,oBAAKD,GAAL,CAAmBj8B,KAJd,2CAAH,sDAcjB,OAAI9E,GAAQT,QAAUD,GAAYmD,KAAa,KAExC,yBAAKma,UAAW,eACnB,kBAACmC,GAAA,EAAD,CACIpH,MAAM,oBACNrF,MAAO,CACHwM,cAAe,SAGnB,kBAACE,GAAA,EAAD,CACI3M,MAAM,UACNuG,QAAS,WAAKgoB,GAAY,KAE1B,kBAAC,KAAD,CAAYtuB,MAAO,CAACD,MAAO,eAInC,kBAACmJ,GAAA,EAAD,CAAQvd,KAAMwiC,GAAQE,EAAUllB,QAvBX,WAChBglB,GACDG,GAAY,KAsBZ,kBAACjlB,GAAA,EAAD,CAAarJ,MAAO,CAACqvB,UAAW,WAAhC,iBACA,kBAAC/lB,GAAA,EAAD,CAAetJ,MAAO,CAACqvB,UAAW,WAC9B,kBAACC,GAAD,CAAcplC,UAAWukC,EAAchR,SAAUoR,EAAgBzrB,SAAUO,EAAMI,WAAWuE,WAC5F,kBAACjC,GAAA,EAAD,CACIrf,QAAQ,YACR+Y,MAAM,UACNuG,QAAS,kBAAIkoB,GAAa,IAC1Be,UAAW,kBAAC,KAAD,OAJf,uBAQA,uBAAGvvB,MAAO,CAACD,MAAO,SAEVkH,EAAO,WACCA,EAAQP,EAAEO,EAAQ0nB,EAAI,KAAKa,QAAQ,GADpC,qBAiH/B,SAAqBC,GAA8B,IAAfC,EAAc,uDAAH,EAC3C,GAAc,IAAVD,EAAa,MAAO,UAExB,IAAMh5B,EAAI,KACJk5B,EAAKD,EAAW,EAAI,EAAIA,EACxBE,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAE5DjvC,EAAIG,KAAKoW,MAAMpW,KAAK6J,IAAI8kC,GAAS3uC,KAAK6J,IAAI8L,IAEhD,OAAOo5B,YAAYJ,EAAQ3uC,KAAK4uB,IAAIjZ,EAAG9V,IAAI6uC,QAAQG,IAAO,IAAMC,EAAMjvC,GAzHQmvC,CAAY7oB,EAAQ0nB,IACxE,2BAGd,kBAACtoB,GAAA,EAAD,CACIrf,QAAQ,WACR+Y,MAAM,UACNuG,QAASypB,GACTR,UAAW,kBAAC,KAAD,OAJf,eAQA,2BACI9qC,GAAG,eACHolB,KAAK,OACL7J,MAAO,CAACgwB,QAAS,QACjBjmB,SAAUkmB,GACVC,OAAQ,qBAEZ,kBAAC7pB,GAAA,EAAD,CACIrf,QAAQ,WACR+Y,MAAM,UACNuG,QAAS,kCAAMjlB,SAAS8uC,eAAe,uBAA9B,aAAM,EAAyCC,SACxDb,UAAW,kBAAC,KAAD,MACXvvB,MAAO,CAACikB,WAAY,QALxB,WASA,kBAAC5a,GAAA,EAAD,sBACA,kBAAChD,GAAA,EAAD,CACIrf,QAAQ,YACR+Y,MAAM,UACNuG,QAAS,kBAAM2nB,GAAOoC,gBACtBd,UAAW,kBAAC,KAAD,MACXvvB,MAAO,CAACgwB,QAAS/B,GAAOlC,WAAa,OAAO,KALhD,WASA,kBAAC1lB,GAAA,EAAD,CACIrf,QAAQ,YACR+Y,MAAM,YACNuG,QAAS,kBAAM2nB,GAAO9B,WACtBoD,UAAW,kBAAC,KAAD,MACXvvB,MAAO,CAACgwB,QAAS/B,GAAOlC,WAAa,GAAG,SAL5C,cAWR,kBAACnjB,GAAD,CACIjd,KAAM4iC,EACflpB,MAAM,eACNC,KAAK,qCACL6E,WAAY,SACZP,QAAS,gBACTM,SAAUklB,EACVnmB,SAAU,kBAAIulB,GAAa,UAMvB,SAASc,GAAa3rB,GAA8E,IAAD,EACtEkF,IAAMC,SAA6B,MADmC,mBAC/FwnB,EAD+F,KACrFC,EADqF,OAEtE1nB,IAAMC,SAAwBnF,EAAMP,UAFkC,mBAE/FA,EAF+F,KAErFkjB,EAFqF,KAQhGtd,EAAc,SAACV,GACbA,IACAge,EAAYhe,GACZ3E,EAAM8Z,SAASnV,IAEnBioB,EAAY,OAGVC,EAAQ7sB,EAAMzZ,UAAUyR,MAAK,SAAC80B,EAAIC,GAAL,OAAUD,EAAG/oB,YAAYgpB,EAAGhpB,eAAa7hB,KAAI,SAAA2M,GAC5E,OAAO,kBAACszB,GAAA,EAAD,CAAUthC,IAAKgO,EAAE/N,GAAI6hB,QAAS,kBAAI0C,EAAYxW,KACjD,2BAAIA,EAAE3N,MADH,YACyB,+BAAK,IAAIyM,KAAKkB,EAAEkV,aAAaipB,iBAA7B,SAIpC,OACI,yBAAK3wB,MAAO,CAAC6lB,aAAc,SACvB,kBAACN,GAAA,EAAD,CAAYqL,QAAQ,qBAApB,qBACA,kBAACvqB,GAAA,EAAD,CACIrf,QAAQ,WACRsf,QAvBQ,SAACtQ,GACjBu6B,EAAYv6B,EAAM66B,gBAuBVpsC,GAAI,oBACJ24B,SAAmC,IAAzBzZ,EAAMzZ,UAAUtI,OAC1Boe,MAAO,CAACmc,SAAU,QAASyC,SAAU,QAASkS,UAAW,WAExD1tB,EAAUA,EAASve,KAAQ8e,EAAMzZ,UAAUtI,OAAS,oBAAoB,sBAE7E,kBAACmvC,GAAA,EAAD,CACItsC,GAAG,cACH6rC,SAAUA,EACVU,aAAW,EACXrlC,KAAMslC,QAAQX,GACdnnB,QAAS,kBAAIH,EAAY,OACzBkoB,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,gBAAiB,CAAEF,SAAU,MAAOC,WAAY,WAE/CZ,I,SAsBFT,K,8EAAf,4BAAA7mC,EAAA,sEAEuBc,GAAG8jC,SAF1B,OAEUL,EAFV,OAKI6D,GAAS7D,EAAD,oBAA4B,oBALxC,4C,+BAQewC,K,8EAAf,8BAAA/mC,EAAA,6DAEUqoC,EAFV,UAEiBlwC,SAAS8uC,eAAe,uBAFzC,aAEiB,EAAyCjD,MAAM,GAFhE,SAGUljC,GAAG6jC,WAAW0D,GAHxB,4C,0BCnOYC,G,+BCACC,GAAgBrlB,cAAS,SAACzI,GAAyC,IAAD,EAC3CkF,IAAMC,SAA6B,MADQ,mBACpEwnB,EADoE,KAC1DC,EAD0D,KAErEjoB,EAAW3E,EAAMI,WAAWuE,SAClC,OAAI5a,GAAQT,QAAUD,GAAYmD,KAAa,KAE1CmY,EAEE,yBAAKtI,MAAO,CAACwM,cAAe,SAC/B,kBAACC,GAAA,EAAD,CACIpH,MAAM,kBAEN,kBAACqH,GAAA,EAAD,CACI1lB,QAAQ,WACRsf,QAAS,SAACqe,GAAY4L,EAAY5L,EAAIkM,gBACtC7wB,MAAO,CAAChf,MAAO,QAAS8vC,UAAW,SAAU9P,UAAW,QAExD,kBAAC,KAAD,CAAShhB,MAAO,CAACkkB,YAAa,SAC9B,kBAACrC,GAAA,EAAD,CAAY76B,QAAQ,UAAU0qC,QAAM,IACvB,OAARppB,QAAQ,IAARA,OAAA,EAAAA,EAAUE,aAAcF,EAASE,YAAc,sBAI5D,kBAACmpB,GAAA,EAAD,CACIhmC,OAAQ2kC,EACRA,SAAUA,EACVnnB,QAAS,kBAAIonB,EAAY,OACzBW,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,WAGhB,kBAAC,GAAD,CAAkB9oB,SAAUA,EAAUvE,WAAYJ,EAAMI,eA9B1C,QAmCb6tB,GAAmB,SAACjuB,GAA6D,IAAD,EACzDkF,IAAMC,SAASnF,EAAM2E,SAASE,aAD2B,mBAClFpF,EADkF,KACxEkjB,EADwE,KAOzF,OAAO,0BACHtmB,MAAO,CACH4jB,SAAU,EACV5iC,MAAO,SAEXo7B,YAAU,EACVC,aAAa,MACbnS,SAAU,SAAAlY,GAAC,OAAIA,EAAE8e,mBAEjB,kBAACwL,GAAA,EAAD,CAAWl6B,KAAG,GACV,kBAACyvC,GAAD,CAAiBvpB,SAAU3E,EAAM2E,SAAUmV,SAd5B,SAAC1W,GACpBuf,EAAYvf,OAeZ,kBAACuV,GAAA,EAAD,CAAWl6B,KAAG,GACV,kBAAC,GAAD,CAAiB2hB,WAAYJ,EAAMI,WAAYX,SAAUA,EAAUkjB,YAAaA,IAChF,kBAAC,GAAD,CAAmBviB,WAAYJ,EAAMI,WAAYuE,SAAU3E,EAAM2E,SAAUlF,SAAUA,EAAUkjB,YAAaA,IAC5G,kBAAC,GAAD,CAAmBviB,WAAYJ,EAAMI,WAAYuE,SAAU3E,EAAM2E,SAAUlF,SAAUA,EAAUkjB,YAAaA,OAM3GuL,GAAkBzlB,cAAS,SAACzI,GAAqD,IAAD,EACzDkF,IAAMC,SAASnF,EAAM2E,SAASE,aAD2B,mBAClFpF,EADkF,KACxEkjB,EADwE,KAGnFr8B,EAAS0Z,EAAM2E,SAASre,OAAOpE,KAAI,SAAA4X,GACrC,OAAO,kBAACqoB,GAAA,EAAD,CACHthC,IAAKiZ,EACL6I,QAAS,WAAOggB,EAAY7oB,GAAIkG,EAAM8Z,SAAShgB,IAC/C2F,SAAU3F,IAAM2F,GAEhB,kBAACye,GAAA,EAAD,CACI76B,QAAQ,UACR0qC,QAAM,EACN3xB,MAAOtC,IAAMkG,EAAM2E,SAASE,YAAc,gBAAgB,WAEzD/K,OAKb,OAAO,kBAAC4pB,GAAA,EAAD,CAAUrnB,MAAO,CAAC+d,UAAW,QAAU+T,SAAU,OAAQ9wC,MAAO,SAClEiJ,MAII8nC,GAAkB,SAACpuB,GAAuF,IAAD,EAClH,OAAO,kBAAC0C,GAAA,EAAD,CACHtG,MAAM,UACNqd,UAAU,UAAAzZ,EAAMI,WAAWuE,gBAAjB,eAA2BE,eAAgB7E,EAAMP,SAC3DkD,QAAS,WACD3C,EAAMP,UACNO,EAAMI,WAAWgrB,UAAUprB,EAAMP,UAAUtZ,SALhD,SAaEkoC,GAAoB,SAACruB,GAK3B,IAAD,EAC6BkF,IAAMC,UAAS,GAD5C,mBACKmpB,EADL,KACcC,EADd,KAGF,OAAO,6BACH,kBAAC7rB,GAAA,EAAD,CACI+W,UAAWzZ,EAAMP,SACjBrD,MAAM,YACNuG,QAAS,WAAO4rB,GAAY,KAHhC,UAOA,kBAAC9nB,GAAD,CACIze,KAAMsmC,EACNhpB,SAAU,WAAOipB,GAAY,IAC7BznB,UAAW,WACH9G,EAAMP,WACNO,EAAMI,WAAWwD,YAAY5D,EAAM2E,SAAU3E,EAAMP,UAAUrZ,OAAM,SAAAlG,GAC/DyL,GAAcvL,MAAM,2BACpBD,QAAQC,MAAMF,MAElB8f,EAAM2iB,YAAY,MAClB4L,GAAY,KAGpB7sB,MAAO,iBACPkF,OAAM,qDAAgD5G,EAAMP,SAAtD,MACNsH,cAAe,aAKdynB,GAAoB,SAACxuB,GAK3B,IAAD,EAC8BkF,IAAMC,UAAS,GAD7C,mBACKkF,EADL,KACiBuc,EADjB,KAEI6H,EAAe,SAACvtC,GAElB,GADA0lC,GAAU,GACN5mB,EAAM2E,SAASre,OAAO8Y,SAASle,GAC/B,OAAOyK,GAAcvL,MAAM,mCAE3Bc,GAAQA,EAAKo8B,OAAOr/B,SACpB+hB,EAAM2E,SAASre,OAAO9I,KAAK0D,GAC3B8e,EAAM2iB,YAAYzhC,GAClB8e,EAAMI,WAAWgrB,UAAUlqC,GAAMiF,SAIzC,OAAO,6BACH,kBAACuc,GAAA,EAAD,CACIrG,MAAO,CAACD,MAAO,uBACfuG,QAAS,WACLikB,GAAU,KAHlB,OAQA,kBAAC3hB,GAAD,CACIjd,KAAMqiB,EACN3I,MAAM,iBACNC,KAAK,oCACLsE,QAAS,aACTO,WAAY,SACZD,SAAUkoB,EACVnpB,SAAUmpB,M,qBCjLTC,GAAkBjmB,cAAU,SAACzI,GAAyC,IAAD,EACxE2uB,GAAa,UAAA3uB,EAAMI,WAAWuE,gBAAjB,eAA2BE,eACzC7E,EAAMI,WAAWpG,SAASuF,SAAWS,EAAMI,WAAWlR,QAAQoK,cAFW,EAGlD4L,IAAMC,UAAS,GAHmC,mBAGvEypB,EAHuE,KAG/DC,EAH+D,OAIhD3pB,IAAMC,SAAc,MAJ4B,mBAIvE2pB,EAJuE,KAI7DC,EAJ6D,KAMxEC,EAAY9pB,IAAMwD,SAAQ,WAC5B,OAAKimB,EACL,sBAAO,4BAAAppC,EAAA,yDACE7C,KADF,wDAEHmsC,GAAU,GAFP,kBAIO7uB,EAAMI,WAAW4uB,YAJxB,WAKK1E,GAAOlC,WALZ,gCAMWkC,GAAO2E,gBANlB,OAQCtjC,GAAc1I,QAAd,0BAA+B+c,EAAMI,WAAWuE,gBAAhD,aAA+B,EAA2BE,YAA1D,KAA0E,CACtEqqB,iBAAkB,IAClBtiC,kBAAkB,IAVvB,kDAaCzM,QAAQC,MAAR,MACAuL,GAAcvL,MAAd,0BAAuC,KAAI2U,UAd5C,QAgBH85B,GAAU,GAhBP,0DADiB,eAmBzB,CAAC7uB,EAAMI,WAAYuuB,IAkCtB,GAhCAzpB,IAAMwD,SAAQ,WAEV4hB,GAAO6E,eAAP,uCAAsB,WAAOC,GAAP,eAAA7pC,EAAA,0DACd6pC,EADc,gCAEO9E,GAAO+E,mBAFd,QAERtG,EAFQ,QAIVgG,EAAUhG,GAEVp9B,GAAcpI,KAAK,0BANT,sBASdoI,GAAcrI,QAAQ,8CAA+C,CACjEmf,OAAQ,kBAACC,GAAA,EAAD,CAAQC,QAAS,kBAAI2nB,GAAOoC,gBAAgBrpC,QAAS,YAArD,WACR6rC,iBAAkB,MAXR,2CAAtB,yDAeD,IAEHhqB,IAAMiE,WAAU,WAQZ,OANAwc,aAAQ,UAAU,SAACtzB,GACfA,EAAM8a,iBACN9a,EAAMwxB,kBACNmL,OAGG,WACHrJ,KAAQG,OAAO,aAEpB,CAAC9lB,EAAMI,WAAY4uB,KAEjBtsC,KAAU,OAAO,KAEtB,IAAIgf,EAAQitB,EAAa,sBAAwB,sBAIjD,OAFIC,IAAQltB,EAAQ,uBAEb,6BACH,kBAACoH,GAAA,EAAD,CACIpH,MAAOA,EACPrF,MAAO,CACHwM,cAAe,SAGnB,8BACI,kBAACE,GAAA,EAAD,CACI3M,MAAM,UACNuG,QAASqsB,EACTvV,UAAWkV,GAEVC,EAAS,kBAACU,GAAA,EAAD,MAAuB,kBAAC,KAAD,SAI7C,kBAAC7oB,GAAD,CACIze,OAAQ8mC,EACRxpB,SAAU,kBAAIypB,EAAU,OACxBjoB,UAAW,WACP3mB,QAAQ6G,IAAI,2BACZsjC,GAAOiF,WAAWT,GAAU3oC,OAC5B4oC,EAAU,OAEdrtB,MAAO,kBACPkF,OAAQ,kGACRG,cAAe,eACfF,aAAc,mB,qBFzGnB,SAASvd,GAAIzI,GAA+B,IAAlB2uC,EAAiB,uDAAN,KAClCruC,EAAMmnC,aAAamH,QAAQ5uC,GACjC,OAAOM,EAAMyH,KAAKI,MAAM7H,GAAOquC,EAI5B,SAAShkC,GAAI3K,EAAakI,GAC7Bu/B,aAAaoH,QAAQ7uC,EAAK+H,KAAKO,UAAUJ,K,SAIjC8kC,K,qBAAAA,E,uBAAAA,E,4BAAAA,Q,KGYL,IAAM8B,GAAoBlnB,cAAU,SAACzI,GAAyC,IAAD,EAC9CkF,IAAMC,UAAS,GAD+B,mBACzEigB,EADyE,KAC9DC,EAD8D,KAmBhF,OAhBAngB,IAAMiE,WAAU,WAWZ,OAVAwG,GAAgBigB,GAAOA,GAAWC,WAAW,IAC7Chd,GAAeid,aAAaF,GAAOA,GAAWG,eAAe,IAC7D/vB,EAAMI,WAAWpG,SAASg2B,qBAAqBJ,GAAOA,GAAWK,YAAY,IAE7EtK,aAAQ,UAAU,SAACtzB,GACfA,EAAM8a,iBACN9a,EAAMwxB,kBACNwB,GAAa,MAGV,WACHM,KAAQG,OAAO,aAEpB,CAAC9lB,EAAMI,WAAWpG,WAEd,yBAAKqC,MAAO,CAAEhf,MAAO,SACxB,kBAACyrB,GAAA,EAAD,CACIpH,MAAM,cACNrF,MAAO,CACHwM,cAAe,SAGnB,8BACI,kBAACE,GAAA,EAAD,CACI3M,MAAM,UACNuG,QAAS,kBAAM0iB,GAAa,IAC5B5L,SAAU2L,GAEV,kBAAC,KAAD,SAKZ,kBAAC7f,GAAA,EAAD,CAAQvd,KAAMo9B,EAAW5f,QAAS,kBAAM6f,GAAa,KACjD,kBAAC3f,GAAA,EAAD,CAAarJ,MAAO,CAACqvB,UAAW,WAAhC,iBAEA,kBAAChpB,GAAA,EAAD,CACIC,QAAS,WAEL1b,OAAOC,SAAWD,OAAOC,SAASgpC,WAAW15B,QAAQvP,OAAOC,SAAS8sB,KAAM,KAE/E5X,MAAM,YACN/Y,QAAS,WACTgZ,MAAO,CAACghB,UAAW,OAAQ6E,aAAc,OAAQ7kC,MAAO,SAP5D,cAYA,kBAACsoB,GAAA,EAAD,CAAetJ,MAAO,CAACqvB,UAAW,SAAU3lB,OAAQ,EAAG6W,QAAS,IAC5D,uBAAGvgB,MAAO,CAACD,MAAO,SACd,kBAAC0M,GAAA,EAAD,CAASpH,MAAO,yBAAKrF,MAAO,CAAC8zB,WAAY,aAAe5vC,0DACpD,2BACI,uBACI4G,KAAI,sDAAiD5G,WACrD8lB,OAAQ,SAAUhK,MAAO,CAAC+zB,eAAgB,QAC1C/M,IAAI,uBAEH,wBAMjB,kBAACnF,GAAA,EAAD,CAAY76B,QAAQ,KAAKikC,UAAU,KAAKnJ,cAAY,GAApD,oBAGJ,kBAACxY,GAAA,EAAD,CAAetJ,MAAO,CAACqvB,UAAW,SAC9B,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAY1xB,SAAUgG,EAAMI,WAAWpG,WACvC,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,YAOVq2B,GAAa,WAAO,IAAD,EACMnrB,IAAMC,SAASyqB,GAAOA,GAAWC,WAAW,IADlD,mBACdS,EADc,KACLC,EADK,KASrB,OAAO,6BACH,kBAAClX,GAAA,EAAD,CAAkBpwB,MAAOqnC,EAAShX,QAC9B,kBAACC,GAAA,EAAD,CACIC,QAAS8W,EACTlqB,SAVO,SAACrT,GAChBw9B,EAAQx9B,EAAGsT,OAAOmT,SAClBoW,GAAOA,GAAWC,UAAW98B,EAAGsT,OAAOmT,SACvC7J,GAAgB5c,EAAGsT,OAAOmT,UAQlBt4B,KAAK,WACLy4B,WAAY,CAAE,aAAc,eAElC3T,MAAO,OAAQ3J,MAAO,CAACD,MAAOk0B,EAAU,QAAU,YAKtDE,GAAa,SAACxwB,GAAoC,IAAD,EACvBkF,IAAMC,SAASnF,EAAMhG,SAAS6F,WADP,mBAC5C4wB,EAD4C,KACnCC,EADmC,KASnD,OAAO,6BACH,kBAACrX,GAAA,EAAD,CAAkBpwB,MAAOwnC,EAASnX,QAC9B,kBAACC,GAAA,EAAD,CACIC,QAASiX,EACTrqB,SAVO,SAACrT,GAChB29B,EAAS39B,EAAGsT,OAAOmT,SACnBoW,GAAOA,GAAWK,WAAYl9B,EAAGsT,OAAOmT,SACxCxZ,EAAMhG,SAASg2B,qBAAqBj9B,EAAGsT,OAAOmT,UAQtCt4B,KAAK,WACLy4B,WAAY,CAAE,aAAc,gBAElC3T,MAAO,cAAe3J,MAAO,CAACD,MAAOq0B,EAAU,QAAU,YAK7DE,GAAgB,WAAO,IAAD,EACOzrB,IAAMC,SAASyqB,GAAOA,GAAWG,eAAe,IADvD,mBACjBa,EADiB,KACLF,EADK,KASxB,OAAO,6BACH,kBAACrX,GAAA,EAAD,CAAkBpwB,MAAO2nC,EAAYtX,QACjC,kBAACC,GAAA,EAAD,CACIC,QAASoX,EACTxqB,SAVO,SAACrT,GAChB29B,EAAS39B,EAAGsT,OAAOmT,SACnBoW,GAAOA,GAAWG,cAAeh9B,EAAGsT,OAAOmT,SAC3C3G,GAAeid,aAAa/8B,EAAGsT,OAAOmT,UAQ9Bt4B,KAAK,WACLy4B,WAAY,CAAE,aAAc,mBAElC3T,MAAO,oBAAqB3J,MAAO,CAACD,MAAOw0B,EAAa,QAAU,YAKtEC,GAAa,WAAO,IAAD,EACK3rB,IAAMC,SAAS,GADpB,mBACd3H,EADc,KACPszB,EADO,KAGrB,SAASC,EAAYhoC,I1B9BlB,SAAiByU,GACpB6P,GAAS2jB,QAAQxzB,GAAO,G0B8BpBuW,CAAehrB,GACf+nC,EAAS/nC,GAGb,OAAO,6BACH,kBAACm1B,GAAA,EAAD,CAAYp9B,GAAG,kBAAkBq9B,cAAY,EAAC9hB,MAAO,CAACqvB,UAAW,WAAjE,eACiBluB,EADjB,KAGA,kBAAC4gB,GAAA,EAAD,CACIn1B,MAAOuU,EACP6gB,iBAAkB,2BAAS7gB,IAC3BiI,kBAAgB,kBAChB6Y,kBAAkB,OAClBC,KAAM,GACNC,OAAK,EACLnrB,IAAK,GACLD,IAAK,EACLgT,SAAW,SAAC/T,EAAYosB,GAAb,OAA8BsS,EAAYtS,QAM3DwS,GAAa,WAAO,IAAD,EACe/rB,IAAMC,UAAS,GAD9B,mBACd+rB,EADc,KACFC,EADE,KASrB,OAAO,6BACH,kBAACzuB,GAAA,EAAD,CACIC,QAAS,WACLwuB,GAAc,IAElB/0B,MAAM,UACN/Y,QAAS,WACTgZ,MAAO,CAACghB,UAAW,OAAQ6E,aAAc,OAAQ7kC,MAAO,SAN5D,mBAUA,kBAAC4nB,GAAD,CACItD,KAAM,mBACN2D,SAAU,kBAAI6rB,GAAc,IAC5B5qB,SAAU,SAAChnB,GAAD,OApBA2B,EAoB2B3B,OAnBzCG,GAAS6J,MAAMf,GAAK0Y,SAAUhgB,GAAMiF,MAAK,WACrCc,OAAOC,SAASkqC,YAFxB,IAAkBlwC,GAqBV8G,KAAMkpC,EACNxvB,MAAO,kBACPuE,QAAS,oBACTO,WAAY,aC7MxBrmB,QAAQ6G,IAAR,oGAAyGzG,YAEzG,IAAM6f,GAAa,IAAIyT,GAEvB,IAA+C5sB,OAAOC,SAASC,KAAKiY,SAAS,YAAa,CAEtF,SAASiyB,MADTlxC,QAAQoD,KAAK,8CAEb,IAAM+tC,GAAaztC,OAAOC,OAAO,GAAI3D,SAErC8G,OAAOsqC,gBAAkB,WACrB1tC,OAAOC,OAAO3D,QAASmxC,KAE3BnxC,QAAQ0G,MAAQwqC,GAChBlxC,QAAQ6G,IAAMqqC,GACdlxC,QAAQoD,KAAO8tC,GAGnB,IAgFeG,GAhFH/oB,cAAS,WACjB,IAAMgpB,EAAUC,aAAc,qBADP,EAESxsB,IAAMC,UAAS,GAFxB,mBAEhBwsB,EAFgB,KAENC,EAFM,KAGjB5zB,EAAO,uCAAG,WAAO9c,GAAP,SAAAqE,EAAA,0DACRrE,IAAQA,EAAKjD,OADL,uBAER2zC,GAAY,GACZnpC,GAAgB+C,IAAItK,GAHZ,SAIFxB,GAAS6J,MAAMf,GAAK0Y,SAAUhgB,GAJ5B,uBAKFkf,GAAWyxB,QALT,8BAOR5qC,OAAOC,SAASkqC,SAPR,4CAAH,sDAUblsB,IAAMwD,SAAQ,WAEVhpB,GAAS4J,IAAId,GAAK0Y,UAAU/a,KAA5B,uCAAiC,WAAOjF,GAAP,SAAAqE,EAAA,0DACzBrE,IAAQA,EAAKjD,OADY,uBAE1BwK,GAAgB+C,IAAItK,GACpB0wC,GAAY,GAHc,SAIpBxxB,GAAWyxB,QAJS,6BAMzBD,GAAY,GANa,2CAAjC,yDASD,IAEH,IAAI1K,EAA4B,KAuBhC,OArBIyK,EACAzK,EAAU,kBAACjiB,GAAD,CACNjd,KAAM2pC,EACNjwB,MAAM,gBACNC,KAAK,oCACLsE,QAAS,OACTM,SAAUvI,EACVsH,SAAUtH,IAENoC,GAAW+T,MAMZ/T,GAAW0xB,eAClB5K,EAAU,kBAAC,GAAD,CAAa9mB,WAAYA,GAAYwd,WAAY6T,IACnDrxB,GAAW0xB,iBACnB5K,EAAU,kBAACD,GAAD,CAAmB7mB,WAAYA,MARzC8mB,EAAU,kBAACE,GAAA,EAAD,CAAUp/B,MAAM,EAAMq/B,mBAAoB,GAChD,kBAACnJ,GAAA,EAAD,CAAY76B,QAAQ,KAAKikC,UAAU,KAAKnJ,cAAY,GAApD,WACY,kBAACmR,GAAA,EAAD,CAAkBlzB,MAAM,cAUxC,kBAAC,KAAD,CAAkB21B,SAAU,GACxB,kBAAC,GAAD,MACA,yBAAKprB,UAAU,eACX,yBAAKtK,MAAO,CACRgwB,QAAS,OACTxjB,cAAe,OACfmpB,cAAe,MACfl+B,SAAU,QACVqa,IAAK,OACLF,KAAM,SAEN,yBAAK5R,MAAO,CACRgwB,QAAS,OACTxjB,cAAe,OACfmpB,cAAe,WAEf,kBAACrC,GAAD,CAAmBvvB,WAAYA,KAC/B,kBAACmqB,GAAD,CAAkBnqB,WAAYA,KAC9B,kBAACoI,GAAD,OAEJ,kBAACslB,GAAD,CAAe1tB,WAAYA,KAC3B,kBAACsuB,GAAD,CAAiBtuB,WAAYA,MAGhC8mB,OCrGX+K,GAAc3E,QACW,cAA7BrmC,OAAOC,SAASs2B,UAEe,UAA7Bv2B,OAAOC,SAASs2B,UAEhBv2B,OAAOC,SAASs2B,SAASxc,MACvB,2DA8CN,SAASkxB,GAAgBC,EAAe/qB,GACtC/D,UAAU+uB,cACPhd,SAAS+c,GACThsC,MAAK,SAAAksC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxc,QACf1S,UAAU+uB,cAAchyB,YAI1BjgB,QAAQ6G,IACN,iHAKEogB,GAAUA,EAAOsrB,UACnBtrB,EAAOsrB,SAASL,KAMlBlyC,QAAQ6G,IAAI,sCAGRogB,GAAUA,EAAOurB,WACnBvrB,EAAOurB,UAAUN,WAO5BjsC,OAAM,SAAAhG,GACLD,QAAQC,MAAM,4CAA6CA,M,cC/FjEwyC,IAAS/mB,OAEL,kBAAC,GAAD,MAEFnuB,SAAS8uC,eAAe,SAG1B,IAAIqG,IAAa,GDWV,SAAkBzrB,GACvB,GAA6C,kBAAmB/D,UAAW,CAMzE,GAJkB,IAAIka,IACpBh9B,yBACA0G,OAAOC,SAASC,MAEJ2rC,SAAW7rC,OAAOC,SAAS4rC,OAIvC,OAGF7rC,OAAOimB,iBAAiB,QAAQ,WAC9B,IAAMilB,EAAK,UAAM5xC,yBAAN,sBAEP0xC,KAgEV,SAAiCE,EAAe/qB,GAE9C1Q,MAAMy7B,EAAO,CACXhJ,QAAS,CAAE,iBAAkB,YAE5BhjC,MAAK,SAAAwjC,GAEJ,IAAMoJ,EAAcpJ,EAASR,QAAQ7/B,IAAI,gBAEnB,MAApBqgC,EAASne,QACO,MAAfunB,IAA8D,IAAvCA,EAAY/nB,QAAQ,cAG5C3H,UAAU+uB,cAAcje,MAAMhuB,MAAK,SAAAksC,GACjCA,EAAa3M,aAAav/B,MAAK,WAC7Bc,OAAOC,SAASkqC,eAKpBc,GAAgBC,EAAO/qB,MAG1BhhB,OAAM,WACLjG,QAAQ6G,IACN,oEAvFAgsC,CAAwBb,EAAO/qB,GAI/B/D,UAAU+uB,cAAcje,MAAMhuB,MAAK,WACjChG,QAAQ6G,IACN,iHAMJkrC,GAAgBC,EAAO/qB,OCzC/BgrB,CAAuB,CACnBO,UAAW,SAACpzC,GACRY,QAAQ6G,IAAI,kCAAmCzH,IAEnDmzC,SAAU,SAACnzC,GACPY,QAAQkM,KAAK,uBAAwB9M,GACrC,IAAMijB,EAAM7W,GAAcpI,KAAK,+CAAgD,CAC3EqJ,kBAAkB,EAClB2W,SAAS,EACTd,OAAQ,kBAACC,GAAA,EAAD,CACJrf,QAAS,WACTsf,QAAS,WAAK,IAAD,EAAChX,GAAclI,MAAM+e,GAAMqwB,IAAa,EAAM,UAAAtzC,EAAK0zC,eAAL,SAAcC,YAAY,CAAEhtB,KAAM,mBAFzF,eAUpB,WAAA7C,UAAU+uB,qBAAV,WAAyBllB,iBAAiB,oBAAoB,WAC1D/sB,QAAQkM,KAAK,0BACRwmC,KACLA,IAAa,EACb5rC,OAAOC,SAASkqC,c,mBCxCpB90C,EAAOC,QAAU,EAAQ,KAAWC,KAAK,EAAQ,IAAR,IAA0XF,EAAOC,QAAQE,YAAa,I","file":"static/js/main.76618e36.chunk.js","sourcesContent":["module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/src/game/net/messageEncoder.worker.ts\")());module.exports.__esModule = true;","module.exports = __webpack_public_path__ + \"static/media/sheet-composite.enc.c54111ee.png\";","/*\n * converted from https://www.npmjs.com/package/image-scramble\n */\nvar shuffleSeed = require('shuffle-seed');\n\nvar self = function(img,sliceSize,seed,bmp){\n\tvar i;\n\tvar totalParts = Math.ceil(img.width/sliceSize)*Math.ceil(img.height/sliceSize);\n\tvar inds = [];\n\tvar ctx;\n\tfor(i=0;i<totalParts;i++) inds.push(i);\n\tif(!bmp){\n\t\tvar canvas=document.createElement(\"canvas\");\n\t\tctx=canvas.getContext('2d');\n\t\tcanvas.width=img.width;\n\t\tcanvas.height=img.height;\n\t}\n\n\n\tvar verticalSlices=Math.ceil(img.width/sliceSize);\n\n\tvar getSlices = function(){\n\t\tvar slices = {};\n\t\tvar i;\n\t\tfor(i=0;i<totalParts;i++){\n\t\t\tvar slice = {};\n\t\t\tvar row=parseInt(i/verticalSlices);\n\t\t\tvar col=i-row*verticalSlices;\n\t\t\tslice.x=col*sliceSize;\n\t\t\tslice.y=row*sliceSize;\n\t\t\tslice.width=(sliceSize-(slice.x+sliceSize<=img.width ?  0 : (slice.x+sliceSize)-img.width));\n\t\t\tslice.height=(sliceSize-(slice.y+sliceSize<=img.height ?  0 : (slice.y+sliceSize)-img.height));\n\t\t\tif(!slices[slice.width+\"-\"+slice.height]) slices[slice.width+\"-\"+slice.height]=[];\n\t\t\tslices[slice.width+\"-\"+slice.height].push(slice);\n\t\t}\n\t\treturn slices;\n\t}\n\n\tvar getColsInGroup = function(slices){\n\t\tif(slices.length===1) return 1;\n\t\tvar t = 'init';\n\t\tfor(var i=0;i<slices.length;i++){\n\t\t\tif(t==='init') t = slices[i].y;\n\t\t\tif(t!==slices[i].y){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t}\n\n\tvar getGroup = function(slices){\n\t\tvar self = {};\n\t\tself.slices = slices.length;\n\t\tself.cols = getColsInGroup(slices);\n\t\tself.rows = slices.length/self.cols;\n\t\tself.width = slices[0].width*self.cols;\n\t\tself.height = slices[0].height*self.rows;\n\t\tself.x = slices[0].x;\n\t\tself.y = slices[0].y;\n\t\treturn self;\n\t}\n\n\tvar slices = getSlices();\n\tfor(var g in slices){\n\t\tvar group = getGroup(slices[g]);\n\t\tvar shuffleInd = [];\n\t\tfor(i=0;i<slices[g].length;i++) shuffleInd.push(i);\n\t\tshuffleInd = shuffleSeed.shuffle(shuffleInd,seed);\n\t\tfor(i=0;i<slices[g].length;i++){\n\t\t\tvar s=shuffleInd[i];\n\n\t\t\tvar row=parseInt(s/group.cols);\n\t\t\tvar col=s-row*group.cols;\n\t\t\tvar x=col*slices[g][i].width;\n\t\t\tvar y=row*slices[g][i].height;\n\n\t\t\tctx.drawImage(\n\t\t\t\timg,\n\t\t\t\tgroup.x+x,\n\t\t\t\tgroup.y+y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height,\n\t\t\t\tslices[g][i].x,\n\t\t\t\tslices[g][i].y,\n\t\t\t\tslices[g][i].width,\n\t\t\t\tslices[g][i].height\n\t\t\t);\n\t\t}\n\t}\n\treturn canvas;\n}\n\nmodule.exports=self;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"449b924b7c4e2fd010ff.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"8e421e0661335de56d33.worker.js\");\n};","import sheetSRC from '../../resources/sheet-composite.enc.png';\nimport {SpriteInterface} from \"../data/interfaces/sprite\";\nimport {TextureKey} from \"../renderer/ui-data/globals\";\nconst rawData = require('../../resources/sheet-data.json');\nconst unscramble = require('./unscramble');\n\ninterface DataSheet {\n\tmetadata: {\n\t\twidth: number;\n\t\theight: number;\n\t\tcount: number;\n\t\tuid: string;\n\t};\n\tsprites: Record<string, DataSprite>;\n}\n\ninterface DataSprite {\n\tname: string;\n\tanimated?: number;\n\timages: DataImage[];\n}\n\ninterface DataImage {\n\tx: number;\n\ty: number;\n\tblocker: boolean;\n}\n\nconst data: DataSheet = rawData;  // Type casting here for clarity.\nlet sheet: HTMLCanvasElement = document.createElement('canvas');\nlet spriteWidth: number = data.metadata.width;\nlet spriteHeight: number = data.metadata.height;\nlet globalFrameIndex: number = 0;\nlet fpsTicker: NodeJS.Timeout;\n\nexport const waitForSpriteLoad: Promise<HTMLCanvasElement> = new Promise(res => {\n\tconst img = new Image();\n\timg.onerror = (err: any) => {\n\t\tconsole.error(err);\n\t\talert('Failed to load sprite sheet! \\nTry hard reloading the page (ctrl+F5).');\n\t};\n\timg.onload = () => {\n\t\tsheet = unscramble(img, 24, process.env.REACT_APP_SPRITE_KEY); // Support the artists - buy from them!\n\t\tres(sheet);\n\t};\n\timg.src = sheetSRC;\n\n\tclearInterval(fpsTicker);\n\tfpsTicker = setInterval(() => {\n\t\tglobalFrameIndex = (globalFrameIndex+1) % 1000;\n\t}, 200);\n});\n\n/**\n * Locates the metadata for a given Sprite. Raises an Error if the key cannot be found.\n * @param key\n */\nfunction findSpriteData(key: Sprite): DataSprite {\n\tif (key.id.startsWith(\"gif:\")) {\n\t\treturn {\n\t\t\tanimated: -1,\n\t\t\timages: [],\n\t\t\tname: \"loaded gif\"\n\t\t}\n\t}\n\tconst ret = data.sprites[key.id];\n\tif (!ret) throw Error(`Unable to locate sprite for key: ${key.composite}`);\n\treturn ret;\n}\n\n/**\n * Render the image, denoted by the given Sprite, to the given Graphics 2D context.\n * @param ctx\n * @param key\n * @param x\n * @param y\n */\nfunction drawImageTo(ctx: CanvasRenderingContext2D, key: Sprite, x: number, y: number) {\n\tconst sprites = findSpriteData(key);\n\tconst img = key.idx < 0 ? sprites.images[globalFrameIndex % sprites.images.length] : sprites.images[key.idx];\n\n\tctx.drawImage(sheet, img.x, img.y, spriteWidth, spriteHeight, x, y, spriteWidth, spriteHeight);\n}\n\n\n/** Search for images matching the given term. */\nexport function searchImages(term: string, animated: boolean = false, nameOnly: boolean = false, favorites?: SpriteInterface[]) {\n\tconst res: Sprite[] = [];\n\tconst seen: Record<string, boolean> = {};\n\n\tconst search = Object.entries(data.sprites).filter( (obj) => {\n\t\tif (animated && !obj[1].animated) {\n\t\t\treturn false;\n\t\t}\n\t\tif (nameOnly) {\n\t\t\treturn obj[1].name.includes(term);\n\t\t}\n\n\t\treturn obj[0].includes(term.toLowerCase())\n\t}).map(o => ({ path: o[0], sprite: o[1]}));\n\n\tfavorites?.forEach(f => {\n\t\tlet comparatorId = f.id;\n\t\tif (comparatorId.startsWith(\"gif:\")) {\n\t\t\tcomparatorId = \"loaded gif\";\n\t\t}\n\t\tif (comparatorId.includes(term.toLowerCase())) {\n\t\t\tres.push(new Sprite(f.id, f.idx));\n\t\t\tseen[f.id+\":\"+f.idx] = true;\n\t\t}\n\t});\n\n\tif (!animated) {\n\t\tsearch.sort((a, b) => {\n\t\t\tconst inc = (a: string) => a.includes(\"player.\") || a.includes(\"monster.\") || a.includes(\"animated.\") ? 1 : 0;\n\t\t\treturn inc(a.path) - inc(b.path);\n\t\t});\n\t\tsearch.forEach(o => {\n\t\t\tconst limit = o.sprite.animated ? 1 : o.sprite.images.length;\n\t\t\tfor (let i=0; i < limit; i++) {\n\t\t\t\tif (!seen[o.path+ \":\" + i]) {\n\t\t\t\t\tres.push(new Sprite(o.path, i));\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t} else {\n\t\tsearch.forEach(o => {\n\t\t\tif (!seen[o.path+\":-1\"]) {\n\t\t\t\tres.push(new Sprite(o.path, -1));\n\t\t\t}\n\t\t})\n\t}\n\n\treturn res;\n}\n\n/**\n * Sprites are used to concisely represent an image (by ID) from the datasheet,\n * as well as which index to use for animating.\n */\nexport class Sprite implements SpriteInterface {\n\tpublic readonly id: string;\n\tpublic readonly idx: number;\n\n\tconstructor(id: string, idx: number) {\n\t\tthis.id = id;\n\t\tthis.idx = idx;\n\t}\n\n\tget composite(): string {\n\t\treturn this.mkKey(this.idx);\n\t}\n\n\tget animated(): boolean {\n\t\treturn this.idx < 0;\n\t}\n\n\tget isBlocker(): boolean {\n\t\tif (this.idx < 0) return false;\n\t\treturn findSpriteData(this).images[this.idx].blocker;\n\t}\n\n\tget name(): string {\n\t\treturn findSpriteData(this).name;\n\t}\n\n\t/** Generates a unique ID for this sprite, which can be transmitted as needed. */\n\tprivate mkKey(frame: number) {\n\t\treturn `${this.id}:${frame}`;\n\t}\n\n\tpublic drawTo(ctx: CanvasRenderingContext2D, x: number, y: number) {\n\t\tdrawImageTo(ctx, this, x, y);\n\t}\n\n\t/**\n\t * Get the data required for the Renderer to create a Texture from this Sprite.\n\t */\n\tget textureData(): TextureKey[] {\n\t\tconst sprites = findSpriteData(this);\n\t\tconst imgs = this.idx < 0 ? sprites.images : [sprites.images[this.idx]];\n\n\t\tif (this.id.startsWith(\"gif:\")) {\n\t\t\treturn [{\n\t\t\t\tuid: this.id,\n\t\t\t\tsource: waitForSpriteLoad\n\t\t\t}]\n\t\t}\n\n\t\treturn imgs.map((img, idx) => {\n\t\t\treturn {\n\t\t\t\tuid: this.mkKey(this.idx < 0 ? idx : this.idx),\n\t\t\t\tatlas: waitForSpriteLoad,\n\t\t\t\tpx: img.x,\n\t\t\t\tpy: img.y,\n\t\t\t\tw: spriteWidth,\n\t\t\t\th: spriteHeight\n\t\t\t}\n\t\t})\n\t}\n}\n","import {TerrainAddPacket, TerrainErasePacket} from \"./terrainPackets\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard, ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"./entityPackets\";\nimport {PingPacket, ReadyPacket, SignaturePacket} from \"./util-packets\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"./media-packets\";\nimport {MeasurePacket} from \"./measure-packets\";\n\n/**\n * The order of this list is important, as the index represents the packet ID for messages and saved boards.\n */\nexport const packetList: typeof ProtoWrapper[] = [\n    SignaturePacket,\n    ReadyPacket,\n    TerrainErasePacket,\n    TerrainAddPacket,\n    ProtoBoard,\n    ProtoTileStack,\n    EntityUpdatePacket,\n    EntityDeletePacket,\n    PingPacket,\n    MediaStatusPacket,\n    MediaRequestPacket,\n    MeasurePacket\n];\n\nexport const packetMap: Record<string, number> = {};\n\nfor (let i=0; i<packetList.length; i++) {\n    packetMap[packetList[i].$type.name] = i;\n}\n","import {useSnackbar, WithSnackbarProps, OptionsObject, SnackbarKey} from 'notistack'\nimport React from 'react'\n\nlet snackbarRef: WithSnackbarProps;\n\n\nexport const SnackbarUtilsConfigurator: React.FC = () => {\n    snackbarRef = useSnackbar();\n    return null;\n};\n\nexport default {\n    success(msg: string, options: OptionsObject = {}) {\n        return this.toast(msg, { ...options, variant: 'success' })\n    },\n    warning(msg: string, options: OptionsObject = {}) {\n        return this.toast(msg, { ...options, variant: 'warning' })\n    },\n    info(msg: string, options: OptionsObject = {}) {\n        return this.toast(msg, { ...options, variant: 'info' })\n    },\n    error(msg: string, options: OptionsObject = {}) {\n        return this.toast(msg, { ...options, variant: 'error' })\n    },\n    toast(msg: string, options: OptionsObject = {}) {\n        return snackbarRef.enqueueSnackbar(msg, options)\n    },\n    close(key: SnackbarKey) {\n        return snackbarRef.closeSnackbar(key)\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\nexport default abstract class Handler {\n    /** The type of packet this handler is listening for. */\n    public abstract readonly packets: typeof ProtoWrapper[];\n    private isHost: boolean = false;\n\n    setHost(isHost: boolean) {\n        this.isHost = isHost;\n    }\n\n    async handlePacket(client: Client, packet: ProtoWrapper) {\n        return this.isHost ? this.hostHandler(client, packet) : this.clientHandler(client, packet);\n    }\n\n    abstract clientHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n    abstract hostHandler(client: Client, packet: ProtoWrapper): Promise<void>;\n}\n","import {Message} from \"protobufjs/light\";\n\n/**\n * Wrapper for protobuf Message, which allows quick & typed constructor unpacking.\n */\nexport default class ProtoWrapper<T extends object = object> extends Message<T>{\n    /**\n     * Shortcut to assign the given values to this object, then return it.\n     */\n    assign(values: Partial<this>): this {\n        return Object.assign(this, values)\n    }\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\n\n@Type.d(\"ProtoSprite\")\nexport class ProtoSprite extends ProtoWrapper<ProtoSprite> {\n    @Field.d(1, \"string\", \"required\", \"\")\n    public id: string = '';\n\n    @Field.d(2, \"int32\", \"required\", 0)  // Use \"sint32\" if idx will be negative often.\n    public idx: number = 0;\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"./proto-wrapper\";\nimport {ProtoSprite} from \"./proto-sprite\";\n\n@Type.d(\"ProtoEntity\")\nexport class ProtoEntity extends ProtoWrapper<ProtoEntity> {\n    @Field.d(1, ProtoSprite, \"required\")\n    public sprite: ProtoSprite = new ProtoSprite();\n\n    @Field.d(2, 'int32', \"required\")\n    public x: number = 0;\n\n    @Field.d(3, 'int32', \"required\")\n    public y: number = 0;\n\n    @Field.d(4, 'bool', \"required\")\n    public visible: boolean = false;\n\n    @Field.d(5, 'string', \"required\")\n    public color: string = '';\n\n    @Field.d(6, 'string', \"required\")\n    public id: string = '';\n\n    @Field.d(7, 'string', \"repeated\")\n    public owners: string[] = [];\n\n    @Field.d(8, 'bool', \"required\")\n    public saveToCampaign: boolean = false;\n\n    @Field.d(9, 'string', \"required\")\n    public name: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from './proto-wrapper';\nimport {ProtoSprite} from \"./proto-sprite\";\nimport {ProtoEntity} from \"./proto-entity\";\n\n\n@Type.d(\"ProtoTile\")\nexport class ProtoTile extends ProtoWrapper<ProtoTile> {\n    @Field.d(1, \"int32\", \"required\", 0)\n    public x: number = 0;\n\n    @Field.d(2, \"int32\", \"required\", 0)\n    public y: number = 0;\n\n    @Field.d(3, \"int32\", \"required\", 0)\n    public z: number = 0;\n\n    @Field.d(4, \"int32\", \"required\", 0)\n    public spriteIdx: number = 0;\n}\n\n@Type.d(\"ProtoTileStack\")\nexport class ProtoTileStack extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTile, \"repeated\")\n    public tiles: ProtoTile[] = [];\n\n    @Field.d(2, ProtoSprite, \"repeated\")\n    public sprites: ProtoSprite[] = [];\n}\n\n\n@Type.d(\"ProtoBoard\")\nexport class ProtoBoard extends ProtoWrapper<ProtoBoard> {\n    @Field.d(1, ProtoTileStack, \"required\")\n    public terrain: ProtoTileStack|null = null;\n    @Field.d(2, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\n\n@Type.d(\"TerrainAddPacket\")\nexport class TerrainAddPacket extends ProtoWrapper<TerrainAddPacket> {\n    @Field.d(1, ProtoTileStack, \"repeated\")\n    public tileStacks: ProtoTileStack[] = [];\n}\n\n@Type.d(\"TerrainCoordPacket\")\nexport class TerrainCoordPacket extends ProtoWrapper<TerrainCoordPacket> {\n    @Field.d(1, 'int32', \"required\")\n    public x: number = 0;\n    @Field.d(2, 'int32', \"required\")\n    public y: number = 0;\n}\n\n@Type.d(\"TerrainErasePacket\")\nexport class TerrainErasePacket extends ProtoWrapper<TerrainErasePacket> {\n    @Field.d(1, TerrainCoordPacket, \"repeated\")\n    public coords: TerrainCoordPacket[] = [];\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\n@Type.d(\"EntityUpdatePacket\")\nexport class EntityUpdatePacket extends ProtoWrapper<EntityUpdatePacket> {\n    @Field.d(1, ProtoEntity, \"repeated\")\n    public entities: ProtoEntity[] = [];\n}\n\n\n@Type.d(\"EntityDeletePacket\")\nexport class EntityDeletePacket extends ProtoWrapper<EntityDeletePacket> {\n    @Field.d(1, 'string', \"required\")\n    public entityID: string = '';\n}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"PingPacket\")\nexport class PingPacket extends ProtoWrapper<PingPacket> {}\n\n@Type.d(\"SignaturePacket\")\nexport class SignaturePacket extends ProtoWrapper<SignaturePacket> {\n    @Field.d(1, \"string\", \"required\", 'def')\n    public username: string = '';\n}\n\n@Type.d(\"ReadyPacket\")\nexport class ReadyPacket extends ProtoWrapper<ReadyPacket> {}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n@Type.d(\"MediaStatusPacket\")\nexport class MediaStatusPacket extends ProtoWrapper<MediaStatusPacket> {\n    @Field.d(1, 'string', \"required\")\n    public currentVideo: string = '';\n    @Field.d(2, 'uint32', \"required\")\n    public playbackRate: number = 1;\n    @Field.d(3, 'bool', \"required\")\n    public paused: boolean = false;\n    @Field.d(4, 'uint32', \"required\")\n    public currentTime: number = 0;\n}\n\n\n@Type.d(\"MediaRequestPacket\")\nexport class MediaRequestPacket extends ProtoWrapper<MediaRequestPacket> {}\n","import {Field, Type} from \"protobufjs/light\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\n\n\n@Type.d(\"MeasurePacket\")\nexport class MeasurePacket extends ProtoWrapper<MeasurePacket> {\n    @Field.d(1, 'int32', \"required\")\n    public px: number = 0;\n    @Field.d(2, 'int32', \"required\")\n    public py: number = 0;\n    @Field.d(3, 'int32', \"required\")\n    public tw: number = 0;\n    @Field.d(4, 'int32', \"required\")\n    public th: number = 0;\n    @Field.d(5, 'int32', \"required\")\n    public color: number = 0;\n    @Field.d(6, 'float', \"required\")\n    public angle: number = 0;\n    @Field.d(7, 'bool', \"required\")\n    public visible: boolean = false;\n    @Field.d(8, 'string', \"required\")\n    public type: string = '';\n    @Field.d(9, 'int32', \"required\")\n    public thickness: number = 0;\n    @Field.d(10, 'int32', \"required\")\n    public fill: number = 0;\n    @Field.d(11, 'float', \"required\")\n    public alpha: number = 0;\n    @Field.d(12, 'int32', \"required\")\n    public tx: number = 0;\n    @Field.d(13, 'int32', \"required\")\n    public ty: number = 0;\n}\n","import * as worker from './messageEncoder.worker';\nimport { packetList, packetMap } from \"./packets/packet-list\";\n\n/**\n * Use a Web Worker thread to encode the given ProtoWrapper object into a compressed binary buffer.\n * @param packet\n */\nexport async function encode(packet: any): Promise<Uint8Array> {\n    const id = packetMap[packet.$type.name];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error encoding packet: Unknown type: \"${packet.constructor.name}\"!`)\n\n    return await worker.workerEncode(packet, id)\n}\n\n/**\n * Use a Web Worker thread to decompress a binary buffer into a ProtoWrapper object, properly cast to the correct subclass.\n * @param data\n */\nexport async function decode(data: Uint8Array): Promise<any> {\n    const id = data.slice(0,1)[0];\n    const clazz = packetList[id];\n\n    if (!clazz) throw Error(`Error decoding packet: Unknown ID: [${id}], (${data.length})!`);\n\n    return new clazz().assign(await worker.workerDecode(data));\n}\n","/**\n * Chain promises sequentially, with a maximum stack size.\n */\nexport default class PromiseStream {\n    private prom: Promise<any> = Promise.resolve();\n    private readonly maxBackpressure: number;\n    private backPressure: number = 0;\n\n    constructor(maxBackpressure: number = 0) {\n        this.maxBackpressure = maxBackpressure\n    }\n\n    get length() {\n        return this.backPressure;\n    }\n\n    public queue(fn: Function, onError: Function|null = null) {\n        if (this.maxBackpressure && this.backPressure >= this.maxBackpressure) {\n            throw Error('Max backpressure reached!')\n        }\n        this.backPressure++;\n\n        this.prom = this.prom.then( async () => {\n            await fn();\n        }).catch( async err => {\n            if (onError) {\n                await onError(err);\n            } else {\n                console.error(err);\n            }\n        }).then(() => {\n            this.backPressure--;\n        })\n    }\n}\n","import Dexie from \"dexie\";\nimport {BoardWrapper} from \"./board-db\";\nimport Campaign from \"../controllers/campaign\";\nimport {UserData} from \"./user-db\";\nimport {exportDB, importDB} from \"dexie-export-import\";\n\n\nclass DB extends Dexie {\n    boards: Dexie.Table<any, BoardWrapper>;\n    campaigns: Dexie.Table<any, Campaign>;\n    metadata: Dexie.Table<any, string>;\n    users: Dexie.Table<any, UserData>;\n\n    constructor() {\n        super('terra-db');\n\n        // Define tables and indexes\n        this.version(1).stores({\n            boards: '&[campaignID+name]',\n            campaigns: '++id, name',\n            metadata: 'id',\n            users: '++id, &username, *keyCodes, lastSeen'\n        });\n        this.boards = this.table(\"boards\");\n        this.campaigns = this.table(\"campaigns\");\n        this.metadata = this.table(\"metadata\");\n        this.users = this.table(\"users\");\n    }\n\n    /**\n     * Replaces the database with the given Blob data, then reloads the page.\n     * If cb is given, waits for the callback before reloading.\n     * @param data\n     * @param cb\n     */\n    async importData(data: Blob, cb?: Function) {\n        console.debug('Restoring database from blob...');\n        await this.delete();\n        await importDB(data);\n        console.log(\"Import complete\");\n        if (cb) await cb();\n        // @ts-ignore\n        window.location = window.location.href.split('#')[0];\n    }\n\n    async toBlob() {\n        // @ts-ignore\n        return await exportDB(this, {\n            prettyJson: false,\n            progressCallback: (progress: any) => {\n                console.debug('\\t+ Packing DB:', progress);\n            }\n        });\n    }\n}\n\nexport const db = new DB();\n\ndb.on(\"ready\", async () => {\n    if (await db.metadata.count() <= 0) {\n        console.debug(\"Migrating from old databases...\");\n        await copyOldDB(db, 'metadata-db', 'data', 'metadata');\n        await copyOldDB(db, 'campaign-db', 'campaigns', 'campaigns');\n        await copyOldDB(db, 'user-db', 'users', 'users');\n        await copyOldDB(db, 'board-db', 'boards', 'boards');\n    }\n});\n\ndb.open();\n\n\nasync function copyOldDB(newDB: DB, dbName: string, tableName: string, newTable: string) {\n    if (await Dexie.exists(dbName)) {\n        const d = new Dexie(dbName);\n        await d.open();\n        console.log('\\t+', dbName, tableName);\n        for (const tbl of d.tables) {\n            if (tbl.name === tableName) {\n                for (const ele of await tbl.toArray()) {\n                    console.log('Migrating:', ele);\n                    // @ts-ignore\n                    await newDB[newTable].add(ele);\n                }\n            }\n        }\n        d.close();\n        d.delete();\n    }\n}\n","import {observable} from \"mobx\";\nimport {db} from './database';\n\nexport const currentUsername = observable.box<string>('');\n\nexport enum Meta {\n    CERT_SEED = 'secret_cert_seed',\n    USERNAME = 'username',\n    CAMPAIGN_CURRENT = 'campaign_current',\n    YT_PLAYER_CONFIG = 'player_config',\n    FAVORITE_SPRITES = \"favoriteSprites\",\n}\n\nasync function get(id: Meta): Promise<any> {\n    return JSON.parse((await db.metadata\n        .where({id})\n        .first())?.val || 'null');\n}\n\nasync function store(id: Meta, value: any): Promise<string> {\n    return db.metadata.put({\n        id,\n        val: JSON.stringify(value),\n    });\n}\n\nexport const metadata = {\n    get,\n    store\n};\n","import Handler from \"./handlers/handler\";\nimport {IObservableValue, observable, ObservableSet} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\nimport * as encoder from './messageEncoder';\nimport ProtoWrapper from \"../data/protobufs/proto-wrapper\";\nimport PromiseStream from \"../util/promiseStream\";\nimport {PreCheck} from \"./prechecks/precheck\";\nimport {UserData} from \"../db/user-db\";\nimport {PingPacket} from \"./packets/util-packets\";\nimport {Switchboard, ConnectedPeer} from \"switchboard.js\";\nimport {metadata, Meta} from \"../db/metadata-db\";\n\nexport enum NetworkStatus {\n    IDLE,\n    CONNECTED,\n    CONNECTING,\n    RECONNECTING,\n    DISCONNECTED,\n    MATCHMAKING_FAIL,\n    WAITING_FOR_HOST\n}\n\nexport enum NetworkMode {\n    UNKNOWN,\n    HOST,\n    CLIENT,\n}\n\nlet handlers: Handler[] = [];\nlet preConn: PreCheck[] = [];\n\nexport const clients: ObservableSet<Client> = observable(new Set<Client>());\n\nlet sb: Switchboard | null = null;\nexport let netStatus: IObservableValue<NetworkStatus> = observable.box(NetworkStatus.IDLE);\nexport let netMode: IObservableValue<NetworkMode> = observable.box(NetworkMode.UNKNOWN);\n\nexport function setHandlers(newHandlers: Handler[], newPreConn: PreCheck[]) {\n    handlers = newHandlers;\n    preConn = newPreConn\n}\n\n/**\n * Get the seed that can regenerate the public/private key.\n * If one does not exist already, it is created.\n */\nasync function getSeed(): Promise<string> {\n    let seed = await metadata.get(Meta.CERT_SEED);\n\n    if (!seed) {\n        await metadata.store(Meta.CERT_SEED, seed = Switchboard.makeSeed());\n    }\n\n    return seed;\n}\n\n/**\n * Get the current local peer ID. Generates a new one if it does not already exist.\n * @param useLongform\n */\nexport async function getMyID(useLongform: boolean = false) {\n    if (sb) {\n        return useLongform ? sb.fullID : sb.peerID;\n    }\n    return Switchboard.getIdFromSeed(await getSeed(), useLongform);\n}\n\n/**\n * Kill any running SwitchBoard, and start a new one.\n */\nexport async function makeSB() {\n    if (sb) {\n        sb.kill(new Error('Closed to launch new Peer connection.'));\n    }\n    return new Switchboard('moose-terra', {\n        seed: await getSeed(),\n        trackers: [\n            {\n                uri: 'wss://switchboard.rofl.wtf',\n                isNativeServer: true\n            },\n            ...await Switchboard.defaultTrackers()\n        ]\n    });\n}\n\nexport async function connectTo(hostID: string): Promise<any> {\n    await setMode(NetworkMode.CLIENT);\n    if (netStatus.get() !== NetworkStatus.RECONNECTING) netStatus.set(NetworkStatus.CONNECTING);\n\n    sb = await makeSB();\n\n    sb.on('peer', async (peer) => {\n        notifications.success('Connected to host!');\n\n        const client = new Client(peer, handlers);\n        peer.on('close', () => clientError('host disconnected', client));\n        peer.on('error', (err) => console.error(err));\n\n        try {\n            netStatus.set(NetworkStatus.WAITING_FOR_HOST);\n            for (const pc of preConn) {\n                await pc.run(false, client);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            client.verified = true;\n            clients.add(client);\n            netStatus.set(NetworkStatus.CONNECTED);\n        } catch (err) {\n            console.error('failed validation', err);\n        }\n    });\n\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n    });\n\n    sb.findHost(hostID);\n}\n\nexport async function clientError(err: any, client: Client): Promise<any> {\n    console.warn('Client Error:', err);\n    removeClient(client);\n    client.close();\n\n    console.log('Reconnecting to host...');\n    netStatus.set(NetworkStatus.RECONNECTING);\n}\n\nexport async function openHost() {\n    await setMode(NetworkMode.HOST);\n\n    sb = await makeSB();\n\n    netStatus.set(NetworkStatus.CONNECTED);\n\n    sb.on('peer', async peer => {\n        console.warn('Client connected!');\n        const cli = new Client(peer, handlers);\n\n        peer.on('close', () => {\n            console.debug('Client dropped:', cli);\n            removeClient(cli);\n        });\n\n        try {\n            for (const pc of preConn) {\n                await pc.run(true, cli);\n                console.debug('Finished pre-check:', pc.constructor.name);\n            }\n            cli.verified = true;\n            clients.add(cli);\n            notifications.info(`User \"${cli.userData.username}\" has joined.`, {preventDuplicate: true});\n        } catch (err) {\n            console.error(err);\n            cli.close();\n        }\n    });\n    sb.on('kill', (err) => {\n        console.error(err);\n        netStatus.set(NetworkStatus.DISCONNECTED);\n        notifications.error(`Unable to establish network connection.`, {preventDuplicate: true});\n    });\n    sb.host();\n}\n\nexport function kill(): void {\n    if (sb) {\n        clients.forEach(p => {\n            p.close();\n            removeClient(p);\n        });\n        netMode.set(NetworkMode.UNKNOWN);\n        netStatus.set(NetworkStatus.IDLE);\n        sb.kill(undefined, true);\n        sb = null;\n        console.debug('Killed networking stack.');\n    }\n}\n\n/**\n * Destroy the connection and set the new mode.\n * @param mode\n */\nasync function setMode(mode: NetworkMode) {\n    kill();\n    netMode.set(mode);\n}\n\nfunction removeClient(client: Client) {\n    clients.delete(client);\n}\n\n\nexport class Client {\n    private peer: ConnectedPeer;\n    private listener: Function|null = null;\n    private readonly handlers: Handler[];\n    public verified: boolean = false;\n    private lastSend = Promise.resolve();\n    private stream = new PromiseStream();\n    public userData: UserData = {id: -1, username: 'null', keyCodes:[], lastSeen: 0};\n    private readonly pingTimer: any = null;\n    public lastPing: number = 0;\n\n    constructor(peer: ConnectedPeer, handlers: Handler[]) {\n        this.peer = peer;\n        this.handlers = handlers;\n        this.hook();\n\n        this.pingTimer = setInterval(() => {\n            if (!this.verified) return;\n            if (this.peer.isClosed) return this.close();\n            if (!this.lastPing) {\n                this.lastPing = Date.now();\n                return;\n            } else if (Date.now() - this.lastPing > 15000) {\n                console.warn('Ping timeout.')\n                return this.close();\n            }\n            this.send(new PingPacket()).then();\n        }, 10000)\n    }\n\n    hook() {\n        const self = this;\n        this.peer.on('data', (data: any) => {\n            self.stream.queue(() => self.handleMessage(data), ()=>this.peer.close())\n        });\n        this.peer.on('error', (err) => {\n            console.error('Client error:', err);\n            this.peer.close();\n        });\n    }\n\n    get id() {\n        return this.peer.id;\n    }\n\n    async handleMessage(packetBinary: ArrayBuffer) {\n        try {\n            const packet: ProtoWrapper = await encoder.decode(new Uint8Array(packetBinary));\n            if (this.listener) {\n                this.listener(packet);\n            } else if (!this.verified) {\n                // noinspection ExceptionCaughtLocallyJS\n                throw Error(`Error: Unexpected packet sent before verification: ${packet}`);\n            } else {\n                console.debug('Incoming Packet:', packet);\n                for (const h of this.handlers) {\n                    // @ts-ignore\n                    if (h.packets.some(p => packet.$type === p.$type)) {\n                        return await h.handlePacket(this, packet);\n                    }\n                }\n            }\n        } catch (err) {\n            console.error(err);\n            this.close();\n        }\n    }\n\n    close() {\n        if (this.listener) {\n            // TODO: Add to blacklist on current SwitchBoard.\n            this.listener(null);\n        }\n        if (this.pingTimer) clearTimeout(this.pingTimer);\n\n        this.peer.close();\n    }\n\n    /**\n     * Sends the given Packet to the client.\n     * Utilizes an internal \"rolling Promise\" to assure that all messages are sent in order.\n     * @param packet\n     */\n    async send(packet: ProtoWrapper) {\n        console.debug('Sending client:', packet);\n        this.lastSend = this.lastSend.then(async () => {\n            this.sendBuffer(await encoder.encode(packet));\n        }).catch(err => {\n           console.error(`Error sending message to client:`, err);\n        });\n    }\n\n    sendBuffer(data: Uint8Array) {\n        this.peer.send(data);\n    }\n\n    /**\n     * Wait for the next packet, whatever it may be.\n     * Only one listener may be waiting at any given time, or an error will be thrown on subsequent registrations.\n     * @param expectedType\n     */\n    getNextPacket(expectedType: any): Promise<any> {\n        if (this.listener) throw Error('Attempted to overwrite client listener!');\n\n        return new Promise((res, rej) => {\n            this.listener = (packet: any) => {\n                this.listener = null;\n                if (!(packet instanceof expectedType)) {\n                    return rej(`Unexpected packet type: ${packet} !== ${expectedType}`)\n                }\n                return res(packet);\n            }\n        });\n    }\n}\n\n/**\n * Broadcast the given data to all connected connections.\n * If `requireHost` is true, will only send while we are hosting.\n * @param packet\n * @param requireHost\n * @param skip\n */\nexport async function broadcast(packet: ProtoWrapper, requireHost: boolean, skip?: Client) {\n    if (requireHost && netMode.get() !== NetworkMode.HOST) {\n        return;\n    }\n    const data = await encoder.encode(packet)\n\n    clients.forEach(c => {\n        if (c !== skip) c.sendBuffer(data)\n    });\n}\n\nexport function isHost() {\n    return netMode.get() === NetworkMode.HOST\n}\n","import {Sprite} from \"../../util/sprite-loading\";\n\nexport class Tile {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public sprite: Sprite;\n\n    constructor(sprite: Sprite) {\n        this.sprite = sprite;\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoTileStack} from \"../../data/protobufs/proto-tiles\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport * as packer from '../../data/board-packer.worker';\nimport {TerrainAddPacket} from \"../packets/terrainPackets\";\nimport {Tile} from \"../../data/interfaces/tile\";\n\n\nexport default class TerrainAddHandler extends Handler {\n    private static tiles: Tile[][] = [];\n    readonly packets: typeof ProtoWrapper[] = [TerrainAddPacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainAddHandler.broadcastChanges();\n            TerrainAddHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainAddPacket): Promise<void> {\n        for (const data of packet.tileStacks) {\n            if (!data) return;\n            const stack = data.tiles;\n\n            if (stack.length) {\n                this.terrain.removeAt(stack[0].x, stack[0].y);\n                for (let i=0; i < stack.length; i++) {\n                    const dt = stack[i];\n                    const sp = data.sprites[dt.spriteIdx];\n                    const t = new Tile(new Sprite(sp.id, sp.idx));\n                    this.terrain.placeAt(dt.x, dt.y, t, false);\n                }\n            }\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        throw Error('Client sent host new Terrain data. Not allowed.')\n    }\n\n    static async broadcastChanges() {\n        if (TerrainAddHandler.tiles.length) {\n            const packedStacks: ProtoTileStack[] = []\n            const updateTiles = TerrainAddHandler.tiles.splice(0, TerrainAddHandler.tiles.length);\n\n            for (const t of updateTiles) {\n                packedStacks.push(await packer.packTiles(t));\n            }\n\n            await broadcast(new TerrainAddPacket().assign({\n                tileStacks: packedStacks\n            }), true);\n        }\n    }\n\n    static sendTerrainAdd(tiles: Tile[]) {\n        if (isHost()) TerrainAddHandler.tiles.push(tiles);\n    }\n}\n\nTerrainAddHandler.pollChanges();\n","import Handler from \"./handler\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport Terrain from \"../../controllers/terrain\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {TerrainCoordPacket, TerrainErasePacket} from \"../packets/terrainPackets\";\n\nexport default class TerrainEraseHandler extends Handler {\n    private static tiles: Set<TerrainCoordPacket> = new Set();\n    readonly packets: typeof ProtoWrapper[] = [TerrainErasePacket];\n    private readonly terrain: Terrain;\n\n    constructor(terrain: Terrain) {\n        super();\n        this.terrain = terrain;\n    }\n\n    static pollChanges() {\n        setTimeout(async () => {\n            await TerrainEraseHandler.broadcastChanges();\n            TerrainEraseHandler.pollChanges()\n        }, 200);\n    }\n\n    async clientHandler(client: Client, packet: TerrainErasePacket): Promise<void> {\n        for (const t of packet.coords) {\n            this.terrain.removeAt(t.x, t.y);\n        }\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client attempted to erase terrain. Not allowed.')\n    }\n\n    /**\n     * Batches the removed terrain coords, to be sent shortly after.\n     * @param x\n     * @param y\n     */\n    static sendTerrainRemove(x: number, y: number) {\n        if (isHost()) TerrainEraseHandler.tiles.add(new TerrainCoordPacket().assign({ x, y}));\n    }\n\n    /**\n     * Sends all the batched changes. Runs on a loop. Can be called manually to instantly send all changes.\n     */\n    static async broadcastChanges() {\n        if (TerrainEraseHandler.tiles.size) {\n            const tep  = new TerrainErasePacket().assign({\n                coords: Array.from(TerrainEraseHandler.tiles)\n            });\n            TerrainEraseHandler.tiles.clear();\n            await broadcast(tep, true);\n        }\n    }\n}\n\nTerrainEraseHandler.pollChanges();\n","import {Container, TextureSource} from \"pixi.js\";\nimport * as Cull from \"pixi-cull\";\n\n/** The size of the world grid, in tiles. */\nexport const GRID_DIMENSIONS = 100;\n\n/** The dimensions of each tile, in pixels. */\nexport const GRID_TILE_PX = 48;\n\n/** The total size of the world, in pixels. */\nexport const WORLD_SIZE_PX = GRID_DIMENSIONS * GRID_TILE_PX;\n\n\n\n// PIXI Stuff:\n/** The cull implementation, which manages the visibility of layers added into it. */\nexport const CULLER = new Cull.SpatialHash();\n/** The layer which holds Terrain tiles. Culled. */\nexport const TERRAIN_LAYER = new Container();\n/** The layer which holds Entities. Not culled. */\nexport const ENTITY_LAYER = new Container();\n/** The layer for topmost UI Elements. */\nexport const OVERLAY_LAYER = new Container();\n\n/**\n * Since many things use the overlay layer, their respective z-index depths are tracked here.\n */\nexport enum OVERLAY_DEPTHS {\n    _,\n    NAMEPLATE,\n    MARKER_BKG,\n    MARKER_TXT,\n    SHAPES,\n    TOOLTIP\n}\n\n\nlet forceNextCull = false;\n\n/**\n * Override the default viewport dirty flag to force a re-cull after the next draw cycle.\n * Useful after adding sprites that may be culled.\n */\nexport function setForceCull(dirty = true) {\n    forceNextCull = dirty;\n}\nexport function getForceCull() {\n    return forceNextCull;\n}\n\nexport interface TextureKeySource {\n    uid: string;\n    source: TextureSource|Promise<TextureSource>;\n}\nexport interface TextureKeyAtlas {\n    uid: string;\n    atlas: Promise<HTMLCanvasElement>;\n    px: number;\n    py: number;\n    w: number;\n    h: number;\n    delay?: number;\n}\nexport type TextureKey = TextureKeySource | TextureKeyAtlas;\n\n\n// @ts-ignore\nwindow.debugCullStats = ()=>CULLER.stats();\n","\n\nexport function collides(r1: any, r2: any) {\n    //Define the variables we'll need to calculate\n    let hit, combinedHalfWidths, combinedHalfHeights, vx, vy;\n\n    //Find the center points of each sprite\n    r1.centerX = r1.x + r1.width / 2;\n    r1.centerY = r1.y + r1.height / 2;\n    r2.centerX = r2.x + r2.width / 2;\n    r2.centerY = r2.y + r2.height / 2;\n\n    //Find the half-widths and half-heights of each sprite\n    r1.halfWidth = r1.width / 2;\n    r1.halfHeight = r1.height / 2;\n    r2.halfWidth = r2.width / 2;\n    r2.halfHeight = r2.height / 2;\n\n    //Calculate the distance vector between the sprites\n    vx = r1.centerX - r2.centerX;\n    vy = r1.centerY - r2.centerY;\n\n    //Figure out the combined half-widths and half-heights\n    combinedHalfWidths = r1.halfWidth + r2.halfWidth;\n    combinedHalfHeights = r1.halfHeight + r2.halfHeight;\n\n    //Check for a collision on the x axis\n    if (Math.abs(vx) < combinedHalfWidths) {\n        //A collision might be occurring. Check for a collision on the y axis\n        hit = Math.abs(vy) < combinedHalfHeights;\n    } else {\n        //There's no collision on the x axis\n        hit = false;\n    }\n\n    //`hit` will be either `true` or `false`\n    return hit;\n}\n\n\n/**\n * Basic event emitter implementation, to avoid extra requirements.\n * @internal\n */\nexport default class Subscribable {\n    private events: Record<string, Set<any>> = {};\n    private history: Record<string, any> = {};\n    private permanentHandlers: Record<string, any[]> = {};\n\n    /**\n     * Listen for events that are emitted of a specific type.\n     * @param event\n     * @param callback\n     * @param useHistory If existing historic data should be returned.\n     * @returns A function which, when called, will unregister the callback.\n     */\n    public on(event: string, callback: any, useHistory = false) {\n        this.events[event] = this.events[event] || new Set();\n        this.events[event].add(callback);\n\n        if (useHistory && this.history.hasOwnProperty(event)) {\n            callback(this.history[event]);\n        }\n\n        return () => {\n            if (this.events[event]) {\n                this.events[event].delete(callback);\n                if (!this.events[event].size) {\n                    delete this.events[event];\n                }\n            }\n        }\n    }\n\n    /**\n     * Same as {@link on on()}, but only triggers one time & automatically cleans up.\n     * @param event\n     * @param callback\n     * @param useHistory\n     * @see {@link on} for the available specific events.\n     */\n    public once(event: string, callback: Function, useHistory = false) {\n        const unsub = this.on(event, (val: any) => {\n            unsub();\n            callback(val)\n        }, useHistory);\n\n        return unsub;\n    }\n\n    /**\n     * Emit the given value for the given event, to all listeners.\n     * @param event\n     * @param val\n     * @param useHistory If this data should be stored in history.\n     * @protected\n     */\n    public emit(event: string, val?: any, useHistory = true) {\n        const listeners = this.events[event];\n\n        if (useHistory) this.history[event] = val;\n\n        if (listeners) {\n            listeners.forEach(l => {\n                l(val);\n            })\n        }\n        if (this.events['']) {\n            this.events[''].forEach(l => {\n                l(event, val);\n            })\n        }\n    }\n\n    /**\n     * Register an event that cannot be cleared, even by {@link removeAllListeners}.\n     * Used internally to guarantee certain events (close, etc.) are detected.\n     * @param event\n     * @param handler\n     * @ignore\n     */\n    public permanent(event: string, handler: any) {\n        this.permanentHandlers[event] = this.permanentHandlers[event] || [];\n        this.permanentHandlers[event].push(handler);\n        this.on(event, handler);\n    }\n\n    /**\n     * Removes all non-permanent callbacks for the given event type, or every event type if none is given.\n     * @param event\n     */\n    public removeAllListeners(event?: string): this {\n        if (event) {\n            delete this.events[event];\n        } else {\n            for (const k of Object.keys(this.events)) {\n                delete this.events[k];\n            }\n        }\n\n        const events = event? [event] : Object.keys(this.permanentHandlers);\n        events.forEach(ev => {\n            const handlers = this.permanentHandlers[ev];\n            if (handlers) {\n                handlers.forEach(h => this.on(ev, h, false))\n            }\n        })\n\n        return this;\n    }\n}\n\n","import Subscribable from \"./ui-util\";\nimport {GRID_DIMENSIONS, GRID_TILE_PX, OVERLAY_LAYER, WORLD_SIZE_PX} from \"./globals\";\nimport * as PIXI from \"pixi.js\";\n\nexport interface SubscribeStream {\n    /** The mouse/pointer has been moved over the board. */\n    on(event: 'hover', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'hover', val: GridPoint): void;\n\n    /** Precise coordinates for a pointer movement. */\n    on(event: 'pointer-coords', callback: (coords: PixelPoint)=>void): () => void;\n    emit(event: 'pointer-coords', val: PixelPoint): void;\n\n    /** The mouse/pointer has been pressed down on the board. */\n    on(event: 'mouse-down', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'mouse-down', val: GridPoint): void;\n\n    /** The mouse/pointer has been released on the board. */\n    on(event: 'mouse-up', callback: ()=>void): () => void;\n    emit(event: 'mouse-up', val: GridPoint): void;\n\n    /** The mouse RMD has been pressed down on the board. */\n    on(event: 'mouse-right-down', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'mouse-right-down', val: GridPoint): void;\n\n    /** The mouse RMD has been released on the board. */\n    on(event: 'mouse-right-up', callback: ()=>void): () => void;\n    emit(event: 'mouse-right-up', val: GridPoint): void;\n\n    /** The mouse/pointer has been clicked on the board. */\n    on(event: 'click', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'click', val: GridPoint): void;\n\n    /** The mouse Middle mouse button has been pressed down on the board. */\n    on(event: 'mouse-middle-down', callback: (coords: GridPoint)=>void): () => void;\n    emit(event: 'mouse-middle-down', val: GridPoint): void;\n\n    /** The mouse Middle mouse button has been released. */\n    on(event: 'mouse-middle-up', callback: ()=>void): () => void;\n    emit(event: 'mouse-middle-up', val: GridPoint): void;\n\n    /** Emitted when a texture fails to load. */\n    on(event: 'texture-fail', callback: (val: {uid: string, msg: string})=>void): () => void;\n    emit(event: 'texture-fail', val: {uid: string, msg: string}): void;\n}\nexport const EVENT_STREAM: SubscribeStream = new Subscribable();\n\n\n/** A coordinate pair of x/y tiles, from the current map OVERLAY_LAYER. */\nexport interface GridPoint {\n    /** Tile x-coordinate. */\n    tx: number;\n    /** Tile y-coordinate. */\n    ty: number;\n}\n\n/** Represents an exact pixel coordinate. */\nexport interface PixelPoint {\n    px: number;\n    py: number;\n}\n\n\n// =====  EVENTS  =====\n\nlet lx = 0, ly = 0;\n\n/**\n * Convert the given Event coordinates into world-based tile coords, clamping them within the grid size.\n * @param ev\n */\nfunction updateHover(ev: any) {\n    const tx = Math.max(0, Math.min(GRID_DIMENSIONS-1, Math.floor(ev.data.getLocalPosition(OVERLAY_LAYER).x / GRID_TILE_PX)));\n    const ty = Math.max(0, Math.min(GRID_DIMENSIONS-1, Math.floor(ev.data.getLocalPosition(OVERLAY_LAYER).y / GRID_TILE_PX)));\n\n    EVENT_STREAM.emit('pointer-coords', {px: ev.data.getLocalPosition(OVERLAY_LAYER).x, py: ev.data.getLocalPosition(OVERLAY_LAYER).y});\n\n    if (lx !== tx || ly !== ty) {\n        lx = tx;\n        ly = ty;\n        EVENT_STREAM.emit('hover', {tx, ty});\n    }\n\n    return {tx, ty};\n}\n\n\nOVERLAY_LAYER.hitArea = new PIXI.Rectangle(0, 0, WORLD_SIZE_PX, WORLD_SIZE_PX);\nOVERLAY_LAYER.interactive = true;\nOVERLAY_LAYER.position.set(0,0);\n\n\n// @ts-ignore\nOVERLAY_LAYER.on('pointermove', ev => {\n    updateHover(ev);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('click', ev => {\n    const coords = updateHover(ev);\n    EVENT_STREAM.emit('click', coords);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('tap', ev => {\n    const coords = updateHover(ev);\n    EVENT_STREAM.emit('click', coords);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('touchstart', ev => {\n    const coords = updateHover(ev);\n\n    EVENT_STREAM.emit('mouse-down', coords);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('touchend', ev => {\n    const coords = updateHover(ev);\n\n    EVENT_STREAM.emit('mouse-up', coords);\n});\n\n// @ts-ignore\nOVERLAY_LAYER.on('touchendoutside', ev => {\n    const coords = updateHover(ev);\n\n    EVENT_STREAM.emit('mouse-up', coords);\n});\n\n\n\n\n// @ts-ignore\nwindow.debugEvents = (evName: any) => {\n    return EVENT_STREAM.on(evName, (...ev) => {\n        // @ts-ignore\n        if (ev[0] === 'pointer-coords' || ev[0] === 'hover') return;  // Screen out spam.\n        console.debug(...ev);\n    });\n}\n","/*\n    PIXI's asset loader sucks a lot, so this is a custom implementation to load and track resources.\n */\nimport {Loader, Texture} from 'pixi.js';\nimport { parseGIF, decompressFrames } from 'gifuct-js'\nimport {GRID_TILE_PX, TextureKey} from \"./globals\";\nimport {EVENT_STREAM} from \"./ui-event-stream\";\n\nconst cache: Record<string, LoadedRes> = {};\nconst gifCache: Record<string, Promise<LoadedGif>> = {};\n\ninterface LoadedRes {\n    texture: Promise<Texture>;\n    users: number;\n}\n\ninterface LoadedGif {\n    users: number;\n    frames: TextureKey[];\n}\n\n/**\n * Loads the given texture, and caches it. If one is already loaded or in progress, returns the cached version.\n * Be careful to also release any textures generated in this way.\n *\n * Accepts URLS, or other DOM image sources - such as `createImageBitmap(image, sx, sy, sw, sh)`.\n */\nexport async function makeTexture(key: TextureKey): Promise<Texture> {\n    const {uid} = key;\n\n    if (cache[uid]) {\n        cache[uid].users ++;\n        return cache[uid].texture;\n    }\n\n    const loader = new Loader();\n\n    const prom = new Promise(async (res, rej) => {\n        if (\"atlas\" in key) {\n            const can = document.createElement('canvas');\n            const ctx = can.getContext('2d')!;\n            can.width = key.w;\n            can.height = key.h;\n            ctx.imageSmoothingEnabled = false;\n            ctx.drawImage(await key.atlas, key.px, key.py, key.w, key.h, 0, 0, key.w, key.h);\n            return res(Texture.from(can));\n        }\n        const resource = await key.source;\n        if ((typeof resource).toLowerCase() !== 'string') {\n            return res(Texture.from(resource));\n        }\n        console.log('Loading image resource:', resource);\n        loader.add(uid, resource as string);\n        loader.onComplete.add(() => {\n            // @ts-ignore\n            res(loader.resources[uid].texture)\n        });\n        loader.onError.add((err: any) => {\n            rej(err);\n        });\n        loader.load();\n    }).catch(err => {\n        console.error(err);\n        EVENT_STREAM.emit('texture-fail', { uid, msg: `${err.message}` });\n        return makeFailTexture();\n    }).then((res: any) => {\n        loader.destroy();\n        return res;\n    }) as Promise<Texture>;\n\n    cache[uid] = {\n        texture: prom,\n        users: 1\n    };\n\n    return prom;\n}\n\nexport async function releaseGif(gifURI: string) {\n    const loaded = await gifCache[gifURI];\n    if (!loaded) return;\n    loaded.users--;\n    if (!loaded.users) {\n        delete gifCache[gifURI];\n        console.log(\"Destroyed GIF:\", gifURI);\n    }\n}\n\n\n/**\n * Attempts to free the given texture. If it is still in use by other Sprites, does nothing. Otherwise, destroys the texture.\n * @param uid\n */\nexport async function releaseTexture(uid: string) {\n    const r = cache[uid];\n    if (!r) return;\n    r.users -= 1;\n\n    if (!r.users) {\n        delete cache[uid];\n        const txt = await r.texture;\n        Texture.removeFromCache(uid);\n        Texture.removeFromCache(txt);\n        txt.destroy(true);\n\n        console.log(\"Destroyed texture:\", uid);\n    }\n}\n\n\nfunction makeFailImage() {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n    canvas.width = GRID_TILE_PX;\n    canvas.height = GRID_TILE_PX;\n    ctx.imageSmoothingEnabled = false;\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillRect(0, 0, GRID_TILE_PX, GRID_TILE_PX);\n    ctx.strokeStyle = '#FF0000';\n    ctx.lineWidth = 3;\n\n    ctx.moveTo(0, 0);\n    ctx.lineTo(GRID_TILE_PX, GRID_TILE_PX);\n    ctx.stroke();\n    ctx.moveTo(GRID_TILE_PX, 0);\n    ctx.lineTo(0, GRID_TILE_PX);\n    ctx.stroke();\n    return canvas;\n}\n\nfunction makeFailTexture() {\n    return Texture.from(makeFailImage());\n}\n\n/**\n * Resize the given canvas to fit the current grid tile dimensions.\n */\nfunction resizeCanvas(input: HTMLCanvasElement|HTMLImageElement) {\n    const can2 = document.createElement('canvas');\n    const ctx2 = can2.getContext('2d')!;\n    can2.width = GRID_TILE_PX;\n    can2.height = GRID_TILE_PX;\n    ctx2.imageSmoothingEnabled = false;\n    ctx2.globalAlpha = 1;\n    ctx2.drawImage(input, 0, 0, input.width, input.height, 0, 0, GRID_TILE_PX, GRID_TILE_PX);\n    return can2;\n}\n\nexport async function loadFramesFromGif(gifURI: string): Promise<LoadedGif> {\n    if (!gifURI.startsWith(\"gif:\")) throw Error(\"Invalid GIF URI: \" + gifURI);\n\n    const realURL = gifURI.replace(/^gif:/, \"\");\n\n    if (!gifCache[gifURI]) {\n        gifCache[gifURI] = new Promise(async resolve => {\n            const res: LoadedGif = {frames: [], users: 0};\n            try {\n                const gif = await fetch(realURL)\n                    .then(resp => resp.arrayBuffer())\n                    .then(buff => parseGIF(buff))\n                    .then(gif => decompressFrames(gif, true));\n\n                const can = document.createElement('canvas');\n                const ctx = can.getContext('2d')!;\n                let iDat: ImageData|null = null;\n\n                ctx.imageSmoothingEnabled = false;\n                ctx.globalAlpha = 1;\n\n                gif.forEach((frame, idx) => {\n                    if (iDat == null || frame.dims.width !== iDat.width || frame.dims.height !== iDat.height) {\n                        can.width = frame.dims.width;\n                        can.height = frame.dims.height;\n                        iDat = ctx.createImageData(frame.dims.width, frame.dims.height);\n                    }\n                    if (frame.disposalType === 2) {\n                        ctx.clearRect(0,0, can.width, can.height);\n                    }\n                    iDat.data.set(frame.patch);\n                    ctx.putImageData(iDat, 0, 0);\n\n                    res.frames.push({\n                        uid: gifURI+\":\"+idx,\n                        source: resizeCanvas(can),\n                        delay: frame.delay\n                    });\n                });\n            } catch (err) {\n                console.error(err);\n            }\n\n            if (!res.frames.length) {\n                await new Promise<void>((resolve) => { // Failed to load as GIF, attempt direct load:\n                    function onFail() {\n                        console.error(\"Failed to direct load!\");\n                        res.frames.push({\n                            uid: gifURI + \":failed\",\n                            source: makeFailImage()\n                        });\n                        resolve();\n                    }\n\n                    console.log(\"Loading directly..\");\n                    const img = new Image();\n                    img.onload = () => {\n                        res.frames.push({\n                            uid: gifURI+\":direct\",\n                            source: resizeCanvas(img)\n                        });\n                        resolve();\n                    }\n                    img.onerror = onFail;\n                    img.crossOrigin = 'anonymous';\n                    img.src = realURL;\n                })\n            }\n            resolve(res);\n        });\n    }\n\n    const cached = await gifCache[gifURI];\n    cached.users += 1;\n\n    return cached;\n}\n\n\n// @ts-ignore\nwindow.debugImageCache = cache;  // Expose cache for debugging.\n","import { Texture, Sprite } from \"pixi.js\";\nimport {GRID_TILE_PX, setForceCull, TERRAIN_LAYER, TextureKey} from \"../ui-data/globals\";\nimport {makeTexture, releaseTexture} from \"../ui-data/image-loader\";\n\nTERRAIN_LAYER.sortableChildren = true;\n\nconst tiles: Record<string, Set<Promise<UiTile>>> = {};\nconst sortTimers: Record<any, any> = {};\n\nfunction key(tx: number, ty: number) {\n    return `${tx},${ty}`;\n}\n\nexport function getAt(tx: number, ty: number) {\n    return tiles[key(tx, ty)] || new Set();\n}\n\n/**\n * Set the Z-Index for each tile at the given coords.\n * @param tx\n * @param ty\n */\nasync function sortAt(tx: number, ty: number) {\n    const arr = await Promise.all(Array.from(getAt(tx, ty)));\n    arr.sort((t1, t2) => t1.tz - t2.tz).forEach((t, idx) => {\n        t.zIndex = idx;\n    });\n}\n\nfunction scheduleSort(tx: number, ty: number) {\n    const k = key(tx, ty);\n    if (sortTimers[k]) clearTimeout(sortTimers[k]);\n    sortTimers[k] = setTimeout(() => {\n        sortAt(tx, ty).catch(console.error);\n    }, 50);\n}\n\n/** Internal renderer's representation of a static Tile. */\nclass UiTile extends Sprite{\n    public readonly tx: number;\n    public readonly ty: number;\n    public readonly tz: number;\n    public readonly txtID: string;\n\n    constructor(tx: number, ty: number, z: number, texture: Texture, texID: string) {\n        super(texture);\n        this.tx = tx;\n        this.ty = ty;\n        this.position.set(tx * GRID_TILE_PX, ty * GRID_TILE_PX);\n        this.tz = z;\n        this.txtID = texID;\n    }\n\n    /**\n     * Clean up the resources used by this tile.\n     */\n    erase() {\n        TERRAIN_LAYER.removeChild(this);\n        this.destroy({\n            children: true\n        });\n        releaseTexture(this.txtID).catch(console.error);\n    }\n}\n\n/**\n * Generate a new Tile, and place it at the given tile coords.\n * @param tx\n * @param ty\n * @param height The real z-index is set automatically relative to other tile heights at the same coords.\n * @param texKey\n */\nexport function addTerrain(tx: number, ty: number, height: number, texKey: TextureKey) {\n    const set = tiles[key(tx, ty)] = getAt(tx, ty);\n    const prom = makeTexture(texKey).then( async txt => {\n        const tile = new UiTile(tx, ty, height, txt, texKey.uid);\n\n        TERRAIN_LAYER.addChild(tile);\n        scheduleSort(tx, ty);\n\n        setForceCull(true);\n\n        return tile;\n    });\n\n    set.add(prom);\n}\n\n/**\n * Clear all placed or pending tiles at the given coordinates.\n * Any tiles added after/during this call go into a new set, and are not erased.\n * @param tx\n * @param ty\n */\nexport async function removeTerrainAt(tx: number, ty: number) {\n    const set = getAt(tx, ty);\n    delete tiles[key(tx, ty)];\n    set.forEach(t => t.then(tile => {\n        tile.erase()\n    }));\n}\n\n\n// @ts-ignore\nwindow.debugTerrainList = tiles;\n","import {Sprite} from \"../util/sprite-loading\";\nimport {observable} from \"mobx\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport {Tile} from \"../data/interfaces/tile\";\nimport * as TERRAIN from '../renderer/ui-components/ui-terrain';\nimport {GRID_DIMENSIONS} from \"../renderer/ui-data/globals\";\n\n\nexport default class Terrain{\n    private readonly terrain: Record<string, Tile[]> = {};\n    public tileIDX: number = 0; // Simple counter to track terrain in the order they were placed.\n    @observable public selectedSprite: Sprite | null = null;\n    @observable public isBoardDirty: boolean = false;\n\n\n    public removeAt(x: number, y: number): boolean {\n        const exists = this.terrain[Terrain.mkKey(x, y)]?.length;\n        if (exists) {\n            delete this.terrain[Terrain.mkKey(x, y)];\n        }\n        TERRAIN.removeTerrainAt(x, y).catch(console.error);\n        return !!exists;\n    }\n\n    /**\n     * Same as removeAt, but send events to clients.\n     * @param x\n     * @param y\n     */\n    public eraseAt(x: number, y: number) {\n        if (this.removeAt(x, y)) {\n            TerrainEraseHandler.sendTerrainRemove(x, y);\n            this.isBoardDirty = true;\n        }\n    }\n\n    /**\n     * Draw the currently-selected sprite onto the given coords.\n     * @param x\n     * @param y\n     */\n    public drawAt(x: number, y: number): boolean {\n        if (x < 0 || x > GRID_DIMENSIONS-1 || y < 0 || y > GRID_DIMENSIONS-1) return false;\n        if (this.selectedSprite) {\n            return this.placeAt(x, y, new Tile(this.selectedSprite), true);\n        }\n        return false;\n    }\n\n    /**\n     * Place the given Tile at the given coords.\n     * This method is smart, and auto-handles tile overlay logic.\n     * @param x\n     * @param y\n     * @param tile\n     * @param broadcast\n     */\n    public placeAt(x: number, y: number, tile: Tile, broadcast: boolean = false): boolean {\n        const existing = this.getAt(x, y);\n        if (existing.length && existing[existing.length-1].sprite.composite === tile.sprite.composite) {\n            // The given sprite is already at the top of the stack; Skip adding because it won't do anything.\n            return false;\n        }\n        if (tile.sprite.isBlocker) {\n            this.removeAt(x, y);\n        }\n        const k = Terrain.mkKey(x, y);\n        this.terrain[k] = this.terrain[k]?.filter(t => t.sprite.composite !== tile.sprite.composite) || [];  // Filter duplicates.\n        this.terrain[k].push(tile);\n        tile.x = x;\n        tile.y = y;\n        tile.z = this.tileIDX++;\n        TERRAIN.addTerrain(tile.x, tile.y, tile.z, tile.sprite.textureData[0]);\n        if (broadcast) TerrainAddHandler.sendTerrainAdd(this.terrain[k]);\n        if (!this.isBoardDirty) this.isBoardDirty = true;\n        return true;\n    }\n\n    public getAt(x: number, y: number): Tile[] {\n        return this.terrain[Terrain.mkKey(x, y)] || [];\n    }\n\n    /**\n     * Directly export the underlying terrain map, for serialization.\n     */\n    getDirectMap() {\n        return this.terrain;\n    }\n\n    /**\n     * Import a serialized tile map, over the current data.\n     * @param newTerrain\n     */\n    setDirectMap(newTerrain: ProtoBoard) {\n        if (!newTerrain.terrain) throw Error('Malformed packet.')\n        for (const k of Object.keys(this.terrain)) {\n            const t = this.terrain[k][0];\n            this.removeAt(t.x, t.y);\n        }\n\n        for (const k of newTerrain.terrain.tiles.sort((a, b) => a.z - b.z)) {\n            const sp = newTerrain.terrain.sprites[k.spriteIdx];\n            this.placeAt(k.x, k.y, new Tile(new Sprite(sp.id, sp.idx)), false);\n        }\n    }\n\n    private static mkKey(x: number, y: number): string {\n        return `${x},${y}`;\n    }\n}\n","import Handler from \"./handler\";\nimport {broadcast, Client} from \"../peerconnection\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport EntityLayer, {Entity} from \"../../controllers/entities\";\nimport {EntityDeletePacket, EntityUpdatePacket} from \"../packets/entityPackets\";\nimport {Sprite} from \"../../util/sprite-loading\";\nimport {ProtoSprite} from \"../../data/protobufs/proto-sprite\";\nimport {ProtoEntity} from \"../../data/protobufs/proto-entity\";\n\n\nexport default class EntityUpdateHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [EntityUpdatePacket, EntityDeletePacket];\n    private readonly entities: EntityLayer;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    async clientHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n                if (!this.entities.updateEntity(ent.id, {\n                    ...ent,\n                    sprite\n                }, false)) {\n                    console.debug('Adding new entity:', ent);\n                    this.entities.addEntity(sprite, { ...ent, sprite }, false)\n                }\n            }\n        } else if (packet instanceof EntityDeletePacket) {\n            console.debug('Deleting:', packet.entityID);\n            this.entities.remove(packet.entityID, false);\n        }\n    }\n\n    async hostHandler(client: Client, packet: any): Promise<void> {\n        if (packet instanceof EntityUpdatePacket) {\n            for (const ent of packet.entities) {\n                if (!this.entities.entityIsOwned(ent.id, client.userData.username)) {\n                    throw Error('Client attempted to edit entity the do not own!')\n                }\n                const exists = this.entities.updateEntity(ent.id, {\n                    x: ent.x,\n                    y: ent.y\n                }, false);\n                if (exists) EntityUpdateHandler.sendUpdate(this.entities.getEntity(ent.id), client);\n            }\n        } else {\n            throw Error(`Client sent invalid Entity packet! ${typeof packet}`)\n        }\n    }\n\n    static sendUpdate(entity: Entity, skip?: Client) {\n        if (!entity.canMove() || !entity.visible) return;\n        const proto = new ProtoEntity().assign({\n            ...entity,\n            sprite: new ProtoSprite().assign({...entity.sprite}),\n            owners: Array.from(entity.owners)\n        });\n        const packet = new EntityUpdatePacket().assign({entities: [proto]});\n        broadcast(packet, false, skip);\n    }\n\n    static sendDelete(entity: Entity) {\n        if (!entity.canMove()) return;\n        const packet = new EntityDeletePacket().assign({entityID: entity.id});\n        console.debug(packet);\n        broadcast(packet, true);\n    }\n}\n\n","import {Graphics, Text, TextStyle} from 'pixi.js'\nimport * as util from '../ui-data/ui-util';\nimport {OVERLAY_DEPTHS, OVERLAY_LAYER} from \"../ui-data/globals\";\n\nconst defaultStyle = {\n    fontFamily: \"Arial Black\",\n    fontSize: 18,\n    fill: \"#000000\"\n};\n\nconst plates = new Set<UiNamePlate>();\n\n/**\n * Replace all plates, and shift them all to not overlap.\n */\nexport function shiftPlates() {\n    Array.from(plates).sort((p1, p2) => p1.dy - p2.dy).forEach(plate => {\n        plate.position.set(plate.dx, plate.dy);\n        plates.forEach(p => {\n            if (p === plate) return;\n            while (util.collides(plate, p)) {\n                plate.position.set(plate.dx, plate.y -= (plate.height+2));\n            }\n        });\n        plate.moveBkg();\n    })\n}\n\nexport class UiNamePlate extends Text{\n    public dx = 0;\n    public dy = 0;\n    private added = false;\n    private bkg = new Graphics();\n\n    constructor(text: string) {\n        super(text, new TextStyle(defaultStyle));\n        this.resolution = 8;\n        this.zIndex = OVERLAY_DEPTHS.NAMEPLATE;\n        this.roundPixels = true;\n    }\n\n    public setColor(color: string) {\n        if (this.style) this.style.fill = color;\n    }\n\n    public setName(name: string) {\n        this.text = name;\n    }\n\n    public setVisible(visible: boolean) {\n        if (!this.text) visible = false;\n        this.visible = visible;\n        this.bkg.visible = visible;\n    }\n\n    /**\n     * Place this plate near the given coords, sliding up to make space for preexisting plates.\n     * @param x\n     * @param y\n     */\n    public place (x: number, y: number) {\n        if (!this.added) {\n            this.added = true;\n            OVERLAY_LAYER.addChild(this);\n            OVERLAY_LAYER.addChild(this.bkg);\n            plates.add(this);\n        }\n        this.calculateBounds();\n        this.dx = Math.round(x - this.width/2);\n        this.dy = Math.round(y - this.height);\n        shiftPlates();\n    }\n\n    public moveBkg() {\n        this.bkg.clear();\n        this.bkg.beginFill(0xFFFFFF, 0.5);\n        this.bkg.drawRect(0,0,this.width+4, this.height+4);\n        this.bkg.endFill();\n        this.bkg.position.set(this.position.x-2, this.position.y-2);\n    }\n\n    /**\n     * Delete this plate, cleaning up any positioning problems.\n     */\n    remove() {\n        plates.delete(this);\n        this.destroy({\n            children: true,\n            texture: true,\n            baseTexture: true\n        });\n        this.bkg.destroy({\n            texture: true,\n            baseTexture: true,\n            children: true\n        })\n\n        shiftPlates();\n    }\n}\n","import {AnimatedSprite} from \"pixi.js\";\nimport {UiNamePlate} from \"./ui-name-plate\";\nimport {loadFramesFromGif, makeTexture, releaseGif, releaseTexture} from \"../ui-data/image-loader\";\nimport {ENTITY_LAYER, GRID_TILE_PX, TextureKey} from \"../ui-data/globals\";\nimport {Texture} from 'pixi.js';\n\nconst entities: Record<string, Promise<UiEntity>> = {};\n\nexport class UiEntity extends AnimatedSprite {\n    public readonly id: string;\n    public name: string;\n    public autoFlip = true;\n    private textureIDs: string[] = [];\n    private plate: UiNamePlate;\n    private added = false;\n    private destroyed = false;\n    private currentGif: string|null = null;\n\n    constructor(id: string, name: string) {\n        super([Texture.WHITE], true);\n        this.animationSpeed = 5/60;\n        this.id = id;\n        this.name = name;\n        this.plate = new UiNamePlate(name);\n        this.setAnimationSpeed(60);\n    }\n\n    place (tileX: number, tileY: number) {\n        if (this.destroyed) return;\n        if (!this.added) {\n            this.added = true;\n            this.play();\n            ENTITY_LAYER.addChild(this);\n        }\n        if (this.autoFlip && tileX*GRID_TILE_PX !== this.position.x){\n            if (tileX*GRID_TILE_PX > this.position.x) {\n                this.scale.x = -1;\n                this.anchor.x = 1;\n            } else {\n                this.scale.x = 1;\n                this.anchor.x = 0;\n            }\n        }\n\n        this.position.set(tileX * GRID_TILE_PX, tileY * GRID_TILE_PX);\n        this.plate.place(this.position.x + GRID_TILE_PX/2, this.position.y);\n        return this;\n    }\n\n    /**\n     * Destroy and clean up this Entity and its name plate/textures.\n     * Also flips a flag to prevent any race conditions with destroying and adding.\n     */\n    remove() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            this.stop();\n            this.destroy();\n            this.plate.remove();\n            this.textureIDs.forEach(t => releaseTexture(t));\n            if (this.currentGif) {\n                releaseGif(this.currentGif).then();\n            }\n        }\n    }\n\n    setColor(color: string) {\n        this.plate.setColor(color);\n        return this;\n    }\n\n    setHidden(hidden: boolean) {\n        this.alpha = hidden ? 0.5 : 1;\n        return this;\n    }\n\n    setName(name: string) {\n        this.name = name;\n        this.plate.setName(name);\n        return this;\n    }\n\n    setShowName(show: boolean) {\n        this.plate.setVisible(show);\n    }\n\n    async setTextures(textures: TextureKey[]) {\n        const newIDs = textures.map(t => t.uid);\n        this.stop();\n\n        const newGifUri = textures[0]?.uid.startsWith(\"gif:\") ? textures[0].uid : null;\n        if (this.currentGif && newGifUri !== this.currentGif) {\n            await releaseGif(this.currentGif);\n        }\n        this.currentGif = newGifUri;\n        if (this.currentGif) {\n            const loadedGif = await loadFramesFromGif(this.currentGif);\n            textures = loadedGif.frames;\n        }\n\n        await Promise.all(textures.map(t => makeTexture(t))).then(loaded => {\n            this.textureIDs.forEach(tid => {\n                if (!newIDs.find(id => id === tid)) releaseTexture(tid);\n            });\n            this.textureIDs = textures.map(t => t.uid);\n            this.textures = loaded;\n            // @ts-ignore\n            this._durations = textures.map(t=>t.delay || 160);\n        });\n\n        this.gotoAndPlay(1);\n        return this;\n    }\n\n    setAnimationSpeed(multiplier: number) {\n        this.animationSpeed = multiplier/60;\n    }\n}\n\n/**\n * Creates a unique entity with the given ID, or returns the existing entity that matches.\n * @param id\n * @param name\n * @param textures\n */\nexport async function createEntity(id: string, name: string, textures: TextureKey[]) {\n    if (entities[id]) {\n        return entities[id];\n    }\n    return entities[id] = new UiEntity(id, name).setTextures(textures);\n}\n\n/**\n * Fetch the requested entity, once it is finished loading.\n * @param id\n */\nexport async function getEntity(id: string) {\n    if (entities[id]) {\n        return await entities[id];\n    }\n    return null;\n}\n\n/**\n * Wait for the entity to load, if required, then destroy it safely.\n * @param id\n */\nexport async function releaseEntity(id: string) {\n    if (entities[id]) {\n        const prom = entities[id];\n        delete entities[id];\n        (await prom).remove();\n    } else {\n        console.warn(\"Tried to delete missing entity:\", id);\n    }\n}\n\n\n// @ts-ignore\nwindow.debugEntityList = entities;\n","import {Sprite} from \"../util/sprite-loading\";\nimport {v4 as uuid} from 'uuid';\nimport {observable} from \"mobx\";\nimport {isHost} from \"../net/peerconnection\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport {currentUsername} from \"../db/metadata-db\";\nimport {EntityInterface} from \"../data/interfaces/entity\";\nimport * as ENTITIES from '../renderer/ui-components/ui-entity';\n\n\nexport class Entity implements EntityInterface{\n    @observable sprite: Sprite;\n    @observable name: string;\n    @observable color: string = '#000000';\n    id: string;\n    x: number = 0;\n    y: number = 0;\n    @observable visible: boolean = true;\n    @observable owners: string[] = [];\n    @observable saveToCampaign: boolean = false;\n\n    constructor(sprite: Sprite, init?: Partial<Entity>) {\n        this.sprite = sprite;\n        this.id = uuid();\n        this.name = this.id;\n        if (init) {\n            Object.assign(this, init)\n        }\n    }\n\n   canMove() {\n        return isHost() || this.owners.includes(currentUsername.get());\n   }\n}\n\nexport default class EntityLayer {\n    private readonly entities: Record<string, Entity> = {};\n    @observable public showNames = true;\n    @observable public selected: Entity|null = null;\n    @observable public isDirty: boolean = false;\n\n    public remove(id: string, sendUpdate: boolean = true): boolean {\n        const existing = this.entities[id];\n        if (existing) {\n            ENTITIES.releaseEntity(id).catch(console.error);\n            delete this.entities[id];\n            if (sendUpdate) {\n                this.isDirty = true;\n                EntityUpdateHandler.sendDelete(existing);\n            }\n        }\n        if (existing === this.selected) this.selected = null;\n        return !!existing;\n    }\n\n    public addEntity(sprite: Sprite, opts?: Partial<Entity>, sendUpdate: boolean = true) {\n        const ent = new Entity(sprite, opts);\n\n        this.remove(ent.id, sendUpdate);\n\n        ENTITIES.createEntity(ent.id, ent.name, sprite.textureData).then(e => {\n            e.setColor(ent.color);\n            e.setHidden(!ent.visible);\n            e.place(ent.x, ent.y);\n            e.setShowName(this.showNames);\n        }).catch(console.error);\n\n        this.entities[ent.id] = ent;\n\n        if (sendUpdate) {\n            EntityUpdateHandler.sendUpdate(ent);\n            this.isDirty = true;\n        }\n\n        return ent;\n    }\n\n    public select(entEle: Entity|null) {\n        this.selected = entEle;\n        console.debug('Selected entity:', this.selected);\n    }\n\n    public entityIsOwned(id: string, checkOwner: string) {\n        const existing = this.entities[id];\n        if (existing) {\n            return existing.owners.includes(checkOwner);\n        }\n        return false;\n    }\n\n    public getEntity(id: string) {\n        return this.entities[id];\n    }\n\n    public updateEntity(id: string, props: Partial<Entity>, sendUpdate: boolean=true) {\n        const existing = this.entities[id];\n        if (existing) {\n            const oldSprite = existing.sprite;\n\n            Object.assign(existing, props);\n            ENTITIES.getEntity(id).then(ent => {\n                if (ent) {\n                    ent.setColor(existing.color);\n                    ent.setHidden(!existing.visible);\n                    ent.setName(existing.name);\n                    ent.place(existing.x, existing.y);\n                    if (existing.sprite.composite !== oldSprite.composite) {\n                        ent.setTextures(existing.sprite.textureData).catch(console.error);\n                    }\n                }\n            })\n            if (sendUpdate) {\n                EntityUpdateHandler.sendUpdate(existing);\n                this.isDirty = true;\n            }\n        }\n        return !!existing;\n    }\n\n    public setEntitySprite(entity: Entity, sprite: Sprite) {\n        this.isDirty = true;\n        entity.sprite = sprite;\n        ENTITIES.getEntity(entity.id).then(e => {\n            e?.setTextures(sprite.textureData);\n        });\n        EntityUpdateHandler.sendUpdate(entity);\n    }\n\n    setDisplayNamePlates(show: boolean) {\n        this.showNames = show;\n        this.getEntityList().forEach(ent => {\n            ENTITIES.getEntity(ent.id).then(ent => {\n                ent?.setShowName(show);\n            })\n        })\n    }\n\n    /**\n     * Directly export the underlying entity list, for serialization.\n     */\n    getEntityList() {\n        return Object.values(this.entities);\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport abstract class PreCheck {\n    protected readonly controller: GameController;\n    run: OmitThisParameter<(isHost: boolean, client: Client) => Promise<void>>;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n        this.run = this.runHandler.bind(this);\n    }\n\n    private async runHandler(isHost: boolean, client: Client){\n        return isHost ? this.host(client) : this.client(client);\n    }\n\n    abstract client(client: Client): Promise<void>;\n    abstract host(client: Client): Promise<void>;\n}\n","import {db} from './database';\n\nexport interface UserData {\n    id: number;\n    username: string;\n    keyCodes: string[];\n    lastSeen: number;\n}\n\n\nexport async function addNewUser(user: Partial<UserData>): Promise<UserData> {\n    const data = {\n        id: 0,\n        username: '',\n        keyCodes: [],\n        ...user,\n        lastSeen: new Date().getTime()\n    };\n    await db.users.put(data);\n    return data;\n}\n\nexport async function updateUser(user: UserData): Promise<number> {\n    return db.users.update(user.id, user);\n}\n\nexport async function getUser(username: string): Promise<UserData|null> {\n    return db.users.where({username}).first();\n}\n\n/**\n * Checks if the given User code matches an existing username.\n * If so, also updates the lastSeen time of the user.\n * @param userName\n * @param keyCode\n */\nexport async function checkUserCredentials(userName: string, keyCode: string): Promise<UserData> {\n    const match = await db.users.where({username: userName, keyCodes: keyCode}).first();\n\n    if (match) {\n        match.lastSeen = new Date().getTime();\n        await updateUser(match);\n    }\n\n    return match;\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {addNewUser, checkUserCredentials, getUser, updateUser} from \"../../db/user-db\";\nimport {Meta, metadata} from '../../db/metadata-db';\nimport {ReadyPacket, SignaturePacket} from \"../packets/util-packets\";\n\n\nexport default class HandShakeCheck extends PreCheck {\n    /**\n     * Accepts a signed JSON packet, and validates the signature.\n     * The validation is an async race condition, so responds with an OK packet once finished.\n     * @param client\n     */\n    async client(client: Client): Promise<void> {\n        const username = await metadata.get(Meta.USERNAME);\n        const packet = new SignaturePacket().assign({\n            username\n        });\n        await client.send(packet);\n\n        await client.getNextPacket(ReadyPacket); // Wait for host to allow out login.\n    }\n\n    /**\n     * Sends a signed JSON packet, to validate this host ID.\n     * Awaits an OK Packet from the client, once validation is complete.\n     * @param client\n     */\n    async host(client: Client): Promise<void> {\n        // Wait for client to send a message containing username:\n        const data: SignaturePacket = await client.getNextPacket(SignaturePacket);\n        const {username} = data;\n\n        let user = await checkUserCredentials(username, client.id);\n        if (!user) {\n            let existing = await getUser(username);\n\n            await this.controller.lobby.addPendingLogin(username, client.id);  // Will be approved via UI, by the Host.\n\n            if (!existing) {\n                console.log(`Added new user: ${username}, ${client.id}`);\n                existing = await addNewUser({username, keyCodes: [client.id]});\n            } else {\n                console.log(`Updated existing user: ${username}, ${client.id}`);\n                existing.keyCodes.push(client.id);\n                await updateUser(existing);\n            }\n            user = existing;\n        }\n\n        client.userData = user;\n        await client.send(new ReadyPacket())\n    }\n}\n\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\n\n\nexport default class BoardSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        await client.send(await this.controller.buildProtoBoard(false));\n    }\n}\n","import {observable} from \"mobx\";\nimport notifications from \"../../ui-components/notifications\";\nimport {Button} from \"@material-ui/core\";\nimport React from \"react\";\n\n\nexport interface PendingUser {\n    username: string;\n    keyCode: string;\n    approve: Function;\n    reject: Function;\n}\n\nexport default class Lobby {\n    @observable public readonly pendingLogins: PendingUser[] = [];\n    @observable public myName: string = '';\n    private readonly blacklist: Set<String> = new Set();\n\n    private notify(title: string, body: string, iconURL: string='') {\n        Notification.requestPermission().then(function(result) {\n            if (result === 'granted') {\n                new Notification(title, {\n                    body,\n                    icon: iconURL\n                });\n            }\n        });\n    }\n\n    /**\n     * Adds the given login attempt to the pending list,\n     * and returns a Promise that will either resolve or reject eventually at the Hosts' discretion.\n     * @param username\n     * @param keyCode\n     */\n    public async addPendingLogin(username: string, keyCode: string) {\n        return new Promise((approve, reject) => {\n            const existing = Array.from(this.pendingLogins).find(pe => pe.keyCode === keyCode);\n            const pending = { username, keyCode, approve, reject };\n\n            if (existing) {\n                this.removePending(existing);\n            }\n            this.pendingLogins.push(pending);\n\n            if (!this.blacklist.has(keyCode)) {\n                const tID = notifications.warning(`Unknown device (${keyCode}) wants to join as \"${username}\".`, {\n                    preventDuplicate: true,\n                    action: <Button\n                        variant={\"outlined\"}\n                        onClick={()=>{notifications.close(tID); this.approveUser(pending)}}\n                    >\n                        Approve\n                    </Button>\n                });\n                this.notify('New Unknown User', `Unknown device (${keyCode}) wants to join as \"${username}\".`);\n            }\n        });\n    }\n\n    public approveUser(user: PendingUser) {\n        user.approve(true);\n        notifications.success(`Approved user \"${user.username}\".`)\n        this.removePending(user);\n    }\n\n    public rejectUser(user: PendingUser) {\n        user.reject(false);\n        notifications.error(`Rejected device (${user.keyCode}).`)\n        this.removePending(user);\n        this.blacklist.add(user.keyCode);\n    }\n\n    private removePending(user: PendingUser) {\n        const idx = this.pendingLogins.findIndex(u => u.keyCode === user.keyCode);\n        if (idx >= 0) {\n            this.pendingLogins.splice(idx, 1);\n        }\n    }\n}\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {PingPacket} from \"../packets/util-packets\";\nimport {Client} from \"../peerconnection\";\n\n\nexport default class PingHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [PingPacket];\n\n    async clientHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        PingHandler.handlePing(client);\n    }\n\n    private static handlePing(client: Client) {\n        client.lastPing = Date.now();\n    }\n}\n","import {db} from './database';\nimport Dexie from \"dexie\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as encoder  from '../net/messageEncoder'\nimport notifications from \"../../ui-components/notifications\";\n\nexport interface BoardWrapper {\n    name: string;\n    campaignID: number;\n    data: Uint8Array;\n}\n\n\nexport async function save(campaignID: number, name: string, board: ProtoBoard) {\n    try {\n        console.log('Persistent storage enabled:', await navigator.storage.persist());\n    } catch (err) {\n        console.error(err);\n    }\n    return db.boards.put({\n        name,\n        campaignID,\n        data: await encoder.encode(board)\n    }).catch(err => {\n        notifications.error('Error saving board!');\n        console.error(err);\n    })\n}\n\nexport async function load(campaignID: number, name: string): Promise<null|ProtoBoard> {\n    const res: BoardWrapper|null = await db.boards.where({campaignID, name}).first().catch(err => {\n        notifications.error('Error loading board!');\n        console.error(err);\n    })\n\n    if (res) {\n        return encoder.decode(res.data);\n    } else {\n        return null;\n    }\n}\n\nexport async function getAvailable(campaignID: number): Promise<string[]> {\n    try {\n        return (await db.boards.where('[campaignID+name]').between([campaignID, Dexie.minKey], [campaignID, Dexie.maxKey]).toArray()).map(b=>b.name);\n    } catch(err) {\n        notifications.error('Error fetching available boards!');\n        console.error(err);\n        return [];\n    }\n}\n\n\nexport async function deleteBoard(campaignID: number, name: string) {\n    return db.boards.where({campaignID, name}).delete();\n}\n","import {observable} from \"mobx\";\nimport {EntityInterface} from \"../data/interfaces/entity\";\n\nexport default class Campaign {\n    public readonly name: string;\n    @observable public boards: string[] = [];\n    @observable public loadedBoard: string|null = null;\n    @observable.shallow public readonly characters: EntityInterface[] = [];\n    public readonly id: number = -1;\n    public readonly timeCreated = Date.now();\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n","/**\n * Strip out any proxied observables, and convert them to standard values.\n * @param obj\n */\nexport default function stripProxy(obj: any): any {\n    const ret = {};\n    for (const e of Object.entries(obj)) {\n        let v = e[1];\n\n        if (v instanceof Array) {\n            v = Array.from(v);\n        }\n        // @ts-ignore\n        ret[e[0]] = v;\n    }\n    return ret;\n}\n","import Campaign from \"../controllers/campaign\";\nimport stripProxy from \"../util/deproxy\";\nimport {db} from './database';\n\ndb.campaigns.mapToClass(Campaign);\n\nexport async function saveCampaign(camp: Campaign) {\n    console.info('Saved campaign:', camp);\n    return db.campaigns.update(camp.id, stripProxy(camp));\n}\n\nexport async function createCampaign(name: string): Promise<any> {\n    const obj: any = {...new Campaign(name), id: null};\n    delete obj.id;\n\n    const res = await db.campaigns.put(stripProxy(obj));\n    console.info('Saved new campaign:', res);\n    return db.campaigns.get({id: res});\n}\n\nexport async function getAllCampaigns(): Promise<Campaign[]> {\n    return db.campaigns.toArray()\n}\n\nexport async function getCampaign(id: number): Promise<Campaign|null> {\n    return db.campaigns.where({id}).first()\n}\n","import {getAllCampaigns, getCampaign, saveCampaign, createCampaign} from \"../db/campaign-db\";\nimport * as boardDB from '../db/board-db';\nimport Campaign from \"../controllers/campaign\";\n\n\nexport default class CampaignLoader {\n    /**\n     * Get an array of all saved Campaign objects.\n     */\n    public static async getAvailable(): Promise<Campaign[]> {\n        return getAllCampaigns()\n    }\n\n    /**\n     * Load a Campaign object from the db, using its unique ID.\n     * @param id\n     */\n    public static async loadCampaign(id: number): Promise<Campaign|null> {\n        const campaign = await getCampaign(id);\n\n        if (campaign) campaign.boards = await boardDB.getAvailable(id);\n\n        if (campaign && campaign.loadedBoard && !campaign.boards.includes(campaign.loadedBoard)) {\n            campaign.loadedBoard = null;\n        }\n\n        return campaign;\n    }\n\n    /**\n     * Save an existing Campaign object back to the database.\n     * @param camp\n     */\n    public static async saveCampaign(camp: Campaign): Promise<number> {\n        return saveCampaign({\n            ...camp,\n            boards: Array.from(camp.boards),\n            characters: Array.from(camp.characters)\n        }).catch(err => {\n            console.error(err)\n            return -1;\n        });\n    }\n\n    /**\n     * Create a new Campaign object, pre-saved in the database.\n     * @param name\n     */\n    public static async createCampaign(name: string): Promise<Campaign> {\n        return createCampaign(name);\n    }\n}\n\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {ProtoBoard} from \"../../data/protobufs/proto-tiles\";\nimport {Client} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\n\n\nexport default class BoardReloadHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [ProtoBoard];\n    private readonly controller: any;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n    async clientHandler(client: Client, packet: ProtoBoard): Promise<void> {\n        return this.controller.loadFromProtoBoard(packet);\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        throw Error('Client tried to send Board Update!')\n    }\n}\n","import React from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField\n} from \"@material-ui/core\";\n\nexport function InputDialog(props: {\n    open: boolean\n    title: string,\n    body: string,\n    tooltip: string,\n    onSubmit: Function,\n    onCancel: Function,\n    acceptText?: string\n}) {\n    const [text, setText] = React.useState('');\n\n    const handleClose = () => {\n        props.onCancel();\n    };\n    const handleText = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setText(event.target.value);\n    }\n\n    return (\n        <div>\n            <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {props.body}\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label={props.tooltip}\n                        type=\"text\"\n                        fullWidth\n                        value={text}\n                        onChange={handleText}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => {\n                        handleClose();\n                        props.onCancel()\n                    }} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => {\n                        props.onSubmit(text);\n                        setText('')\n                    }} color=\"primary\">\n                        {props.acceptText || 'Connect'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n\n\nexport default function ConfirmPrompt(props: {\n    open: boolean,\n    onCancel: any,\n    onConfirm: any,\n    title: string,\n    prompt: string,\n    confirmButton?: string,\n    cancelButton?: string\n}) {\n    return (\n        <div>\n            <Dialog\n                open={props.open}\n                onClose={props.onCancel}\n                aria-labelledby=\"confirm-dialog-title\"\n                aria-describedby=\"confirm-dialog-description\"\n            >\n                <DialogTitle className=\"confirm-dialog-title\">{props.title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText className=\"prompt-dialog-description\">\n                        {props.prompt}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onCancel} color=\"primary\">\n                        {props.cancelButton||'cancel'}\n                    </Button>\n                    <Button onClick={props.onConfirm} color=\"primary\" autoFocus>\n                        {props.confirmButton||'confirm'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from 'react';\nimport '../styles/yt-player-style.scss';\nimport YouTube from 'react-youtube';\nimport {broadcast, netMode, NetworkMode, isHost} from \"../game/net/peerconnection\";\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport {Button, Fab, IconButton, Tooltip} from \"@material-ui/core\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../game/net/packets/media-packets\";\nimport {observer} from \"mobx-react-lite\";\nimport {InputDialog} from \"./prompts\";\nimport {observable} from \"mobx\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\n\nconst PLAYER_OPTS = {\n    playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        mute: 0\n    },\n};\n\ninterface PlayerConfig {\n    volume: number;\n    loop: boolean;\n    shuffle: boolean;\n}\n\nconst config: PlayerConfig = observable.object({\n    volume: 100,\n    loop: true,\n    shuffle: true\n});\n\nfunction saveConf() {\n    metadata.store(Meta.YT_PLAYER_CONFIG, config).catch(console.error);\n}\n\n/**\n * The current player. There should only ever be one at a time. May be null until initialized.\n */\nexport let player: any = null;\n\n/**\n * Get a summary of the currently-playing media, if any is available.\n */\nexport const getPlayerStatus = (): Partial<MediaStatusPacket>|null => {\n    if (!player) return null;\n\n    const currentVideo: string = player.getVideoData().video_id;\n    const currentTime: number = Math.floor(player.getCurrentTime());\n    const playbackRate: number = player.getPlaybackRate();\n    const paused: boolean = player.getPlayerState() === YouTube.PlayerState.PAUSED;\n\n    if (!currentVideo) return null;\n\n    return {\n        currentVideo,\n        currentTime,\n        playbackRate,\n        paused\n    }\n};\n\n\nexport const YoutubePlayerInterface = observer(() => {\n    const [visible, setVisible] = React.useState(false);\n\n    React.useMemo(() => {\n        metadata.get(Meta.YT_PLAYER_CONFIG).then(async (res: PlayerConfig|null) => {\n            if (res) {\n                Object.assign(config, res);\n            }\n        })\n    }, []);\n\n    const tools = (netMode.get() === NetworkMode.HOST && player) ?\n        <div className={'ytPlayerHostToolbar'}>\n            <LoadVideoButton player={player} />\n            <LoadPlaylistButton player={player} />\n            <ShuffleButton player={player}/>\n        </div> : null;\n\n    return <div style={{pointerEvents: 'auto'}} className={`ytPlayerIcon ${visible? 'visible':'hidden'}`}>\n        <Tooltip\n            title={\"Media Controls\"}\n        >\n            <Fab\n                color=\"default\"\n                onClick={()=>{setVisible(!visible)}}\n            >\n                <YouTubeIcon className={`ytPlayerIconInner ${visible? 'visible':'hidden'}`} />\n            </Fab>\n        </Tooltip>\n\n        <div className={`ytPlayerWrapper ${visible? 'visible':'hidden'}`}>\n            {tools}\n            <YoutubePlayer\n                loop={config.loop}\n                shuffle={config.shuffle}\n                volume={config.volume}\n            />\n        </div>\n    </div>;\n});\n\n\nexport const YoutubePlayer = (props: {loop: boolean, shuffle: boolean, volume: number}) => {\n    const [mediaPlayer, setPlayer] = React.useState<any>(null);\n\n    React.useEffect(() => {\n        if (!mediaPlayer) return;\n\n        player = mediaPlayer;\n\n        if (!isHost()) broadcast(new MediaRequestPacket(), false).catch(console.error);\n\n        const timer = setInterval(() => {\n            // Periodically poll for a new user-set volume, and save the new result.\n            const v = mediaPlayer.getVolume();\n            if (mediaPlayer.getPlayerState() === YouTube.PlayerState.PLAYING && v !== config.volume) {\n                config.volume = v;\n                saveConf();\n            }\n        }, 15000);\n\n        return () => {\n            player = null;\n            clearInterval(timer);\n        }\n    }, [mediaPlayer]);\n\n    const onReady = (event: any) => { // target, data\n        setPlayer(event.target);\n    }\n\n    const onPlay = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video play:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onPause = () => {\n        const stat = getPlayerStatus();\n        if (stat) {\n            console.debug('Video pause:', getPlayerStatus());\n            broadcast(new MediaStatusPacket().assign(stat), true).catch(console.error);\n        }\n    }\n\n    const onError = (event: any) => {\n        event.target.nextVideo();\n    }\n\n    const onStateChange = (event: any) => {\n        /*  BUFFERING: 3, CUED: 5, ENDED: 0, PAUSED: 2, PLAYING: 1, UNSTARTED: -1 */\n        if (event.data === YouTube.PlayerState.CUED) {\n            console.info('Video/Playlist Cued!', mediaPlayer, mediaPlayer.getVideoData());\n            // Reference: https://developers.google.com/youtube/iframe_api_reference#onStateChange\n            mediaPlayer.setLoop(props.loop);  // Loop the playlist.\n            mediaPlayer.setShuffle(props.shuffle); // Can be toggled to shuffle/restore order.\n            mediaPlayer.setVolume(props.volume); // 0-100.\n\n            if (mediaPlayer.getPlaylist()) {\n                mediaPlayer.playVideoAt(0);\n            } else {\n                mediaPlayer.playVideo();\n            }\n        }\n    }\n\n    return <div style={{pointerEvents: 'auto'}}>\n        <YouTube\n            // @ts-ignore\n            opts={PLAYER_OPTS}\n            id={'yt-player'}\n            onReady={onReady}\n            onPlay={onPlay}\n            onPause={onPause}\n            onError={onError}\n            onStateChange={onStateChange}\n            className={'yt-player-class'}\n        />\n    </div>;\n};\n\n\nexport const LoadPlaylistButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadPlaylist = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input);\n        let id = parser.get('list') || input;\n\n        if (id.includes('=')) id = input.split('=')[1];\n\n        props.player.cuePlaylist({\n            list: id,\n            listType: 'playlist',\n            index: 0,\n            startSeconds: 0\n        });\n    };\n\n    return <div className={'ytPlayerPlaylistButton'}>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Playlist\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Playlist'}\n            body={'Enter a YouTube Playlist:'}\n            tooltip={'Playlist URL'}\n            onSubmit={loadPlaylist}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\nexport const LoadVideoButton = (props: {player: any}) => {\n    const [prompt, needPrompt] = React.useState(false);\n\n    const loadVideo = (input: string) => {\n        needPrompt(false);\n        if (!input) return;\n\n        const parser = new URLSearchParams(input.split('?')[1] || '');\n        let id = parser.get('v') || input.substring(input.lastIndexOf('/')+1, input.indexOf('?'));\n        let time = parseInt(parser.get('t') || '0');\n\n        if (id.includes('/')) id = input.split('/')[input.split('/').length-1];\n\n        props.player.cueVideoById(id, time);\n    };\n\n    return <div className={'ytPlayerVideoButton'}>\n        <Button\n            style={{color: 'rgb(14,142,191)', height: '100%'}}\n            onClick={() => needPrompt(true)}\n        >\n            Load Video\n        </Button>\n        <InputDialog\n            open={prompt}\n            title={'Enter a Video'}\n            body={'Enter a YouTube Video:'}\n            tooltip={'Video URL'}\n            onSubmit={loadVideo}\n            onCancel={() => needPrompt(false)}\n            acceptText={'Load'}\n        />\n    </div>\n}\n\n\nexport const ShuffleButton = observer((props: {player: any}) => {\n    const toggle = () => {\n        config.shuffle = !config.shuffle;\n        props.player.setShuffle(config.shuffle);\n\n        saveConf();\n    }\n\n    return <Tooltip title={\"Shuffle\"}>\n        <IconButton\n            children={<ShuffleIcon className={`ytPlayerShuffleIcon ${config.shuffle ? 'active': 'inactive'}`}/>}\n            onClick={toggle}\n        />\n    </Tooltip>\n});\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {Client} from \"../peerconnection\";\nimport {MediaRequestPacket, MediaStatusPacket} from \"../packets/media-packets\";\nimport GameController from \"../../controllers/game\";\nimport notifications from \"../../../ui-components/notifications\";\nimport {getPlayerStatus, player} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSyncHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [MediaStatusPacket, MediaRequestPacket];\n    private readonly controller: GameController;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n\n    async clientHandler(client: Client, packet: MediaStatusPacket): Promise<void> {\n        if (!player) {\n            notifications.warning('Media not available yet.');\n            return;\n        }\n        if (packet.paused) {\n            player.pauseVideo();\n            return;\n        }\n        player.setPlaybackRate(packet.playbackRate);\n        player.cueVideoById({\n            videoId: packet.currentVideo,\n            startSeconds: packet.currentTime\n        });\n    }\n\n    async hostHandler(client: Client, packet: ProtoWrapper): Promise<void> {\n        if (packet instanceof MediaRequestPacket) {\n            const status = getPlayerStatus();\n\n            if (status) {\n                await client.send(new MediaStatusPacket().assign(status));\n            }\n        } else {\n            throw new Error('Client attempted to send media commands!');\n        }\n    }\n}\n","import {Client} from \"../peerconnection\";\nimport {PreCheck} from \"./precheck\";\nimport {MediaStatusPacket} from \"../packets/media-packets\";\nimport {getPlayerStatus} from \"../../../ui-components/youtubePlayer\";\n\n\nexport default class MediaSync extends PreCheck {\n    /**\n     * Waits for a ProtoBoard, which is then used to seed the initial board status.\n     * @param client\n     */\n    async client(client: Client) {}\n\n    /**\n     * Issues a ProtoBoard, containing the initial board status, to the client.\n     * @param client\n     */\n    async host(client: Client) {\n        const status = getPlayerStatus();\n\n        if (status) {\n            await client.send(new MediaStatusPacket().assign(status));\n        }\n    }\n}\n","// Build grid (also functions as the input handler):\nimport * as PIXI from \"pixi.js\";\nimport { Texture } from \"pixi.js\";\nimport {GRID_TILE_PX} from \"../ui-data/globals\";\n\n\nPIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST\n\nexport const grid = new PIXI.TilingSprite(makeGridTexture(), 100, 100);\ngrid.roundPixels = false;\ngrid.position.set(0,0);\ngrid.visible = true;\ngrid.alpha = 0.5;\n\n/**\n * Extremely naive implementation to find optimal repeating texture size.\n */\nfunction findPow() {\n    for (let i=1; i < 20; i++) {\n        if (Math.pow(i, 2) % GRID_TILE_PX === 0) return Math.pow(i, 2);\n    }\n    console.warn('Unable to find satisfactory texture size for grid.');\n    return GRID_TILE_PX*3;\n}\n\nfunction makeGridTexture() {\n    const render = document.createElement('canvas');\n    const ctx = render.getContext('2d')!;\n    const dim = findPow();// Power of two divisible by 48px (tile width).\n    render.width = dim;\n    render.height = dim;\n    ctx.imageSmoothingEnabled = false;\n    ctx.clearRect(0,0,dim,dim);\n    ctx.fillStyle = 'rgba(255,255,255,0.5)';\n\n    for (let y=0; y < Math.ceil(dim / GRID_TILE_PX); y++) {\n        for (let x=0; x < Math.ceil(dim / GRID_TILE_PX); x++) {\n            ctx.fillRect(0,y*GRID_TILE_PX, dim, 2);\n\n            ctx.fillRect(x*GRID_TILE_PX,0, 2, dim);\n        }\n    }\n    return Texture.from(render);\n}\n\n/**\n * Toggle grid visibility.\n * @param showGrid\n */\nexport function setVisible(showGrid: boolean) {\n    grid.visible = showGrid;\n}\n\n// @ts-ignore\nwindow.debugGridToggle = setVisible;\n","import * as PIXI from \"pixi.js\";\nimport {GRID_TILE_PX, OVERLAY_DEPTHS, OVERLAY_LAYER} from \"../ui-data/globals\";\n\nexport const DEFAULT_PEN_COLOR = 0xFFFF00;\nlet cx = 0, cy = 0, w = 0, c = DEFAULT_PEN_COLOR;\nlet tx = 0, ty = 0;\n\nOVERLAY_LAYER.sortableChildren = true;\n\nexport const tooltip = new PIXI.Graphics();\ntooltip.zIndex = OVERLAY_DEPTHS.TOOLTIP;\nsetSize(1);\nOVERLAY_LAYER.addChild(tooltip);\n\nexport function setTilePos(x: number, y: number) {\n    tx = x;\n    ty = y;\n    cx = x * GRID_TILE_PX - (w-GRID_TILE_PX)/2;\n    cy = y * GRID_TILE_PX - (w-GRID_TILE_PX)/2;\n    tooltip.position.set(cx, cy);\n}\n\n/** Center the tooltip without resizing. */\nexport function recenter() {\n    setTilePos(tx, ty);\n}\n\n/** Sets the length of each side of the tooltip. */\nexport function setSize(tiles: number) {\n    w = (Math.max(1, tiles)-1)*2*GRID_TILE_PX+GRID_TILE_PX;\n    draw();\n    recenter();\n}\n\nexport function setColor(color: number) {\n    c = color;\n    draw();\n}\n\nexport function setVisible(visible: boolean) {\n    tooltip.visible = visible;\n}\n\nfunction draw() {\n    tooltip.clear();\n    tooltip.lineStyle(4, c);\n    tooltip.drawRect(0, 0, w, w);\n}\n","import * as PIXI from 'pixi.js'\nimport {Viewport} from 'pixi-viewport'\nimport {\n    CULLER,\n    ENTITY_LAYER,\n    getForceCull, GRID_DIMENSIONS,\n    GRID_TILE_PX,\n    OVERLAY_LAYER,\n    setForceCull,\n    TERRAIN_LAYER,\n    WORLD_SIZE_PX\n} from './ui-data/globals';\nimport * as GRID from './ui-components/ui-grid';\nimport {EVENT_STREAM, GridPoint} from \"./ui-data/ui-event-stream\";\nimport * as TOOLTIP from \"./ui-components/ui-tooltip\";\n\n/*\nexport * as CONSTS from './ui-data/globals';\nexport * as EVENTS from './ui-data/ui-event-stream';\nexport * as TERRAIN from './ui-components/ui-terrain';\nexport * as ENTITIES from './ui-components/ui-entity';\nexport * as SHAPES from './ui-components/ui-shape';\nexport * as MARKER from './ui-components/ui-marker';\n*/\n\nlet zoomEnabled = true;\nconst app = new PIXI.Application({ resizeTo: document.body, backgroundColor: 0x484848 });\napp.view.classList.add(\"MAIN-GAME-CANVAS\");\ndocument.body.appendChild(app.view);\n\napp.view.addEventListener('contextmenu', (ev: any) => {\n    ev.preventDefault();\n    return false;\n});\n\nPIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n\n// create viewport\nconst viewport = new Viewport({\n    screenWidth: app.view.offsetWidth,\n    screenHeight: app.view.offsetHeight,\n    worldWidth: WORLD_SIZE_PX,\n    worldHeight: WORLD_SIZE_PX\n});\n\napp.stage.addChild(viewport);\nviewport\n    .drag()\n    //.pinch()  // Disabled, because this is buggy & not really required for mobile.\n    .bounce()\n    .wheel({smooth: 60/5})\n    .decelerate({ friction: .92 })\n    .clamp({direction: 'all'})\n    .clampZoom({minScale: 0.5, maxScale: 4})\n    .moveCenter(WORLD_SIZE_PX/2, WORLD_SIZE_PX/2);\n\n\n// Add all parents to viewport:\nviewport.addChild(TERRAIN_LAYER);\nviewport.addChild(GRID.grid);\nviewport.addChild(ENTITY_LAYER);\nviewport.addChild(OVERLAY_LAYER);\n\nCULLER.addContainer(TERRAIN_LAYER, true);\nCULLER.cull(viewport.getVisibleBounds());\n\n// cull whenever the viewport moves\nPIXI.Ticker.shared.add(() => {\n    if (viewport.dirty || getForceCull()) {\n        CULLER.cull(viewport.getVisibleBounds());\n        viewport.dirty = false;\n        setForceCull(false);\n\n        // Rather than rendering a huge grid texture, creep the grid along with the camera:\n        GRID.grid.position.set(Math.max(0, viewport.left - viewport.left % GRID_TILE_PX), Math.max(0, viewport.top - viewport.top % GRID_TILE_PX));\n        GRID.grid.width = Math.min(WORLD_SIZE_PX, viewport.screenWidthInWorldPixels + GRID_TILE_PX);\n        GRID.grid.height = Math.min(WORLD_SIZE_PX, viewport.screenHeightInWorldPixels + GRID_TILE_PX);\n    }\n});\n\n\nwindow.addEventListener('resize', () => {\n    const t = getCenterViewportTile();\n    updateInPage(false);\n    viewport.moveCenter(t.tx*GRID_TILE_PX+GRID_TILE_PX/2, t.ty*GRID_TILE_PX+GRID_TILE_PX/2);\n});\nwindow.addEventListener('load', function () {\n    updateInPage(true);\n})\n\nEVENT_STREAM.on('hover', ev => {\n    TOOLTIP.setTilePos(ev.tx , ev.ty);\n});\n\n\napp.view.addEventListener('mousedown', e => {\n    const type = e.button === 1 ? 'mouse-middle-down' : e.button === 0 ? 'mouse-down' : 'mouse-right-down';\n    fireMouseEvent(type, e);\n});\n\napp.view.addEventListener(\"mouseenter\", () => {\n    viewport.pause = !zoomEnabled;\n});\napp.view.addEventListener(\"mouseleave\", () => {\n    viewport.pause = true;\n});\n\nwindow.addEventListener('mouseup', e => {\n    const type = e.button === 1 ? 'mouse-middle-up' : e.button === 0 ? 'mouse-up' : 'mouse-right-up';\n    fireMouseEvent(type, e);\n});\n\n\nfunction fireMouseEvent(type: any, e: any) {\n    const bounds = e.target.getBoundingClientRect();\n    const x = e.clientX - bounds.left;\n    const y = e.clientY - bounds.top;\n    const px = viewport.left + (x/bounds.width) * viewport.screenWidthInWorldPixels;\n    const py = viewport.top + (y/bounds.height) * viewport.screenHeightInWorldPixels;\n\n    EVENT_STREAM.emit(type, {\n        tx: Math.min(GRID_DIMENSIONS-1, Math.max(0, Math.floor(px/GRID_TILE_PX))),\n        ty: Math.min(GRID_DIMENSIONS-1, Math.max(0, Math.floor(py/GRID_TILE_PX)))\n    })\n}\n\n\n/**\n * Enable or disable camera zoom+pan inputs.\n * @param enabled\n */\nexport function toggleViewportInput(enabled: boolean) {\n    zoomEnabled = enabled;\n    viewport.pause = !enabled;\n}\n\n/**\n * Find the tile that is currently centered within the viewport.\n */\nexport function getCenterViewportTile(): GridPoint {\n    return {\n        tx: Math.floor((viewport.left + viewport.screenWidthInWorldPixels/2)/GRID_TILE_PX),\n        ty: Math.floor((viewport.top + viewport.screenHeightInWorldPixels/2)/GRID_TILE_PX)\n    }\n}\n\nexport function setZoom(scale: number) {\n    viewport.setZoom(scale, true);\n}\n\nexport function getZoom() {\n    return viewport.scaled;\n}\n\n/**\n * Adjusts all sizes and elements to be sure they fit within the window properly.\n * Automatically called when the window resizes and when the DOM initially loads.\n * @param center\n */\nexport function updateInPage(center = false) {\n    app.resize();  // Trigger resize right away so we can resize viewport without a race condition.\n    viewport.resize(app.view.offsetWidth, app.view.offsetHeight);\n    viewport.dirty = true\n\n    if (center) {\n        viewport.moveCenter(WORLD_SIZE_PX/2, WORLD_SIZE_PX/2);\n    }\n}\n","import { Graphics } from \"pixi.js\";\nimport {GRID_TILE_PX, OVERLAY_DEPTHS, OVERLAY_LAYER} from \"../ui-data/globals\";\n\nexport enum SHAPE_TYPES {\n    circle = 'circle',\n    rectangle = 'rectangle',\n    cone = 'cone'\n}\n\n\nexport class UiShape {\n    private readonly gr: Graphics;\n    private _type: SHAPE_TYPES;\n    private _thickness: number = 1;\n    private _color: number = 0x000000;\n    private _fill: number = -1;\n    private _alpha: number = 1;\n    private _width: number = 0;\n    private _height: number = 0;\n    private tx: number = 0;\n    private ty: number = 0;\n    private added = false;\n\n    constructor(type: SHAPE_TYPES) {\n        this._type = type;\n        this.gr = new Graphics();\n        this.gr.zIndex = OVERLAY_DEPTHS.SHAPES;\n    }\n\n    type(type: SHAPE_TYPES) {\n        this._type = type;\n        this.redraw();\n        return this;\n    }\n\n    setVisible(visible: boolean) {\n        this.gr.visible = visible;\n        return this;\n    }\n\n    /**\n     * Set the size of this object.\n     * If ignored, height matches width. Height currently only applies to rectangles.\n     * @param widthTiles\n     * @param heightTiles\n     */\n    size(widthTiles: number, heightTiles = -1) {\n        this._width = widthTiles * GRID_TILE_PX;\n        this._height = (heightTiles > -1 ? heightTiles : widthTiles) * GRID_TILE_PX;\n        this.redraw();\n        return this;\n    }\n\n    sizePx(px: number) {\n        this._width = this._height = px;\n        this.redraw();\n        return this;\n    }\n\n    color(col: number) {\n        if (this._color !== col) {\n            this._color = col;\n            this.redraw();\n        }\n        this.redraw();\n        return this;\n    }\n\n    setFillColor(col: number, alpha: number = 0.5) {\n        this._fill = col;\n        this._alpha = alpha;\n        this.redraw();\n        return this;\n    }\n\n    thickness(thickness: number) {\n        if (this._thickness !== thickness) {\n            this._thickness = thickness;\n            this.redraw();\n        }\n        return this;\n    }\n\n    private redraw() {\n        this.gr.clear();\n        this.gr.lineStyle(this._thickness, this._color);\n        if (this._fill >= 0) {\n            this.gr.beginFill(this._fill, this._alpha);\n            this.draw();\n            this.gr.endFill();\n        }\n        this.gr.lineStyle(this._thickness, this._color);\n        this.draw();\n        return this;\n    }\n\n    private draw() {\n        if (!this._width) return;\n        switch (this._type) {\n            case SHAPE_TYPES.circle:\n                this.gr.drawCircle(this._width, this._width, this._width);\n                this.gr.pivot.x = this.gr.width/2;\n                this.gr.pivot.y = this.gr.height/2;\n                break\n            case SHAPE_TYPES.rectangle:\n                this.gr.drawRect(0, 0, this._width, this._height);\n                this.gr.pivot.x = this.gr.width/2;\n                this.gr.pivot.y = this.gr.height/2;\n                break;\n            case SHAPE_TYPES.cone:\n                this.gr.drawPolygon([\n                    0, this._width/2,\n                    this._width, 0,\n                    this._width, this._width,\n                    0, this._width/2\n                ]);\n                this.gr.pivot.x = 0;\n                this.gr.pivot.y = this._width/2;\n                break;\n        }\n        // this.gr.drawCircle(this.gr.pivot.x, this.gr.pivot.y, 1);\n    }\n\n    setPos(tx: number, ty: number) {\n        this.tx = tx;\n        this.ty = ty;\n        if (!this.added) {\n            this.added = true;\n            OVERLAY_LAYER.addChild(this.gr);\n        }\n        this.gr.position.set(this.tx * GRID_TILE_PX ,this.ty * GRID_TILE_PX);\n        return this;\n    }\n\n    setPosPx(px: number, py: number) {\n        this.setPos(px/GRID_TILE_PX, py/GRID_TILE_PX);\n        this.gr.position.set(px, py);\n        return this;\n    }\n\n    private slideCone(px: number, py: number) {\n        let nx = this.tx * GRID_TILE_PX;\n        let ny = this.ty * GRID_TILE_PX;\n        let xd = Math.min(GRID_TILE_PX, Math.max(0, px - nx));\n        let yd = Math.min(GRID_TILE_PX, Math.max(0, py - ny));\n\n        this.gr.position.set(nx+xd, ny+yd);\n    }\n\n    setRotation(radians: number) {\n        this.gr.rotation = radians;\n        return this;\n    }\n\n    /** Current rotation, in radians. */\n    get rotation () {\n        return this.gr.rotation;\n    }\n\n    /** Current real-world position of this shape, in Pixels. */\n    get position () {\n        return {\n            px: this.gr.position.x,\n            py: this.gr.position.y,\n            tx: this.tx,\n            ty: this.ty\n        };\n    }\n\n    get dimensions () {\n        return {\n            tw: this._width/GRID_TILE_PX,\n            th: this._height/GRID_TILE_PX\n        }\n    }\n\n    getGraphicDetails() {\n        return {\n            border: this._color,\n            fill: this._fill,\n            fillAlpha: this._alpha,\n            thickness: this._thickness\n        };\n    }\n\n    getType() {\n        return this._type;\n    }\n\n    onClick(cb: any) {\n        this.gr.interactive = true;\n        this.gr.on('click', cb);\n    }\n\n    /**\n     * Angle the shape to point towards some real-world pixel coordinates.\n     * If this shape is a cone, repositions the origin to start from the nearest border point of the tile.\n     * @param px\n     * @param py\n     * @param snap Optionally round off the angle\n     * @param snapRads Resolution to round off, is enabled. Defaults to 10deg increments.\n     */\n    pointTowards(px: number, py: number, snap = false, snapRads = 0.174533) {\n        if (this._type === SHAPE_TYPES.cone) this.slideCone(px, py);\n\n        let rad = Math.atan2(py - this.gr.position.y, px - this.gr.position.x);\n        if (snap) {\n            rad = Math.floor(rad/snapRads) * snapRads;\n        }\n        this.setRotation(rad);\n        return this;\n    }\n\n    /**\n     * Destroy this Shape, cleaning up any GL resources it uses.\n     */\n    remove() {\n        OVERLAY_LAYER.removeChild(this.gr);\n        this.gr.destroy({\n            children: true,\n            texture: true\n        });\n    }\n}\n","import {Graphics, ITextStyle, Text} from \"pixi.js\";\nimport {GRID_TILE_PX, OVERLAY_DEPTHS, OVERLAY_LAYER} from \"../ui-data/globals\";\n\nconst defaultStyle: Partial<ITextStyle> = {\n    fontFamily: \"Helvetica\",\n    fontSize: 14,\n    fill: \"white\",\n};\n\n/** A small 1x1 tile token, which contains text. */\nexport class UiMarker {\n    private readonly background: number;\n    private readonly alpha: number;\n    private readonly gr = new Graphics();\n    private readonly txt: Text;\n    private readonly border: number;\n    private added = false;\n    private tx = 0;\n    private ty = 0;\n\n    constructor(text: string, textOpts: Partial<ITextStyle> = {}, background = 0x000000, bgAlpha = 0.5, border=3) {\n        this.background = background;\n        this.alpha = bgAlpha;\n        this.txt = new Text(text, {...defaultStyle, ...textOpts});\n        this.border = border;\n        this.gr.zIndex = OVERLAY_DEPTHS.MARKER_BKG;\n        this.txt.zIndex = OVERLAY_DEPTHS.MARKER_TXT;\n        this.txt.resolution = 8;\n    }\n\n    private draw() {\n        this.gr.beginFill(this.background, this.alpha);\n        this.gr.drawRect(0, 0, GRID_TILE_PX, GRID_TILE_PX);\n        this.gr.endFill();\n        this.gr.lineStyle(4, this.background);\n        if (this.border > -1) {\n            this.gr.drawRect(0, 0, GRID_TILE_PX, GRID_TILE_PX);\n        }\n    }\n\n    place (tx: number, ty: number) {\n        if (!this.added) {\n            this.added = true;\n            this.draw();\n            OVERLAY_LAYER.addChild(this.gr, this.txt);\n        }\n        this.tx = tx;\n        this.ty = ty;\n        this.updatePosition();\n        return this;\n    }\n\n    private updatePosition() {\n        const px = this.tx*GRID_TILE_PX, py = this.ty*GRID_TILE_PX;\n        this.gr.position.set(px, py);\n        this.txt.position.set(px + GRID_TILE_PX/2 - this.txt.width/2, py + GRID_TILE_PX/2 - this.txt.height/2);\n    }\n\n    setText(text: string) {\n        this.txt.text = text;\n        this.updatePosition();\n        return this;\n    }\n\n    setVisible(visible: boolean) {\n        this.txt.visible = visible;\n        this.gr.visible = visible;\n        return this;\n    }\n\n    remove() {\n        OVERLAY_LAYER.removeChild(this.gr, this.txt);\n        this.gr.destroy({\n            children: true,\n            texture: true,\n            baseTexture: true\n        });\n        this.txt.destroy({\n            children: true,\n            texture: true,\n            baseTexture: true\n        });\n    }\n}\n","import Handler from \"./handler\";\nimport ProtoWrapper from \"../../data/protobufs/proto-wrapper\";\nimport {broadcast, Client, isHost} from \"../peerconnection\";\nimport GameController from \"../../controllers/game\";\nimport {MeasurePacket} from \"../packets/measure-packets\";\nimport {SHAPE_TYPES, UiShape} from \"../../renderer/ui-components/ui-shape\";\nimport {UiMarker} from \"../../renderer/ui-components/ui-marker\";\nimport {observable} from \"mobx\";\n\ninterface MeasureElements {\n    shape: UiShape;\n    marker: UiMarker;\n}\n\nexport default class MeasureHandler extends Handler {\n    readonly packets: typeof ProtoWrapper[] = [MeasurePacket];\n    private readonly controller: GameController;\n    public static readonly userShapes: Record<string, MeasureElements> = {};\n    @observable public static displayMeasures = true;\n\n    constructor(controller: GameController) {\n        super();\n        this.controller = controller;\n    }\n\n\n    async clientHandler(client: Client, packet: MeasurePacket): Promise<void> {\n        this.handleShape(client.id, packet);\n    }\n\n    async hostHandler(client: Client, packet: MeasurePacket): Promise<void> {\n        this.handleShape(client.id, packet);\n        broadcast(packet, true, client);\n    }\n\n    private handleShape(id: string, pkt: MeasurePacket|null) {\n        const exist = MeasureHandler.userShapes[id];\n        if (exist) {\n            exist.marker.remove();\n            exist.shape.remove();\n            delete MeasureHandler.userShapes[id];\n        }\n        if (pkt && pkt.visible) {\n            MeasureHandler.userShapes[id] = {\n                shape: new UiShape(pkt.type as SHAPE_TYPES)\n                    .color(pkt.color)\n                    .setRotation(pkt.angle)\n                    .size(pkt.tw, pkt.th)\n                    .setPosPx(pkt.px, pkt.py)\n                    .thickness(pkt.thickness)\n                    .setFillColor(pkt.fill, pkt.alpha)\n                    .setVisible(MeasureHandler.displayMeasures),\n                marker: new UiMarker((pkt.tw*5)+'ft').place(pkt.tx, pkt.ty).setVisible(MeasureHandler.displayMeasures)\n            }\n            if (isHost()) {\n                MeasureHandler.userShapes[id].shape.onClick(() => {\n                    MeasureHandler.sendMeasure(MeasureHandler.userShapes[id].shape, false);\n                    this.handleShape(id, null);\n                })\n            }\n        }\n    }\n\n    public static sendMeasure(shape: UiShape, visible: boolean) {\n        const dt = shape.getGraphicDetails();\n        const pkt = new MeasurePacket().assign({\n            type: shape.getType(),\n            px: shape.position.px,\n            py: shape.position.py,\n            tw: shape.dimensions.tw,\n            th: shape.dimensions.th,\n            angle: shape.rotation,\n            color: dt.border,\n            thickness: dt.thickness,\n            fill: dt.fill,\n            alpha: dt.fillAlpha,\n            tx: shape.position.tx,\n            ty: shape.position.ty,\n            visible\n        });\n\n        console.log(visible, pkt);\n        return broadcast(pkt, false);\n    }\n\n    /**\n     * Toggle measure visibility.\n     * @param show\n     */\n    public static showMeasures(show: boolean) {\n        this.displayMeasures = show;\n        for (const m of Object.values(MeasureHandler.userShapes)) {\n            m.shape.setVisible(show);\n            m.marker.setVisible(show);\n        }\n    }\n}\n","import {Sprite, waitForSpriteLoad} from \"../util/sprite-loading\";\nimport Terrain from \"./terrain\";\nimport {observable} from \"mobx\";\nimport * as connection from '../net/peerconnection'\nimport {broadcast, NetworkStatus, getMyID} from \"../net/peerconnection\";\nimport EntityLayer from \"./entities\";\nimport HandShakeCheck from \"../net/prechecks/signature-check\";\nimport BoardSync from \"../net/prechecks/board-sync-check\";\nimport {PreCheck} from \"../net/prechecks/precheck\";\nimport Handler from \"../net/handlers/handler\";\nimport TerrainAddHandler from \"../net/handlers/terrain-add-handler\";\nimport TerrainEraseHandler from \"../net/handlers/terrain-erase-handler\";\nimport EntityUpdateHandler from \"../net/handlers/entity-update-handler\";\nimport Lobby from \"./lobby\";\nimport PingHandler from \"../net/handlers/ping-handler\";\nimport Campaign from \"./campaign\";\nimport * as boardDB from \"../db/board-db\";\nimport {ProtoBoard} from \"../data/protobufs/proto-tiles\";\nimport * as packer from \"../data/board-packer.worker\";\nimport {ProtoEntity} from \"../data/protobufs/proto-entity\";\nimport CampaignLoader from \"../data/campaign-loader\";\nimport BoardReloadHandler from \"../net/handlers/board-reload-handler\";\nimport MediaSyncHandler from \"../net/handlers/media-sync-handler\";\nimport MediaSync from \"../net/prechecks/media-sync\";\nimport {ProtoSprite} from \"../data/protobufs/proto-sprite\";\nimport * as RENDER from '../renderer';\nimport MeasureHandler from \"../net/handlers/measure-handler\";\n\nexport default class GameController {\n    public terrain: Terrain;\n    public entities: EntityLayer;\n    @observable public ready: boolean = false;\n    private readonly preChecks: PreCheck[];\n    private readonly handlers: Handler[];\n    public readonly lobby: Lobby;\n    @observable public campaign: Campaign|null = null;\n\n    constructor() {\n        this.terrain = new Terrain();\n        this.entities = new EntityLayer();\n        this.lobby = new Lobby();\n\n        // Initialize networking stuff:\n        this.preChecks = [\n            new HandShakeCheck(this),\n            new BoardSync(this),\n            new MediaSync(this)\n        ];\n        this.handlers = [\n            new TerrainAddHandler(this.terrain),\n            new TerrainEraseHandler(this.terrain),\n            new EntityUpdateHandler(this.entities),\n            new PingHandler(),\n            new BoardReloadHandler(this),\n            new MediaSyncHandler(this),\n            new MeasureHandler(this)\n        ];\n    }\n\n    /**\n     * Starts the main game client, waiting for the Sprite Loader to become ready.\n     * Also initializes any required keys or other async setup.\n     * Automatically starts the Client/Host connection if a URL Hash has been set already.\n     */\n    public async start() {\n        console.debug('Main game controller started.');\n\n        await waitForSpriteLoad;\n\n        RENDER.toggleViewportInput(true);\n\n        console.log('Local Room ID Key:', await getMyID());\n\n        const hash = window.location.hash.replace('#', '');\n        if (hash) {\n            if ((await getMyID()) === hash) {\n                // This is our URL - hosting.\n                await this.startHost();\n            } else {\n                // At someone else's URL - join them.\n                await this.startClient(hash);\n            }\n        }\n        this.ready = true;\n\n        // Treadmill to block back button:\n        window.history.pushState(null, document.title, window.location.href);\n        window.addEventListener('popstate', () => {\n            window.history.pushState(null, document.title, window.location.href);\n        });\n        window.addEventListener(\"beforeunload\", () => {\n            connection.kill();\n            this.ready = false;\n        })\n    }\n\n    public async startHost(): Promise<void> {\n        connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Hosting lobby at:', await getMyID());\n        window.location.hash = await getMyID();\n\n        this.handlers.forEach(h => h.setHost(true));\n        connection.setHandlers(this.handlers, this.preChecks);\n\n        await connection.openHost();\n    }\n\n    public async startClient(connectID: string) {\n        connection.kill();\n        this.lobby.pendingLogins.forEach(pu => this.lobby.rejectUser(pu));\n\n        console.log('Connecting to host:', connectID);\n        window.location.hash = connectID;\n\n        this.handlers.forEach(h => h.setHost(false));\n        connection.setHandlers(this.handlers, this.preChecks)\n\n        await connection.connectTo(connectID);\n    }\n\n    get isNetworkReady() {\n        return connection.netStatus.get() === NetworkStatus.CONNECTED;\n    }\n\n    /**\n     * Loads the given board, and broadcasts the new board state to all clients.\n     * @param name\n     */\n    public async loadBoard(name: string): Promise<boolean> {\n        if (!this.campaign) return false;\n        await waitForSpriteLoad;\n\n        this.campaign.loadedBoard = name;\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        const board: ProtoBoard|null = await boardDB.load(this.campaign.id, name);\n\n        if (!board) return false;  // Erase existing only if the loaded board actually exists.\n\n        await this.loadFromProtoBoard(board);\n\n        broadcast(await this.buildProtoBoard(false), true).catch(console.error);\n\n        this.terrain.isBoardDirty = false;  // May have triggered a \"redraw\", so reset these flags here.\n        this.entities.isDirty = false;\n\n        return true;\n    }\n\n    public async loadFromProtoBoard(pb: ProtoBoard) {\n        this.terrain.setDirectMap(pb);\n\n        this.entities.getEntityList().forEach(e => this.entities.remove(e.id, false));\n        pb.entities.forEach(ent => {\n            const sprite = new Sprite(ent.sprite.id, ent.sprite.idx);\n            this.entities.addEntity(sprite, {\n                ...ent,\n                sprite\n            }, false)\n        });\n    }\n\n    public async buildProtoBoard(includeHidden: boolean = true) {\n        const tiles = Object.values(this.terrain.getDirectMap()).flat();\n        const pb = new ProtoBoard().assign(await packer.packBoard(tiles));\n\n        pb.entities = this.entities.getEntityList().filter(e=>includeHidden||e.visible).map(e => {\n            const sprite = new ProtoSprite().assign({id: e.sprite.id, idx: e.sprite.idx})\n            return new ProtoEntity().assign({\n                ...e,\n                sprite,\n                owners: Array.from(e.owners)\n            });\n        });\n\n        return pb;\n    }\n\n    public async saveBoard(): Promise<boolean> {\n        if (!this.campaign || !this.campaign.loadedBoard) return false;\n\n        const pb = await this.buildProtoBoard(true);\n        await boardDB.save(this.campaign.id, this.campaign.loadedBoard, pb);\n\n        this.terrain.isBoardDirty = false;\n        this.entities.isDirty = false;\n\n        await CampaignLoader.saveCampaign(this.campaign);\n\n        return true;\n    }\n\n    public async deleteBoard(campaign: Campaign, name: string): Promise<boolean> {\n        const idx = campaign.boards.indexOf(name);\n\n        if (idx < 0) {\n            return false;\n        }\n\n        campaign.boards.splice(idx, 1);\n\n        if (campaign.loadedBoard === name) {\n            campaign.loadedBoard = null;\n        }\n\n        await boardDB.deleteBoard(campaign.id, name);\n        await CampaignLoader.saveCampaign(campaign);\n\n        return true;\n    }\n}\n","import GameController from \"../game/controllers/game\";\n\n/**\n * A wrapper to connect the UI controls to the actual game, typically through middleware.\n * The interfaces generated should be agnostic of the platform, for maximum compatibility.\n */\nexport default abstract class UITool {\n    public readonly abstract name: string;\n    public readonly abstract icon: JSX.Element;\n    protected readonly controller: GameController;\n\n    public constructor(controller: GameController) {\n        this.controller = controller;\n    }\n\n    abstract getControlUI(forMobile: boolean): JSX.Element|null;\n    abstract register(): any;\n    abstract unregister(): any;\n    abstract isOption(forMobile: boolean, isHost: boolean): boolean;\n}\n","\nexport default abstract class Middleware {\n    private hooks: any[] = [];\n    public static isShiftDown = false;\n\n    public eject() {\n        this.hooks.forEach(h => h());\n        setActive(null);\n        this.onCleanup();\n    }\n\n    public attach() {\n        setActive(this);\n        this.register();\n    }\n\n    /** Automatically cleaned up when this middleware is ejected. */\n    protected listener(cb: any): () => void {\n        this.hooks.push(cb);\n        return cb;\n    }\n\n    /** Called once an element is registered. */\n    protected abstract register(): void;\n    /** Called after all hooks have been cleaned up. */\n    protected abstract onCleanup(): void;\n\n    public onShiftPress(): void {};\n    public onShiftRelease(): void {};\n}\n\nwindow.addEventListener('keydown', ke => {\n    if (ke.code?.startsWith('Shift')) {\n        Middleware.isShiftDown = true;\n        if (active) {\n            active.onShiftPress();\n        }\n    }\n});\n\nwindow.addEventListener('keyup', ke => {\n    if (ke.code?.startsWith('Shift')) {\n        Middleware.isShiftDown = false;\n        if (active) {\n            active.onShiftRelease();\n        }\n    }\n});\n\n\nlet active: Middleware|null = null;\n\nexport function setActive(middle: Middleware|null) {\n    active = middle;\n}\n","import Middleware from \"./middleware\";\nimport Terrain from \"../controllers/terrain\";\nimport {observable} from \"mobx\";\nimport {EVENT_STREAM, GridPoint} from \"../renderer/ui-data/ui-event-stream\";\nimport {DEFAULT_PEN_COLOR, setColor, setSize} from \"../renderer/ui-components/ui-tooltip\";\nimport {toggleViewportInput} from \"../renderer\";\n\nenum PEN_STATE {\n    NONE,\n    DRAW,\n    ERASE\n}\n\nexport default class PenMiddleware extends Middleware {\n    private readonly terrain: Terrain;\n    private state: PEN_STATE = PEN_STATE.NONE;\n    private readonly canUsePen: boolean;\n    @observable public penSize: number = 1;\n\n    constructor(terrain: Terrain, canUsePen: boolean=true) {\n        super();\n        this.terrain = terrain;\n        this.canUsePen = canUsePen;\n    }\n\n    register(): void {\n        setSize(this.penSize);\n        toggleViewportInput(false);\n\n        this.listener(EVENT_STREAM.on('mouse-down', ev => {\n            if (Middleware.isShiftDown) return;\n            this.state = this.canUsePen ? PEN_STATE.DRAW : PEN_STATE.ERASE;\n            this.draw(ev);\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-right-down', ev => {\n            if (Middleware.isShiftDown) return;\n            this.state = PEN_STATE.ERASE;\n            this.draw(ev);\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-middle-down', ev => {\n            if (Middleware.isShiftDown) return;\n            const sp = this.terrain.getAt(ev.tx, ev.ty);\n            if (sp.length) {\n                this.terrain.selectedSprite = sp[sp.length-1].sprite;\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-up', () => {\n            this.state = PEN_STATE.NONE;\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-right-up', () => {\n            this.state = PEN_STATE.NONE;\n        }));\n\n        this.listener(EVENT_STREAM.on('hover', ev => {\n            if (Middleware.isShiftDown) return;\n            this.draw(ev);\n        }));\n\n        const wheelCB = (ev: WheelEvent) => {\n            if (!ev.target || !(ev.target as HTMLElement).classList.contains(\"MAIN-GAME-CANVAS\")) return true;\n            if (!ev.shiftKey) {\n                const out = Math.sign(ev.deltaY) * -1;\n                this.setPenSize(Math.max(1, Math.min(8, this.penSize += out)));\n                return true;\n            }\n        };\n        window.addEventListener('wheel', wheelCB);\n        this.listener(() => window.removeEventListener('wheel', wheelCB));\n    }\n\n    setPenSize(size: number) {\n        this.penSize = Math.max(1, Math.min(8, size));\n        setSize(this.penSize);\n    }\n\n    draw(ev: GridPoint): boolean {\n        if (this.state !== PEN_STATE.NONE) {\n            switch (this.state) {\n                case PEN_STATE.ERASE:\n                    this.box(ev.tx, ev.ty, this.terrain.eraseAt.bind(this.terrain));\n                    break;\n                case PEN_STATE.DRAW:\n                    this.box(ev.tx, ev.ty, this.terrain.drawAt.bind(this.terrain));\n            }\n            return true;\n        }\n        return false;\n    }\n\n    private box(x: number, y: number, op: Function) {\n        for (let xx = x - (this.penSize-1); xx < x + this.penSize; xx++) {\n            for (let yy = y - (this.penSize-1); yy < y + this.penSize; yy++) {\n                op(xx, yy);\n            }\n        }\n    }\n\n    protected onCleanup(): void {\n        toggleViewportInput(true);\n    }\n\n    onShiftPress() {\n        toggleViewportInput(true);\n        setColor(0x000000);\n    }\n    onShiftRelease() {\n        toggleViewportInput(false);\n        setColor(DEFAULT_PEN_COLOR)\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport {Button, FormControlLabel, Modal, Switch, TextField, Tooltip} from \"@material-ui/core\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport {searchImages, Sprite} from \"../game/util/sprite-loading\";\nimport {imageHeightPx, imageWidthPx} from '../game/consts';\nimport '../styles/sprite-picker.scss'\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {FixedSizeGrid} from \"react-window\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport {Autocomplete} from \"@material-ui/lab\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport {SpriteInterface} from \"../game/data/interfaces/sprite\";\n\n\nexport default function SpritePicker (\n    props: {\n        onSelect: Function,\n        onSearch?: Function,\n        defaultTerm?: string,\n        selected?: Sprite|null,\n        animated?: boolean,\n        canAnimate?: boolean,\n        forEntity: boolean\n    }) {\n    const [searchTerm, setSearch] = React.useState(props.defaultTerm || '');\n    const [animated, setAnimated] = React.useState(!!props.animated);\n    const [sprites, setSprites] = React.useState<Sprite[]>([]);\n\n    const handleChange = (value: string) => {\n        setSearch(value);\n        if (props.onSearch) {\n            props.onSearch(value);\n        }\n    };\n    const animChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAnimated(event.target.checked);\n    };\n\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            getFavorites(props.forEntity).then(fe => {\n                const results = searchImages(searchTerm, animated, false, fe);\n                setSprites(results);\n            })\n        }, 200)\n        return () => {\n            clearTimeout(timeout);\n        }\n    }, [searchTerm, animated, props.forEntity]);\n\n\n    return <div style={{\n        maxWidth: '600px'\n    }}>\n        <form noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <FormGroup row>\n                <Autocomplete\n                    selectOnFocus={true}\n                    options={[]}\n                    style={{ width: 300 }}\n                    freeSolo={true}\n                    value={searchTerm}\n                    inputValue={searchTerm}\n                    onInputChange={(event, newInputValue) => {\n                        handleChange(newInputValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} label=\"Search Sprites!\" variant=\"outlined\" />}\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={animated}\n                            onChange={animChange}\n                            disabled={!props.canAnimate}\n                            name=\"checkedA\"\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        />\n                    }\n                    label=\"Animated\"\n                    labelPlacement=\"top\"\n                />\n            </FormGroup>\n        </form>\n        <div\n            style={{height: '280px'}}\n        >\n            <SpriteGrid sprites={sprites} onSelect={props.onSelect} selected={props.selected} forEntity={props.forEntity} />\n        </div>\n    </div>;\n}\n\n\nexport function SpriteGrid(props: {sprites: Sprite[], onSelect: Function, selected?: Sprite|null, forEntity: boolean}) {\n    return <AutoSizer className={'autosizer'}>\n        {function size(size: { height: number, width: number }){\n            const wrapperSize = 52;\n            const perRow = Math.floor(size.width/wrapperSize);\n            const rowCount = Math.ceil(props.sprites.length/ perRow);\n\n            return <FixedSizeGrid\n                columnCount={perRow}\n                columnWidth={wrapperSize}\n                height={size.height}\n                width={size.width}\n                rowCount={rowCount}\n                rowHeight={wrapperSize}\n                className={'spriteGrid'}\n                style={{maxHeight: `${size.height}px`}}\n            >\n                {(data: { columnIndex: number, rowIndex: number, style: any }) => {\n                    const spr = props.sprites[data.columnIndex + data.rowIndex * perRow];\n                    if (spr) {\n                        return <div style={data.style}>\n                            <SpriteImage sprite={spr} onSelect={props.onSelect} selected={props.selected?.composite === spr.composite} forEntity={props.forEntity}/>\n                        </div>\n                    } else {\n                        return <div/>\n                    }\n                }}\n            </FixedSizeGrid>\n        }}\n    </AutoSizer>\n}\n\n\nexport function SpriteImage(props: {sprite: Sprite|null, onSelect?: Function, selected?: boolean, forEntity: boolean}) {\n    const canv: any = React.useRef(null);\n    // @ts-ignore\n    const sel = props.onSelect ? () => props.onSelect(props.sprite) : ()=>{};\n    const isGif = props.sprite?.id.startsWith(\"gif:\");\n\n    React.useEffect(() => {\n        const redraw = () => {\n            if (isGif) return;\n            if (canv.current){\n                // @ts-ignore\n                const ctx: CanvasRenderingContext2D = canv.current.getContext('2d');\n                ctx.clearRect(0,0,canv.current.width, canv.current.height);\n                props.sprite?.drawTo(ctx, 0, 0);\n            }\n        };\n        const cancel: any = !isGif && props.sprite?.animated ? setInterval(redraw, 200) : null;\n        redraw();\n\n        return () => {\n            if (cancel !== null) {\n                clearInterval(cancel);\n            }\n        }\n    }, [props.sprite, isGif])\n\n    if (isGif) {\n        return <div style={{position: 'relative'}}>\n            <FavoriteSpriteButton sprite={props.sprite} forEntity={props.forEntity} />\n            <img\n                src={props.sprite?.id.replace(\"gif:\", \"\")}\n                width={imageWidthPx}\n                height={imageHeightPx}\n                style={{minWidth: '48px', minHeight: '48px', maxWidth: '48px', maxHeight: '48px', background: 'gray'}}\n                className={`spriteImage ${props.selected ? 'selected': ''}`}\n                title={props.sprite?.name || 'No Sprite'}\n                alt={props.sprite?.name || 'No Sprite'}\n                onClick={sel}\n            />\n        </div>\n    }\n\n    return <div style={{position: 'relative'}}>\n        <FavoriteSpriteButton sprite={props.sprite} forEntity={props.forEntity} />\n        <canvas\n            ref={canv}\n            width={imageWidthPx}\n            height={imageHeightPx}\n            style={{width: '48px', height: '48px', background: 'gray'}}\n            className={`spriteImage ${props.selected ? 'selected': ''}`}\n            title={props.sprite?.name || 'No Sprite'}\n            onClick={sel}\n        />\n    </div>\n}\n\nexport function FavoriteSpriteButton(props: {sprite: Sprite|null, forEntity: boolean}) {\n    const [isFavorite, setIsFavorite] = useState(false);\n    const [isHovered,setIsHovered] = useState(false);\n    const offset = 2;\n\n    function toggleFavorite() {\n        if (props.sprite) {\n            setFavorite(props.sprite, !isFavorite, props.forEntity).then(() => {\n                setIsFavorite(!isFavorite);\n            });\n        }\n    }\n\n    useEffect(()=>{\n        if (props.sprite) {\n            getIsFavorite(props.sprite, props.forEntity).then(fav => {\n                setIsFavorite(fav);\n            })\n        }\n    }, [props.sprite, props.forEntity]);\n\n    if (!props.sprite) return null;\n\n    return <>\n        <FavoriteIcon\n            style={{\n                position: 'absolute',\n                top: offset,\n                left: offset,\n                color: isFavorite ? \"red\" : \"gray\",\n            }}\n            fontSize={\"small\"}\n        />\n        <Tooltip title={\"Toggle favorite\"}>\n            <FavoriteBorderIcon\n                style={{\n                    position: 'absolute',\n                    top: offset,\n                    left: offset,\n                    color: isHovered ? \"cyan\" : \"white\",\n                    cursor: 'pointer'\n                }}\n                fontSize={\"small\"}\n                onMouseEnter={()=>setIsHovered(true)}\n                onMouseLeave={()=>setIsHovered(false)}\n                onClick={toggleFavorite}\n            />\n        </Tooltip>\n    </>\n}\n\n\ntype cacheTypeKey = 'entities' | 'terrain';\nlet cachedFavorites: Record<cacheTypeKey, SpriteInterface[]> = {} as any;\n\nasync function getFavorites(isForEntity: boolean) {\n    const tag = isForEntity ? 'entities' : 'terrain';\n    if (!cachedFavorites[tag] || !cachedFavorites[tag].length) {\n        const res: typeof cachedFavorites = await metadata.get(Meta.FAVORITE_SPRITES);\n        cachedFavorites = res || {};\n        cachedFavorites[tag] = cachedFavorites[tag] || [];\n    }\n    return cachedFavorites[tag];\n}\n\nasync function getIsFavorite(sprite: Sprite, isForEntity: boolean) {\n    const list = await getFavorites(isForEntity);\n    return !! list.find(o=>o.id === sprite.id && o.idx === sprite.idx);\n}\n\nasync function setFavorite(sprite: Sprite, favorite: boolean, isForEntity: boolean) {\n    const list = await getFavorites(isForEntity);\n\n    if (favorite) {\n         if (!list.find(s=>s.id === sprite.id && s.idx === sprite.idx)) {\n             list.push(sprite);\n         }\n    } else {\n        const idx = list.findIndex(v=>v.id === sprite.id && v.idx === sprite.idx);\n        if (idx>=0) {\n            list.splice(idx, 1);\n        }\n    }\n\n    await metadata.store(Meta.FAVORITE_SPRITES, cachedFavorites);\n\n    return true;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto',\n            maxWidth: '600px',\n            minWidth: '400px',\n            position: 'fixed',\n            left: '50%',\n            top: '50%',\n            transform: `translate(-50%, -50%)`,\n        }\n    }),\n);\n\nexport function SpritePickerModal(props: {open: boolean, onClose: Function, onSelect: Function, currentSprite: Sprite|null}) {\n    const classes = useStyles();\n    const [gifUrl, setGifUrl] = useState(\"\");\n\n    return <Modal\n        open={props.open}\n        aria-labelledby=\"sprite-picker-modal\"\n        aria-describedby=\"pick a sprite to use\"\n        onClose={()=>props.onClose()}\n    >\n        <div className={classes.paper}>\n            <SpritePicker\n                defaultTerm={props.currentSprite?.name || ''}\n                selected={props?.currentSprite || null}\n                animated={props?.currentSprite?.animated || true}\n                onSelect={(sp: Sprite) => {\n                    props.onClose();\n                    props.onSelect(sp);\n                }}\n                canAnimate={true}\n                forEntity={true}\n            />\n\n            <FormGroup style={{marginTop: 20}} row>\n                <Tooltip\n                    title=\"Try to use a reliable image host, like Imgur. This MUST be a direct link on an https site. Ideally, 48x48 resolution.\"\n                >\n                    <Autocomplete\n                        selectOnFocus={true}\n                        options={[]}\n                        style={{ width: 300 }}\n                        freeSolo={true}\n                        value={gifUrl}\n                        inputValue={gifUrl}\n                        onInputChange={(event, newInputValue) => {\n                            setGifUrl(newInputValue.trim());\n                        }}\n                        renderInput={(params) => <TextField {...params} label=\"Use a GIF URL\" variant=\"outlined\" />}\n                    />\n                </Tooltip>\n\n                <Button\n                    variant={\"outlined\"}\n                    onClick={()=>{\n                        props.onClose();\n                        let u = new URL(gifUrl);\n                        if (u.hostname.includes(\"imgur.com\")) {\n                            u = u.hostname.startsWith(\"i.\") ? u : new URL(`https://i.imgur.com${u.pathname}.gif`);\n                        }\n\n                        props.onSelect(new Sprite(\"gif:\"+u, -1));\n                        console.log(\"Selected new Gif: \" + u);\n                    }}\n                    disabled={!gifUrl.trim().startsWith(\"https:\")}\n                >\n                    Use GIF\n                </Button>\n            </FormGroup>\n        </div>\n    </Modal>\n}\n","/** The width of each image/tile, in pixels. */\nexport const imageWidthPx = 48;\n/** The height of each image/tile, in pixels. */\nexport const imageHeightPx = 48;\n\n/** The amount of terrain the board is wide. */\nexport const boardTileWidth = 100;\n/** The amount of terrain the board is tall. */\nexport const boardTileHeight = 100;\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport SpritePicker from \"../ui-components/spritepicker\";\nimport { Sprite } from \"../game/util/sprite-loading\";\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport {observer} from \"mobx-react-lite\";\nimport Terrain from \"../game/controllers/terrain\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIPenTool extends UITool {\n    readonly icon: JSX.Element = <TerrainIcon />;\n    readonly name: string = 'Terrain';\n    readonly middleware: PenMiddleware;\n    private searchTerm: string = 'ground';\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, true);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <PenControlInterface\n            terrain={this.controller.terrain}\n            term={this.searchTerm}\n            setSearch={(term: string) => this.searchTerm = term}\n            pen={this.middleware}\n        />\n    }\n\n    register(): any {\n        console.log('Mounted pen tool.');\n        this.middleware.attach();\n    }\n\n    unregister(): any {\n       this.middleware.eject();\n       console.log('Unmounted pen tool.');\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst PenControlInterface = observer((props: {terrain: Terrain, setSearch: Function, term: string, pen: PenMiddleware}) => {\n    return <div className={'cont'} >\n        <PenSizeSlider pen={props.pen}/>\n        <SpritePicker\n            onSelect={(sp: Sprite) => props.terrain.selectedSprite = sp}\n            onSearch={props.setSearch}\n            defaultTerm={props.term}\n            selected={props.terrain.selectedSprite}\n            canAnimate={false}\n            forEntity={false}\n        />\n    </div>\n});\n\nconst PenSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Pen Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.setPenSize(newValue)}\n        />\n    </div>\n});\n","import Middleware from \"./middleware\";\nimport EntityLayer, {Entity} from \"../controllers/entities\";\nimport {EVENT_STREAM, GridPoint} from \"../renderer/ui-data/ui-event-stream\";\nimport {UiMarker} from \"../renderer/ui-components/ui-marker\";\nimport {toggleViewportInput} from \"../renderer\";\nimport {DEFAULT_PEN_COLOR, setColor, setSize} from \"../renderer/ui-components/ui-tooltip\";\n\n\nexport default class EntityMiddleware extends Middleware {\n    private ent: Entity|null = null;\n    private movePoints: GridPoint[] = [];\n    private moveTrackers: UiMarker[] = [];\n    private entities: EntityLayer;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    register(): void {\n        setSize(1);\n        toggleViewportInput(true);\n\n        this.listener(EVENT_STREAM.on('mouse-down', ev => {\n            const trg = this.entities.getEntityList().find(ent => ent.canMove() && ent.x === ev.tx && ent.y === ev.ty);\n            if (trg) {\n                this.ent = trg;\n                this.entities.selected = trg;\n                toggleViewportInput(false);\n                this.addPoint(ev.tx, ev.ty);\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-up', () => {\n            this.clearMovers();\n            if (this.ent) {\n                this.ent = null;\n                toggleViewportInput(true);\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('hover', ev => {\n            if (this.ent) {\n                this.entities.updateEntity(this.ent.id, {\n                    x: ev.tx,\n                    y: ev.ty\n                });\n                this.addPoint(ev.tx, ev.ty);\n            }\n            if (this.entities.getEntityList().find(ent => ent.canMove() && ent.x === ev.tx && ent.y === ev.ty)) {\n                setColor(0xFF0000);\n            } else {\n                setColor(DEFAULT_PEN_COLOR);\n            }\n        }));\n    }\n\n    private clearMovers() {\n        this.moveTrackers.forEach(mp => mp.remove());\n        this.moveTrackers = [];\n        this.movePoints = [];\n    }\n\n    private addPoint(x: number, y: number) {\n        const last = this.movePoints[this.movePoints.length-1];\n        if (last && last.tx === x && last.ty === y) return;\n\n        const idx = this.movePoints.findIndex(p => p.tx === x && p.ty === y);\n        if (idx >=0) {\n            this.movePoints.splice(idx, this.movePoints.length);\n            this.moveTrackers.splice(idx, this.moveTrackers.length).forEach(t => t.remove());\n        }\n        this.movePoints.push({tx: x, ty: y});\n        this.moveTrackers.push(new UiMarker((this.pathLength()*5)+'ft').place(x, y));\n        this.checkDiag();\n    }\n\n    private checkDiag() {\n        if (this.movePoints.length < 3) return;\n        const last = this.movePoints[this.movePoints.length - 1];\n        const third = this.movePoints[this.movePoints.length - 3];\n        const dist = EntityMiddleware.distance(third, last);\n\n        if (dist < 2) {\n            // Corner we can cut!\n            this.movePoints.splice(this.movePoints.length-2, 1);\n            this.moveTrackers.splice(this.moveTrackers.length-2, 1).forEach(t => t.remove());\n            this.moveTrackers[this.moveTrackers.length-1].setText((this.pathLength()*5) + 'ft');\n        }\n    }\n\n    private static distance(p1: GridPoint, p2: GridPoint) {\n        return Math.sqrt(Math.pow(p1.tx-p2.tx, 2) + Math.pow(p1.ty - p2.ty, 2));\n    }\n\n    private pathLength(): number {\n        let val = 0;\n        this.movePoints.reduce((prev, next) => {\n            let dst = EntityMiddleware.distance(prev, next);\n            if (dst > 1) dst = 1.5;\n            val += dst;\n            return next;\n        })\n\n        return Math.floor(val);\n    }\n\n    protected onCleanup(): void {\n        this.clearMovers();\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport ControlCameraIcon from '@material-ui/icons/ControlCamera';\nimport EntityMiddleware from \"../game/middleware/entity-events\";\nimport GameController from \"../game/controllers/game\";\n\nexport default class UICameraTool extends UITool {\n    readonly icon: JSX.Element = <ControlCameraIcon />;\n    readonly name: string = 'Camera';\n    private readonly middleware: EntityMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new EntityMiddleware(controller.entities);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return null;\n    }\n\n    register(): any {\n        console.log('Mounted camera-entity tool.');\n        this.middleware.attach();\n    }\n\n    unregister(): any {\n        console.log('Unmounted camera-entity tool.');\n        this.middleware.eject();\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return true;\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport PenMiddleware from \"../game/middleware/pen-events\";\nimport GameController from \"../game/controllers/game\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {observer} from \"mobx-react-lite\";\nimport {Slider, Typography} from \"@material-ui/core\";\n\nexport default class UIEraserTool extends UITool {\n    readonly icon: JSX.Element = <ClearIcon />;\n    readonly name: string = 'Eraser';\n    readonly middleware: PenMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new PenMiddleware(controller.terrain, false);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return <EraserSizeSlider pen={this.middleware}/>\n    }\n\n    register(): any {\n        this.middleware.attach();\n        console.log('Mounted eraser tool.')\n    }\n\n    unregister(): any {\n        this.middleware.eject();\n        console.log('Unmounted eraser tool.')\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return forMobile && isHost;\n    }\n}\n\nconst EraserSizeSlider = observer((props: {pen: PenMiddleware}) => {\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom>\n            Eraser Size: {props.pen.penSize}\n        </Typography>\n        <Slider\n            value={props.pen.penSize}\n            getAriaValueText={() => `${props.pen.penSize}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={1}\n            max={8}\n            onChange={ (event: any, newValue: any)=> props.pen.setPenSize(newValue)}\n        />\n    </div>\n});\n","import UITool from \"./ui-tool\";\nimport FaceIcon from '@material-ui/icons/Face';\nimport React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {SpriteImage, SpritePickerModal} from \"../ui-components/spritepicker\";\nimport EntityLayer, {Entity} from \"../game/controllers/entities\";\nimport {\n    Button,\n    Checkbox,\n    Dialog, DialogActions,\n    DialogContent, DialogContentText,\n    DialogTitle,\n    FormControlLabel, Input, InputLabel, ListItemText, MenuItem, Select,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {Sprite} from \"../game/util/sprite-loading\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport GameController from \"../game/controllers/game\";\nimport EntityUpdateHandler from \"../game/net/handlers/entity-update-handler\";\nimport {clients} from '../game/net/peerconnection';\nimport Campaign from \"../game/controllers/campaign\";\nimport {EntityInterface} from \"../game/data/interfaces/entity\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport stripProxy from \"../game/util/deproxy\";\nimport EntityMiddleware from \"../game/middleware/entity-events\";\nimport {getCenterViewportTile} from \"../game/renderer\";\n\n\nexport default class UIEntityTool extends UITool {\n    readonly icon: JSX.Element = <FaceIcon />;\n    readonly name: string = 'Entity';\n    private readonly middleware: EntityMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new EntityMiddleware(controller.entities);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element {\n        return <EntityEditorInterface\n            entities={this.controller.entities}\n            controller={this.controller}\n        />\n    }\n\n    register(): any {\n        console.log('Mounted entity tool.');\n        this.middleware.attach();\n    }\n\n    unregister(): any {\n        console.log('Unmounted entity tool.');\n        this.middleware.eject();\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n}\n\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    })\n);\n\nconst EntityEditorInterface = observer((props: {entities: EntityLayer, controller: GameController}) => {\n    const [promptSprite, setSpritePrompt] = React.useState(false);\n    const [selectedSprite, setSprite] = React.useState<Sprite|null>(null);\n    const [entName, setName] = React.useState('');\n    const [visible, setVisible] = React.useState(true);\n    const [loadExisting, setLoadExisting] = React.useState(false);\n\n    const resetValues = () => {\n        setSpritePrompt(false);\n        setSprite(null);\n        setName('');\n        setVisible(true);\n    }\n\n    if (props.entities.selected) return <EntityEditInterface entities={props.entities} campaign={props.controller.campaign}/>\n\n    return <div className={'cont'}>\n        <h2>Create Entity</h2>\n        <FormGroup row>\n            <TextField\n                id=\"ent-name\"\n                label=\"Name\"\n                variant=\"filled\"\n                value={entName}\n                onChange={(evt) => setName(evt.target.value)}\n            />\n            <div style={{marginLeft: '12px'}} >\n                <SpriteImage\n                    sprite={selectedSprite}\n                    onSelect={() => {setSpritePrompt(true)}}\n                    forEntity={true}\n                />\n            </div>\n        </FormGroup>\n\n        <FormGroup row>\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={visible}\n                        onChange={(evt)=> setVisible(evt.target.checked)}\n                        name=\"visible\"\n                    />\n                }\n                label=\"Visible\"\n            />\n        </FormGroup>\n\n        <FormGroup row style={{justifyContent: 'space-between'}}>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={()=>{createEntity(props.entities, selectedSprite, entName, visible); resetValues();}}\n                disabled={!selectedSprite}\n            >\n                Create\n            </Button>\n            <Button variant=\"contained\" color=\"default\" onClick={()=>setLoadExisting(true)} disabled={!props.controller.campaign?.characters.length}>\n                Load Character\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" onClick={resetValues} >\n                Clear\n            </Button>\n        </FormGroup>\n\n        <SpritePickerModal\n            open={promptSprite}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={setSprite}\n            currentSprite={selectedSprite||null}\n        />\n\n        <CampaignCharacterSelector\n            entities={props.entities}\n            controller={props.controller}\n            campaign={props.controller.campaign}\n            open={loadExisting}\n            onClose={()=>setLoadExisting(false)}\n        />\n    </div>\n});\n\n\nconst EntityEditInterface = observer((props: {entities: EntityLayer, campaign: Campaign|null}) => {\n    const ent = props.entities.selected;\n    if (!ent) return null;\n\n    const [prompt, setSpritePrompt] = React.useState(false);\n    const [promptClone, setClonePrompt] = React.useState(false);\n    const update = React.useMemo(() => {\n        let timeout: any = null;\n        return (info: Partial<Entity>) => {\n            if (timeout !== null) {\n                clearTimeout(timeout);\n            }\n            const ent = props.entities.selected;\n            if (ent) {\n                timeout = setTimeout(() => {\n                    props.entities.updateEntity(ent.id, info);\n                    if (props.campaign) {\n                        updateCampaign(props.campaign, ent);\n                    }\n                }, 200);\n            }\n        }\n    }, [props.entities, props.campaign])\n    const classes = useStyles();\n    const updateInstant = (info: Partial<Entity>) => {\n        props.entities.updateEntity(ent.id, info);\n        if (props.campaign) {\n            updateCampaign(props.campaign, ent);\n        }\n    }\n    const clientNames: string[] = Array.from(clients).filter(c=>c.userData).map(cl =>{\n        // @ts-ignore\n        return cl.userData.username\n    });\n    const userList: string[] = Array.from(new Set([\n        ...clientNames,\n        ...ent.owners\n    ])).sort();\n\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Edit {ent.name}</h2>\n            <FormGroup row>\n                <TextField\n                    id=\"ent-name\"\n                    label=\"Name\"\n                    variant=\"filled\"\n                    value={ent.name}\n                    onChange={(evt) => updateInstant({name: evt.target.value})}\n                />\n                <div style={{marginLeft: '12px'}} >\n                    <SpriteImage\n                        sprite={ent.sprite}\n                        onSelect={() => {setSpritePrompt(true)}}\n                        forEntity={true}\n                    />\n                </div>\n\n            </FormGroup>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <input\n                            type=\"color\"\n                            value={ent.color}\n                            className={classes.spriteColor}\n                            onChange={evt => update({color: evt.target.value})}\n                        />\n                    }\n                    label={<Typography style={{marginTop: '12px'}}>Color</Typography>}\n                />\n            </FormGroup>\n            <FormGroup row>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.visible}\n                            onChange={(evt)=> {\n                                updateInstant({visible: evt.target.checked});\n                                if (!evt.target.checked) {\n                                    EntityUpdateHandler.sendDelete(ent);\n                                }\n                            }}\n                            name=\"visible\"\n                        />\n                    }\n                    label=\"Visible\"\n                />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={ent.saveToCampaign}\n                            onChange={(evt)=> updateInstant({saveToCampaign: evt.target.checked})}\n                            name=\"saveToCampaign\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Campaign-wide\"\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <InputLabel>Owners</InputLabel>\n                <Select\n                    multiple\n                    value={ent.owners}\n                    onChange={(evt)=>updateInstant({owners: evt.target.value as string[]})}\n                    input={<Input />}\n                    renderValue={(selected: any) => selected.join(', ')}\n                    style={{marginBottom: '25px'}}\n                >\n                    {userList.map((id: string) => (\n                        <MenuItem key={id} value={id}>\n                            <Checkbox checked={ent.owners.indexOf(id) > -1} />\n                            <ListItemText primary={id} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormGroup>\n\n            <FormGroup row style={{justifyContent: 'space-between'}}>\n                <Button variant=\"contained\" color=\"default\" onClick={()=>setClonePrompt(true)}>\n                    Duplicate\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>props.entities.remove(ent.id)} >\n                    Delete\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>props.entities.select(null)} >\n                    Close\n                </Button>\n            </FormGroup>\n        </form>\n\n        <SpritePickerModal\n            open={prompt}\n            onClose={()=>setSpritePrompt(false)}\n            onSelect={(sp: Sprite) => {props.entities.setEntitySprite(ent, sp)}}\n            currentSprite={ent.sprite}\n        />\n\n        <PromptForNumber\n            onCancel={()=>{ setClonePrompt(false)}}\n            onSubmit={(num: number) => {\n                setClonePrompt(false);\n                if (num) {\n                    cloneEntity(props.entities, ent, num);\n                }\n            }}\n            open = {promptClone}\n            prompt='How many extra clones would you like?'\n            title='Clone Amount'\n            label='Clones'\n        />\n    </div>\n});\n\n\nconst CampaignCharacterSelector = observer((props: {\n    open: boolean,\n    entities: EntityLayer,\n    controller: GameController,\n    campaign: Campaign|null,\n    onClose: Function\n}) => {\n    if (!props.campaign) return null;\n    const characters = props.campaign.characters;\n    const [selected, setSelected] = React.useState(characters.length > 0 ? characters[0]?.id : '');\n\n    const onSelect = (id: any) => {\n        console.log('Selected character ID:', id);\n        setSelected(id);\n    };\n\n    const getSelected = (id: any) => {\n        return props.campaign?.characters.find(c => c.id === id);\n    }\n\n    return <Dialog open={props.open} onClose={()=>props.onClose()}>\n            <DialogTitle>Select a Campaign Character</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Select a character saved to this campaign:\n                </DialogContentText>\n                <Select\n                    onChange={(evt)=>onSelect(evt.target.value)}\n                    input={<Input />}\n                    renderValue={(selected: any) => {\n                        const sel = getSelected(selected);\n                        if (!sel) return '';\n\n                        return <MenuItem style={{pointerEvents: 'none'}}>\n                            <SpriteImage sprite={new Sprite(sel.sprite.id, sel.sprite.idx)} forEntity={true} />\n                            {sel.name}\n                        </MenuItem>\n                    }}\n                    style={{marginBottom: '25px',  width: '100%'}}\n                    value={selected}\n                >\n                    {props.campaign.characters.map((cha: EntityInterface) => (\n                        <MenuItem key={cha.id} value={cha.id}>\n                            <SpriteImage sprite={new Sprite(cha.sprite.id, cha.sprite.idx)} forEntity={true} />\n                            <ListItemText primary={cha.name} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => {\n                    props.onClose()\n                }} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={() => {\n                    const sel = getSelected(selected);\n                    if (sel) {\n                        const sp = new Sprite(sel.sprite.id, sel.sprite.idx);\n                        createEntity(props.entities, sp, sel.name, true, sel);\n                        props.onClose();\n                    }\n                }} color=\"primary\">\n                    Load\n                </Button>\n            </DialogActions>\n        </Dialog>\n});\n\n\nfunction PromptForNumber(props: {title: string, prompt: string, label?: string, open: boolean, onCancel: Function, onSubmit: Function}) {\n    const [num, setNum] = React.useState(0);\n    const handleClose = () => {\n        props.onSubmit(num);\n    };\n\n    return <Dialog open={props.open} onClose={()=>{props.onCancel()}} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                {props.prompt}\n            </DialogContentText>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                label={props.label || ''}\n                type=\"number\"\n                fullWidth\n                onChange={(event) => setNum(parseInt(event.target.value))}\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={()=>{props.onCancel()}} color=\"primary\">\n                Cancel\n            </Button>\n            <Button onClick={handleClose} color=\"primary\">\n                Submit\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n\n\nfunction cloneEntity(entities: EntityLayer, ent: Entity, num: number) {\n    if (num) {\n        for (let i=0; i<num; i++) {\n            entities.addEntity(ent.sprite, {\n                x: ent.x,\n                y: ent.y,\n                color: ent.color,\n                owners: [...ent.owners],\n                visible: ent.visible,\n                name: `${ent.name} ${i+2}`\n            });\n        }\n        entities.updateEntity(ent.id, {\n            name: `${ent.name} 1`\n        })\n    }\n}\n\n\nfunction createEntity(entities: EntityLayer, sprite: Sprite|null, name: string, visible: boolean, ext?: EntityInterface) {\n    if (!sprite) return;\n\n    const coords = getCenterViewportTile();\n    entities.addEntity(sprite, {\n        ...(ext||{}),\n        sprite,\n        name,\n        visible,\n        x: coords.tx,\n        y: coords.ty\n    })\n}\n\nlet campUpdateTimer: any = null;\n\n/**\n * Updates, adds, or removes the current Entity from the given Campaign's saved characters.\n * Maintains its own timer, to avoid spam-updating the DB.\n * @param campaign\n * @param ent\n */\nfunction updateCampaign(campaign: Campaign, ent: Entity) {\n    clearTimeout(campUpdateTimer);\n    campUpdateTimer = setTimeout(() => {\n        const savedIdx = campaign.characters.findIndex(c => c.id === ent.id);\n\n        if (ent.saveToCampaign) {\n            const newData: EntityInterface = {\n                color: ent.color,\n                id: ent.id,\n                name: ent.name,\n                owners: Array.from(ent.owners),\n                saveToCampaign: true,\n                sprite: {\n                    id: ent.sprite.id,\n                    idx: ent.sprite.idx\n                }\n            }\n            campaign.characters.splice(savedIdx >= 0 ? savedIdx : campaign.characters.length, 1, stripProxy(newData));\n            CampaignLoader.saveCampaign(campaign).then(() => console.debug('Updated campaign.'));\n        } else if (savedIdx >= 0) {\n            campaign.characters.splice(savedIdx, 1);\n            CampaignLoader.saveCampaign(campaign).then(() => console.debug('Removed entity from campaign.'));\n        }\n    }, 500);\n}\n","import {observer} from \"mobx-react-lite\";\nimport React from \"react\";\nimport UITool from \"./ui-tool\";\nimport GroupIcon from '@material-ui/icons/Group';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport Lobby, {PendingUser} from \"../game/controllers/lobby\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {MenuItem, MenuList, Tooltip} from \"@material-ui/core\";\nimport { IconButton } from '@material-ui/core';\nimport * as network from '../game/net/peerconnection'\nimport {updateUser, UserData} from \"../game/db/user-db\";\n\nexport default class UILobbyTool extends UITool {\n    readonly icon: JSX.Element = <GroupIcon />;\n    readonly name: string = 'Lobby';\n\n    getControlUI(forMobile: boolean): JSX.Element | null {\n        return <LobbyInterface lobby={this.controller.lobby}/>;\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return isHost;\n    }\n\n    register(): any {}\n\n    unregister(): any {}\n}\n\nconst useStyles = makeStyles(() => createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        spriteColor: {\n            marginLeft: '12px',\n            marginTop: '10px',\n            marginRight: '5px'\n        }\n    }));\n\n\nconst LobbyInterface = observer((props: {lobby: Lobby}) => {\n    const classes = useStyles();\n\n    return <div className={'cont'}>\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={e => e.preventDefault()}>\n            <h2>Lobby</h2>\n            <a href={window.location.href} target='_blank' rel=\"noopener noreferrer\">Invite Link</a>\n            <PendingList lobby={props.lobby} />\n            <UserList />\n        </form>\n    </div>\n});\n\nconst PendingList = observer((props: {lobby: Lobby}) => {\n    const eles = props.lobby.pendingLogins.map(pl => {\n        return <PendingUserEle key={pl.keyCode} user={pl} lobby={props.lobby}/>\n    });\n\n    if(!eles.length) return null;\n\n    return <div>\n        <div style={{border: '1px solid black'}}>\n            <h4 style={{marginBottom: '5px'}}>Pending:</h4>\n            <MenuList>\n                {eles}\n            </MenuList>\n        </div>\n    </div>\n});\n\nconst PendingUserEle = (props: {user: PendingUser, lobby: Lobby}) => {\n    const approve = (ev: any) => {\n        props.lobby.approveUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n    const reject = (ev: any) => {\n        props.lobby.rejectUser(props.user)\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    return <MenuItem style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n        <Tooltip title={'Device: ' + props.user.keyCode}><div>{props.user.username}</div></Tooltip>\n        <Tooltip title=\"Approve\"><IconButton children={<ThumbUpIcon/>} color=\"primary\" onClick={approve}/></Tooltip>\n        <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n    </MenuItem>\n}\n\n\nconst UserList =  observer((props: {}) => {\n    const eles = Array.from(network.clients).filter(c=>c.userData).map(c => {\n        // @ts-ignore\n        const dat: UserData = c.userData;\n        const reject = (ev: any) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            updateUser({\n                ...dat,\n                keyCodes: []\n            }).then(() => {\n                c.close()\n            })\n        }\n\n        return <MenuItem key={dat.id} style={{justifyContent: 'space-between'}} disableTouchRipple={true}>\n            {dat.username}\n            <Tooltip title=\"Kick\"><IconButton children={<CancelIcon />} color=\"secondary\" onClick={reject}/></Tooltip>\n        </MenuItem>\n    });\n\n    if (!eles.length) return <div>\n        <h5>No users online</h5>\n    </div>;\n\n    return <div>\n        <h4 style={{marginBottom: '1px'}}>Online:</h4>\n        <MenuList>\n            {eles}\n        </MenuList>\n    </div>\n});\n","import Middleware from \"./middleware\";\nimport {EVENT_STREAM} from \"../renderer/ui-data/ui-event-stream\";\nimport {UiMarker} from \"../renderer/ui-components/ui-marker\";\nimport {toggleViewportInput} from \"../renderer\";\nimport {DEFAULT_PEN_COLOR, setColor, setSize, setVisible} from \"../renderer/ui-components/ui-tooltip\";\nimport {SHAPE_TYPES, UiShape} from \"../renderer/ui-components/ui-shape\";\nimport {observable} from \"mobx\";\nimport {GRID_TILE_PX} from \"../renderer/ui-data/globals\";\nimport EntityLayer from \"../controllers/entities\";\nimport MeasureHandler from \"../net/handlers/measure-handler\";\n\n\nexport default class MeasureMiddleware extends Middleware {\n    public measure: UiShape|null = null;\n    private counter: UiMarker|null = null;\n    private dot: UiShape|null = null;\n    private moving = false;\n    private px = 0;\n    private py = 0;\n    @observable public shapeType: SHAPE_TYPES = SHAPE_TYPES.cone;\n    @observable public size: number = 0;\n    private entities: EntityLayer;\n    @observable public sentUpdate = false;\n\n    constructor(entities: EntityLayer) {\n        super();\n        this.entities = entities;\n    }\n\n    register(): void {\n        setSize(1);\n        toggleViewportInput(false);\n        this.setShape(this.shapeType);\n        this.listener(EVENT_STREAM.on('mouse-up', () => {\n            this.moving = false;\n            if (!this.size) {\n                if (this.measure && this.sentUpdate) {\n                    MeasureHandler.sendMeasure(this.measure, false);\n                    this.sentUpdate = false;\n                }\n                this.counter?.remove();\n                this.measure?.remove();\n                this.counter = null;\n                this.measure = null;\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('mouse-down', ev => {\n            if (Middleware.isShiftDown) return;\n            if (this.measure && this.sentUpdate) {\n                MeasureHandler.sendMeasure(this.measure, false);\n                this.sentUpdate = false;\n            }\n            this.size = 0;\n            this.measure?.remove();\n            this.counter?.remove();\n            this.measure = new UiShape(this.shapeType).setPos(ev.tx, ev.ty).size(this.size).thickness(3).setFillColor(0x000000, 0.5);\n            this.counter = new UiMarker('0ft').place(ev.tx, ev.ty);\n            this.px = ev.tx*GRID_TILE_PX+GRID_TILE_PX/2;\n            this.py = ev.ty*GRID_TILE_PX+GRID_TILE_PX/2;\n            this.moving = true;\n\n            const ent = this.entities.getEntityList().find(e => e.canMove() && e.x === ev.tx && ev.ty === e.y);\n            if (ent) {\n                this.measure.color(parseInt(ent.color.replace('#', '0x')));\n            }\n        }));\n\n        this.listener(EVENT_STREAM.on('pointer-coords', ev => {\n            if (!this.moving || Middleware.isShiftDown) return;\n            const pxd = Math.sqrt(Math.pow(ev.px-this.px, 2) + Math.pow(ev.py - this.py, 2));\n            let td = Math.floor(pxd/GRID_TILE_PX);\n            if (this.shapeType === SHAPE_TYPES.rectangle) td *= 2;\n            this.size = td;\n            this.measure?.size(td);\n            this.counter?.setText(td*5+'ft');\n            if (this.shapeType === SHAPE_TYPES.cone) this.measure?.pointTowards(ev.px, ev.py);\n        }));\n\n        this.listener(EVENT_STREAM.on('hover', (e) => {\n            if (!this.moving && this.dot) this.dot?.setPos(e.tx, e.ty);\n        }));\n    }\n\n    setShape(type: SHAPE_TYPES) {\n        this.shapeType = type;\n        setVisible(this.shapeType === SHAPE_TYPES.cone);\n        if (this.shapeType !== SHAPE_TYPES.cone) {\n            this.dot = new UiShape(SHAPE_TYPES.circle).sizePx(5).color(DEFAULT_PEN_COLOR).setFillColor(DEFAULT_PEN_COLOR, 1);\n        } else {\n            this.dot?.remove();\n            this.dot = null;\n        }\n    }\n\n    protected onCleanup(): void {\n        if (this.measure && this.sentUpdate) {\n            MeasureHandler.sendMeasure(this.measure, false);\n        }\n        this.counter?.remove();\n        this.measure?.remove();\n        this.dot?.remove();\n        this.counter = null;\n        this.measure = null;\n        this.dot = null;\n    }\n\n    onShiftPress() {\n        toggleViewportInput(true);\n        setColor(0x000000);\n        this.dot?.color(0x000000);\n        this.dot?.setFillColor(0x000000, 1);\n    }\n    onShiftRelease() {\n        toggleViewportInput(false);\n        setColor(DEFAULT_PEN_COLOR);\n        this.dot?.color(DEFAULT_PEN_COLOR);\n        this.dot?.setFillColor(DEFAULT_PEN_COLOR, 1);\n    }\n}\n","import React from \"react\";\nimport UITool from \"./ui-tool\";\nimport ExploreIcon from '@material-ui/icons/Explore';\nimport GameController from \"../game/controllers/game\";\nimport MeasureMiddleware from \"../game/middleware/measure-events\";\nimport {observer} from \"mobx-react-lite\";\nimport {Button, FormControlLabel, Radio} from \"@material-ui/core\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport {SHAPE_TYPES} from \"../game/renderer/ui-components/ui-shape\";\nimport MeasureHandler from \"../game/net/handlers/measure-handler\";\n\nexport default class UIMeasuretool extends UITool {\n    readonly icon: JSX.Element = <ExploreIcon />;\n    readonly name: string = 'Measure';\n    private readonly middleware: MeasureMiddleware;\n\n    constructor(controller: GameController) {\n        super(controller);\n        this.middleware = new MeasureMiddleware(controller.entities);\n    }\n\n    getControlUI(forMobile: boolean): JSX.Element|null {\n        return <MeasureUI measure={this.middleware} />\n    }\n\n    register(): any {\n        console.log('Mounted measure tool.');\n        this.middleware.attach();\n    }\n\n    unregister(): any {\n        console.log('Unmounted measure tool.');\n        this.middleware.eject();\n    }\n\n    isOption(forMobile: boolean, isHost: boolean): boolean {\n        return true;\n    }\n}\n\nconst MeasureUI = observer((props: {measure: MeasureMiddleware}) => {\n    const handleChange = (event: any) => {\n        props.measure.setShape(event.target.value);\n    };\n\n    const shapes = Object.values(SHAPE_TYPES);\n    const opts = shapes.map(type => {\n        return <FormControlLabel value={type} control={<Radio />} label={type} key={`opt-${type}`}/>\n    })\n\n    return <div>\n        <h2>Measure {props.measure.size ? `(${props.measure.size*5}ft)` : ''}</h2>\n        <RadioGroup aria-label=\"shapes\" name=\"shape-select\" value={props.measure.shapeType} onChange={handleChange}>\n            {opts}\n        </RadioGroup>\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={()=>{\n                if (props.measure.measure) {\n                    MeasureHandler.sendMeasure(props.measure.measure, true);\n                    props.measure.sentUpdate = true;\n                }\n            }}\n            disabled={!props.measure.size || props.measure.sentUpdate}\n        >\n            Send Measurement\n        </Button>\n    </div>\n});\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport UIPenTool from \"../ui-tools/ui-pen-tool\";\nimport GameController from \"../game/controllers/game\";\nimport UITool from \"../ui-tools/ui-tool\";\nimport {Avatar, Modal} from \"@material-ui/core\";\nimport UICameraTool from \"../ui-tools/ui-camera-tool\";\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport UIEraserTool from \"../ui-tools/ui-eraser-tool\";\nimport {observer} from \"mobx-react-lite\";\nimport * as connection from \"../game/net/peerconnection\";\nimport {NetworkMode} from \"../game/net/peerconnection\";\nimport UIEntityTool from \"../ui-tools/ui-entity-tool\";\nimport UILobbyTool from \"../ui-tools/ui-lobby-tool\";\nimport hotkeys from 'hotkeys-js';\nimport UIMeasuretool from \"../ui-tools/ui-measure-tool\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            height: 380,\n            transform: 'translateZ(0px)',\n            flexGrow: 1,\n        },\n        speedDial: {\n            position: 'fixed',\n            bottom: 10,\n            right: 10,\n        },\n        paper: {\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            pointerEvents: 'auto'\n        }\n    }),\n);\n\n\nconst ControlMenu = observer((props: {controller: GameController, forMobile: boolean}) => {\n    const isHost = connection.netMode.get() === NetworkMode.HOST;\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [modalOpen, setModalOpen] = React.useState(false);\n    const [tools, setTools] = React.useState<UITool[]>([]);\n    const [selectedTool, setSelected] = React.useState<UITool|null>(null);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleModalClose = () => {\n        setModalOpen(false);\n    };\n\n    const handleModalOpen = () => {\n        setModalOpen(true);\n    }\n\n    const handleSelect = (action: UITool) => {\n        handleClose();\n        if (action === selectedTool) {\n            return;\n        }\n        if (selectedTool) {\n            selectedTool.unregister();\n        }\n        setSelected(action);\n        action.register();\n        setModalOpen(true);\n    }\n\n    React.useEffect(() => {\n        // When the back button is used, close the modal.\n        window.addEventListener('popstate', handleModalClose);\n\n        hotkeys('1,2,3,4,5,6,7,8,9', (event, handler) => {\n            const key = parseInt(handler.key);\n            const tool = tools.filter(t=>t.isOption(props.forMobile, isHost))[key-1];\n            console.log('Hotkey:', key, tool);\n            if (tool && tool !== selectedTool) {\n                handleSelect(tool);\n            }\n        });\n\n        return () => {\n            window.removeEventListener('popstate', handleModalClose);\n            hotkeys.unbind('1,2,3,4,5,6,7,8,9');\n        }\n    });\n\n    React.useEffect(() => {\n        const newTools = [\n            new UICameraTool(props.controller),\n            new UIPenTool(props.controller),\n            new UIEraserTool(props.controller),\n            new UIEntityTool(props.controller),\n            new UILobbyTool(props.controller),\n            new UIMeasuretool(props.controller)\n        ];\n\n        setTools(newTools);\n        setSelected(newTools[0]);\n        newTools[0].register();\n    }, [props.controller]);\n\n    let ui;\n    const emb = selectedTool?.getControlUI(true);\n    if (emb) {\n        if (props.forMobile) {\n            ui = <div>\n                <Avatar\n                    className={'useMouse'}\n                    onClick={handleModalOpen}\n                    style={{\n                        position: 'fixed',\n                        bottom: '10px',\n                        left: '10px',\n                        transform: `translateY(-50%)`,\n                        background: '#3eec10',\n                        cursor: 'pointer'\n                    }}\n                >\n                    <MoreHorizIcon/>\n                </Avatar>\n                <Modal open={modalOpen} onClose={handleModalClose}>\n                    <div className={classes.paper}>\n                        {emb}\n                    </div>\n                </Modal>\n            </div>\n        } else {\n            ui = <div\n                style={{position: \"fixed\", left: '10px', top: '50%', minWidth: '400px', transform: `translateY(-50%)`}}\n                className={classes.paper}\n            >\n                {selectedTool?.getControlUI(false)}\n            </div>\n        }\n    }\n\n    return <div>\n        {ui}\n        <SpeedDial\n            ariaLabel=\"Control SpeedDial\"\n            className={classes.speedDial}\n            hidden={false}\n            icon={selectedTool?.icon || <SpeedDialIcon />}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            open={!props.forMobile || open}\n        >\n            {tools.filter(t=>t.isOption(props.forMobile, isHost)).map((action, idx) => (\n                <SpeedDialAction\n                    key={action.name}\n                    icon={action.icon}\n                    tooltipTitle={action.name}\n                    tooltipOpen\n                    onClick={(ev) => {ev.stopPropagation(); handleSelect(action)}}\n                    title={action.name + ` (Hotkey: ${idx+1})`}\n                />\n            ))}\n        </SpeedDial>\n    </div>\n});\n\nexport default ControlMenu;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport {InputDialog} from \"./prompts\";\n\n/**\n * Helper UI to prompt the user for their connection action, if no Room ID hashcode is set.\n * @param props\n * @constructor\n */\nexport default function LoginHelper (props: {controller: GameController}) {\n    const [promptLogin, setPrompt] = React.useState(true);\n    const [needClient, setNeedClient] = React.useState(false);\n\n    const setHosting = (hosting: boolean) => {\n        setPrompt(false);\n        if (hosting) {\n            return props.controller.startHost();\n        } else {\n           setNeedClient(true);\n        }\n    };\n\n    return <div>\n        { promptLogin ? <PromptNetwork select={setHosting}/> : null }\n        <InputDialog\n            open={needClient}\n            title={'Enter host ID'}\n            body={'Enter the ID of the host lobby you\\'d like to join'}\n            tooltip={'Host ID'}\n            onCancel={() => {setNeedClient(false); setPrompt(true)}}\n            onSubmit={(txt: string) => props.controller.startClient(txt)}\n        />\n    </div>\n}\n\n\nfunction PromptNetwork (props: {select: Function}) {\n\n    return <Dialog open={true} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Network Mode</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Would you like to join a campaign, or host your own campaign?\n            </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={() => {props.select(true)}}>\n                Host\n            </Button>\n            <Button onClick={() => { props.select(false)}}>\n                Join\n            </Button>\n        </DialogActions>\n    </Dialog>\n}\n","import * as connection from \"../game/net/peerconnection\";\nimport {isHost, NetworkMode, NetworkStatus} from \"../game/net/peerconnection\";\nimport LoginHelper from \"./loginHelper\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\n\n/**\n * Util to display network status to the user.\n * @param props\n * @constructor\n */\nexport default function ConnectionOverlay(props: {controller: GameController}) {\n    let content = null;\n    let message = null;\n\n    if (connection.netMode.get() === NetworkMode.UNKNOWN) {\n        content = <LoginHelper controller={props.controller} />\n\n    } else {\n        switch (connection.netStatus.get()) {\n            case NetworkStatus.DISCONNECTED:\n                if (!isHost()) message = `Error connecting to service. Cannot reconnect.`; // client only, host can stay on editing.\n                break;\n            case NetworkStatus.RECONNECTING:\n                message = 'Error with connection to Host. Attempting reconnection...';\n                break;\n            case NetworkStatus.CONNECTING:\n                message = 'Connecting to Host...';\n                break;\n            case NetworkStatus.MATCHMAKING_FAIL:\n                message = 'Connection to matchmaking server failed. Please reload.';\n                break;\n            case NetworkStatus.WAITING_FOR_HOST:\n                message = 'Waiting for the Host to approve our login...';\n                break;\n            default:\n                message = null;\n        }\n    }\n\n    if (message) {\n        content =  <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h4\" component=\"h4\" gutterBottom>\n                {message}\n            </Typography>\n        </Backdrop>;\n    }\n    return content;\n}\n","import {observable} from \"mobx\";\nimport {db} from '../db/database';\n\nclass GoogleApi {\n    private injected = false;\n    private apiReady: any = null;\n    private apiFailed: any = null;\n    public readonly waitForLoad = new Promise((res, fail) => {\n        this.apiReady = res;\n        this.apiFailed = fail;\n    });\n    @observable public isSignedIn: boolean = false;\n\n    /**\n     * Injects a script object into the base page node, which loads and initiates the Google API.\n     * This is automatically called initially before export, in order for this client to work.\n     */\n    public inject() {\n        if (this.injected) return;\n        this.injected = true;\n        const script = document.createElement(\"script\");\n        script.src = \"https://apis.google.com/js/client.js\";\n\n        script.onload = () => {\n            gapi.load('client:auth2', () => {\n                gapi.client.init({\n                    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n                    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n                    scope: 'https://www.googleapis.com/auth/drive.appdata',\n                }).then(() => {\n                    // Listen for sign-in state changes.\n                    gapi.auth2.getAuthInstance().isSignedIn.listen(res => this.isSignedIn = res);\n                    this.isSignedIn = gapi.auth2.getAuthInstance().isSignedIn.get();\n                    this.apiReady();\n                }, (error) => {\n                    console.error(error);\n                    this.apiFailed(error);\n                });\n            });\n        };\n        document.body.appendChild(script);\n    }\n\n    /**\n     * Fire a callback when the sign-in status changes.\n     * Always fires an initial value, so that it cannot be missed if no update occurs.\n     * @param callback\n     */\n    public onSignInChange(callback: Function) {\n        this.waitForLoad.then(() => {\n            callback(gapi.auth2.getAuthInstance().isSignedIn.get());\n            gapi.auth2.getAuthInstance().isSignedIn.listen(res => callback(res));\n        })\n    }\n\n    /**\n     * Prompts the user to sign in, using a popup Google homepage.\n     */\n    public async promptSignIn() {\n        await this.waitForLoad;\n        localStorage['lastDriveUpdate'] = 0;\n        if (!this.isSignedIn) {\n            return gapi.auth2.getAuthInstance().signIn().then(res => {\n                console.log('Login res:', res);\n                console.log(this.isSignedIn, gapi.auth2.getAuthInstance().isSignedIn.get())\n            })\n        }\n    }\n\n    /**\n     * Disconnects the current user from the API.\n     */\n    public async signOut() {\n        return gapi.auth2.getAuthInstance().signOut();\n    }\n\n    /**\n     * Uploads the given Blob to the connected Google Drive, if one is available.\n     *\n     * Either creates a new file if one does not exist already, or replaces the old one.\n     * @param data\n     * @param mimeType\n     */\n    private async upload(data: Blob, mimeType: string = 'application/json') {\n        if (!this.isSignedIn) throw Error('Attempted to upload when not signed in!');\n        const user = gapi.auth2.getAuthInstance().currentUser.get();\n        const oauthToken = user.getAuthResponse().access_token;\n        const latest = await this.getLatestBackup();\n        const latestID = latest?.id || '';\n        const body: any = { parents: ['appDataFolder'], name: \"terra-db-backup.json\", mimeType };\n\n        if(latest) delete body.parents;  // In a PATCH, this field cannot be updated.\n\n        return fetch(`https://www.googleapis.com/upload/drive/v3/files/${latestID}?uploadType=resumable`, {\n            method: latest ? 'PATCH' : 'POST',\n            headers: {\n                Authorization: `Bearer ${oauthToken}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n        }).then(resp => {\n            const loc = resp.headers.get('location');\n            if (!loc) throw Error('No upload redirect location was given.');\n            return fetch(loc, {\n                method: latest ? 'PATCH':'PUT',\n                body: data\n            })\n        })\n    }\n\n    /**\n     * Get a list of all files uploaded to the application's data folder.\n     */\n    private async listFiles() {\n        await this.waitForLoad;\n        if (!this.isSignedIn) throw Error('Cannot get files when not signed in!');\n\n        return gapi.client.drive.files.list({\n            pageSize: 10,\n            fields: \"nextPageToken, files(id, name, modifiedTime)\",\n            spaces: 'appDataFolder'\n        }).then(function(response) {\n            return response.result.files;\n        });\n    }\n\n    /**\n     * Get the most recent file uploaded to the application's data folder.\n     */\n    private async getLatestBackup(): Promise<gapi.client.drive.File|null> {\n        const files = (await this.listFiles()) || [];\n\n        return files.sort((a, b) => {\n            return new Date(b.modifiedTime || 0).getTime() - new Date(a.modifiedTime || 0).getTime();\n        })[0] || null;\n    }\n\n    /**\n     * Download the given file as a blob. If no file is provided, defaults to the latest version.\n     * @param latest\n     * @private\n     */\n    private async downloadLatestBackup(latest: gapi.client.drive.File|null = null) {\n        latest = latest || await this.getLatestBackup();\n        const user = gapi.auth2.getAuthInstance().currentUser.get();\n        const oauthToken = user.getAuthResponse().access_token;\n\n        if (!latest?.id) {\n            throw Error('Cannot locate latest file for downloading.')\n        } else {\n            return fetch(`https://www.googleapis.com/drive/v3/files/${latest.id}?alt=media`, {\n                headers: {\n                    Authorization: `Bearer ${oauthToken}`\n                }\n            }).then(res => {\n                return res.blob()\n            })\n        }\n    }\n\n    /**\n     * Returns the latest File from GDrive, if an updated version is available. Otherwise, returns null.\n     */\n    public async getLatestUpgrade() {\n        const latest = await this.getLatestBackup();\n        const lastUpdate = localStorage['lastDriveUpdate'] || -1;\n        const driveUpdateTime = new Date(latest?.modifiedTime || 0).getTime();\n\n        return (latest && (driveUpdateTime > lastUpdate)) ? latest : null;\n    }\n\n    /**\n     * Restores the local DB from the given backup stored on GDrive.\n     */\n    public async downloadDB(latest: gapi.client.drive.File) {\n        const driveUpdateTime = new Date(latest?.modifiedTime || 0).getTime();\n\n        return this.downloadLatestBackup(latest).then(async res => {\n            await db.importData(res, () => {\n                localStorage['lastDriveUpdate'] = driveUpdateTime;\n            })\n        });\n    }\n\n    /**\n     * Uploads the local database contents to Google Drive.\n     */\n    public async uploadLocalDB() {\n        // @ts-ignore\n        const blob = await db.toBlob();\n\n        return this.upload(blob, 'application/json').then(async res => {\n            const txt = await res.text();\n            console.debug('Upload result:', txt);\n            localStorage['lastDriveUpdate'] = Date.now();\n            return JSON.parse(txt);\n        }).catch(err => {\n            console.error('Upload error:');\n            console.error(err);\n            return null;\n        });\n    }\n}\n\nconst api = new GoogleApi();\napi.inject();\n\n\n// @ts-ignore\nwindow.google = api;\n\nexport default api;\n","import React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport CampaignLoader from \"../game/data/campaign-loader\";\nimport {observer} from \"mobx-react-lite\";\nimport Campaign from \"../game/controllers/campaign\";\nimport PublicIcon from '@material-ui/icons/Public';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport BackupIcon from '@material-ui/icons/Backup';\nimport CloudOffIcon from '@material-ui/icons/CloudOff';\nimport {Button, Dialog, DialogContent, DialogTitle, Fab, InputLabel, Menu, MenuItem, Tooltip} from \"@material-ui/core\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport {InputDialog} from \"./prompts\";\nimport {db} from \"../game/db/database\";\nimport * as download from 'downloadjs';\nimport google from '../game/util/google-api';\n\n\nexport const CampaignSelector = observer((props: {controller: GameController}) => {\n    const [need, setNeed] = React.useState(true);\n    const [wantOpen, setWantOpen] = React.useState(false);\n    const [promptNew, setPromptNew] = React.useState(false);\n    const [campaignList, setList] = React.useState<Campaign[]>([]);\n    const [storage, setStorage] = React.useState({q: 1, u: 0});\n\n    const selectCampaign = React.useMemo(() => {\n        return (camp: Campaign) => {\n            setNeed(false);\n            props.controller.campaign = camp;\n            metadata.store(Meta.CAMPAIGN_CURRENT, camp.id).then();\n            if (props.controller.campaign.loadedBoard) {\n                props.controller.loadBoard(props.controller.campaign.loadedBoard).then();\n            }\n        }\n    }, [props.controller]);\n\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.CAMPAIGN_CURRENT).then(async (id: number) => {\n            if (id === null) return;\n            console.debug('Current campaign:', id);\n            const camp = await CampaignLoader.loadCampaign(id);\n            if (!camp) return;\n            selectCampaign(camp);\n        });\n\n        // Load all available campaigns:\n        CampaignLoader.getAvailable().then(campaigns => setList(campaigns));\n\n        // Lookup used storage:\n        navigator.storage?.estimate().then(function(estimate) {\n            const u = estimate.usage;\n            const q = estimate.quota\n            if (u !== undefined && q !== undefined) setStorage({ q, u});\n        });\n    }, [selectCampaign]);\n\n    const addCampaign = async (name: string) => {\n        setPromptNew(false);\n        if (name.trim().length) {\n            const c = await CampaignLoader.createCampaign(name);\n            setList([...campaignList, c]);\n        }\n    }\n\n    const handleModalClose = () => {\n        if (!need) {\n            setWantOpen(false);\n        }\n    }\n\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    return <div className={'menu_button'}>\n        <Tooltip\n            title=\"Campaign Settings\"\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <Fab\n                color=\"default\"\n                onClick={()=>{setWantOpen(true)}}\n            >\n                <PublicIcon style={{color: '#4d8a20'}}/>\n            </Fab>\n        </Tooltip>\n\n        <Dialog open={need || wantOpen} onClose={handleModalClose}>\n            <DialogTitle style={{textAlign: \"center\"}}>Campaign Info</DialogTitle>\n            <DialogContent style={{textAlign: \"center\"}}>\n                <CampaignMenu campaigns={campaignList} onSelect={selectCampaign} selected={props.controller.campaign}/>\n                <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    onClick={()=>setPromptNew(true)}\n                    startIcon={<AddCircleOutlineIcon />}\n                >\n                    Create New Campaign\n                </Button>\n                <p style={{color: 'gray'}}>\n                    {\n                        storage ?\n                            `${(storage.u/storage.q * 100).toFixed(2)}% used of ${formatBytes(storage.q)}`\n                            : 'Storage metrics unknown'\n                    }\n                </p>\n                <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={exportLocalDB}\n                    startIcon={<SaveAltIcon />}\n                >\n                   Save Backup\n                </Button>\n                <input\n                    id=\"backup-input\"\n                    type=\"file\"\n                    style={{display: \"none\"}}\n                    onChange={restoreLocalDB}\n                    accept={'application/json'}\n                />\n                <Button\n                    variant=\"outlined\"\n                    color=\"default\"\n                    onClick={() => document.getElementById('backup-input')?.click()}\n                    startIcon={<RestoreIcon />}\n                    style={{marginLeft: '2px'}}\n                >\n                    Restore\n                </Button>\n                <DialogTitle>Google Drive:</DialogTitle>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => google.promptSignIn()}\n                    startIcon={<BackupIcon />}\n                    style={{display: google.isSignedIn ? 'none':''}}\n                >\n                    Sign In\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => google.signOut()}\n                    startIcon={<CloudOffIcon />}\n                    style={{display: google.isSignedIn ? '':'none'}}\n                >\n                    Sign Out\n                </Button>\n            </DialogContent>\n        </Dialog>\n        <InputDialog\n            open={promptNew}\n\t\t\ttitle='New Campaign'\n\t\t\tbody='Enter a name for the new Campaign:'\n\t\t\tacceptText={'Create'}\n\t\t\ttooltip={'Campaign Name'}\n\t\t\tonSubmit={addCampaign}\n\t\t\tonCancel={()=>setPromptNew(false)}\n\t\t/>\n    </div>\n})\n\n\nexport function CampaignMenu(props: {campaigns: Campaign[], onSelect: Function, selected: Campaign|null}) {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [selected, setSelected] = React.useState<Campaign|null>(props.selected);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (campaign: Campaign|null) => {\n        if (campaign) {\n            setSelected(campaign);\n            props.onSelect(campaign);\n        }\n        setAnchorEl(null);\n    };\n\n    const camps = props.campaigns.sort((c1, c2)=>c1.timeCreated-c2.timeCreated).map(c => {\n        return <MenuItem key={c.id} onClick={()=>handleClose(c)}>\n            <b>{c.name}</b>&nbsp;-&nbsp;<i>[{new Date(c.timeCreated).toLocaleString()}]</i>\n        </MenuItem>\n    });\n\n    return (\n        <div style={{marginBottom: '20px'}}>\n            <InputLabel htmlFor='campaign-list-btn'>Current Campaign:</InputLabel>\n            <Button\n                variant='outlined'\n                onClick={handleClick}\n                id={'campaign-list-btn'}\n                disabled={props.campaigns.length===0}\n                style={{maxWidth: '300px', minWidth: '200px', overflowX: 'hidden'}}\n            >\n                {selected? selected.name : (props.campaigns.length ? 'Select a Campaign':'No campaigns exist')}\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={()=>handleClose(null)}\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            >\n                {camps}\n            </Menu>\n        </div>\n    );\n}\n\n\nfunction formatBytes(bytes: number, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Export the full database as a JSON file.\n */\nasync function exportLocalDB() {\n    // @ts-ignore\n    const blob = await db.toBlob();\n\n    // @ts-ignore\n    download(blob, `terra-backup.json`, 'application/json');\n}\n\nasync function restoreLocalDB() {\n    // @ts-ignore\n    const file = document.getElementById('backup-input')?.files[0];\n    await db.importData(file);\n}\n","// Small wrapper utility for storing arbitrary data.\n\nexport function get(key: string, def: any = null) {\n    const ret = localStorage.getItem(key)\n    return ret ? JSON.parse(ret) : def;\n}\n\n\nexport function set(key: string, val: any) {\n    localStorage.setItem(key, JSON.stringify(val));\n}\n\n\nexport enum STORAGE {\n    SHOW_GRID = 'showGrid',\n    SHOW_NAMES = 'showNames',\n    SHOW_MEASURES = 'showShapes',\n}\n","import React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {Button, Fab, MenuItem, MenuList, Popover, Tooltip, Typography} from \"@material-ui/core\";\nimport MapIcon from '@material-ui/icons/Map';\nimport GameController from \"../game/controllers/game\";\nimport {netMode, NetworkMode} from \"../game/net/peerconnection\";\nimport Campaign from \"../game/controllers/campaign\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport notifications from './notifications';\nimport ConfirmPrompt, {InputDialog} from \"./prompts\";\n\n\n\nexport const BoardSelector = observer((props: {controller: GameController}) => {\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n    const campaign = props.controller.campaign;\n    if (netMode.get() !== NetworkMode.HOST) return null;\n\n    if (!campaign) return null;\n\n    return <div style={{pointerEvents: 'auto',}}>\n        <Tooltip\n            title=\"Selected Board\"\n        >\n            <Fab\n                variant=\"extended\"\n                onClick={(evt: any)=>{setAnchorEl(evt.currentTarget)}}\n                style={{width: '200px', overflowX: 'hidden', marginTop: '5px'}}\n            >\n                <MapIcon style={{marginRight: '5px'}}/>\n                <Typography variant=\"inherit\" noWrap>\n                    {campaign?.loadedBoard ? campaign.loadedBoard : '[Untitled Board]'}\n                </Typography>\n            </Fab>\n        </Tooltip>\n        <Popover\n            open={!!anchorEl}\n            anchorEl={anchorEl}\n            onClose={()=>setAnchorEl(null)}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <BoardControlMenu campaign={campaign} controller={props.controller}/>\n        </Popover>\n    </div>\n});\n\nexport const BoardControlMenu = (props: {controller: GameController, campaign: Campaign}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const handleSelected = (board: string) => {\n        setSelected(board);\n    }\n\n    return <form\n        style={{\n            flexGrow: 1,\n            width: '300px'\n        }}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={e => e.preventDefault()}\n    >\n        <FormGroup row>\n            <BoardSelectMenu campaign={props.campaign} onSelect={handleSelected}/>\n        </FormGroup>\n        <FormGroup row>\n            <BoardLoadButton controller={props.controller} selected={selected} setSelected={setSelected} />\n            <BoardDeleteButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n            <BoardCreateButton controller={props.controller} campaign={props.campaign} selected={selected} setSelected={setSelected} />\n        </FormGroup>\n    </form>\n}\n\n\nexport const BoardSelectMenu = observer((props: {campaign: Campaign, onSelect: Function}) => {\n    const [selected, setSelected] = React.useState(props.campaign.loadedBoard);\n\n    const boards = props.campaign.boards.map(b => {\n        return <MenuItem\n            key={b}\n            onClick={() => {setSelected(b); props.onSelect(b)}}\n            selected={b === selected}\n        >\n            <Typography\n                variant=\"inherit\"\n                noWrap\n                color={b === props.campaign.loadedBoard ? 'textSecondary':'initial'}\n            >\n                {b}\n            </Typography>\n        </MenuItem>\n    });\n\n    return <MenuList style={{maxHeight: '400px',  overflow: 'auto', width: '100%'}}>\n        {boards}\n    </MenuList>;\n});\n\nexport const BoardLoadButton = (props: {controller: GameController, selected: string|null, setSelected: Function}) => {\n    return <Button\n        color=\"primary\"\n        disabled={props.controller.campaign?.loadedBoard === props.selected}\n        onClick={() => {\n            if (props.selected) {\n                props.controller.loadBoard(props.selected).then();\n            }\n        }}\n    >\n        Load\n    </Button>\n};\n\nexport const BoardDeleteButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [confirm, needConfirm] = React.useState(false);\n\n    return <div>\n        <Button\n            disabled={!props.selected}\n            color=\"secondary\"\n            onClick={() => {needConfirm(true)}}\n        >\n            Delete\n        </Button>\n        <ConfirmPrompt\n            open={confirm}\n            onCancel={() => {needConfirm(false)}}\n            onConfirm={() => {\n                if (props.selected) {\n                    props.controller.deleteBoard(props.campaign, props.selected).catch(err => {\n                        notifications.error('Failed to delete board!');\n                        console.error(err);\n                    });\n                    props.setSelected(null);\n                    needConfirm(false);\n                }\n            }}\n            title={'Really delete?'}\n            prompt={`Are you sure you want to delete the board \"${props.selected}\"?`}\n            confirmButton={'Delete'}\n        />\n    </div>\n};\n\nexport const BoardCreateButton = (props: {\n    controller: GameController,\n    campaign: Campaign,\n    selected: string|null,\n    setSelected: Function\n}) => {\n    const [needPrompt, setPrompt] = React.useState(false);\n    const handleCreate = (name: string) => {\n        setPrompt(false);\n        if (props.campaign.boards.includes(name)) {\n            return notifications.error('All board names must be unique!')\n        }\n        if (name && name.trim().length) {\n            props.campaign.boards.push(name);\n            props.setSelected(name);\n            props.controller.loadBoard(name).then();\n        }\n    }\n\n    return <div>\n        <Button\n            style={{color: 'rgba(25,160,7,0.94)'}}\n            onClick={() => {\n                setPrompt(true);\n            }}\n        >\n            New\n        </Button>\n        <InputDialog\n            open={needPrompt}\n            title='Create a Board'\n            body='Enter the name for the new Board:'\n            tooltip={'Board name'}\n            acceptText={'Create'}\n            onSubmit={handleCreate}\n            onCancel={handleCreate}\n        />\n    </div>\n};\n","import {observer} from \"mobx-react-lite\";\nimport {CircularProgress, Fab, Tooltip} from \"@material-ui/core\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport {isHost} from \"../game/net/peerconnection\";\nimport hotkeys from \"hotkeys-js\";\nimport google from '../game/util/google-api';\nimport notifications from \"./notifications\";\nimport ConfirmPrompt from \"./prompts\";\nimport Button from \"@material-ui/core/Button\";\n\n\nexport const BoardSaveButton = observer( (props: {controller: GameController}) => {\n    const shouldSave = props.controller.campaign?.loadedBoard &&\n        (props.controller.entities.isDirty || props.controller.terrain.isBoardDirty);\n    const [saving, setSaving] = React.useState(false);\n    const [dbUpdate, setUpdate] = React.useState<any>(null);\n\n    const saveBoard = React.useMemo(() => {\n        if (!shouldSave) return ()=>{};\n        return async () => {\n            if (!isHost()) return;\n            setSaving(true);\n            try {\n                await props.controller.saveBoard();\n                if (google.isSignedIn) {\n                    await google.uploadLocalDB();\n                }\n                notifications.success(`Saved ${props.controller.campaign?.loadedBoard}!`, {\n                    autoHideDuration: 2000,\n                    preventDuplicate: true\n                });\n            } catch (err) {\n                console.error(err);\n                notifications.error(`Failed to save! ${err.message}`);\n            }\n            setSaving(false);\n        }\n    }, [props.controller, shouldSave]);\n\n    React.useMemo(() => {\n        // Check for updated DB files in Google Drive whenever a user connects their account:\n        google.onSignInChange(async (loggedIn: boolean) => {\n            if (loggedIn) {\n                const latest = await google.getLatestUpgrade();\n                if (latest) {\n                    setUpdate(latest);\n                } else {\n                    notifications.info('Local save up to date!');\n                }\n            } else {\n                notifications.warning('Not (optionally) syncing with Google Drive.', {\n                    action: <Button onClick={()=>google.promptSignIn()} variant={'outlined'}>Connect</Button>,\n                    autoHideDuration: 6000\n                });\n            }\n        })\n    }, [])\n\n    React.useEffect(() => {\n        // Enable hotkey for saving:\n        hotkeys('ctrl+s', (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            saveBoard();\n        });\n\n        return () => {\n            hotkeys.unbind('ctrl+s');\n        }\n    }, [props.controller, saveBoard])\n\n    if (!isHost()) return null;\n\n    let title = shouldSave ? \"Save Board (ctrl+s)\" : \"No changes to save.\";\n\n    if (saving) title = 'Save in progress...';\n\n    return <div>\n        <Tooltip\n            title={title}\n            style={{\n                pointerEvents: 'auto'\n            }}\n        >\n            <span>\n                <Fab\n                    color=\"primary\"\n                    onClick={saveBoard}\n                    disabled={!shouldSave}\n                >\n                    {saving ? <CircularProgress /> : <SaveIcon />}\n                </Fab>\n            </span>\n        </Tooltip>\n        <ConfirmPrompt\n            open={!!dbUpdate}\n            onCancel={()=>setUpdate(null)}\n            onConfirm={()=>{\n                console.log('Updating from GDrive...');\n                google.downloadDB(dbUpdate).then();\n                setUpdate(null);\n            }}\n            title={'Database Update'}\n            prompt={'You have a recently updated save stored in Google Drive. Which version would you prefer to use?'}\n            confirmButton={'Google Drive'}\n            cancelButton={'Local Save'}\n        />\n    </div>\n});\n","import {observer} from \"mobx-react-lite\";\nimport {\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Fab,\n    FormControlLabel, Slider,\n    Switch,\n    Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport React from \"react\";\nimport GameController from \"../game/controllers/game\";\nimport * as GRID from '../game/renderer/ui-components/ui-grid';\nimport * as LS from '../game/data/local-storage';\nimport EntityLayer from \"../game/controllers/entities\";\nimport hotkeys from \"hotkeys-js\";\nimport MeasureHandler from \"../game/net/handlers/measure-handler\";\nimport * as RENDER from '../game/renderer';\nimport {Meta, metadata} from \"../game/db/metadata-db\";\nimport {InputDialog} from \"./prompts\";\n\n\nexport const PreferencesButton = observer( (props: {controller: GameController}) => {\n    const [modalOpen, setModalOpen] = React.useState(false);\n\n    React.useEffect(() => {\n        GRID.setVisible(LS.get(LS.STORAGE.SHOW_GRID, true));\n        MeasureHandler.showMeasures(LS.get(LS.STORAGE.SHOW_MEASURES, true));\n        props.controller.entities.setDisplayNamePlates(LS.get(LS.STORAGE.SHOW_NAMES, true));\n\n        hotkeys('ctrl+p', (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            setModalOpen(true);\n        });\n\n        return () => {\n            hotkeys.unbind('ctrl+p');\n        }\n    }, [props.controller.entities]);\n\n    return <div style={{ width: '56px' }}>\n        <Tooltip\n            title='Preferences'\n            style={{\n                pointerEvents: 'auto',\n            }}\n        >\n            <span>\n                <Fab\n                    color=\"primary\"\n                    onClick={() => setModalOpen(true)}\n                    disabled={modalOpen}\n                >\n                    <SettingsIcon />\n                </Fab>\n            </span>\n        </Tooltip>\n\n        <Dialog open={modalOpen} onClose={() => setModalOpen(false)}>\n            <DialogTitle style={{textAlign: \"center\"}}>User Settings</DialogTitle>\n\n            <Button\n                onClick={() => {\n                    // @ts-ignore\n                    window.location = window.location.toString().replace(window.location.hash, '');\n                }}\n                color=\"secondary\"\n                variant={\"outlined\"}\n                style={{marginTop: '10px', marginBottom: '10px', width: '100%'}}\n            >\n                Disconnect\n            </Button>\n\n            <DialogContent style={{textAlign: \"center\", margin: 0, padding: 0}}>\n                <p style={{color: 'gray'}}>\n                    <Tooltip title={<div style={{whiteSpace: \"pre-line\"}}>{(process.env.REACT_APP_COMMIT_MESSAGE || 'Unable to locate build ID.')}</div>}>\n                        <p>\n                            <a\n                                href={`https://github.com/shadowmoose/Terra/commit/${process.env.REACT_APP_CURRENT_SHA || ''}`}\n                                target={\"_blank\"} style={{textDecoration: 'none'}}\n                                rel=\"noopener noreferrer\"\n                            >\n                                {\"Build ID: \" + (process.env.REACT_APP_CURRENT_SHA || 'Unknown')}\n                            </a>\n                        </p>\n                    </Tooltip>\n                </p>\n\n                <Typography variant=\"h6\" component=\"h6\" gutterBottom>Display Options</Typography>\n            </DialogContent>\n\n            <DialogContent style={{textAlign: \"left\"}}>\n                <GridSwitch />\n                <NameSwitch entities={props.controller.entities} />\n                <MeasureSwitch />\n                <NameChange />\n                <ZoomSlider />\n            </DialogContent>\n        </Dialog>\n    </div>\n});\n\n\nconst GridSwitch = () => {\n    const [useGrid, setGrid] = React.useState(LS.get(LS.STORAGE.SHOW_GRID, true));\n\n    const toggleGrid = (ev: any) => {\n        setGrid(ev.target.checked);\n        LS.set(LS.STORAGE.SHOW_GRID, ev.target.checked);\n        GRID.setVisible(ev.target.checked);\n    };\n\n    return <div>\n        <FormControlLabel value={useGrid} control={\n            <Switch\n                checked={useGrid}\n                onChange={toggleGrid}\n                name=\"showGrid\"\n                inputProps={{ 'aria-label': 'show grid' }}\n            />\n        } label={'Grid'} style={{color: useGrid ? 'black' : 'gray'}}/>\n    </div>\n}\n\n\nconst NameSwitch = (props: {entities: EntityLayer}) => {\n    const [useName, setNames] = React.useState(props.entities.showNames);\n\n    const toggleGrid = (ev: any) => {\n        setNames(ev.target.checked);\n        LS.set(LS.STORAGE.SHOW_NAMES, ev.target.checked);\n        props.entities.setDisplayNamePlates(ev.target.checked);\n    };\n\n    return <div>\n        <FormControlLabel value={useName} control={\n            <Switch\n                checked={useName}\n                onChange={toggleGrid}\n                name=\"showName\"\n                inputProps={{ 'aria-label': 'show names' }}\n            />\n        } label={'Name plates'} style={{color: useName ? 'black' : 'gray'}}/>\n    </div>\n}\n\n\nconst MeasureSwitch = () => {\n    const [useMeasure, setNames] = React.useState(LS.get(LS.STORAGE.SHOW_MEASURES, true));\n\n    const toggleGrid = (ev: any) => {\n        setNames(ev.target.checked);\n        LS.set(LS.STORAGE.SHOW_MEASURES, ev.target.checked);\n        MeasureHandler.showMeasures(ev.target.checked);\n    };\n\n    return <div>\n        <FormControlLabel value={useMeasure} control={\n            <Switch\n                checked={useMeasure}\n                onChange={toggleGrid}\n                name=\"showName\"\n                inputProps={{ 'aria-label': 'show measures' }}\n            />\n        } label={'User Measurements'} style={{color: useMeasure ? 'black' : 'gray'}}/>\n    </div>\n}\n\n\nconst ZoomSlider = () => {\n    const [scale, setScale] = React.useState(1);\n\n    function updateScale(val: number) {\n        RENDER.setZoom(val);\n        setScale(val);\n    }\n\n    return <div>\n        <Typography id=\"discrete-slider\" gutterBottom style={{textAlign: \"center\"}}>\n            Zoom Scale: {scale}x\n        </Typography>\n        <Slider\n            value={scale}\n            getAriaValueText={() => `${scale}`}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={.5}\n            marks\n            min={0.5}\n            max={4}\n            onChange={ (event: any, newValue: any)=> updateScale(newValue)}\n        />\n    </div>\n}\n\n\nconst NameChange = () => {\n    const [showPrompt, setShowPrompt] = React.useState(false);\n\n    function onChange(name: string) {\n        metadata.store(Meta.USERNAME, name).then(() => {\n            window.location.reload();\n        });\n    }\n\n    return <div>\n        <Button\n            onClick={() => {\n                setShowPrompt(true);\n            }}\n            color=\"primary\"\n            variant={\"outlined\"}\n            style={{marginTop: '10px', marginBottom: '10px', width: '100%'}}\n        >\n            Change Username\n        </Button>\n        <InputDialog\n            body={'Enter a new Name'}\n            onCancel={()=>setShowPrompt(false)}\n            onSubmit={(data: string) => onChange(data)}\n            open={showPrompt}\n            title={'Change Username'}\n            tooltip={'(requires reload)'}\n            acceptText={'Change'}\n        />\n    </div>\n}\n","import React from 'react';\nimport './styles/App.scss';\nimport './styles/canvas-style.scss';\nimport GameController from \"./game/controllers/game\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {Typography} from \"@material-ui/core\";\nimport ControlMenu from \"./ui-components/controlMenu\";\nimport {observer} from \"mobx-react-lite\";\nimport ConnectionOverlay from \"./ui-components/connectionOverlay\";\nimport {SnackbarProvider} from 'notistack';\nimport {SnackbarUtilsConfigurator} from \"./ui-components/notifications\";\nimport {Meta, metadata, currentUsername} from './game/db/metadata-db';\nimport {CampaignSelector} from \"./ui-components/campaignSelector\";\nimport {BoardSelector} from \"./ui-components/boardSelector\";\nimport {BoardSaveButton} from \"./ui-components/boardSaveButton\";\nimport {InputDialog} from \"./ui-components/prompts\";\nimport {YoutubePlayerInterface} from \"./ui-components/youtubePlayer\";\nimport {PreferencesButton} from \"./ui-components/preferencesMenu\";\n\n\nconsole.log(`This build was generated from the Git commit: https://github.com/shadowmoose/Terra/commit/${process.env.REACT_APP_CURRENT_SHA||\"\"}`);\n\nconst controller = new GameController();\n\nif (process.env.NODE_ENV !== 'development' && !window.location.href.includes('unstable')) {\n    console.info('Shutting the console up for non-dev build.');\n    function noop() {}\n    const oldConsole = Object.assign({}, console);\n    // @ts-ignore\n    window.debugRestoreLog = () => {\n        Object.assign(console, oldConsole);\n    };\n    console.debug = noop;\n    console.log = noop;\n    console.info = noop;\n}\n\nconst App = observer(() => {\n    const desktop = useMediaQuery('(min-width:900px)');\n    const [needName, setNeedName] = React.useState(false);\n    const setName = async (name: string) => {\n        if (name && name.length) {\n            setNeedName(false);\n            currentUsername.set(name);\n            await metadata.store(Meta.USERNAME, name);\n            await controller.start();\n        } else {\n            window.location.reload();\n        }\n    }\n    React.useMemo(() => {\n        // Check initially to see if we already have a username stored:\n        metadata.get(Meta.USERNAME).then(async (name: string) => {\n            if (name && name.length) {\n               currentUsername.set(name);\n               setNeedName(false);\n               await controller.start();\n            } else {\n                setNeedName(true);\n            }\n        })\n    }, []);\n\n    let content: JSX.Element|null = null;\n\n    if (needName) {\n        content = <InputDialog\n            open={needName}\n            title='Choose a Name'\n            body='Enter the name you want to go by:'\n            tooltip={'Name'}\n            onSubmit={setName}\n            onCancel={setName}\n        />;\n    } else if (!controller.ready) {\n        content = <Backdrop open={true} transitionDuration={0}>\n            <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                Loading <CircularProgress color=\"inherit\" />\n            </Typography>\n        </Backdrop>;\n    } else if (controller.isNetworkReady) {\n        content = <ControlMenu controller={controller} forMobile={!desktop}/>\n    } else if (!controller.isNetworkReady) {\n        content = <ConnectionOverlay controller={controller} />;\n    }\n\n    return (\n        <SnackbarProvider maxSnack={5}>\n            <SnackbarUtilsConfigurator />\n            <div className=\"App noMouse\">\n                <div style={{\n                    display: 'flex',\n                    pointerEvents: 'none',\n                    flexDirection: 'row',\n                    position: 'fixed',\n                    top: '10px',\n                    left: '10px'\n                }}>\n                    <div style={{\n                        display: 'flex',\n                        pointerEvents: 'none',\n                        flexDirection: 'column',\n                    }}>\n                        <PreferencesButton controller={controller} />\n                        <CampaignSelector controller={controller}/>\n                        <YoutubePlayerInterface />\n                    </div>\n                    <BoardSelector controller={controller}/>\n                    <BoardSaveButton controller={controller} />\n                </div>\n\n                {content}\n            </div>\n        </SnackbarProvider>\n    )\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app waitForSpriteLoad faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'mobx-react-lite/batchingForReactDom'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport notifications from \"./ui-components/notifications\";\nimport {Button} from \"@material-ui/core\";\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\nlet needReload = false;\nserviceWorker.register({\n    onSuccess: (data) => {\n        console.log('cache worker register: success.', data);\n    },\n    onUpdate: (data) => {\n        console.warn('cache worker update.', data);\n        const tID = notifications.info('An update is available. Please reload Terra.', {\n            preventDuplicate: true,\n            persist: true,\n            action: <Button\n                variant={\"outlined\"}\n                onClick={()=>{notifications.close(tID); needReload = true; data.waiting?.postMessage({ type: \"SKIP_WAITING\" })}}\n            >\n                Reload\n            </Button>\n        })\n    }\n});\n\nnavigator.serviceWorker?.addEventListener('controllerchange', () => {\n    console.warn('cache worker replaced.')\n    if (!needReload) return;\n    needReload = false;\n    window.location.reload();  // Reload when we detect our service worker has changed.\n});\n","module.exports = require('comlink').wrap(require(\"!worker-loader?{}!/home/runner/work/Terra/Terra/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/Terra/Terra/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--7-oneOf-1!/home/runner/work/Terra/Terra/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/home/runner/work/Terra/Terra/src/game/data/board-packer.worker.ts\")());module.exports.__esModule = true;"],"sourceRoot":""}